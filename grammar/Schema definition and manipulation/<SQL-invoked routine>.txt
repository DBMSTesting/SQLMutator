<SQL-invoked routine> ::=
<schema routine>
<schema routine> ::=
<schema procedure>
| <schema function>
<schema procedure> ::=
CREATE <SQL-invoked procedure>
<schema function> ::=
CREATE <SQL-invoked function>
<SQL-invoked procedure> ::=
PROCEDURE <schema qualified routine name> <SQL parameter declaration list>
<routine characteristics>
<routine body>
<SQL-invoked function> ::=
{ <function specification> | <method specification designator> } <routine body>
<SQL parameter declaration list> ::=
<left paren> [ <SQL parameter declaration>
 [ { <comma> <SQL parameter declaration> }... ] ] <right paren>
<SQL parameter declaration> ::=
[ <parameter mode> ]
 [ <SQL parameter name> ]
<parameter type> [ RESULT ]
 [ DEFAULT <parameter default> ]
<parameter default> ::=
<value expression>
| <contextually typed value specification>
<parameter mode> ::=
IN
| OUT
| INOUT
<parameter type> ::=
<data type> [ <locator indication> ]
<locator indication> ::=
AS LOCATOR
<function specification> ::=
FUNCTION <schema qualified routine name> <SQL parameter declaration list>
<returns clause>
<routine characteristics>
 [ <dispatch clause> ]
<method specification designator> ::=
SPECIFIC METHOD <specific method name>
| [ INSTANCE | STATIC | CONSTRUCTOR ]
METHOD <method name> <SQL parameter declaration list>
 [ <returns clause> ]
FOR <schema-resolved user-defined type name>
<routine characteristics> ::=
[ <routine characteristic>... ]
<routine characteristic> ::=
<language clause>
| <parameter style clause>
| SPECIFIC <specific name>
| <deterministic characteristic>
| <SQL-data access indication>
| <null-call clause>
| <returned result sets characteristic>
| <savepoint level indication>
<savepoint level indication> ::=
NEW SAVEPOINT LEVEL
| OLD SAVEPOINT LEVEL
<returned result sets characteristic> ::=
DYNAMIC RESULT SETS <maximum returned result sets>
<parameter style clause> ::=
PARAMETER STYLE <parameter style>
<dispatch clause> ::=
STATIC DISPATCH
<returns clause> ::=
RETURNS <returns type>
<returns type> ::=
<returns data type> [ <result cast> ]
| <returns table type>
<returns table type> ::=
TABLE <table function column list>
<table function column list> ::=
<left paren> <table function column list element>
 [ { <comma> <table function column list element> }... ] <right paren>
<table function column list element> ::=
<column name> <data type>
<result cast> ::=
CAST FROM <result cast from type>
<result cast from type> ::=
<data type> [ <locator indication> ]
<returns data type> ::=
<data type> [ <locator indication> ]
<routine body> ::=
<SQL routine spec>
| <external body reference>
<SQL routine spec> ::=
[ <rights clause> ] <SQL routine body>
<rights clause> ::=
SQL SECURITY INVOKER
| SQL SECURITY DEFINER
<SQL routine body> ::=
<SQL procedure statement>
<external body reference> ::=
EXTERNAL [ NAME <external routine name> ]
 [ <parameter style clause> ]
 [ <transform group specification> ]
 [ <external security clause> ]
<external security clause> ::=
EXTERNAL SECURITY DEFINER
| EXTERNAL SECURITY INVOKER
| EXTERNAL SECURITY IMPLEMENTATION DEFINED
<parameter style> ::=
SQL
| GENERAL
<deterministic characteristic> ::=
DETERMINISTIC
| NOT DETERMINISTIC
<SQL-data access indication> ::=
NO SQL
| CONTAINS SQL
| READS SQL DATA
| MODIFIES SQL DATA
<null-call clause> ::=
RETURNS NULL ON NULL INPUT
| CALLED ON NULL INPUT
<maximum returned result sets> ::=
<unsigned integer>
<transform group specification> ::=
TRANSFORM GROUP { <single group specification> | <multiple group specification> }
<single group specification> ::=
<group name>
<multiple group specification> ::=
<group specification> [ { <comma> <group specification> }... ]
<group specification> ::=
<group name> FOR TYPE <path-resolved user-defined type name>