<embedded SQL C program> ::=
!! See the Syntax Rules.
<C variable definition> ::=
[ <C storage class> ] [ <C class modifier> ]
<C variable specification> <semicolon>
<C variable specification> ::=
<C numeric variable>
| <C character variable>
| <C derived variable>
<C storage class> ::=
auto
| extern
| static
<C class modifier> ::=
const
| volatile
<C numeric variable> ::=
{ long long | long | short | float | double }
<C host identifier> [ <C initial value> ]
 [ { <comma> <C host identifier> [ <C initial value> ] }... ]
<C character variable> ::=
<C character type> [ CHARACTER SET [ IS ] <character set specification> ]
<C host identifier> <C array specification> [ <C initial value> ]
 [ { <comma> <C host identifier> <C array specification>
 [ <C initial value> ] }... ]
<C character type> ::=
char
| unsigned char
| unsigned short
<C array specification> ::=
<left bracket> <character length> <right bracket>
<C host identifier> ::=
!! See the Syntax Rules.
<C derived variable> ::=
<C VARCHAR variable>
| <C NCHAR variable>
| <C NCHAR VARYING variable>
| <C CLOB variable>
| <C NCLOB variable>
| <C BINARY variable>
| <C VARBINARY variable>
| <C BLOB variable>
| <C user-defined type variable>
| <C CLOB locator variable>
| <C BLOB locator variable>
| <C array locator variable>
| <C multiset locator variable>
| <C user-defined type locator variable>
| <C REF variable>
<C VARCHAR variable> ::=
VARCHAR [ CHARACTER SET [ IS ] <character set specification> ]
<C host identifier> <C array specification> [ <C initial value> ]
 [ { <comma> <C host identifier> <C array specification> [
<C initial value> ] }... ]
<C NCHAR variable> ::=
NCHAR [ CHARACTER SET [ IS ] <character set specification> ]
<C host identifier> <C array specification> [ <C initial value> ]
 [ { <comma> <C host identifier> <C array specification>
 [ <C initial value> ] } ... ]
<C NCHAR VARYING variable> ::=
NCHAR VARYING [ CHARACTER SET [ IS ] <character set specification> ]
<C host identifier> <C array specification> [ <C initial value> ]
 [ { <comma> <C host identifier> <C array specification> [
<C initial value> ] } ... ]
<C CLOB variable> ::=
SQL TYPE IS CLOB <left paren> <character large object length> <right paren>
 [ CHARACTER SET [ IS ] <character set specification> ]
<C host identifier> [ <C initial value> ] [ { <comma> <C host identifier> [
<C initial value> ] }... ]
<C NCLOB variable> ::=
SQL TYPE IS NCLOB <left paren> <character large object length> <right paren>
 [ CHARACTER SET [ IS ] <character set specification> ]
<C host identifier> [ <C initial value> ] [ { <comma> <C host identifier>
 [ <C initial value> ] }... ]
<C user-defined type variable> ::=
SQL TYPE IS <path-resolved user-defined type name> AS <predefined type>
<C host identifier> [ <C initial value> ]
 [ { <comma> <C host identifier> [
<C initial value> ] } ... ]
<C BINARY variable> ::=
SQL TYPE IS BINARY <left paren> <length> <right paren>
<C host identifier> [ <C initial value> ]
 [ { <comma> <C host identifier> [ <C initial value> ] }... ]
<C VARBINARY variable> ::=
SQL TYPE IS VARBINARY <left paren> <length> <right paren>
<C host identifier> [ <C initial value> ]
 [ { <comma> <C host identifier> [ <C initial value> ] }... ]
<C BLOB variable> ::=
SQL TYPE IS BLOB <left paren> <large object length> <right paren>
<C host identifier> [ <C initial value> ]
 [ { <comma> <C host identifier> [
<C initial value> ] } ... ]
<C CLOB locator variable> ::=
SQL TYPE IS CLOB AS LOCATOR
<C host identifier> [ <C initial value> ]
 [ { <comma> <C host identifier> [
<C initial value> ] } ... ]
<C BLOB locator variable> ::=
SQL TYPE IS BLOB AS LOCATOR
<C host identifier> [ <C initial value> ]
 [ { <comma> <C host identifier> [
<C initial value> ] } ... ]
<C array locator variable> ::=
SQL TYPE IS <array type> AS LOCATOR
<C host identifier> [ <C initial value> ]
 [ { <comma> <C host identifier> [
<C initial value> ] } ... ]
<C multiset locator variable> ::=
SQL TYPE IS <multiset type> AS LOCATOR
<C host identifier> [ <C initial value> ]
 [ { <comma> <C host identifier> [
<C initial value> ] } ... ]
<C user-defined type locator variable> ::=
SQL TYPE IS <path-resolved user-defined type name> AS LOCATOR
<C host identifier> [ <C initial value> ]
 [ { <comma> <C host identifier> [
<C initial value> ] }... ]
<C REF variable> ::=
SQL TYPE IS <reference type> <C host identifier> [ <C initial value> ]
 [ { <comma> <C host identifier> [ <C initial value> ] }... ]
<C initial value> ::=
<equals operator> <character representation>...