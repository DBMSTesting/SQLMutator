<string value function> ::=
<character value function>
| <binary value function>
<character value function> ::=
<character substring function>
| <regular expression substring function>
| <regex substring function>
| <fold>
| <transcoding>
| <character transliteration>
| <regex transliteration>
| <trim function>
| <character overlay function>
| <normalize function>
| <specific type method>
<character substring function> ::=
SUBSTRING <left paren> <character value expression> FROM <start position>
 [ FOR <string length> ] [ USING <char length units> ] <right paren>
<regular expression substring function> ::=
SUBSTRING <left paren> <character value expression> SIMILAR <character value expression>
ESCAPE <escape character> <right paren>
<regex substring function> ::=
SUBSTRING_REGEX <left paren>
<XQuery pattern> [ FLAG <XQuery option flag> ]
IN <regex subject string>
 [ FROM <start position> ]
 [ USING <char length units> ]
 [ OCCURRENCE <regex occurrence> ]
 [ GROUP <regex capture group> ]
<right paren>
<fold> ::=
{ UPPER | LOWER } <left paren> <character value expression> <right paren>
<transcoding> ::=
CONVERT <left paren> <character value expression>
USING <transcoding name> <right paren>
<character transliteration> ::=
TRANSLATE <left paren> <character value expression>
USING <transliteration name> <right paren>
<regex transliteration> ::=
TRANSLATE_REGEX <left paren>
<XQuery pattern> [ FLAG <XQuery option flag> ]
IN <regex subject string>
 [ WITH <XQuery replacement string> ]
 [ FROM <start position> ]
 [ USING <char length units> ]
 [ OCCURRENCE <regex transliteration occurrence> ]
<right paren>
<XQuery replacement string> ::=
<character value expression>
<regex transliteration occurrence> ::=
<regex occurrence>
| ALL
<trim function> ::=
TRIM <left paren> <trim operands> <right paren>
<trim operands> ::=
[ [ <trim specification> ] [ <trim character> ] FROM ] <trim source>
<trim source> ::=
<character value expression>
<trim specification> ::=
LEADING
| TRAILING
| BOTH
<trim character> ::=
<character value expression>
<character overlay function> ::=
OVERLAY <left paren> <character value expression> PLACING <character value expression>
FROM <start position> [ FOR <string length> ]
 [ USING <char length units> ] <right paren>
<normalize function> ::=
NORMALIZE <left paren> <character value expression>
 [ <comma> <normal form> [ <comma> <normalize function result length> ] ] <right paren>
<normal form> ::=
NFC
| NFD
| NFKC
| NFKD
<normalize function result length> ::=
<character length>
| <character large object length>
<specific type method> ::=
<user-defined type value expression> <period> SPECIFICTYPE
 [ <left paren> <right paren> ]
<binary value function> ::=
<binary substring function>
| <binary trim function>
| <binary overlay function>
<binary substring function> ::=
SUBSTRING <left paren> <binary value expression> FROM <start position>
 [ FOR <string length> ] <right paren>
<binary trim function> ::=
TRIM <left paren> <binary trim operands> <right paren>
<binary trim operands> ::=
[ [ <trim specification> ] [ <trim octet> ] FROM ] <binary trim source>
<binary trim source> ::=
<binary value expression>
<trim octet> ::=
<binary value expression>
<binary overlay function> ::=
OVERLAY <left paren> <binary value expression> PLACING <binary value expression>
FROM <start position> [ FOR <string length> ] <right paren>
<start position> ::=
<numeric value expression>
<string length> ::=
<numeric value expression>