{
    "sql": "DROP TABLE IF EXISTS edge; DROP TABLE IF EXISTS node; DROP SEQUENCE IF EXISTS seq_node; CREATE SEQUENCE seq_node START 1; CREATE TABLE node(id INTEGER PRIMARY KEY DEFAULT nextval('seq_node'), value REAL); CREATE TABLE edge(src INTEGER, dst INTEGER, value REAL, FOREIGN KEY (src) REFERENCES node(id), FOREIGN KEY (dst) REFERENCES node(id)); INSERT INTO node (value) VALUES (-1.0); INSERT INTO edge (src, dst, value) VALUES (1, 2, -1.0); WITH input_nodes AS (SELECT id, value FROM node WHERE id NOT IN (SELECT dst FROM edge)), layer_1 AS (SELECT e.dst, i.value + e.value + n.value AS total FROM edge e JOIN input_nodes i ON i.id = e.src JOIN node n ON e.dst = n.id GROUP BY e.dst, i.value, e.value, n.value), layer_2 AS (SELECT e.dst, layer_1.total + e.value + n.value AS total FROM edge e JOIN layer_1 ON layer_1.dst = e.src JOIN node n ON e.dst = n.id GROUP BY e.dst, layer_1.total, e.value, n.value) SELECT * FROM layer_2;",
    "Affected Elements": "CTEs, GROUP BY clauses",
    "Root Cause Analysis": "The performance issue is due to the exponential growth in query complexity with the increasing number of layers in CTEs, compounded by the unnecessary GROUP BY clauses which are not needed for this specific graph structure."
}