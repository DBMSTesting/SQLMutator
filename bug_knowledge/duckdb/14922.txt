{
    "sql": "copy (select i as id, [ { period: { start_ts: '2023-11-01'::timestamp, end_ts: '2024-01-01'::timestamp } }, { period: { start_ts: '2024-11-01'::timestamp, end_ts: 'infinity'::timestamp } } ] as existence, [ { period: { start_ts: '2023-12-01'::timestamp, end_ts: '2024-01-01'::timestamp }, street: 'Reth 2', city: 'Baarle-Nassau' }, { period: { start_ts: '2024-03-01'::timestamp, end_ts: '2024-06-01'::timestamp }, street: 'Molenstraat', city: 'Breda' }, { period: { start_ts: '2024-11-01'::timestamp, end_ts: 'infinity'::timestamp }, street: 'Kapelstraat', city: 'Tilburg' } ] as temporal_address from range(1,10_000_001) t(i)) to 'test.parquet' (OVERWRITE true); copy (select id, existence, list_transform(existence, (x,i) -> { c1: x.period.end_ts > x.period.start_ts, c2: case when i > 1 then x.period.start_ts > existence[i-1].period.end_ts else null::boolean end }) as existence_period_valid, temporal_address, list_transform(temporal_address, (x,i) -> { c1: x.period.end_ts > x.period.start_ts, c2: case when i > 1 then x.period.start_ts > temporal_address[i-1].period.end_ts else null::boolean end, during_existence: list_bool_or(list_transform(existence, y -> case when x.period.start_ts >= y.period.start_ts and x.period.end_ts <= y.period.end_ts then true else false end)) }) as temporal_address_period_valid from 'test.parquet') to 'test_validate.parquet' (OVERWRITE true); copy (select id, existence, list_transform(existence, (x,i) -> { c1: x.period.end_ts > x.period.start_ts, c2: case when i > 1 then x.period.start_ts > existence[i-1].period.end_ts else null::boolean end }) as existence_period_valid, temporal_address, list_transform(temporal_address, (x,i) -> { c1: x.period.end_ts > x.period.start_ts, c2: case when i > 1 then x.period.start_ts > temporal_address[i-1].period.end_ts else null::boolean end, during_existence: list_bool_or(list_transform(existence, y -> case when x.period.start_ts >= y.period.start_ts and x.period.end_ts <= y.period.end_ts then true else false end)) }) as temporal_address_period_valid from 'test.parquet' limit 10000000) to 'test_validate.parquet' (OVERWRITE true);",
    "Affected Elements": "COPY, SELECT, LIST_TRANSFORM, LIMIT",
    "Root Cause Analysis": "The multi-threaded parquet writing process is being hindered by the presence of the LIMIT clause, which appears to serialize the writing operation, resulting in performance degradation when multiple threads are employed."
}