{
    "sql": "SELECT level, runtime, request_id AS errorRequestId, yandexuid, original_message AS originalMessage, platform, user_agent AS errorUseragent, url AS errorUrl, file AS errorFile, arrayMap((key, value) -> concat(key, ': ', value), kv_keys, kv_values) AS additionalKeyValue, is_internal AS isInternal, is_robot AS isRobot, ipv6 AS ip, if(notEmpty(ipv6), dictGetString('ip_mapper', 'asn', tuple(IPv6StringToNum(ipv6))), '') AS asn, if(notEmpty(ipv6), if(startsWith(ipv6, '::ffff:'), dictGetString('rum.ip_mapper_isp', 'isp', tuple(IPv4StringToNum(replaceOne(ipv6, '::ffff:', '')))), dictGetString('rum.ip_mapper_isp', 'isp', tuple(IPv6StringToNum(ipv6))), '') AS isp, is_adblock AS adb, test_ids AS testIds, exp_flgs AS expFlags, source, method, source_method AS sourceMethod, source_type AS sourceType, block, service, regionToName(regionToCity(region)) AS errorCity, regionToName(regionToCountry(region)) AS errorCountry, region, line, col, cdn, environment, vhost AS errorDomain, version, page, dc, toDateTime(timestamp) AS timestamp, original_stack_trace AS originalStackTrace, toDateTime(client_timestamp) AS clientTimestamp FROM rum.errors PREWHERE (greaterOrEquals(toDateTime(timestamp), '2020-01-16 14:45:31') AND greaterOrEquals(date, '2020-01-16') AND equals(project, 'web4') AND equals(message_id, 15105450741386215643)) ORDER BY COUNT() DESC LIMIT 30 FORMAT JSON",
    "Affected Elements": "SELECT statement, GROUP BY clause",
    "Root Cause Analysis": "The query selects a non-aggregated column 'level' without including it in a GROUP BY clause, leading to the exception."
}