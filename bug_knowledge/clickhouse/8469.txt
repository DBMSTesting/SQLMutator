{
    "sql": "CREATE TABLE foo (id UInt32, status Nullable(UInt32)) ENGINE = MergeTree() PARTITION BY id % 5 PRIMARY KEY (id) ORDER BY (id, assumeNotNull(status)); INSERT INTO foo SELECT number, nullIf(number % 3, 1) from system.numbers LIMIT 1000000; SELECT count() FROM foo WHERE ((status >= 1) AND (status <= 1)) OR ((status >= 1) AND (status <= 1)) OR ((status >= 1) AND (status <= 1)) OR ((status >= 1) AND (status <= 1)) OR ((status >= 1) AND (status <= 1)) OR ((status >= 1) AND (status <= 1)) OR ((status >= 1) AND (status <= 1)) OR ((status >= 1) AND (status <= 1)) OR ((status >= 1) AND (status <= 1)) OR ((status >= 1) AND (status <= 1)) OR ((status >= 1) AND (status <= 1)); SELECT count() FROM foo WHERE status = 1; SELECT count() FROM foo WHERE ((status >= 1) AND (status <= 1)) OR ((status >= 1) AND (status <= 1)) OR ((status >= 1) AND (status <= 1)) OR ((status >= 1) AND (status <= 1)) OR ((status >= 1) AND (status <= 1)) OR ((status >= 1) AND (status <= 1)) OR ((status >= 1) AND (status <= 1)) OR ((status >= 1) AND (status <= 1)) OR ((status >= 1) AND (status <= 1)) OR ((status >= 1) AND (status <= 1));",
    "Affected Elements": "WHERE clause with Nullable column using operators >= and <=.",
    "Root Cause Analysis": "The inconsistency arises from how NULL values are handled in comparisons, leading to unexpected counts when filtering with Nullable columns."
}