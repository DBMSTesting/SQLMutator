{
    "sql": "create table if not exists fullflow_agg (date Date, hour DateTime, time DateTime, from_subscriber UInt8, source_ip String, destination_ip String, source_asnum UInt32, destination_asnum UInt32, source_astitle String, destination_astitle String, is_subscriber UInt8, is_excluded_subscriber UInt8 default 0, subscriber String, subscriber_login String, login String, host_ip String, host String, protocol_code UInt16, protocol_identifier UInt8, post_nat_source_ipv4 String, post_nat_source_port UInt16, dpi_id UInt8, bridge_vchannel_num UInt16, ip_class_of_service UInt8, flow_start_millisecond_min AggregateFunction(min, UInt64), flow_start_millisecond_from_subscriber_min_if AggregateFunction(minIf, UInt64, UInt8), flow_start_millisecond_to_subscriber_min_if AggregateFunction(minIf, UInt64, UInt8), flow_end_millisecond_max AggregateFunction(max, UInt64), flow_end_millisecond_from_subscriber_max_if AggregateFunction(maxIf, UInt64, UInt8), flow_end_millisecond_to_subscriber_max_if AggregateFunction(maxIf, UInt64, UInt8), total_count AggregateFunction(count), session_id_uniq AggregateFunction(uniq, UInt64), octet_delta_count_from_subscriber_sum_if AggregateFunction(sumIf, UInt64, UInt8), octet_delta_count_to_subscriber_sum_if AggregateFunction(sumIf, UInt64, UInt8), octet_delta_count_sum AggregateFunction(sum, UInt64), packet_delta_count_from_subscriber_sum_if AggregateFunction(sumIf, UInt64, UInt8), packet_delta_count_to_subscriber_sum_if AggregateFunction(sumIf, UInt64, UInt8), packet_delta_count_sum AggregateFunction(sum, UInt64), ip_class_of_service_any AggregateFunction(anyHeavy, UInt8), rtt_from_subscriber_avg_if AggregateFunction(avgIf, UInt32, UInt8), rtt_to_subscriber_avg_if AggregateFunction(avgIf, UInt32, UInt8), rtt_avg_if AggregateFunction(avgIf, UInt32, UInt8), rtt_median_if AggregateFunction(quantileIf, UInt32, UInt8), rtt_from_subscriber_any_heavy_if AggregateFunction(anyHeavyIf, UInt32, UInt8), rtt_to_subscriber_any_heavy_if AggregateFunction(anyHeavyIf, UInt32, UInt8), rtt_any_heavy_if AggregateFunction(anyHeavyIf, UInt32, UInt8), retransmits_from_subscriber_avg_if AggregateFunction(avgIf, UInt16, UInt8), retransmits_to_subscriber_avg_if AggregateFunction(avgIf, UInt16, UInt8), retransmits_avg_if AggregateFunction(avgIf, UInt16, UInt8), retransmits_rate_from_subscriber_avg_if AggregateFunction(avgIf, Float64, UInt8), retransmits_rate_to_subscriber_avg_if AggregateFunction(avgIf, Float64, UInt8), retransmits_rate_avg_if AggregateFunction(avgIf, Float64, UInt8), fragments_avg_if AggregateFunction(avgIf, UInt16, UInt8)) engine = AggregatingMergeTree() partition by toStartOfHour(`time`) order by (`date`, `hour`, `time`, source_asnum, destination_asnum, source_astitle, destination_astitle, from_subscriber, is_subscriber, source_ip, destination_ip, subscriber, subscriber_login, login, host_ip, host, protocol_identifier, protocol_code, post_nat_source_ipv4, post_nat_source_port, dpi_id, bridge_vchannel_num, ip_class_of_service); detach table if exists fullflow_agg; attach materialized view if not exists fullflow_agg engine = AggregatingMergeTree() partition by toStartOfHour(`time`) order by (`date`, `hour`, `time`, source_asnum, destination_asnum, source_astitle, destination_astitle, from_subscriber, is_subscriber, source_ip, destination_ip, subscriber, subscriber_login, login, host_ip, host, protocol_identifier, protocol_code, post_nat_source_ipv4, post_nat_source_port, dpi_id, bridge_vchannel_num, ip_class_of_service) as select flow_start_date as `date`, toStartOfHour(flow_start_time) as `hour`, toStartOfInterval(flow_start_time, toIntervalMinute(toUInt8(dictGetStringOrDefault('settings_dic', 'value', tuple('FULLFLOW_AGG_LOG_GROUP_TIME_INTERVAL'),'15')))) as `time`, from_subscriber, source_ip, destination_ip, source_asnum, destination_asnum, source_astitle, destination_astitle, is_subscriber, is_excluded_subscriber, subscriber, subscriber_login, login, host_ip, host, protocol_code, protocol_identifier, post_nat_source_ipv4, post_nat_source_port, dpi_id, bridge_vchannel_num, ip_class_of_service, minState(flow_start_millisecond) flow_start_millisecond_min, minIfState(flow_start_millisecond, from_subscriber == 1) flow_start_millisecond_from_subscriber_min_if, minIfState(flow_start_millisecond, from_subscriber == 0) flow_start_millisecond_to_subscriber_min_if, maxState(flow_end_millisecond) flow_end_millisecond_max, maxIfState(flow_end_millisecond, from_subscriber == 1) flow_end_millisecond_from_subscriber_max_if, maxIfState(flow_end_millisecond, from_subscriber == 0) flow_end_millisecond_to_subscriber_max_if, countState() total_count, uniqState(session_id) session_id_uniq, sumIfState(octet_delta_count, from_subscriber == 1) octet_delta_count_from_subscriber_sum_if, sumIfState(octet_delta_count, from_subscriber == 0) octet_delta_count_to_subscriber_sum_if, sumState(octet_delta_count) octet_delta_count_sum, sumIfState(packet_delta_count, from_subscriber == 1) packet_delta_count_from_subscriber_sum_if, sumIfState(packet_delta_count, from_subscriber == 0) packet_delta_count_to_subscriber_sum_if, sumState(packet_delta_count) packet_delta_count_sum, anyHeavyState(ip_class_of_service) ip_class_of_service_any, avgIfState(packet_deliver_time, from_subscriber == 1 and packet_deliver_time <> 0) rtt_from_subscriber_avg_if, avgIfState(packet_deliver_time, from_subscriber == 0 and packet_deliver_time <> 0) rtt_to_subscriber_avg_if, avgIfState(packet_deliver_time, packet_deliver_time <> 0) rtt_avg_if, medianIfState(packet_deliver_time, packet_deliver_time <> 0) rtt_median_if, anyHeavyIfState(packet_deliver_time, from_subscriber == 1 and packet_deliver_time <> 0) rtt_from_subscriber_any_heavy_if, anyHeavyIfState(packet_deliver_time, from_subscriber == 0 and packet_deliver_time <> 0) rtt_to_subscriber_any_heavy_if, anyHeavyIfState(packet_deliver_time, packet_deliver_time <> 0) rtt_any_heavy_if, avgIfState(repeat_delta_pack, from_subscriber == 1 and repeat_delta_pack <> 0) retransmits_from_subscriber_avg_if, avgIfState(repeat_delta_pack, from_subscriber == 0 and repeat_delta_pack <> 0) retransmits_to_subscriber_avg_if, avgIfState(repeat_delta_pack, repeat_delta_pack <> 0) retransmits_avg_if, avgIfState(repeat_delta_pack / packet_delta_count, from_subscriber == 1) retransmits_rate_from_subscriber_avg_if, avgIfState(repeat_delta_pack / packet_delta_count, from_subscriber == 0) retransmits_rate_to_subscriber_avg_if, avgIfState(repeat_delta_pack / packet_delta_count, 1) retransmits_rate_avg_if, avgIfState(frgmt_delta_packs, frgmt_delta_packs <> 0) fragments_avg_if from fullflow where is_subscriber = 1 and is_excluded_subscriber = 0 group by `date`, `hour`, `time`, source_asnum, destination_asnum, source_astitle, destination_astitle, from_subscriber, is_subscriber, is_excluded_subscriber, source_ip, destination_ip, subscriber, subscriber_login, login, host_ip, host, protocol_identifier, protocol_code, post_nat_source_ipv4, post_nat_source_port, dpi_id, bridge_vchannel_num, ip_class_of_service order by `time` asc;",
    "Affected Elements": "GROUP BY clause, aggregate functions",
    "Root Cause Analysis": "The column 'post_nat_source_ipv4' is not included in the GROUP BY clause or an aggregate function, leading to a syntax error in version 23.5."
}