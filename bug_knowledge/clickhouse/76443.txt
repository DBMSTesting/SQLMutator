{
    "sql": "DROP TABLE IF EXISTS kafka_custom_events; DROP TABLE IF EXISTS custom_events; DROP TABLE IF EXISTS kafka_custom_events_consumer; CREATE TABLE kafka_custom_events ( `account_id` UInt64, `event_type` String, `subscriber_id` UInt64, `properties` String, `created` DateTime ) ENGINE = Kafka('localhost:19092', 'topic', 'custom_events_cg11', 'JSONEachRow') SETTINGS kafka_skip_broken_messages = 1; CREATE TABLE custom_events ( `account_id` UInt32 CODEC(T64, ZSTD(1)), `event_type` String CODEC(ZSTD(1)), `subscriber_id` UInt64 CODEC(T64, ZSTD(1)), `properties` String, `properties_map` Map(String, Variant(Array(Int64), DateTime, Int64, String)) CODEC(ZSTD(1)), `created` DateTime CODEC(DoubleDelta, ZSTD(1)) ) ENGINE = MergeTree PRIMARY KEY (account_id, event_type) ORDER BY (account_id, event_type, created) SETTINGS index_granularity = 8192; CREATE MATERIALIZED VIEW kafka_custom_events_consumer TO custom_events ( `account_id` UInt64, `event_type` String, `subscriber_id` UInt64, `properties` String, `properties_map` Map(String, Variant(Array(Int64), DateTime, Int64, String)), `created` DateTime ) AS SELECT account_id, event_type, subscriber_id, properties, JSONExtract(properties, 'Map(String, Variant(Array(Int64), DateTime, Int64, String))'), created FROM kafka_custom_events; SELECT DISTINCT properties, properties_map, JSONExtract(properties, 'Map(String, Variant(Array(Int64), DateTime, Int64, String))') FROM custom_events;",
    "Affected Elements": "JSONExtract function, Map data type, Kafka engine, Materialized view",
    "Root Cause Analysis": "The issue arises from the incorrect handling of JSON data types in the Kafka engine, leading to the extraction function returning an empty Map instead of the expected values."
}