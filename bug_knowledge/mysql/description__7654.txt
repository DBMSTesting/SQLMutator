{
    "sql": "CREATE TABLE `project` (`user_id` int(11) NOT NULL, `report_date_minute` datetime NOT NULL, `report_date_hourly` datetime GENERATED ALWAYS AS (date_format(`report_date_minute`,_utf8mb4'%Y-%m-%d %H:00:00')) VIRTUAL, PRIMARY KEY (`user_id`,`report_date_minute`) USING BTREE) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC /*!50500 PARTITION BY RANGE COLUMNS(report_date_minute) SUBPARTITION BY KEY (user_id) (PARTITION `p_2019-09-24` VALUES LESS THAN ('2019-09-25') (SUBPARTITION `p_2019-09-24_s1` ENGINE = InnoDB, SUBPARTITION `p_2019-09-24_s2` ENGINE = InnoDB, SUBPARTITION `p_2019-09-24_s3` ENGINE = InnoDB, SUBPARTITION `p_2019-09-24_s4` ENGINE = InnoDB, SUBPARTITION `p_2019-09-24_s5` ENGINE = InnoDB, SUBPARTITION `p_2019-09-24_s6` ENGINE = InnoDB, SUBPARTITION `p_2019-09-24_s7` ENGINE = InnoDB), PARTITION `p_2019-09-25` VALUES LESS THAN ('2019-09-26') (SUBPARTITION `p_2019-09-25_s1` ENGINE = InnoDB, SUBPARTITION `p_2019-09-25_s2` ENGINE = InnoDB, SUBPARTITION `p_2019-09-25_s3` ENGINE = InnoDB, SUBPARTITION `p_2019-09-25_s4` ENGINE = InnoDB, SUBPARTITION `p_2019-09-25_s5` ENGINE = InnoDB, SUBPARTITION `p_2019-09-25_s6` ENGINE = InnoDB, SUBPARTITION `p_2019-09-25_s7` ENGINE = InnoDB)) */; INSERT INTO `project`(`user_id`, `report_date_minute`) VALUES (2653021, '2019-09-24 00:00:00'); INSERT INTO `project`(`user_id`, `report_date_minute`) VALUES (2653021, '2019-09-25 00:00:00'); CREATE TABLE `user` (`uid` int(8) unsigned NOT NULL, PRIMARY KEY (`uid`) USING BTREE) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; INSERT INTO `user`(`uid`) VALUES (2653021); SELECT COUNT(*) AS C FROM user AS u INNER JOIN `project` AS p ON p.user_id = u.uid WHERE p.report_date_minute IN ('2019-09-24','2019-09-25') AND u.uid = '2653021';",
    "Affected Elements": "JOIN clause, IN condition, datatype comparison (string vs. integer)",
    "Root Cause Analysis": "The bug is caused by a mismatch in the order of primary key fields in the partitioned table compared to the order of the combined primary key, leading to incorrect row retrieval when the query spans partitions."
}