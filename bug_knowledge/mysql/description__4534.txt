{
    "sql": "CREATE DATABASE IF NOT EXISTS `Test`; USE `Test`; CREATE TABLE `Customers` ( `CustomerID` INT UNSIGNED NOT NULL AUTO_INCREMENT, `CustomerName` VARCHAR(45) NOT NULL, PRIMARY KEY (`CustomerID`)); INSERT INTO Customers(CustomerName) VALUES ('David'), ('Peter'), ('Monty'); CREATE TABLE `Orders` ( `OrderID` INT UNSIGNED NOT NULL AUTO_INCREMENT, `CustomerID` INT UNSIGNED NOT NULL, `OrderReference` VARCHAR(45) DEFAULT NULL, PRIMARY KEY (`OrderID`), KEY `Orders_CustomerID` (`CustomerID`), CONSTRAINT `Orders_CustomerID` FOREIGN KEY (`CustomerID`) REFERENCES `Customers` (`CustomerID`) ON DELETE CASCADE ON UPDATE CASCADE); INSERT INTO Orders (CustomerID, OrderReference) VALUES (1, 'Lots Of Wine'),(1, 'Party Hats'),(2, 'Chocolate Cake'),(2, 'Some Beer'),(3, 'Airplane'); EXPLAIN SELECT OrderID, CustomerName, OrderReference FROM Orders LEFT JOIN Customers ON Orders.CustomerID = Customers.CustomerID LIMIT 1; ALTER TABLE Customers ADD UNIQUE INDEX `Customers_CustomerName_UNIQUE` (`CustomerName`); EXPLAIN SELECT OrderID, CustomerName, OrderReference FROM Orders LEFT JOIN Customers ON Orders.CustomerID = Customers.CustomerID LIMIT 1; ALTER TABLE Customers DROP INDEX `Customers_CustomerName_UNIQUE`; EXPLAIN SELECT OrderID, CustomerName, OrderReference FROM Orders LEFT JOIN Customers ON Orders.CustomerID = Customers.CustomerID ORDER BY Orders.OrderID DESC LIMIT 1; ALTER TABLE Customers ADD UNIQUE INDEX `Customers_CustomerName_UNIQUE` (`CustomerName`); EXPLAIN SELECT OrderID, CustomerName, OrderReference FROM Orders LEFT JOIN Customers ON Orders.CustomerID = Customers.CustomerID ORDER BY Orders.OrderID DESC LIMIT 1;",
    "Affected Elements": "EXPLAIN, LEFT JOIN, LIMIT, ORDER BY, UNIQUE INDEX",
    "Root Cause Analysis": "The optimizer is not selecting the appropriate index due to the small size of the Customers table, leading to inefficient query plans."
}