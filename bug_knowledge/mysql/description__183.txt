{
    "sql": "create table j1 (a int); create table j2 (b int, c char(1000)); insert into j1 values (1), (1), (1), (1), (1), (1), (1), (1), (1), (1), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2); insert into j2 values (1, 'aaaaaaaaaaaaaaaaaaaa'), (2, 'aaaaaaaaaaaaaaaaaaaa'), (3, 'aaaaaaaaaaaaaaaaaaaa'); alter table j2 drop index b; reset query cache; select count(c) from j1 left join j2 on a=b where a > 2 and b < 19 and length(c) < 101 limit 2; select found_rows(); alter table j2 add index (b); reset query cache; select count(c) from j1 left join j2 on a=b where a > 2 and b < 19 and length(c) < 101 limit 2; select found_rows();",
    "Affected Elements": "left join, count, reset query cache, alter table, index",
    "Root Cause Analysis": "The MySQL optimizer is incorrectly estimating the cost of using an index, leading to slower query performance compared to a full table scan."
}