{
    "sql": "SET GLOBAL group_replication_bootstrap_group=ON; CHANGE MASTER TO MASTER_USER='root' FOR CHANNEL 'group_replication_recovery'; START GROUP_REPLICATION; SET GLOBAL group_replication_bootstrap_group=OFF; SELECT * FROM performance_schema.replication_group_members; CHANGE MASTER TO MASTER_USER='root' FOR CHANNEL 'group_replication_recovery'; START GROUP_REPLICATION; SELECT * FROM performance_schema.replication_group_members; CHANGE MASTER TO MASTER_USER='root', MASTER_HOST='127.0.0.1', MASTER_PORT=13000, MASTER_RETRY_COUNT=2, MASTER_AUTO_POSITION=1 FOR CHANNEL 'ch1'; CHANGE MASTER TO SOURCE_CONNECTION_AUTO_FAILOVER=1 FOR CHANNEL 'ch1'; SELECT asynchronous_connection_failover_add_managed('ch1', 'GroupReplication', 'aabbccdd-aabb-aabb-aabb-aabbccddeeff', '127.0.0.1', 13000, '', 80, 60); START SLAVE;",
    "Affected Elements": "SET GLOBAL; CHANGE MASTER TO; START GROUP_REPLICATION; SELECT; asynchronous_connection_failover_add_managed; START SLAVE",
    "Root Cause Analysis": "The crash occurs due to a race condition when the node attempts to leave the group after being expelled, while concurrently trying to terminate its replication channel, leading to an improper handling of internal thread management."
}