{
    "sql": "DROP TABLE IF EXISTS users; CREATE TABLE users ( id INT NOT NULL PRIMARY KEY AUTO_INCREMENT, username VARCHAR(100) NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ); INSERT INTO users SELECT NULL, REPEAT('a', 10), '2014-01-01' FROM dual; INSERT INTO users SELECT NULL, REPEAT('a', 10), '2014-01-01' FROM users; ...; DROP TABLE IF EXISTS activity_log; CREATE TABLE activity_log ( id INT NOT NULL PRIMARY KEY AUTO_INCREMENT, user_id INT NOT NULL, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, INDEX (user_id) ); INSERT INTO activity_log SELECT NULL, id, FROM_UNIXTIME(UNIX_TIMESTAMP()-(RAND()*86400*30)) FROM users WHERE id BETWEEN 5000 AND 5050; ...; ANALYZE TABLE activity_log; ANALYZE TABLE users; SELECT SQL_CALC_FOUND_ROWS u.*, (SELECT created_at FROM activity_log WHERE user_id = u.id ORDER BY id DESC LIMIT 1) AS activity_at FROM users AS u ORDER BY activity_at DESC LIMIT 0, 5; SELECT SQL_CALC_FOUND_ROWS u.*, (SELECT created_at FROM activity_log FORCE INDEX (user_id) WHERE user_id = u.id ORDER BY id DESC LIMIT 1) AS activity_at FROM users AS u ORDER BY activity_at DESC LIMIT 0, 5;",
    "Affected Elements": "SQL_CALC_FOUND_ROWS, FORCE INDEX, ORDER BY, LIMIT",
    "Root Cause Analysis": "The optimizer is incorrectly selecting an index scan over a reference on a secondary key, leading to suboptimal execution plans."
}