{
    "sql": "CREATE TABLE SIZE_RULE (ID_SIZE_RULE smallint unsigned NOT NULL COMMENT 'Unique identifier of the rule', ID_PROJECT int unsigned NOT NULL COMMENT 'Unique identifier of the project', SR_NAME varchar(50) NOT NULL COMMENT 'Name of the rule', SR_TYPE enum('I', 'L') NOT NULL COMMENT 'Rule type : I = Interval, L = List', SR_LIST varchar(50) COMMENT 'List of values (for list based rules)', SR_MIN smallint unsigned COMMENT 'Min value (for interval based rules)', SR_MAX smallint unsigned COMMENT 'Max value (for interval based rules)', SR_INTERVAL smallint unsigned COMMENT 'Interval between 2 sizes (for interval based rules)', SR_FORMAT smallint unsigned DEFAULT 0 COMMENT 'Encoded file output formats', SR_UPDATE_DATE datetime NOT NULL COMMENT 'Last update date of the rule', SR_STATUS enum('E', 'K') NOT NULL COMMENT 'Rule status : E = Enabled, K = Killed') ENGINE=InnoDB CHARACTER SET=utf8 COMMENT='Resizing rules for images'; ALTER TABLE SIZE_RULE ADD CONSTRAINT PK_SIZE_RULE PRIMARY KEY (ID_SIZE_RULE); DROP FUNCTION IF EXISTS checkSizeRule; CREATE FUNCTION checkSizeRule(inIdRule smallint unsigned, inList varchar(50), inMin smallint unsigned, inMax smallint unsigned, inInterval smallint unsigned) RETURNS boolean DETERMINISTIC READS SQL DATA SQL SECURITY INVOKER BEGIN DECLARE result boolean; DECLARE idRuleIsNull smallint unsigned; DECLARE rType enum('I', 'L'); SET result = true; IF (IFNULL(inIdRule, 0) = 0 AND (IFNULL(inList, 0) != 0 OR IFNULL(inMin, 0) != 0 OR IFNULL(inMax, 0) != 0 OR IFNULL(inInterval, 0) != 0)) THEN SET result = false; END IF; IF result = true THEN SELECT SR_TYPE INTO rType FROM SIZE_RULE WHERE ID_SIZE_RULE = inIdRule; IF rType = 'I' AND (IFNULL(inMin, 0) = 0 OR IFNULL(inMax, 0) = 0 OR IFNULL(inInterval, 0) = 0 OR IFNULL(inList, '') != '') THEN SET result = false; ELSIF rType = 'L' AND (IFNULL(inMin,0) != 0 OR IFNULL(inMax, 0) != 0 OR IFNULL(inInterval, 0) != 0 OR IFNULL(inList, '') = '') THEN SET result = false; END IF; END IF; RETURN result; END; DROP TRIGGER IF EXISTS TG1_SIZE_RULE; CREATE TRIGGER TG1_SIZE_RULE AFTER INSERT ON SIZE_RULE FOR EACH ROW BEGIN IF NOT checkSizeRule(NEW.ID_SIZE_RULE, NEW.SR_LIST, NEW.SR_MIN, NEW.SR_MAX, NEW.SR_INTERVAL) THEN SET @error = raise_error('Rule limits are not compatible with rule type'); END IF; END; INSERT INTO SIZE_RULE (ID_PROJECT, SR_NAME, SR_TYPE, SR_LIST, SR_MIN, SR_MAX, SR_INTERVAL, SR_FORMAT, SR_UPDATE_DATE, SR_STATUS) VALUES (21, 'My_Rule', 'I', NULL, 100, 400, 1, 1, NOW(), 'E');",
    "Affected Elements": "now() function, UDF (User Defined Function) usage in triggers",
    "Root Cause Analysis": "The warning is triggered due to the use of a UDF in combination with statement-based replication, which can lead to discrepancies in the execution of the function across different servers."
}