{
    "sql": "CREATE TABLE `t1` ( `id` int(11) NOT NULL AUTO_INCREMENT , `c1` int(11) NOT NULL DEFAULT '0', `c2` int(11) NOT NULL DEFAULT '0', PRIMARY KEY (`id`), KEY `idx_c1` (`c1`) ) ENGINE=InnoDB; CREATE TABLE `t2` ( `id` int(11) NOT NULL AUTO_INCREMENT , `c1` int(11) NOT NULL DEFAULT '0', `c2` int(11) NOT NULL DEFAULT '0', PRIMARY KEY (`id`), KEY `idx_c1` (`c1`) ) ENGINE=InnoDB; INSERT INTO t1 VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4); INSERT INTO t2 VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4); INSERT INTO t1 (c1,c2) SELECT FLOOR( 1 + RAND( ) * 1000 ),FLOOR( 1 + RAND( ) * 1000 ) FROM t1; INSERT INTO t2 (c1,c2) SELECT FLOOR( 1 + RAND( ) * 1000 ),FLOOR( 1 + RAND( ) * 1000 ) FROM t2; SELECT COUNT(*) FROM t1 JOIN t2 ON t1.c2 = t2.c2; CREATE INDEX idx_c2 ON t1(c2); CREATE INDEX idx_c2 ON t2(c2); SELECT COUNT(*) FROM t1 JOIN t2 ON t1.c2 = t2.c2; EXPLAIN FORMAT=tree SELECT COUNT(*) FROM t1 IGNORE INDEX (idx_c2) JOIN t2 IGNORE INDEX (idx_c2) ON t1.c2 = t2.c2 WHERE t1.c2=t2.c2;",
    "Affected Elements": "IGNORE INDEX, JOIN, COUNT(*)",
    "Root Cause Analysis": "The optimizer does not allow forcing hash joins when indexes are available, which leads to performance issues compared to hash joins."
}