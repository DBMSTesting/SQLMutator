{
    "sql": "CREATE TABLE `testbin` ( `c1` int(11) NOT NULL AUTO_INCREMENT, `c2` varchar(12) DEFAULT NULL, `c3` int(11) DEFAULT NULL, `c4` int(11) DEFAULT NULL, PRIMARY KEY (`c1`), KEY `c2` (`c2`)) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1; INSERT INTO testbin (c2, c3, c4) VALUES ('Adam',1,2); INSERT INTO testbin (c2, c3, c4) VALUES ('adaM',1,2); INSERT INTO testbin (c2, c3, c4) VALUES ('Ben',1,2); INSERT INTO testbin (c2, c3, c4) VALUES ('bEn',1,2); INSERT INTO testbin (c2, c3, c4) VALUES ('chris',1,2); INSERT INTO testbin (c2, c3, c4) VALUES ('CHRIS',1,2); INSERT INTO testbin (c2, c3, c4) VALUES ('dAvE',1,2); INSERT INTO testbin (c2, c3, c4) VALUES ('DaVe',1,2); INSERT INTO testbin (c2, c3, c4) VALUES ('eric',1,2); INSERT INTO testbin (c2, c3, c4) VALUES ('eRiC',1,2); EXPLAIN SELECT * FROM testbin WHERE (c2 LIKE BINARY 'eRiC') LIMIT 1;",
    "Affected Elements": "LIKE BINARY, EXPLAIN, table scan",
    "Root Cause Analysis": "The change in query optimization behavior in MySQL 5.5 caused the binary operator in the WHERE clause to disregard available indexes, leading to a full table scan."
}