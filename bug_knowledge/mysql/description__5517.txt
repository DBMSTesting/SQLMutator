{
    "sql": "CREATE TABLE t1 (pk INTEGER NOT NULL, i1 INTEGER NOT NULL, c1 CHAR(200) NOT NULL, PRIMARY KEY (pk), KEY idx (i1)); INSERT INTO t1 SELECT a0.i1 + 10*a1.i1 + 100*a2.i1 + 1000*a3.i1 + 10000*a4.i1 + 100000*a5.i1, a0.i1 + 10*a1.i1 + 100*a2.i1, 'Text' FROM (SELECT 0 AS i1 UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a0, (SELECT 0 AS i1 UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a1, (SELECT 0 AS i1 UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a2, (SELECT 0 AS i1 UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a3, (SELECT 0 AS i1 UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a4, (SELECT 0 AS i1 UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a5; EXPLAIN SELECT * FROM t1 WHERE pk > 90000 AND i1 = 100; DROP TABLE t1;",
    "Affected Elements": "index_merge, primary index, secondary index, FORCE INDEX clause",
    "Root Cause Analysis": "The optimizer incorrectly determines that using index merge is more efficient than using a range scan on the secondary index when primary key columns are included in it."
}