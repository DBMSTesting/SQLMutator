{
    "sql": "drop table if exists ndbcluster_test; create table ndbcluster_test(id bigint not null auto_increment, cpr varchar(10) not null, payload text, payload_hash varchar(128) default NULL, primary key (id)) ENGINE=ndbcluster; insert into ndbcluster_test (cpr, payload, payload_hash) VALUES ('1234567890', 'ala', 'sfsdf'); insert into ndbcluster_test (cpr, payload, payload_hash) VALUES ('1234567890', 'adff', 'sfsdf'); insert into ndbcluster_test (cpr, payload, payload_hash) VALUES ('1234567890', null, null); insert into ndbcluster_test (cpr, payload, payload_hash) VALUES ('9876543210', 'alfdsa', 'sfsdf'); insert into ndbcluster_test (cpr, payload, payload_hash) VALUES ('9876543210', 'sfala', 'sfsdf'); insert into ndbcluster_test (cpr, payload, payload_hash) VALUES ('9876543210', null, null); create index ndbcluster_test_idx on ndbcluster_test(cpr); select * from ndbcluster_test where cpr='1234567890' and payload_hash is not null order by id desc limit 1;",
    "Affected Elements": "select, where, order by, limit",
    "Root Cause Analysis": "The issue arises from how the NDB Cluster engine handles indexing and large text fields, causing queries that should return results to fail when an index is present."
}