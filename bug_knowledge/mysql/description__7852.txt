{
    "sql": "CREATE TEMPORARY TABLE date_functional_index (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, created_at DATETIME NOT NULL, INDEX (DATE(created_at))); INSERT INTO date_functional_index (created_at) WITH RECURSIVE sequence (n) AS (SELECT 0 UNION ALL SELECT n + 1 FROM sequence WHERE n + 1 < 100000) SELECT NOW() - INTERVAL (90 * RAND()) DAY AS created_at FROM sequence; ANALYZE TABLE date_functional_index; EXPLAIN FORMAT=TREE WITH RECURSIVE dates_range (d) AS (SELECT CURDATE() - INTERVAL 90 DAY UNION ALL SELECT d + INTERVAL 1 DAY FROM dates_range WHERE d + INTERVAL 1 day <= CURDATE()) SELECT d, COUNT(id) FROM dates_range LEFT JOIN date_functional_index ON d = DATE(created_at) GROUP BY d; CREATE TEMPORARY TABLE date_generated_column_functional_index (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, created_at DATETIME NOT NULL, created_at_date DATE AS (DATE(created_at)), INDEX (created_at_date)); INSERT INTO date_generated_column_functional_index (created_at) WITH RECURSIVE sequence (n) AS (SELECT 0 UNION ALL SELECT n + 1 FROM sequence WHERE n + 1 < 100000) SELECT NOW() - INTERVAL (90 * RAND()) DAY AS created_at FROM sequence; ANALYZE TABLE date_generated_column_functional_index; EXPLAIN FORMAT=TREE WITH RECURSIVE dates_range (d) AS (SELECT CURDATE() - INTERVAL 90 DAY UNION ALL SELECT d + INTERVAL 1 DAY FROM dates_range WHERE d + INTERVAL 1 day <= CURDATE()) SELECT d, COUNT(id) FROM dates_range LEFT JOIN date_generated_column_functional_index ON d = created_at_date GROUP BY d;",
    "Affected Elements": "JOIN clause, functional key parts, indexed generated columns",
    "Root Cause Analysis": "Functional indexes do not allow the underlying generated column to be visible, preventing the optimizer from utilizing the index in JOIN operations."
}