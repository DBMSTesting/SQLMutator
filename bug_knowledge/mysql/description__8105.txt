{
    "sql": "DROP TABLE IF EXISTS test; DROP TABLE IF EXISTS test_2; DROP TEMPORARY TABLE IF EXISTS test_tmp_trg; CREATE TABLE test (col INT NOT NULL); CREATE TABLE test_2 (col_2 INT NOT NULL); DELIMITER $ CREATE TRIGGER test_b_u_trg BEFORE UPDATE ON test FOR EACH ROW BEGIN SET @logger := 1; DROP TEMPORARY TABLE IF EXISTS test_tmp_trg; CREATE TEMPORARY TABLE test_tmp_trg (time VARCHAR(1), event VARCHAR(1), new_col INT, old_col INT) ENGINE=MEMORY; DELETE FROM test_tmp_trg; SET @new_col = NEW.col, @old_col = OLD.col; INSERT INTO test_tmp_trg VALUES ('B', 'U', @new_col, @old_col); CALL test_trg_proc; SELECT new_col INTO @new_col FROM test_tmp_trg; SET NEW.col := @new_col; DELETE FROM test_tmp_trg; END$ CREATE TRIGGER test_a_u_trg AFTER UPDATE ON test FOR EACH ROW BEGIN INSERT INTO test_tmp_trg VALUES ('A', 'U', @new_col, @old_col); CALL test_trg_proc; DROP TEMPORARY TABLE test_tmp_trg; END$ DROP FUNCTION IF EXISTS raise_error; CREATE FUNCTION raise_error(message VARCHAR(191)) RETURNS INT DETERMINISTIC BEGIN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = message; RETURN NULL; END$ DROP PROCEDURE IF EXISTS test_trg_proc$ CREATE PROCEDURE test_trg_proc() BEGIN SET @msg = (SELECT raise_error('It is forbidden to change from 1 to 2') FROM test_tmp_trg WHERE time = 'B' AND event = 'U' AND old_col = 1 AND new_col = 2); INSERT INTO test_2 SELECT 99 FROM test_tmp_trg WHERE (time = 'A' AND event = 'U' AND old_col = 0 AND new_col = 1) OR (time = 'A' AND event = 'I' AND new_col = 5); END$ DELIMITER ; INSERT INTO test VALUES (0); UPDATE test SET col = 1; UPDATE test SET col = 2;",
    "Affected Elements": "TEMPORARY TABLE, TRIGGERS, PROCEDURES, CONTINUE HANDLER",
    "Root Cause Analysis": "The use of TEMPORARY TABLES in triggers conflicts with the reuse of connections in a connection pool, leading to errors when attempting to access the same TEMPORARY TABLE across multiple trigger executions."
}