{
    "sql": "CREATE TABLE `t1` (`f1` varchar(20) NOT NULL, `f2` varchar(100) NOT NULL DEFAULT '', `f3` bigint(20) NOT NULL, PRIMARY KEY (`f1`,`f3`,`f2`)) ENGINE=InnoDB DEFAULT CHARSET=utf8; INSERT INTO t1 VALUES (ENCRYPT(UUID()), UUID(), (FLOOR(1 + RAND() * 60000))); INSERT INTO t1 SELECT ENCRYPT(UUID()), UUID(), (FLOOR(1 + RAND() * 60000)) FROM t1; UPDATE t1 SET f1 = f3 % 100; EXPLAIN FORMAT=JSON SELECT aa.f2, MAX(aa.f3) AS f3 FROM t1 aa WHERE f1 = '42' AND f3 <= 30000 GROUP BY aa.f2; FLUSH STATUS; SELECT aa.f2, MAX(aa.f3) AS f3 FROM t1 aa WHERE f1 = '42' AND f3 <= 30000 GROUP BY aa.f2; CREATE TABLE t2 LIKE t1; INSERT INTO t2 SELECT * FROM t1; ALTER TABLE t1 DROP PRIMARY KEY; TRUNCATE TABLE t1; INSERT INTO t1 SELECT * FROM t2; ALTER TABLE t1 ADD PRIMARY KEY(`f1`,`f3`,`f2`); EXPLAIN FORMAT=JSON SELECT aa.f2, MAX(aa.f3) AS f3 FROM t1 aa WHERE f1 = '42' AND f3 <= 30000 GROUP BY aa.f2; FLUSH STATUS; SELECT aa.f2, MAX(aa.f3) AS f3 FROM t1 aa WHERE f1 = '42' AND f3 <= 30000 GROUP BY aa.f2;",
    "Affected Elements": "EXPLAIN FORMAT=JSON, query_cost, rows_examined_per_scan, rows_produced_per_join, cost_info, range access, ref access",
    "Root Cause Analysis": "The cost values are incorrect when the optimizer switches from ref-access to range-access due to outdated statistics when the index is added after bulk inserts."
}