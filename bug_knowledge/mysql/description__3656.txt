{
    "sql": "DROP TABLE IF EXISTS TEST; CREATE TABLE TEST(col1 INT, col2 VARCHAR(10), PRIMARY KEY (col1)); INSERT INTO TEST VALUES (1, 'aaa'), (2, 'bbb'), (3, 'ccc'), (4, 'ddd'), (5, 'eee'), (6, 'fff'), (7, 'aaa'), (8, 'aaa'), (9, 'aaa'), (10, 'aaa'), (11, 'bbb'); COMMIT; CREATE INDEX IDX1 ON TEST (col2); DROP TABLE IF EXISTS innodb_lock_monitor; CREATE TABLE innodb_lock_monitor(i INT NOT NULL) ENGINE=InnoDB; START TRANSACTION; SELECT col1, col2 FROM TEST WHERE col2 = 'aaa' OR col2 = 'bbb' ORDER BY col1 DESC, col2 ASC LIMIT 1 FOR UPDATE;",
    "Affected Elements": "SELECT, FOR UPDATE, LIMIT, ORDER BY, filesort",
    "Root Cause Analysis": "The use of complex ORDER BY clauses with LIMIT in conjunction with SELECT FOR UPDATE leads to excessive row locks due to the way InnoDB handles locking and sorting."
}