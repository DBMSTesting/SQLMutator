{
    "sql": "DROP TABLE IF EXISTS t0; DROP TABLE IF EXISTS t1; CREATE TABLE IF NOT EXISTS t0 (c0 FLOAT PRIMARY KEY NOT NULL, c1 INT, c2 VARCHAR(500)); CREATE TABLE IF NOT EXISTS t1 LIKE t0; INSERT INTO t0 (c2, c1, c0) VALUES ('eVt%', 1, -1.088348796E9); INSERT INTO t0 (c2, c1, c0) VALUES ('abc', 2, -2.088348796E9); INSERT INTO t0 (c2, c1, c0) VALUES ('xyz', 3, -3.088348796E9); INSERT INTO t0 (c2, c1, c0) VALUES ('eVt%', 4, -41.088348796E9); INSERT INTO t1 (c0, c1, c2) VALUES (0.390985317943897, 1, '_w'); INSERT INTO t1 (c0, c1, c2) VALUES (0.490123456789012, 1, '_x'); INSERT INTO t1 (c0, c1, c2) VALUES (0.590123456789012, 2, '_y'); INSERT INTO t1 (c0, c1, c2) VALUES (0.190985317943891, 3, '_z'); INSERT INTO t1 (c0, c1, c2) VALUES (0.20985317943892, 2, '_w11'); ALTER TABLE t0 SET TIFLASH REPLICA 1; ALTER TABLE t1 SET TIFLASH REPLICA 1; SELECT /*+ READ_FROM_STORAGE(tikv[t0]) */ t0.c0, t0.c1, t0.c2 FROM t0 WHERE EXISTS (SELECT /*+ READ_FROM_STORAGE(tikv[t1]) */ 1 FROM t1 WHERE t0.c1 = t1.c1 AND (ROUND(t1.c2 - 0.5, 0)) = (((t0.c0 || '') AND t0.c2))) GROUP BY t0.c0, t0.c1, t0.c2 HAVING t0.c1 > 0 ORDER BY t0.c1 DESC LIMIT 10; SELECT /*+ READ_FROM_STORAGE(tiflash[t0]) */ t0.c0, t0.c1, t0.c2 FROM t0 WHERE EXISTS (SELECT /*+ READ_FROM_STORAGE(tiflash[t1]) */ 1 FROM t1 WHERE t0.c1 = t1.c1 AND (ROUND(t1.c2 - 0.5, 0)) = (((t0.c0 || '') AND t0.c2))) GROUP BY t0.c0, t0.c1, t0.c2 HAVING t0.c1 > 0 ORDER BY t0.c1 DESC LIMIT 10;",
    "Affected Elements": "READ_FROM_STORAGE hints, ROUND function, EXISTS clause, GROUP BY, HAVING, ORDER BY",
    "Root Cause Analysis": "The issue arises from TiFlash treating '+0' and '-0' as different keys during a hash join, leading to inconsistent results between the two queries."
}