{
    "sql": "CREATE TABLE `t9ded2b9e` (\n  `col_1` double NOT NULL,\n  `col_2` bigint unsigned NOT NULL,\n  `col_3` json DEFAULT NULL,\n  `col_4` tinyint(1) DEFAULT '0',\n  `col_5` varbinary(449) DEFAULT '0D1MO',\n  KEY `idx_1` (`col_2`,`col_1`),\n  PRIMARY KEY (`col_2`,`col_1`) /*T![clustered_index] NONCLUSTERED */, \n  UNIQUE KEY `idx_3` (`col_5`) /*T![global_index] GLOBAL */\n) ENGINE=InnoDB DEFAULT CHARSET=gbk COLLATE=gbk_bin\nPARTITION BY RANGE (`col_2`)\n(PARTITION `p0` VALUES LESS THAN (707599972958862406),\n PARTITION `p1` VALUES LESS THAN (18071948301903011633));\n\nINSERT INTO `t9ded2b9e` VALUES (9244.575601760573,5484700137910390046,'[15107732995115610323, 3667287159023624370, 15233047128351005946, 15819663096666708378]',0,x'7945'), (5308.775795731278,3551512076722997577,'[15440345204971499659, 2]',1,x'254f785f73');\n\nCREATE TABLE `tl004c2d48` (\n  `col_14` datetime DEFAULT '2017-10-27 00:00:00', \n  UNIQUE KEY `idx_4` (`col_14`)\n) ENGINE = InnoDB DEFAULT CHARSET = gbk COLLATE = gbk_bin;\n\nINSERT INTO `tl004c2d48` VALUES ('2019-11-12 00:00:00'), ('2032-09-06 00:00:00');\n\nSELECT /*+ read_from_storage(tiflash[ tl004c2d48 ]) */ /*+ use_index_merge( tl004c2d48,st_1479 ) */  /*+ inl_join( st_1479 ) */ max(   st_1479.r2 ) as r0 , max( distinct  st_1479.r0 ) as r1 , bit_length( tl004c2d48.col_14 ) as r2 , count( distinct  tl004c2d48.col_14 ) as r3 , bit_and( st_1479.r0 ) as r4 FROM tl004c2d48 JOIN ( SELECT /*+ read_from_storage(tiflash[ t9ded2b9e ]) */   elt(2, t9ded2b9e.col_5 , t9ded2b9e.col_5 ) as r0 , t9ded2b9e.col_3 as r1 , rpad( t9ded2b9e.col_5 , 5 , t9ded2b9e.col_5 ) as r2\nFROM t9ded2b9e  ORDER BY r0,r1,r2 ) st_1479 ON tl004c2d48.col_14 = st_1479.r2  GROUP BY tl004c2d48.col_14  HAVING tl004c2d48.col_14 <= '1983-11-16';",
    "Affected Elements": "SELECT, JOIN, GROUP BY, HAVING",
    "Root Cause Analysis": "在执行查询时，可能由于数据量过大或某些字段的长度超出限制，导致出现 std::length_error 异常。"
}