{
    "sql": "drop table if exists t1, t2; create table t1 (c_datetime datetime, c1 int, c2 int, primary key (c_datetime), key(c1), key(c2)) partition by range (to_days(c_datetime)) ( partition p0 values less than (to_days('2020-02-01')), partition p1 values less than (to_days('2020-04-01')), partition p2 values less than (to_days('2020-06-01')), partition p3 values less than maxvalue); create table t2 (c_datetime datetime, unique key(c_datetime)); insert into t1 values ('2020-06-26 03:24:00', 1, 1), ('2020-02-21 07:15:33', 2, 2), ('2020-04-27 13:50:58', 3, 3); insert into t2 values ('2020-01-10 09:36:00'), ('2020-02-04 06:00:00'), ('2020-06-12 03:45:18'); SET GLOBAL tidb_txn_mode = 'pessimistic'; begin; select /*+ use_index_merge(t1) */ * from t1 join t2 on t1.c_datetime >= t2.c_datetime where t1.c1 < 10 or t1.c2 < 10 for update; begin; update t1 set c_datetime = '2020-06-26 03:24:00' where c1 = 1;",
    "Affected Elements": "SELECT, UPDATE, JOIN, FOR UPDATE",
    "Root Cause Analysis": "Pessimistic locking is not functioning correctly on partitioned tables when using index merge, leading to unexpected behavior where transactions are not blocked as expected."
}