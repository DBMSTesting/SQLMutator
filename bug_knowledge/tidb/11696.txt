{
    "sql": "CREATE TABLE `test1` (`id` bigint(20) NOT NULL AUTO_INCREMENT, `val` bigint(20) DEFAULT NULL, PRIMARY KEY (`id`)); CREATE TABLE `test2` (`id` bigint(20) NOT NULL AUTO_INCREMENT, `test1Id` bigint(20) DEFAULT NULL, `test1Val` bigint(20) DEFAULT NULL, PRIMARY KEY (`id`)); INSERT INTO test1(val) VALUES (1), (2), (3), ..., (500); INSERT INTO test2(test1Id, test1Val) VALUES (?, ?), (?, ?), ..., (?, ?); SELECT test1.id AS test1Id, test1.val AS test1Val, test2.test1Id AS test1IdInTest2 FROM test1 LEFT JOIN test2 ON test1.val = test2.test1Val WHERE test1.id != test2.test1Id;",
    "Affected Elements": "AUTO_INCREMENT, INSERT, SELECT, JOIN",
    "Root Cause Analysis": "The issue arises due to TiDB not guaranteeing sequential allocation of auto-increment IDs, leading to mismatched generated keys in concurrent batch inserts."
}