{
    "pattern": "CREATE TABLE t1(<dml_values_parameter>); INSERT INTO t1 <dml_values_parameter>; INSERT INTO t1 <dml_values_parameter>; CREATE TABLE t2(<dml_values_parameter>); INSERT INTO t2 <dml_values_parameter>; INSERT INTO t2 <dml_values_parameter>; INSERT INTO t2 <dml_values_parameter>; CREATE TABLE t3(<constraint_type_parameter>, <constraint_type_parameter>); CREATE TRIGGER t3t AFTER INSERT ON t3 WHEN new.t3_d <is_operator_parameter> NULL BEGIN UPDATE t3 SET t3_d = ( SELECT d FROM (SELECT * FROM t1 WHERE (new.t3_a <arithmetic_operator_parameter> 2) <comparison_operator_parameter> (rowid <arithmetic_operator_parameter> 2) LIMIT 10), (SELECT * FROM t2 WHERE (new.t3_a <arithmetic_operator_parameter> 2) <comparison_operator_parameter> (rowid <arithmetic_operator_parameter> 2) LIMIT 10) WHERE a = new.t3_a AND b = c ) WHERE t3_a = new.t3_a; END; INSERT INTO t3(t3_a) VALUES(<dml_values_parameter>); INSERT INTO t3(t3_a) VALUES(<dml_values_parameter>); INSERT INTO t3(t3_a) VALUES(<dml_values_parameter>); DELETE FROM t3; INSERT INTO t3(t3_a) SELECT <dml_values_parameter> UNION SELECT <dml_values_parameter> UNION SELECT <dml_values_parameter>; SELECT * FROM t3;",
    "applied_rules": [
        "<dml_values_parameter>",
        "<constraint_type_parameter>",
        "<is_operator_parameter>",
        "<arithmetic_operator_parameter>",
        "<comparison_operator_parameter>"
    ],
    "Affected Elements": "CREATE TRIGGER, UPDATE, SELECT, INSERT, WHERE, LIMIT",
    "Root Cause Analysis": "The automatic index is not updated correctly when multiple rows are inserted in a single statement, causing the trigger to access stale data."
}