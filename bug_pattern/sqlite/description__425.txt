{
    "pattern": "CREATE TABLE A(<object_dependency_replace>); CREATE TABLE Items(<object_dependency_replace>, <object_dependency_replace>); INSERT INTO Items <dml_values_parameter>; INSERT INTO Items <dml_values_parameter>; CREATE TABLE B(<object_dependency_replace>); SELECT Items.ItemName FROM Items <join_operator_replace> A ON (A.Name = Items.ItemName AND Items.ItemName <comparison_operator_replace> <string_parameter>) <join_operator_replace> B ON (B.Name = Items.ItemName) WHERE Items.Name <comparison_operator_replace> <string_parameter>; SELECT Items.ItemName FROM Items <join_operator_replace> A ON (A.Name = Items.ItemName AND Items.ItemName <comparison_operator_replace> <string_parameter>) <join_operator_replace> B ON (B.Name = Items.ItemName) WHERE Items.Name <comparison_operator_replace> <string_parameter> ORDER BY Items.ItemName; CREATE TABLE t1(<object_dependency_replace>); CREATE TABLE t2(<object_dependency_replace>); INSERT INTO t1 <dml_values_parameter>; CREATE INDEX t1x ON t1(<object_dependency_replace>) WHERE a <comparison_operator_replace> <number_parameter>; PRAGMA automatic_index=<boolean_parameter>; SELECT * FROM t1 <join_operator_replace> t2 ON (a <comparison_operator_replace> <number_parameter>) ORDER BY a;",
    "applied_rules": [
        "<object_dependency_replace>",
        "<dml_values_parameter>",
        "<string_parameter>",
        "<comparison_operator_replace>",
        "<join_operator_replace>",
        "<number_parameter>",
        "<boolean_parameter>"
    ],
    "Affected Elements": "LEFT JOIN, ORDER BY, WHERE clause, partial index constraints",
    "Root Cause Analysis": "The bug arises due to the incorrect handling of qualifying constraints for partial indexes located within the ON clause of LEFT JOINs, leading to unexpected results when an ORDER BY clause is applied."
}