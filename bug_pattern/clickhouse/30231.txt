{
    "pattern": "DROP TABLE IF EXISTS <object_dependency_replace>; CREATE TABLE <object_dependency_replace> (user_id <low_cardinality_parameter>, datasource_id <low_cardinality_parameter>, timestamp <date_time_parameter>, path <low_cardinality_parameter>, type <low_cardinality_parameter>, num <float32_parameter>, str <string_parameter>) ENGINE = <engine_parameter> ORDER BY (user_id, datasource_id, timestamp); INSERT INTO <dml_values_parameter> VALUES (<dml_values_parameter>, <dml_values_parameter>, <dml_values_parameter>, <dml_values_parameter>, <dml_values_parameter>, <dml_values_parameter>, <dml_values_parameter>), (<dml_values_parameter>, <dml_values_parameter>, <dml_values_parameter>, <dml_values_parameter>, <dml_values_parameter>, <dml_values_parameter>, <dml_values_parameter>); SELECT <select_parameter>, argMax(<select_parameter>, <select_parameter>) AS <select_parameter> FROM ( SELECT <select_parameter>, count() AS <count_parameter>, count() AS <count_parameter>, countIf(<is_not_null_parameter>(<parse_date_time_best_effort_or_null_parameter>(str))) AS <date_parseable_parameter>, countIf(<is_not_null_parameter>(<parse_date_time64_best_effort_or_null_parameter>(str))) AS <date_parseable64_parameter>, multiIf(<date_parseable_parameter> < (<cnt_parameter> * 0.99), NULL, (<date_parseable64_parameter> >= <date_parseable_parameter>), 'DateTime64', 'DateTime') AS <multi_if_parameter>, <select_parameter> LIKE '%[:]%' AS <is_array_parameter>, <select_parameter> LIKE '%[:]%[:]%' AS <is_nested_array_parameter>, multiIf(<is_not_null_parameter>(<advice_date_subtype_parameter>), <advice_date_subtype_parameter>, NULL) AS <advice_type_raw_parameter>, multiIf(<is_nested_array_parameter>, NULL, <is_array_parameter>, concat('Array(', <advice_type_raw_parameter>, ')'), <advice_type_raw_parameter>) AS <advice_type_parameter> FROM <object_dependency_replace> GROUP BY <group_by_parameter>, <group_by_parameter> ) GROUP BY <group_by_parameter>;",
    "applied_rules": [
        "<object_dependency_replace>",
        "<low_cardinality_parameter>",
        "<date_time_parameter>",
        "<float32_parameter>",
        "<string_parameter>",
        "<engine_parameter>",
        "<dml_values_parameter>",
        "<select_parameter>",
        "<count_parameter>",
        "<date_parseable_parameter>",
        "<date_parseable64_parameter>",
        "<multi_if_parameter>",
        "<is_array_parameter>",
        "<is_nested_array_parameter>",
        "<advice_date_subtype_parameter>",
        "<advice_type_raw_parameter>",
        "<advice_type_parameter>",
        "<group_by_parameter>",
        "<is_not_null_parameter>",
        "<parse_date_time_best_effort_or_null_parameter>",
        "<parse_date_time64_best_effort_or_null_parameter>",
        "<cnt_parameter>"
    ],
    "Affected Elements": "argMax, multiIf, subqueries",
    "Root Cause Analysis": "The error is caused by a logical issue in handling LowCardinality types leading to an invalid cast to ColumnVector<char8_t>."
}