{
    "pattern": "SELECT <aggregation_function_parameter> <function_category_parameter>(<function_category_parameter>(b), <comparison_operator_replace> 0) AS r1, <aggregation_function_parameter> <function_category_parameter>(CAST(b AS <data_type_parameter>), <comparison_operator_replace> 0) AS r2, <aggregation_function_parameter> sum(<case_parameter>(<comparison_operator_replace> 0, <function_category_parameter>(b), 0)) AS r3 FROM (SELECT arrayJoin([1, 2, 3, NULL]) AS a, toNullable('10.0') AS b)",
    "applied_rules": [
        "<aggregation_function_parameter>",
        "<function_category_parameter>",
        "<comparison_operator_replace>",
        "<data_type_parameter>",
        "<case_parameter>"
    ],
    "Affected Elements": "sumIf, toFloat64OrZero, CAST, arrayJoin, toNullable",
    "Root Cause Analysis": "The issue arises from incorrect handling of Nullable types in the sumIf function when null values are present, leading to unexpected aggregation results."
}