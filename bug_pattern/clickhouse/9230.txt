{
    "pattern": "CREATE TABLE n (k UInt32 <constraint_type_parameter>) ENGINE = Memory; CREATE TABLE r (k UInt32, name String <constraint_type_parameter>) ENGINE = Memory; SET <set_parameter> = <set_value_parameter>; SET <set_parameter> = <set_value_parameter>; ANALYZE SELECT <select_parameter> FROM n, r WHERE n.k <comparison_operator_replace> r.k AND r.name = <string_value_parameter>; SELECT k, r.k, name FROM n <join_operator_replace> (SELECT <select_parameter> FROM r HAVING name = <string_value_parameter>) AS r ON n.k <comparison_operator_replace> r.k WHERE n.k <comparison_operator_replace> r.k AND r.name = <string_value_parameter>; ",
    "applied_rules": [
        "<constraint_type_parameter>",
        "<set_parameter>",
        "<set_value_parameter>",
        "<select_parameter>",
        "<comparison_operator_replace>",
        "<string_value_parameter>",
        "<join_operator_replace>"
    ],
    "Affected Elements": "HAVING clause without GROUP BY",
    "Root Cause Analysis": "The usage of HAVING in the subquery without a corresponding GROUP BY clause leads to unexpected behavior when push down optimization is enabled."
}