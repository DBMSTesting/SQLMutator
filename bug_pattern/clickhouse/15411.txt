{
    "pattern": "CREATE DATABASE IF NOT EXISTS <database_name_parameter>; CREATE TABLE IF NOT EXISTS <table_name_parameter> engine = <engine_type_parameter> PARTITION BY (<partition_column_parameter>, <function_parameter>) ORDER BY (<order_column_parameter>, <session_id_column_parameter>) AS SELECT <function_parameter> AS <alias_parameter>, <string_value_parameter> AS <string_column_parameter>, <numeric_value_parameter> AS <numeric_column_parameter>; CREATE TABLE IF NOT EXISTS <table_name_parameter> engine = <engine_type_parameter> PARTITION BY (<partition_column_parameter>, <function_parameter>) ORDER BY (<order_column_parameter>, <session_id_column_parameter>) AS SELECT <function_parameter> AS <alias_parameter>, <string_value_parameter> AS <string_column_parameter>, <numeric_value_parameter> AS <numeric_column_parameter>, <string_value_parameter> AS <serial_column_parameter>, <string_value_parameter> AS <reg_column_parameter>; SELECT <column_parameter>, <function_parameter>(t -> <function_condition_parameter>, <reg_info_parameter>.1), <function_parameter>(t -> <function_condition_parameter>, <reg_info_parameter>.2) FROM <table_name_parameter> AS <alias_parameter> <join_operator_replace> (SELECT <column_parameter>, <column_parameter>, <function_parameter>((<column_parameter>, <column_parameter>)) AS <array_column_parameter> FROM <table_name_parameter> AS <alias_parameter> GROUP BY <group_column_parameter>, <group_column_parameter>) AS <alias_parameter> ON (<condition_parameter>) AND (<condition_parameter>) WHERE <if_condition_parameter>; ",
    "applied_rules": [
        "<database_name_parameter>",
        "<table_name_parameter>",
        "<engine_type_parameter>",
        "<partition_column_parameter>",
        "<function_parameter>",
        "<order_column_parameter>",
        "<session_id_column_parameter>",
        "<alias_parameter>",
        "<string_value_parameter>",
        "<numeric_value_parameter>",
        "<serial_column_parameter>",
        "<reg_column_parameter>",
        "<column_parameter>",
        "<function_condition_parameter>",
        "<reg_info_parameter>",
        "<join_operator_replace>",
        "<group_column_parameter>",
        "<array_column_parameter>",
        "<if_condition_parameter>",
        "<condition_parameter>"
    ],
    "Affected Elements": "tupleElement function, inner join clause, if statement",
    "Root Cause Analysis": "The second argument of the tupleElement function is not a constant UInt or String, causing the query to fail."
}