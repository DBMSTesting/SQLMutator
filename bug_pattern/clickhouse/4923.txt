{
    "pattern": "CREATE TABLE test.quants (TS <data_type_parameter>, Region <data_type_parameter>, Metric <data_type_parameter>, QuantAvg <data_type_parameter>, Updated <data_type_parameter>) ENGINE = <engine_type_parameter> PARTITION BY (<partition_parameter>, toYYYYMM(TS)) PRIMARY KEY (<primary_key_parameter>) ORDER BY (<order_parameter>); CREATE TABLE test.trends (TS <data_type_parameter>, Region <data_type_parameter>, Metric <data_type_parameter>, TrendAvg <data_type_parameter>, Updated <data_type_parameter>) ENGINE = <engine_type_parameter> PARTITION BY (<partition_parameter>, toYYYYMM(TS)) PRIMARY KEY (<primary_key_parameter>) ORDER BY (<order_parameter>); SELECT TS, Region, Metric, QuantAvg, TrendAvg FROM (SELECT TS, Region, Metric, QuantAvg FROM test.quants WHERE Region = <where_value_parameter>) ALL <join_operator_replace> (SELECT TS, Region, Metric, TrendAvg FROM test.trends WHERE Region = <where_value_parameter>) USING (TS, Region, Metric);",
    "applied_rules": [
        "<data_type_parameter>",
        "<engine_type_parameter>",
        "<partition_parameter>",
        "<primary_key_parameter>",
        "<order_parameter>",
        "<where_value_parameter>",
        "<join_operator_replace>"
    ],
    "Affected Elements": "LowCardinality(String) data type, JOIN clause with USING",
    "Root Cause Analysis": "The issue arises from the hashed values of LowCardinality(String) being inconsistent across different tables, leading to unexpected empty results in JOIN operations."
}