{
    "pattern": "CREATE TABLE github_events (file_time <data_type_parameter>, event_type <enum_type_parameter>, actor_login <low_cardinality_type_parameter>, repo_name <low_cardinality_type_parameter>, created_at <data_type_parameter>, updated_at <data_type_parameter>, action <enum_type_parameter>, comment_id <data_type_parameter>, body <data_type_parameter>, path <data_type_parameter>, position <data_type_parameter>, line <data_type_parameter>, ref <low_cardinality_type_parameter>, ref_type <enum_type_parameter>, creator_user_login <low_cardinality_type_parameter>, number <data_type_parameter>, title <data_type_parameter>, labels <array_type_parameter>, state <enum_type_parameter>, locked <data_type_parameter>, assignee <low_cardinality_type_parameter>, assignees <array_type_parameter>, comments <data_type_parameter>, author_association <enum_type_parameter>, closed_at <data_type_parameter>, merged_at <data_type_parameter>, merge_commit_sha <data_type_parameter>, requested_reviewers <array_type_parameter>, requested_teams <array_type_parameter>, head_ref <low_cardinality_type_parameter>, head_sha <data_type_parameter>, base_ref <low_cardinality_type_parameter>, base_sha <data_type_parameter>, merged <data_type_parameter>, mergeable <data_type_parameter>, rebaseable <data_type_parameter>, mergeable_state <enum_type_parameter>, merged_by <low_cardinality_type_parameter>, review_comments <data_type_parameter>, maintainer_can_modify <data_type_parameter>, commits <data_type_parameter>, additions <data_type_parameter>, deletions <data_type_parameter>, changed_files <data_type_parameter>, diff_hunk <data_type_parameter>, original_position <data_type_parameter>, commit_id <data_type_parameter>, original_commit_id <data_type_parameter>, push_size <data_type_parameter>, push_distinct_size <data_type_parameter>, member_login <low_cardinality_type_parameter>, release_tag_name <data_type_parameter>, release_name <data_type_parameter>, review_state <enum_type_parameter>) ENGINE = <engine_parameter> ORDER BY (<order_by_parameter>); with top_repos as ( select repo_name from github_events where event_type <comparison_operator_replace> 'WatchEvent' and toDate(created_at) <date_function_parameter> today() - interval 1 day group by repo_name order by count() <order_by_replace> limit <limit_parameter> union distinct select repo_name from github_events where event_type <comparison_operator_replace> 'WatchEvent' and toMonday(created_at) <date_function_parameter> toMonday(today() - interval 1 week) group by repo_name order by count() <order_by_replace> limit <limit_parameter> union distinct select repo_name from github_events where event_type <comparison_operator_replace> 'WatchEvent' and toStartOfMonth(created_at) <date_function_parameter> toStartOfMonth(today()) - interval 1 month group by repo_name order by count() <order_by_replace> limit <limit_parameter> union distinct select repo_name from github_events where event_type <comparison_operator_replace> 'WatchEvent' and toYear(created_at) <date_function_parameter> toYear(today()) - 1 group by repo_name order by count() <order_by_replace> limit <limit_parameter> ), last_day as ( select repo_name, count() <aggregate_function_parameter> count_last_day, rowNumberInAllBlocks() <function_parameter> position_last_day from github_events where repo_name in (select repo_name from top_repos) and toDate(created_at) <date_function_parameter> today() - interval 1 day group by repo_name order by count_last_day <order_by_replace> ), last_week as ( select repo_name, count() <aggregate_function_parameter> count_last_week, rowNumberInAllBlocks() <function_parameter> position_last_week from github_events where repo_name in (select repo_name from top_repos) and toMonday(created_at) <date_function_parameter> toMonday(today() - interval 1 week) group by repo_name order by count_last_week <order_by_replace> ), last_month as ( select repo_name, count() <aggregate_function_parameter> count_last_month, rowNumberInAllBlocks() <function_parameter> position_last_month from github_events where repo_name in (select repo_name from top_repos) and toStartOfMonth(created_at) <date_function_parameter> toStartOfMonth(today()) - interval 1 month group by repo_name order by count_last_month <order_by_replace> ) select d.repo_name, columns(count_last_day, count_last_week, count_last_month) from last_day d join last_week w on d.repo_name = w.repo_name join last_month m on d.repo_name = m.repo_name FORMAT <format_parameter>;",
    "applied_rules": [
        "<data_type_parameter>",
        "<enum_type_parameter>",
        "<low_cardinality_type_parameter>",
        "<array_type_parameter>",
        "<engine_parameter>",
        "<order_by_replace>",
        "<limit_parameter>",
        "<comparison_operator_replace>",
        "<date_function_parameter>",
        "<aggregate_function_parameter>",
        "<function_parameter>",
        "<format_parameter>"
    ],
    "Affected Elements": "JOIN, COLUMNS",
    "Root Cause Analysis": "Null pointer dereference is likely due to incorrect handling of null values in the JOIN or aggregate functions."
}