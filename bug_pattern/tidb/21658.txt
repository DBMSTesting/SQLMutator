{
    "pattern": "CREATE TABLE t (id INT <constraint_type_parameter>, v INT); INSERT INTO t <dml_values_parameter>; SET TRANSACTION ISOLATION LEVEL <isolation_level_parameter>; BEGIN <transaction_type_parameter>; SELECT id, v FROM t WHERE id <comparison_operator_parameter> <comparison_operator_parameter> <comparison_operator_parameter> ORDER BY id; BEGIN <transaction_type_parameter>; UPDATE t SET v = v <arithmetic_operator_replace> 1 WHERE id = 0; UPDATE t SET v = v <arithmetic_operator_replace> 1 WHERE id <comparison_operator_parameter> 0; COMMIT; SELECT id, v FROM t WHERE id <comparison_operator_parameter> <comparison_operator_parameter> <comparison_operator_parameter> ORDER BY id;",
    "applied_rules": [
        "<constraint_type_parameter>",
        "<dml_values_parameter>",
        "<isolation_level_parameter>",
        "<transaction_type_parameter>",
        "<comparison_operator_parameter>",
        "<arithmetic_operator_replace>"
    ],
    "Affected Elements": "transaction isolation level, pessimistic transaction, batch point get, commit",
    "Root Cause Analysis": "The issue arises due to transaction locks not being resolved correctly when a failpoint is triggered, leading to session blocking and timeout errors."
}