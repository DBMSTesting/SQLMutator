{
    "pattern": "CREATE TABLE `test1` (`id` bigint(20) NOT NULL <constraint_type_parameter>, `val` bigint(20) DEFAULT NULL, <constraint_enforce_replace>); CREATE TABLE `test2` (`id` bigint(20) NOT NULL <constraint_type_parameter>, `test1Id` bigint(20) DEFAULT NULL, `test1Val` bigint(20) DEFAULT NULL, <constraint_enforce_replace>); INSERT INTO test1(val) <dml_values_parameter>; INSERT INTO test2(test1Id, test1Val) <dml_values_parameter>; SELECT test1.id AS test1Id, test1.val AS test1Val, test2.test1Id AS test1IdInTest2 FROM test1 <join_operator_replace> test2 ON test1.val <comparison_operator_replace> test2.test1Val WHERE test1.id <comparison_operator_replace> test2.test1Id;",
    "applied_rules": [
        "<constraint_type_parameter>",
        "<constraint_enforce_replace>",
        "<dml_values_parameter>",
        "<join_operator_replace>",
        "<comparison_operator_replace>"
    ],
    "Affected Elements": "AUTO_INCREMENT, INSERT, SELECT, JOIN",
    "Root Cause Analysis": "The issue arises due to TiDB not guaranteeing sequential allocation of auto-increment IDs, leading to mismatched generated keys in concurrent batch inserts."
}