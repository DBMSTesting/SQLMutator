{
    "pattern": "SET @@tidb_enable_clustered_index = <dml_values_parameter>; CREATE TABLE t1(a INT <constraint_type_parameter>, b INT <constraint_type_parameter>, c INT <constraint_type_parameter>, <constraint_enforce_replace>); INSERT INTO t1 <dml_values_parameter>; PREPARE stmt2 FROM 'SELECT <select_parameter> FROM t1 WHERE t1.a <comparison_operator_replace> ? AND t1.b <comparison_operator_replace> ?'; SET @v1 = <dml_values_parameter>; SET @v2 = <dml_values_parameter>; EXECUTE stmt2 USING @v1, @v2; SET @v1 = <dml_values_parameter>; SET @v2 = <dml_values_parameter>; EXECUTE stmt2 USING @v1, @v2;",
    "applied_rules": [
        "<dml_values_parameter>",
        "<constraint_type_parameter>",
        "<constraint_enforce_replace>",
        "<select_parameter>",
        "<comparison_operator_replace>"
    ],
    "Affected Elements": "prepared statements, parameterized queries, clustered index usage",
    "Root Cause Analysis": "The bug arises from the handling of parameter types in clustered index scenarios, where the encoding of index values does not account for type casting, leading to incorrect results."
}