{
    "pattern": "CREATE TABLE `t9ded2b9e` (<col_parameter> double NOT NULL, <col_parameter> bigint unsigned NOT NULL, <col_parameter> json DEFAULT NULL, <col_parameter> tinyint(1) DEFAULT '0', <col_parameter> varbinary(449) DEFAULT '0D1MO', KEY `idx_1` (<col_parameter>,<col_parameter>), PRIMARY KEY (<col_parameter>,<col_parameter>) /*T![clustered_index] NONCLUSTERED */, UNIQUE KEY `idx_3` (<col_parameter>) /*T![global_index] GLOBAL */) ENGINE=<engine_parameter> DEFAULT CHARSET=<charset_parameter> COLLATE=<collate_parameter> PARTITION BY RANGE (<col_parameter>) (PARTITION `p0` VALUES LESS THAN (<partition_value_parameter>), PARTITION `p1` VALUES LESS THAN (<partition_value_parameter>)); INSERT INTO `t9ded2b9e` VALUES (<dml_values_parameter>,<dml_values_parameter>); CREATE TABLE `tl004c2d48` (<col_parameter> datetime DEFAULT <datetime_value_parameter>, UNIQUE KEY `idx_4` (<col_parameter>)) ENGINE=<engine_parameter> DEFAULT CHARSET=<charset_parameter> COLLATE=<collate_parameter>; INSERT INTO `tl004c2d48` VALUES (<dml_values_parameter>), (<dml_values_parameter>); SELECT /*+ read_from_storage(<storage_parameter>) */ /*+ use_index_merge( <table_parameter>,<index_parameter> ) */ /*+ inl_join( <table_parameter> ) */ max( <table_parameter>.<col_parameter> ) as <alias_parameter> , max( distinct  <table_parameter>.<col_parameter> ) as <alias_parameter> , bit_length( <table_parameter>.<col_parameter> ) as <alias_parameter> , count( distinct  <table_parameter>.<col_parameter> ) as <alias_parameter> , bit_and( <table_parameter>.<col_parameter> ) as <alias_parameter> FROM <table_parameter> JOIN ( SELECT /*+ read_from_storage(<storage_parameter>) */   elt(<number_parameter>, <table_parameter>.<col_parameter> , <table_parameter>.<col_parameter> ) as <alias_parameter> , <table_parameter>.<col_parameter> as <alias_parameter> , rpad( <table_parameter>.<col_parameter> , <number_parameter> , <table_parameter>.<col_parameter> ) as <alias_parameter> FROM <table_parameter>  ORDER BY <alias_parameter>,<alias_parameter>,<alias_parameter> ) <table_alias> ON <table_parameter>.<col_parameter> = <table_alias>.<col_parameter>  GROUP BY <table_parameter>.<col_parameter>  HAVING <table_parameter>.<col_parameter> <= <datetime_value_parameter>;",
    "applied_rules": [
        "<col_parameter>",
        "<engine_parameter>",
        "<charset_parameter>",
        "<collate_parameter>",
        "<partition_value_parameter>",
        "<dml_values_parameter>",
        "<storage_parameter>",
        "<table_parameter>",
        "<index_parameter>",
        "<alias_parameter>",
        "<number_parameter>",
        "<table_alias>",
        "<datetime_value_parameter>"
    ],
    "Affected Elements": "SELECT, JOIN, GROUP BY, HAVING",
    "Root Cause Analysis": "在执行查询时，可能由于数据量过大或某些字段的长度超出限制，导致出现 std::length_error 异常。"
}