{
    "pattern": "DROP TABLE IF EXISTS person; CREATE TABLE person (id INT, name VARCHAR(32), billing_address_id INT, shipping_address_id INT, room_id INT); DROP TABLE IF EXISTS address; CREATE TABLE address (id INT, state VARCHAR(32), city VARCHAR(32), phone1_id INT, phone2_id INT, addr_type INT, caution VARCHAR(64)); INSERT INTO person (id, name, billing_address_id, shipping_address_id, room_id) VALUES (<dml_values_parameter>); INSERT INTO person (id, name, billing_address_id, shipping_address_id, room_id) VALUES (<dml_values_parameter>); INSERT INTO person (id, name, billing_address_id, shipping_address_id, room_id) VALUES (<dml_values_parameter>); INSERT INTO address (id, state, city, phone1_id, phone2_id, addr_type, caution) VALUES (<dml_values_parameter>); INSERT INTO address (id, state, city, phone1_id, phone2_id, addr_type, caution) VALUES (<dml_values_parameter>); INSERT INTO address (id, state, city, phone1_id, phone2_id, addr_type, caution) VALUES (<dml_values_parameter>); INSERT INTO address (id, state, city, phone1_id, phone2_id, addr_type, caution) VALUES (<dml_values_parameter>); SELECT person.id AS person_id, person.name AS person_name, billing_address.id AS b_id, billing_address.state AS b_state, billing_address.city AS b_city, billing_address.addr_type AS b_addr_type, billing_address.caution AS b_caution, CASE WHEN billing_address.phone1_id IS NULL AND billing_address.phone2_id IS NULL THEN FALSE ELSE TRUE END AS b_has_phone, shipping_address.id AS s_id, shipping_address.state AS s_state, shipping_address.city AS s_city, shipping_address.addr_type AS s_addr_type, shipping_address.caution AS s_caution, CASE WHEN shipping_address.phone1_id IS NULL AND shipping_address.phone2_id IS NULL THEN FALSE ELSE TRUE END AS s_has_phone, pet.id AS pet_id, pet.name AS pet_name, 1 FROM person <join_operator_replace> address billing_address ON billing_address.id = person.billing_address_id <join_operator_replace> address shipping_address ON shipping_address.id = person.shipping_address_id <join_operator_replace> pet ON pet.owner_id = person.id ORDER BY person.id, pet.id;",
    "applied_rules": [
        "<dml_values_parameter>",
        "<join_operator_replace>"
    ],
    "Affected Elements": "left join, case, null checks",
    "Root Cause Analysis": "The left join is causing duplicate rows in the result set due to the one-to-many relationship between person and pet."
}