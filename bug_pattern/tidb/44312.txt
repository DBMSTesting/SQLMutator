{
    "pattern": "CREATE TABLE t (id INT <constraint_type_parameter>, store_id INT <constraint_type_parameter>) PARTITION BY RANGE (store_id) (PARTITION p0 VALUES LESS THAN (<dml_values_parameter>), PARTITION p1 VALUES LESS THAN (<dml_values_parameter>), PARTITION p2 VALUES LESS THAN (<dml_values_parameter>), PARTITION p3 VALUES LESS THAN (<dml_values_parameter>)); CREATE TABLE t1 (id INT <constraint_type_parameter>, store_id INT <constraint_type_parameter>); INSERT INTO t <dml_values_parameter>; INSERT INTO t <dml_values_parameter>; INSERT INTO t1 <dml_values_parameter>; ALTER TABLE t EXCHANGE PARTITION p3 WITH TABLE t1; ALTER TABLE t ADD INDEX idx(id); ANALYZE TABLE t; SELECT <select_parameter>, _tidb_rowid FROM t USE INDEX(idx) ORDER BY id LIMIT <dml_values_parameter>;",
    "applied_rules": [
        "<constraint_type_parameter>",
        "<dml_values_parameter>",
        "<select_parameter>"
    ],
    "Affected Elements": "SELECT statement, ORDER BY clause, USE INDEX hint",
    "Root Cause Analysis": "The bug is likely due to incorrect handling of index order after partition exchange, causing unexpected results in the ordered output."
}