{
    "pattern": "DROP TABLE IF EXISTS t1, t2; CREATE TABLE t1 (c_datetime <datetime_type_parameter>, c1 <int_type_parameter>, c2 <int_type_parameter>, PRIMARY KEY (c_datetime), KEY(c1), KEY(c2)) PARTITION BY RANGE (TO_DAYS(c_datetime)) ( PARTITION p0 VALUES LESS THAN (TO_DAYS('2020-02-01')), PARTITION p1 VALUES LESS THAN (TO_DAYS('2020-04-01')), PARTITION p2 VALUES LESS THAN (TO_DAYS('2020-06-01')), PARTITION p3 VALUES LESS THAN MAXVALUE); CREATE TABLE t2 (c_datetime <datetime_type_parameter>, UNIQUE KEY(c_datetime)); INSERT INTO t1 VALUES (<dml_values_parameter>), (<dml_values_parameter>), (<dml_values_parameter>); INSERT INTO t2 VALUES (<dml_values_parameter>), (<dml_values_parameter>), (<dml_values_parameter>); SET GLOBAL tidb_txn_mode = <string_value_parameter>; BEGIN; SELECT /*+ use_index_merge(t1) */ <select_parameter> FROM t1 <join_operator_replace> t2 ON t1.c_datetime <comparison_operator_parameter> t2.c_datetime WHERE t1.c1 < <int_value_parameter> <logical_operator_replace> t1.c2 < <int_value_parameter> FOR UPDATE; BEGIN; UPDATE t1 SET c_datetime = <datetime_value_parameter> WHERE c1 = <int_value_parameter>;",
    "applied_rules": [
        "<datetime_type_parameter>",
        "<int_type_parameter>",
        "<dml_values_parameter>",
        "<string_value_parameter>",
        "<select_parameter>",
        "<join_operator_replace>",
        "<comparison_operator_parameter>",
        "<int_value_parameter>",
        "<logical_operator_replace>",
        "<datetime_value_parameter>"
    ],
    "Affected Elements": "SELECT, UPDATE, JOIN, FOR UPDATE",
    "Root Cause Analysis": "Pessimistic locking is not functioning correctly on partitioned tables when using index merge, leading to unexpected behavior where transactions are not blocked as expected."
}