{
    "pattern": "DROP TABLE <object_dependency_replace>; CREATE TABLE users (id INTEGER <constraint_type_parameter>, name VARCHAR(30) <constraint_type_parameter>, some_update VARCHAR(30), PRIMARY KEY (id)) ENGINE=<object_dependency_replace>; CREATE TABLE foobar (id INTEGER <constraint_type_parameter>, user_id INTEGER, data VARCHAR(30), some_update VARCHAR(30), PRIMARY KEY (id), FOREIGN KEY(user_id) REFERENCES users (id)) ENGINE=<object_dependency_replace>; CREATE TABLE addresses (id INTEGER <constraint_type_parameter>, user_id INTEGER, email_address VARCHAR(50) <constraint_type_parameter>, PRIMARY KEY (id), FOREIGN KEY(user_id) REFERENCES users (id)) ENGINE=<object_dependency_replace>; INSERT INTO users <dml_values_parameter>; INSERT INTO addresses <dml_values_parameter>; INSERT INTO foobar <dml_values_parameter>; UPDATE addresses, users SET users.name=<dml_values_parameter>, users.some_update=<dml_values_parameter>, addresses.email_address=users.name WHERE users.id = addresses.user_id AND users.name = <dml_condition_replace>; SELECT addresses.id, addresses.user_id, addresses.email_address FROM addresses ORDER BY addresses.id;",
    "applied_rules": [
        "<object_dependency_replace>",
        "<constraint_type_parameter>",
        "<dml_values_parameter>",
        "<dml_condition_replace>"
    ],
    "Affected Elements": "UPDATE statement with joins",
    "Root Cause Analysis": "The update query modifies the data in the same transaction while simultaneously attempting to read from it, leading to incorrect results due to the non-deterministic nature of the updates."
}