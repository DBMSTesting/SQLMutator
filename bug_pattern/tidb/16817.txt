{
    "pattern": "DROP TABLE IF EXISTS t1; CREATE TABLE t1 (a <numeric_parameter>, b <numeric_parameter>, c <numeric_parameter> DEFAULT NULL, <constraint_type_parameter> (a, b)); INSERT INTO t1(a, b) VALUES (<dml_values_parameter>); INSERT INTO t1(a, b) VALUES (<dml_values_parameter>); INSERT INTO t1(a, b) VALUES (<dml_values_parameter>); INSERT INTO t1(a, b) VALUES (<dml_values_parameter>); INSERT INTO t1(a, b) VALUES (<dml_values_parameter>); INSERT INTO t1(a, b) VALUES (<dml_values_parameter>); DROP TABLE IF EXISTS t2; CREATE TABLE t2 (a <numeric_parameter>, b <numeric_parameter> DEFAULT NULL, c <numeric_parameter> DEFAULT NULL, <constraint_type_parameter> KEY idx_a (a)); INSERT INTO t2(a, b) VALUES (<dml_values_parameter>); INSERT INTO t2(a, b) VALUES (<dml_values_parameter>); INSERT INTO t2(a, b) VALUES (<dml_values_parameter>); SET @a = <numeric_parameter>; PREPARE stmt FROM 'SELECT <select_parameter> FROM t1, t2 WHERE t1.a <comparison_operator_replace> t2.a AND t2.a <comparison_operator_parameter> ? AND t2.b <comparison_operator_replace> <numeric_parameter>'; EXECUTE stmt USING @a;",
    "applied_rules": [
        "<numeric_parameter>",
        "<constraint_type_parameter>",
        "<dml_values_parameter>",
        "<select_parameter>",
        "<comparison_operator_replace>"
    ],
    "Affected Elements": "SELECT, PREPARE, EXECUTE, JOIN, SET",
    "Root Cause Analysis": "The bug seems to stem from an invalid memory address or nil pointer dereference when executing a point get under index merge join, likely due to improper handling of prepared statements or the execution context."
}