{
    "pattern": "USE <use_parameter>; DROP TABLE IF EXISTS <drop_parameter>, <drop_parameter>; CREATE TABLE <create_parameter> (a INT, b TINYINT, <constraint_type_parameter> (a)) <partition_parameter> (PARTITION <partition_parameter> VALUES LESS THAN (<partition_value_parameter>), PARTITION <partition_parameter> VALUES LESS THAN (<partition_value_parameter>), PARTITION <partition_parameter> VALUES LESS THAN (<partition_value_parameter>), PARTITION <partition_parameter> VALUES LESS THAN (<partition_value_parameter>), PARTITION <partition_parameter> VALUES LESS THAN MAXVALUE); INSERT INTO <insert_parameter> VALUES (<dml_values_parameter>); CREATE TABLE <create_parameter> (a INT, b MEDIUMINT, <constraint_type_parameter> (a)); INSERT INTO <insert_parameter> VALUES (<dml_values_parameter>); SET <set_parameter>=<set_value_parameter>; SELECT <select_parameter> FROM <select_parameter> WHERE <where_parameter> <> ALL (SELECT <select_parameter> FROM <select_parameter> PARTITION (<partition_parameter>)) ORDER BY <order_parameter>; SET <set_parameter>=<set_value_parameter>; SELECT <select_parameter> FROM <select_parameter> WHERE <where_parameter> <> ALL (SELECT <select_parameter> FROM <select_parameter> PARTITION (<partition_parameter>)) ORDER BY <order_parameter>; ",
    "applied_rules": [
        "<use_parameter>",
        "<drop_parameter>",
        "<create_parameter>",
        "<constraint_type_parameter>",
        "<partition_parameter>",
        "<partition_value_parameter>",
        "<insert_parameter>",
        "<dml_values_parameter>",
        "<set_parameter>",
        "<set_value_parameter>",
        "<select_parameter>",
        "<where_parameter>",
        "<order_parameter>"
    ],
    "Affected Elements": "SELECT, ALL, PARTITION",
    "Root Cause Analysis": "The issue arises when using the ALL operator with a subquery that references a specific partition, leading to inconsistent results due to partition pruning logic in TiDB."
}