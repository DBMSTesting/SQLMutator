{
    "pattern": "CREATE TABLE `test` (<id_parameter> <int_parameter> DEFAULT NULL, <name_parameter> <varchar_parameter> DEFAULT NULL, <key_parameter> `idx_id` (<id_parameter>)); INSERT INTO test <dml_values_parameter>; SPLIT TABLE test INDEX <index_parameter> BETWEEN (<between_parameter>) AND (<between_parameter>) REGIONS <regions_parameter>; EXPLAIN ANALYZE SELECT <select_parameter> FROM test USE INDEX(<index_parameter>) WHERE <where_parameter> <comparison_operator_replace> 0 ORDER BY <order_parameter> LIMIT <limit_parameter>;",
    "applied_rules": [
        "<id_parameter>",
        "<int_parameter>",
        "<name_parameter>",
        "<varchar_parameter>",
        "<key_parameter>",
        "<dml_values_parameter>",
        "<index_parameter>",
        "<between_parameter>",
        "<regions_parameter>",
        "<select_parameter>",
        "<where_parameter>",
        "<comparison_operator_replace>",
        "<order_parameter>",
        "<limit_parameter>"
    ],
    "Affected Elements": "LIMIT clause, EXPLAIN ANALYZE, USE INDEX, ORDER BY",
    "Root Cause Analysis": "The low execution efficiency when paging is enabled may stem from the handling of large LIMIT values in a partitioned environment, leading to suboptimal query plans."
}