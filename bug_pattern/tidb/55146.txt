{
    "pattern": "DROP TABLE IF EXISTS t1; DROP TABLE IF EXISTS t2; CREATE TABLE t1(id <constraint_type_parameter>, col1 <dml_values_parameter>, col2 <dml_values_parameter>, col3 <dml_values_parameter>); CREATE TABLE t2(id <constraint_type_parameter>, col1 <dml_values_parameter>, col2 <dml_values_parameter>, col3 <dml_values_parameter>); INSERT INTO t1 WITH RECURSIVE cte AS (SELECT 1 AS level, FLOOR(1 + (RAND() * 1000000)) id, SUBSTR(md5(rand()), 1, 10) col1, SUBSTR(md5(rand()), 1, 10) col2, SUBSTR(md5(rand()), 1, 10) col3 UNION ALL SELECT level + 1 level, FLOOR(1 + (RAND() * 1000000)) id, SUBSTR(md5(rand()), 1, 10) col1, SUBSTR(md5(rand()), 1, 10) col2, SUBSTR(md5(rand()), 1, 10) col3 FROM cte WHERE level < <dml_condition_replace>); SELECT level, col1, col2, col3 FROM cte; INSERT INTO t2 WITH RECURSIVE cte AS (SELECT 1 AS level, FLOOR(1 + (RAND() * 1000000)) id, SUBSTR(md5(rand()), 1, 10) col1, SUBSTR(md5(rand()), 1, 10) col2, SUBSTR(md5(rand()), 1, 10) col3 UNION ALL SELECT level + 1 level, FLOOR(1 + (RAND() * 1000000)) id, SUBSTR(md5(rand()), 1, 10) col1, SUBSTR(md5(rand()), 1, 10) col2, SUBSTR(md5(rand()), 1, 10) col3 FROM cte WHERE level < <dml_condition_replace>); SELECT level, col1, col2, col3 FROM cte; CREATE INDEX t1_col1 ON t1(col1, col2); CREATE INDEX t2_col1 ON t2(col1, col2); ANALYZE TABLE t1, t2; EXPLAIN ANALYZE SELECT t1.*, (SELECT col3 FROM t2 WHERE t1.col1 = t2.col1 ORDER BY col2 LIMIT 1) FROM t1 LIMIT <dml_values_parameter>; EXPLAIN ANALYZE SELECT /*+ ORDER_INDEX(t2, t2_col1) */ col3 FROM t2 WHERE 'AAA' = t2.col1 ORDER BY col2 LIMIT <dml_values_parameter>;",
    "applied_rules": [
        "<constraint_type_parameter>",
        "<dml_values_parameter>",
        "<dml_condition_replace>"
    ],
    "Affected Elements": "ORDER_INDEX hint, LIMIT clause, subquery",
    "Root Cause Analysis": "The scalar subquery does not utilize the index effectively, leading to an internal error when attempting to optimize the query plan."
}