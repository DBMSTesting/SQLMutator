{
    "pattern": "SET sql_mode = 'NO_ENGINE_SUBSTITUTION'; DROP TABLE t9; CREATE TABLE t9 (c1 <tinyint_parameter>, c2 <smallint_parameter>, c3 <mediumint_parameter>, c4 <int_parameter>, c5 <integer_parameter>, c6 <bigint_parameter>, c7 <float_parameter>, c8 <double_parameter>, c9 <double_precision_parameter>, c10 <real_parameter>, c12 <numeric_parameter>); INSERT INTO t9 (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c12) VALUES (<dml_values_parameter>); SELECT c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c12 FROM t9; DELETE FROM t9; INSERT INTO t9 (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c12) VALUES (<dml_values_parameter>); SELECT c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c12 FROM t9; DELETE FROM t9; INSERT INTO t9 (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c12) VALUES (<dml_values_parameter>); SELECT c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c12 FROM t9; DELETE FROM t9;",
    "applied_rules": [
        "<tinyint_parameter>",
        "<smallint_parameter>",
        "<mediumint_parameter>",
        "<int_parameter>",
        "<integer_parameter>",
        "<bigint_parameter>",
        "<float_parameter>",
        "<double_parameter>",
        "<double_precision_parameter>",
        "<real_parameter>",
        "<numeric_parameter>",
        "<dml_values_parameter>"
    ],
    "Affected Elements": "INSERT statements with large numeric values and negative boundary values",
    "Root Cause Analysis": "The issue arises from differences in how TiDB and MySQL handle data type conversions for extreme numeric values, leading to unexpected results."
}