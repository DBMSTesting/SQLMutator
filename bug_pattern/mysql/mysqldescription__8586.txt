{
    "pattern": "DROP TABLE IF EXISTS vs_server; CREATE TABLE vs_server (nGroupId INT <constraint_type_parameter>); INSERT INTO vs_server(nGroupId) <dml_values_parameter>; DROP PROCEDURE IF EXISTS test_proc; CREATE PROCEDURE test_proc (OUT nVal INT) BEGIN DROP TEMPORARY TABLE IF EXISTS tmp_table; CREATE TEMPORARY TABLE IF NOT EXISTS tmp_table (group_id INT <constraint_type_parameter>) ENGINE=<engine_parameter> DEFAULT CHARACTER SET <character_set_parameter> COLLATE <collate_parameter>; INSERT INTO tmp_table (group_id) <dml_values_parameter>; SET nVal = 0; IF (<exists_operator_parameter> (SELECT * FROM vs_server <join_operator_replace> tmp_table ON vs_server.nGroupId = tmp_table.group_id) THEN SET nVal = 1; END IF; DROP TEMPORARY TABLE IF EXISTS tmp_table; END; SET @arg = NULL; CALL test_proc(@arg); SELECT @arg; SET @arg = NULL; CALL test_proc(@arg); SELECT @arg;",
    "applied_rules": [
        "<constraint_type_parameter>",
        "<dml_values_parameter>",
        "<engine_parameter>",
        "<character_set_parameter>",
        "<collate_parameter>",
        "<exists_operator_parameter>",
        "<join_operator_replace>"
    ],
    "Affected Elements": "EXISTS, IF, TEMPORARY TABLE",
    "Root Cause Analysis": "The issue arises from the misuse of temporary tables and the EXISTS condition within the stored procedure, leading to inconsistent output for the OUT parameter."
}