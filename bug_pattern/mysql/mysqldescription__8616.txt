{
    "pattern": "DROP TABLE IF EXISTS a1; CREATE TABLE a1(task_id BIGINT UNSIGNED <constraint_type_parameter>, oper_id VARCHAR(64) <dml_values_parameter>, retention_time DOUBLE <dml_values_parameter>); INSERT INTO a1 <dml_values_parameter>; COMMIT; DROP TABLE IF EXISTS b1; CREATE TABLE b1(task_id BIGINT UNSIGNED <constraint_type_parameter>, consult_oper_id VARCHAR(64) <constraint_type_parameter>); INSERT INTO b1 <dml_values_parameter>; COMMIT; SELECT @row := IF(@task_id <comparison_operator_parameter> task_id, @row + 1, 1) AS num1, aa.*, @task_id := task_id FROM (SELECT task_id, num FROM (SELECT a.task_id, @r := @r + 1 AS num FROM (SELECT t.task_id, task.oper_id, task.retention_time FROM a1 AS task WHERE 1 = <where_parameter>) AS t <join_operator_replace> (SELECT task_id, consult_oper_id FROM b1 WHERE 1 = <where_parameter>) AS c ON t.task_id <comparison_operator_replace> c.task_id ORDER BY t.retention_time <order_by_parameter>) AS a, (SELECT @r := 0) AS b) AS gg ORDER BY task_id <order_by_parameter>, num <order_by_parameter> AS aa, (SELECT @row := 0) AS bb, (SELECT @task_id := 0) AS ccc LIMIT 0, <dml_values_parameter>;",
    "applied_rules": [
        "<constraint_type_parameter>",
        "<dml_values_parameter>",
        "<where_parameter>",
        "<comparison_operator_parameter>",
        "<join_operator_replace>",
        "<order_by_parameter>"
    ],
    "Affected Elements": "IF clause, variable assignment (@row, @task_id), nested SELECT statements, ORDER BY clause",
    "Root Cause Analysis": "The bug arises from the use of user-defined variables in a complex SQL query that leads to inconsistent result sets on subsequent executions."
}