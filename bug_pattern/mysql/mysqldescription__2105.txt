{
    "pattern": "SELECT <select_parameter>(); DROP TABLE IF EXISTS <drop_table_parameter>; CREATE TABLE <create_table_parameter> (id INT <constraint_type_parameter>, col1 INT <constraint_type_parameter>, col2 INT <constraint_type_parameter>, val VARCHAR(50) <constraint_type_parameter>, KEY <index_parameter> (col1, col2)) Engine=<engine_parameter> DEFAULT CHARSET=<charset_parameter>; INSERT INTO <insert_table_parameter> VALUES <dml_values_parameter>; ANALYZE TABLE <analyze_table_parameter>; EXPLAIN SELECT * FROM <explain_table_parameter> WHERE <where_parameter>; EXPLAIN SELECT * FROM <explain_table_parameter> WHERE col1 = (<subquery_parameter>); EXPLAIN SELECT * FROM <explain_table_parameter> WHERE ROW(col1, col2) = (<row_parameter>); EXPLAIN SELECT * FROM <explain_table_parameter> WHERE ROW(col1, col2) = (<subquery_row_parameter>); EXPLAIN SELECT * FROM <explain_table_parameter> FORCE INDEX (<index_parameter>) WHERE ROW(col1, col2) = (<subquery_row_parameter>);",
    "applied_rules": [
        "<select_parameter>",
        "<drop_table_parameter>",
        "<create_table_parameter>",
        "<constraint_type_parameter>",
        "<index_parameter>",
        "<engine_parameter>",
        "<charset_parameter>",
        "<insert_table_parameter>",
        "<dml_values_parameter>",
        "<analyze_table_parameter>",
        "<explain_table_parameter>",
        "<where_parameter>",
        "<subquery_parameter>",
        "<row_parameter>",
        "<subquery_row_parameter>"
    ],
    "Affected Elements": "ROW, SELECT, FORCE INDEX",
    "Root Cause Analysis": "The optimizer fails to utilize a composite index for a ROW condition over two columns when the condition is based on a single-row subquery returning two fields."
}