{
    "pattern": "CREATE TABLE `t0` (`c0` <dml_values_parameter>); CREATE TABLE `t1` (`c0` <dml_values_parameter>, `c1` <dml_values_parameter>, UNIQUE KEY `c0` (`c0`)); INSERT INTO `t0` VALUES <dml_values_parameter>; INSERT INTO `t1` VALUES <dml_values_parameter>; SET optimizer_switch=<dml_values_parameter>; SELECT t1.c0 AS ref0 FROM t1 <join_operator_replace> t0 ON t1.c1 = t0.c0 WHERE (t1.c1 <in_operator_replace> (SELECT t0.c0 AS ref1 FROM t0 )) OR (t0.c0); SET optimizer_switch=<dml_values_parameter>; SELECT t1.c0 AS ref0 FROM t1 <join_operator_replace> t0 ON t1.c1 = t0.c0 WHERE (t1.c1 <in_operator_replace> (SELECT t0.c0 AS ref1 FROM t0 )) OR (t0.c0);",
    "applied_rules": [
        "<dml_values_parameter>",
        "<join_operator_replace>",
        "<in_operator_replace>"
    ],
    "Affected Elements": "LEFT OUTER JOIN, subquery in WHERE clause, optimizer_switch settings",
    "Root Cause Analysis": "The issue arises from the incorrect handling of subqueries in the optimizer when transforming the subquery to a derived table, leading to unexpected results."
}