{
    "pattern": "DROP TABLE IF EXISTS <object_dependency_replace>; CREATE TABLE <object_dependency_replace>(col1 INT, col2 VARCHAR(10), <constraint_type_parameter> (col1)); INSERT INTO <object_dependency_replace> VALUES (<dml_values_parameter>); COMMIT; CREATE INDEX <object_dependency_replace> ON <object_dependency_replace> (col2); DROP TABLE IF EXISTS <object_dependency_replace>; CREATE TABLE <object_dependency_replace>(i INT NOT NULL) ENGINE=<engine_type_parameter>; START TRANSACTION; SELECT <select_parameter> FROM <object_dependency_replace> WHERE <where_parameter> ORDER BY <order_by_parameter> LIMIT <limit_parameter> FOR UPDATE;",
    "applied_rules": [
        "<object_dependency_replace>",
        "<constraint_type_parameter>",
        "<dml_values_parameter>",
        "<engine_type_parameter>",
        "<select_parameter>",
        "<where_parameter>",
        "<order_by_parameter>",
        "<limit_parameter>"
    ],
    "Affected Elements": "SELECT, FOR UPDATE, LIMIT, ORDER BY, filesort",
    "Root Cause Analysis": "The use of complex ORDER BY clauses with LIMIT in conjunction with SELECT FOR UPDATE leads to excessive row locks due to the way InnoDB handles locking and sorting."
}