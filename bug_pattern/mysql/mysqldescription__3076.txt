{
    "pattern": "CREATE TABLE t1 (id INT <constraint_type_parameter>, t2_id INT <constraint_type_parameter>, n INT <constraint_type_parameter>, KEY(t2_id)) ENGINE=<object_dependency_replace>; CREATE TABLE t2 (id INT <constraint_type_parameter>, t3_id INT <constraint_type_parameter>, n INT <constraint_type_parameter>, KEY(t3_id)) ENGINE=<object_dependency_replace>; CREATE TABLE t3 (id INT <constraint_type_parameter>, n INT <constraint_type_parameter>) ENGINE=<object_dependency_replace>; INSERT INTO t3 VALUES(<dml_values_parameter>); INSERT INTO t3 VALUES(<dml_values_parameter>); ...; INSERT INTO t3 VALUES(<dml_values_parameter>); INSERT INTO t2 VALUES(<dml_values_parameter>, <dml_values_parameter>, <dml_values_parameter>); ...; INSERT INTO t2 VALUES(<dml_values_parameter>, <dml_values_parameter>, <dml_values_parameter>); INSERT INTO t1 VALUES(<dml_values_parameter>, <dml_values_parameter>, <dml_values_parameter>); ...; INSERT INTO t1 VALUES(<dml_values_parameter>, <dml_values_parameter>, <dml_values_parameter>); COMMIT; EXPLAIN SELECT * FROM t1, t2, t3 WHERE t1.t2_id = t2.id AND t2.t3_id = t3.id ORDER BY t1.id LIMIT <dml_condition_replace>; EXPLAIN SELECT * FROM t1 FORCE KEY(primary), t2, t3 WHERE t1.t2_id = t2.id AND t2.t3_id = t3.id ORDER BY t1.id LIMIT <dml_condition_replace>; ANALYZE TABLE t2; EXPLAIN SELECT * FROM t1, t2, t3 WHERE t1.t2_id = t2.id AND t2.t3_id = t3.id ORDER BY t1.id LIMIT <dml_condition_replace>; ALTER TABLE t2 ENGINE=<object_dependency_replace>; EXPLAIN SELECT * FROM t1, t2, t3 WHERE t1.t2_id = t2.id AND t2.t3_id = t3.id ORDER BY t1.id LIMIT <dml_condition_replace>; DROP TABLE t1, t2, t3;",
    "applied_rules": [
        "<constraint_type_parameter>",
        "<object_dependency_replace>",
        "<dml_values_parameter>",
        "<dml_condition_replace>"
    ],
    "Affected Elements": "ORDER BY clause, JOIN conditions, optimizer behavior",
    "Root Cause Analysis": "The MySQL optimizer is choosing an inefficient join order, causing temporary tables and file sorting rather than using the primary key for efficient access."
}