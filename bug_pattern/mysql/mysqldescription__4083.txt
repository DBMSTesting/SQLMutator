{
    "pattern": "DROP TABLE IF EXISTS t1; DROP TABLE IF EXISTS t1_hist; DROP TABLE IF EXISTS t1_trig; CREATE TABLE t1 (id INT <constraint_type_parameter> <dml_values_parameter>, updated_at DATETIME); CREATE TABLE t1_hist (id INT <constraint_type_parameter> <dml_values_parameter>, t1_id INT, updated_at DATETIME, KEY (t1_id)); CREATE TABLE t1_trig (id INT <constraint_type_parameter> <dml_values_parameter>); INSERT INTO t1 (updated_at) VALUES (<dml_values_parameter>); INSERT INTO t1_hist (t1_id, updated_at) SELECT id, updated_at FROM t1 WHERE id = <dml_condition_replace>; DROP TRIGGER IF EXISTS t1_trig_ins; DELIMITER // CREATE TRIGGER t1_trig_ins AFTER INSERT ON t1_trig FOR EACH ROW BEGIN INSERT INTO t1_hist (t1_id, updated_at) SELECT id, updated_at FROM t1 WHERE id = <dml_condition_replace>; END // DELIMITER ; SET SESSION tx_isolation = <dml_values_parameter>; BEGIN; UPDATE t1 SET updated_at = <dml_values_parameter> WHERE id = <dml_condition_replace>; SET SESSION tx_isolation = <dml_values_parameter>; BEGIN; UPDATE t1_hist SET updated_at = <dml_values_parameter> WHERE t1_id = <dml_condition_replace>; INSERT INTO t1_trig VALUES (<dml_values_parameter>); -- blocked; UPDATE t1_hist SET updated_at = <dml_values_parameter> WHERE t1_id = <dml_condition_replace>; -- deadlock",
    "applied_rules": [
        "<constraint_type_parameter>",
        "<dml_values_parameter>",
        "<dml_condition_replace>"
    ],
    "Affected Elements": "INSERT-SELECT statement, transaction isolation level, trigger",
    "Root Cause Analysis": "The INSERT-SELECT statement in the trigger is causing shared locks to be taken on the source table, leading to deadlocks even when the isolation level is set to READ COMMITTED."
}