{
    "pattern": "CREATE TABLE t1 (a INT <constraint_type_parameter>); INSERT INTO t1 VALUES (<dml_values_parameter>); INSERT INTO t1 SELECT * FROM t1; INSERT INTO t1 SELECT * FROM t1; INSERT INTO t1 SELECT * FROM t1; INSERT INTO t1 SELECT * FROM t1; INSERT INTO t1 SELECT * FROM t1; INSERT INTO t1 SELECT * FROM t1; INSERT INTO t1 SELECT * FROM t1; INSERT INTO t1 SELECT * FROM t1; INSERT INTO t1 SELECT * FROM t1; INSERT INTO t1 SELECT * FROM t1; INSERT INTO t1 SELECT * FROM t1; INSERT INTO t1 SELECT * FROM t1; INSERT INTO t1 SELECT * FROM t1; INSERT INTO t1 SELECT * FROM t1; INSERT INTO t1 SELECT * FROM t1; INSERT INTO t1 SELECT * FROM t1; INSERT INTO t1 VALUES (<dml_values_parameter>); CREATE TABLE t2 LIKE t1; INSERT INTO t2 SELECT IF(t1.a IS NULL, <dml_values_parameter>, t1.a) FROM t1; CREATE TABLE t3 (a INT, b INT, <object_dependency_replace>); INSERT INTO t3 VALUES (<dml_values_parameter>); SELECT SUM(t3.b) FROM t1 <join_operator_replace> t3 ON t3.a = t1.a AND t1.a <comparison_operator_replace> NULL; SELECT SUM(t3.b) FROM t2 <join_operator_replace> t3 ON t3.a = t2.a AND t2.a <comparison_operator_replace> 10;",
    "applied_rules": [
        "<constraint_type_parameter>",
        "<dml_values_parameter>",
        "<object_dependency_replace>",
        "<join_operator_replace>",
        "<comparison_operator_replace>"
    ],
    "Affected Elements": "LEFT JOIN, SUM, IF",
    "Root Cause Analysis": "The performance issue arises due to the way the SQL optimizer handles the outer join on the tables with NULL values and the condition on t2.a, leading to inefficient execution plans."
}