{
    "pattern": "CREATE TABLE `t1` ( `id` int(11) <constraint_enforce_replace> AUTO_INCREMENT , `c1` int(11) <constraint_enforce_replace> DEFAULT <dml_values_parameter>, `c2` int(11) <constraint_enforce_replace> DEFAULT <dml_values_parameter>, PRIMARY KEY (`id`), KEY `idx_c1` (`c1`) ) ENGINE=<object_dependency_replace>; CREATE TABLE `t2` ( `id` int(11) <constraint_enforce_replace> AUTO_INCREMENT , `c1` int(11) <constraint_enforce_replace> DEFAULT <dml_values_parameter>, `c2` int(11) <constraint_enforce_replace> DEFAULT <dml_values_parameter>, PRIMARY KEY (`id`), KEY `idx_c1` (`c1`) ) ENGINE=<object_dependency_replace>; INSERT INTO t1 VALUES <dml_values_parameter>; INSERT INTO t2 VALUES <dml_values_parameter>; INSERT INTO t1 (c1,c2) SELECT FLOOR( <numeric_function_parameter> + RAND( ) * <numeric_function_parameter> ),FLOOR( <numeric_function_parameter> + RAND( ) * <numeric_function_parameter> ) FROM t1; INSERT INTO t2 (c1,c2) SELECT FLOOR( <numeric_function_parameter> + RAND( ) * <numeric_function_parameter> ),FLOOR( <numeric_function_parameter> + RAND( ) * <numeric_function_parameter> ) FROM t2; SELECT COUNT(*) FROM t1 <join_operator_replace> t2 ON t1.c2 <comparison_operator_parameter> t2.c2; CREATE INDEX idx_c2 ON t1(c2); CREATE INDEX idx_c2 ON t2(c2); SELECT COUNT(*) FROM t1 <join_operator_replace> t2 ON t1.c2 <comparison_operator_parameter> t2.c2; EXPLAIN FORMAT=<object_dependency_replace> SELECT COUNT(*) FROM t1 IGNORE INDEX (idx_c2) <join_operator_replace> t2 IGNORE INDEX (idx_c2) ON t1.c2 <comparison_operator_parameter> t2.c2 WHERE t1.c2 <comparison_operator_parameter> t2.c2;",
    "applied_rules": [
        "<constraint_enforce_replace>",
        "<dml_values_parameter>",
        "<object_dependency_replace>",
        "<numeric_function_parameter>",
        "<join_operator_replace>",
        "<comparison_operator_parameter>"
    ],
    "Affected Elements": "IGNORE INDEX, JOIN, COUNT(*)",
    "Root Cause Analysis": "The optimizer does not allow forcing hash joins when indexes are available, which leads to performance issues compared to hash joins."
}