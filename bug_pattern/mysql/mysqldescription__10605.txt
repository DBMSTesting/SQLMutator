{
    "pattern": "CREATE TABLE `mvi` ( `id` bigint <constraint_enforce_replace>, `f1` int <constraint_enforce_replace>, `f2` int <constraint_enforce_replace>, `f3` int <constraint_enforce_replace>, `f4` int <constraint_enforce_replace>, `f5` int <constraint_enforce_replace>, `j` json <constraint_enforce_replace>, PRIMARY KEY (`id`), KEY `ix1` (`f1`,`f3`,(cast(`j` as <dml_values_parameter>)), KEY `ix3` (`f1`,`f4`,`f3`,(cast(`j` as <dml_values_parameter>)), KEY `ix5` (`f1`,`f4`,`f3`,`f5`,(cast(`j` as <dml_values_parameter>)); EXPLAIN ANALYZE SELECT <select_parameter> FROM mvi WHERE (<where_parameter> AND <where_parameter> AND <where_parameter> AND <where_parameter> IN (<dml_values_parameter>) AND <comparison_operator_parameter> MEMBER OF(j)); EXPLAIN ANALYZE SELECT <select_parameter> FROM mvi FORCE INDEX (ix5) WHERE (<where_parameter> AND <where_parameter> AND <where_parameter> AND <where_parameter> IN (<dml_values_parameter>) AND <comparison_operator_parameter> MEMBER OF(j)); ALTER TABLE mvi RENAME INDEX ix5 TO ix6; EXPLAIN ANALYZE SELECT <select_parameter> FROM mvi WHERE (<where_parameter> AND <where_parameter> AND <where_parameter> AND <where_parameter> IN (<dml_values_parameter>) AND <comparison_operator_parameter> MEMBER OF(j)); ALTER TABLE mvi RENAME INDEX ix1 TO ix2; EXPLAIN ANALYZE SELECT <select_parameter> FROM mvi WHERE (<where_parameter> AND <where_parameter> AND <where_parameter> AND <where_parameter> IN (<dml_values_parameter>) AND <comparison_operator_parameter> MEMBER OF(j));",
    "applied_rules": [
        "<constraint_enforce_replace>",
        "<dml_values_parameter>",
        "<select_parameter>",
        "<where_parameter>",
        "<comparison_operator_parameter>"
    ],
    "Affected Elements": "EXPLAIN, FORCE INDEX, MEMBER OF, json, ALTER TABLE",
    "Root Cause Analysis": "The optimizer incorrectly chooses to ignore the multi-valued index during range scans due to the presence of multiple composite keys, which can lead to performance issues."
}