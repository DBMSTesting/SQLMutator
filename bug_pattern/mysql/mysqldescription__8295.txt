{
    "pattern": "CREATE TABLE IF NOT EXISTS `ttable_1` ( `tt1_id` int(11) <constraint_type_parameter>, `tt1_param` int(11) <dml_values_parameter>, `tt1_name` varchar(255) <dml_values_parameter>, PRIMARY KEY (`tt1_id`) <constraint_enforce_replace> ) ENGINE=<object_dependency_replace> AUTO_INCREMENT=3 DEFAULT CHARSET=<dml_values_parameter>; INSERT INTO `ttable_1` <dml_values_parameter> VALUES (<dml_values_parameter>, <dml_values_parameter>, <dml_values_parameter>), (<dml_values_parameter>, <dml_values_parameter>, <dml_values_parameter>); CREATE TABLE IF NOT EXISTS `ttable_2` ( `tt2_id` int(10) <constraint_type_parameter>, `tt2_param` int(11) <dml_values_parameter>, `tt2_name` varchar(255) <dml_values_parameter> DEFAULT <dml_values_parameter>, `tt2_rm` tinyint(1) <dml_values_parameter> DEFAULT <dml_values_parameter>, PRIMARY KEY (`tt2_id`) <constraint_enforce_replace>, KEY `i1` (`tt2_param`) <object_dependency_replace>, KEY `i2` (`tt2_name`,`tt2_rm`,`tt2_param`) <object_dependency_replace> ) ENGINE=<object_dependency_replace> AUTO_INCREMENT=2 DEFAULT CHARSET=<dml_values_parameter>; INSERT INTO `ttable_2` <dml_values_parameter> VALUES (<dml_values_parameter>, <dml_values_parameter>, <dml_values_parameter>, <dml_values_parameter>); SELECT ( SELECT tt2_id FROM ttable_2 WHERE (tt1_name <comparison_operator_replace> tt2_name OR (tt2_rm <dml_values_parameter>)) AND (tt1_param <comparison_operator_replace> tt2_param OR tt2_param <comparison_operator_parameter>) ORDER BY tt2_id <order_by_parameter> LIMIT <limit_parameter> ) as id FROM ttable_1;",
    "applied_rules": [
        "<constraint_type_parameter>",
        "<dml_values_parameter>",
        "<constraint_enforce_replace>",
        "<object_dependency_replace>",
        "<comparison_operator_replace>",
        "<order_by_parameter>",
        "<limit_parameter>"
    ],
    "Affected Elements": "ORDER BY, subquery, LIMIT",
    "Root Cause Analysis": "The optimizer in versions 5.7.22 to 5.7.32 is incorrectly handling the combination of ORDER BY and the NULL handling in the subquery, leading to unexpected NULL results."
}