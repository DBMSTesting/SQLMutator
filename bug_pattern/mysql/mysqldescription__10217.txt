{
    "pattern": "CREATE TABLE IF NOT EXISTS t1(c0 TINYINT(<constraint_type_parameter>)); INSERT LOW_PRIORITY IGNORE INTO t1(c0) <dml_values_parameter>; SELECT f1 FROM (SELECT (LEAST(CURDATE(), (- (t1.c0)), (~ (t1.c0)), <exists_parameter>) AS f1 FROM t1) as t WHERE (f1) & (<numeric_function_parameter>); SELECT f1 FROM (SELECT (LEAST(CURDATE(), (- (t1.c0)), (~ (t1.c0)), <exists_parameter>) AS f1, ((LEAST(CURDATE(), (- (t1.c0)), (~ (t1.c0)), <exists_parameter>) & (<numeric_function_parameter>)) <comparison_operator_replace> TRUE AS flag FROM t1) as t WHERE flag=<dml_condition_replace>;",
    "applied_rules": [
        "<constraint_type_parameter>",
        "<dml_values_parameter>",
        "<exists_parameter>",
        "<numeric_function_parameter>",
        "<comparison_operator_replace>",
        "<dml_condition_replace>"
    ],
    "Affected Elements": "LOW_PRIORITY, EXISTS, LEAST, bitwise AND (&), IS TRUE",
    "Root Cause Analysis": "The use of LOW_PRIORITY in the DML statement alters the expected execution order, causing inconsistent results between the two queries."
}