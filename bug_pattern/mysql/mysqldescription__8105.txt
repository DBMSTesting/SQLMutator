{
    "pattern": "DROP TABLE IF EXISTS <object_name_parameter>; DROP TABLE IF EXISTS <object_name_parameter>; DROP TEMPORARY TABLE IF EXISTS <object_name_parameter>; CREATE TABLE <object_name_parameter> (<column_name_parameter> <data_type_parameter> NOT NULL); CREATE TABLE <object_name_parameter> (<column_name_parameter> <data_type_parameter> NOT NULL); DELIMITER $ CREATE TRIGGER <trigger_name_parameter> <trigger_timing_parameter> UPDATE ON <object_name_parameter> FOR EACH ROW BEGIN SET <variable_name_parameter> := <value_parameter>; DROP TEMPORARY TABLE IF EXISTS <object_name_parameter>; CREATE TEMPORARY TABLE <object_name_parameter> (<column_name_parameter> <data_type_parameter>, <column_name_parameter> <data_type_parameter>, <column_name_parameter> <data_type_parameter>, <column_name_parameter> <data_type_parameter>) ENGINE=<storage_engine_parameter>; DELETE FROM <object_name_parameter>; SET <variable_name_parameter> = NEW.<column_name_parameter>, <variable_name_parameter> = OLD.<column_name_parameter>; INSERT INTO <object_name_parameter> VALUES ('<value_parameter>', '<value_parameter>', <variable_name_parameter>, <variable_name_parameter>); CALL <procedure_name_parameter>; SELECT <column_name_parameter> INTO <variable_name_parameter> FROM <object_name_parameter>; SET NEW.<column_name_parameter> := <variable_name_parameter>; DELETE FROM <object_name_parameter>; END$ CREATE TRIGGER <trigger_name_parameter> <trigger_timing_parameter> UPDATE ON <object_name_parameter> FOR EACH ROW BEGIN INSERT INTO <object_name_parameter> VALUES ('<value_parameter>', '<value_parameter>', <variable_name_parameter>, <variable_name_parameter>); CALL <procedure_name_parameter>; DROP TEMPORARY TABLE <object_name_parameter>; END$ DROP FUNCTION IF EXISTS <function_name_parameter>; CREATE FUNCTION <function_name_parameter>(<parameter_name_parameter> <data_type_parameter>) RETURNS <data_type_parameter> DETERMINISTIC BEGIN SIGNAL SQLSTATE '45000' SET <message_parameter> = <parameter_name_parameter>; RETURN NULL; END$ DROP PROCEDURE IF EXISTS <procedure_name_parameter>$ CREATE PROCEDURE <procedure_name_parameter>() BEGIN SET <variable_name_parameter> = (SELECT <function_name_parameter>('<value_parameter>') FROM <object_name_parameter> WHERE <condition_parameter> AND <condition_parameter> AND <condition_parameter> AND <condition_parameter>); INSERT INTO <object_name_parameter> SELECT <value_parameter> FROM <object_name_parameter> WHERE (<condition_parameter> AND <condition_parameter> AND <condition_parameter> AND <condition_parameter>) OR (<condition_parameter> AND <condition_parameter> AND <condition_parameter>); END$ DELIMITER ; INSERT INTO <object_name_parameter> VALUES (<value_parameter>); UPDATE <object_name_parameter> SET <column_name_parameter> = <value_parameter>; UPDATE <object_name_parameter> SET <column_name_parameter> = <value_parameter>;",
    "applied_rules": [
        "<object_name_parameter>",
        "<column_name_parameter>",
        "<data_type_parameter>",
        "<variable_name_parameter>",
        "<value_parameter>",
        "<trigger_name_parameter>",
        "<trigger_timing_parameter>",
        "<procedure_name_parameter>",
        "<function_name_parameter>",
        "<message_parameter>",
        "<condition_parameter>",
        "<storage_engine_parameter>"
    ],
    "Affected Elements": "TEMPORARY TABLE, TRIGGERS, PROCEDURES, CONTINUE HANDLER",
    "Root Cause Analysis": "The use of TEMPORARY TABLES in triggers conflicts with the reuse of connections in a connection pool, leading to errors when attempting to access the same TEMPORARY TABLE across multiple trigger executions."
}