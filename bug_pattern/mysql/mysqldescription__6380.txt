{
    "pattern": "CREATE DATABASE <database_parameter>; USE <database_parameter>; DROP TABLE IF EXISTS <table_parameter>; CREATE TABLE IF NOT EXISTS <table_parameter> ( id INT <constraint_type_parameter>, username VARCHAR(500) DEFAULT '' NOT NULL, name VARCHAR(500) NULL ); INSERT INTO <table_parameter> (id, username, name) VALUES (<dml_values_parameter>); INSERT INTO <table_parameter> (id, username, name) VALUES (<dml_values_parameter>); INSERT INTO <table_parameter> (id, username, name) VALUES (<dml_values_parameter>); INSERT INTO <table_parameter> (id, username, name) VALUES (<dml_values_parameter>); INSERT INTO <table_parameter> (id, username, name) VALUES (<dml_values_parameter>); INSERT INTO <table_parameter> (id, username, name) VALUES (<dml_values_parameter>); INSERT INTO <table_parameter> (id, username, name) VALUES (<dml_values_parameter>); DROP TABLE IF EXISTS <table_parameter>; CREATE TABLE IF NOT EXISTS <table_parameter> ( id INT <constraint_type_parameter>, field_type VARCHAR(50) NOT NULL, properties VARCHAR(4000) NULL, strict_name VARCHAR(250) NULL ); INSERT INTO <table_parameter> (id, field_type, properties, strict_name) VALUES (<dml_values_parameter>); DROP TABLE IF EXISTS <table_parameter>; CREATE TABLE IF NOT EXISTS <table_parameter> ( id INT <constraint_type_parameter>, custom_fields_id INT NOT NULL, owner_id INT NOT NULL, value VARCHAR(4000) NULL ); DROP TABLE IF EXISTS <table_parameter>; CREATE TABLE IF NOT EXISTS <table_parameter> ( id INT <constraint_type_parameter>, strict_name VARCHAR(250) NULL ); INSERT INTO <table_parameter> (id, strict_name) VALUES (<dml_values_parameter>); DROP TABLE IF EXISTS <table_parameter>; CREATE TABLE IF NOT EXISTS <table_parameter> ( id INT <constraint_type_parameter>, type VARCHAR(50), member_id INT NOT NULL, team_definition_id INT NOT NULL ); INSERT INTO <table_parameter> (id, type, member_id, team_definition_id) VALUES (<dml_values_parameter>); INSERT INTO <table_parameter> (id, type, member_id, team_definition_id) VALUES (<dml_values_parameter>); INSERT INTO <table_parameter> (id, type, member_id, team_definition_id) VALUES (<dml_values_parameter>); CREATE OR REPLACE VIEW <view_parameter> AS SELECT td2a.id AS id, td2a.account_id AS account_id FROM ( SELECT td.id AS id, ( CASE te.type <case_parameter> 'account' THEN te.member_id <case_parameter> 'exclude_account' THEN te.member_id ELSE NULL END ) AS account_id, if((te.type = 'exclude_account'), 0, 1) AS include_in_result FROM <table_parameter> td JOIN <table_parameter> te ON te.team_definition_id = td.id ) td2a GROUP BY td2a.id, td2a.account_id HAVING (bit_and(td2a.include_in_result) <comparison_operator_parameter> 0); DROP FUNCTION IF EXISTS <function_parameter>; CREATE FUNCTION <function_parameter>(accountId INT, teamDefinitionId INT) RETURNS VARCHAR(4000) BEGIN IF exists( SELECT id FROM <view_parameter> td2a WHERE td2a.id = teamDefinitionId AND td2a.account_id = accountId ) THEN RETURN 'true'; ELSE RETURN 'false'; END IF ; END; CREATE OR REPLACE VIEW <view_parameter> AS SELECT a.id AS a_id, a.username AS username, cf.id AS id, cf.strict_name AS strict_name, cfv.owner_id AS value_owner_id, ( CASE cf.field_type <case_parameter> 'isMemberOfTeam' THEN IsMemberOfTeam(a.id, cf.properties->>'$.id') ELSE cfv.value END ) AS value FROM <table_parameter> a JOIN <table_parameter> cf LEFT JOIN <table_parameter> cfv ON cf.id = cfv.custom_fields_id AND a.id = cfv.owner_id; SELECT * FROM <table_parameter> a WHERE id <comparison_operator_replace> ( SELECT bv.a_id FROM <view_parameter> bv WHERE bv.strict_name <comparison_operator_replace> 'memberOfTeam' AND bv.value <comparison_operator_replace> 'true' );",
    "applied_rules": [
        "<database_parameter>",
        "<table_parameter>",
        "<constraint_type_parameter>",
        "<dml_values_parameter>",
        "<view_parameter>",
        "<function_parameter>",
        "<case_parameter>",
        "<comparison_operator_parameter>",
        "<comparison_operator_replace>"
    ],
    "Affected Elements": "Stored Function, View, CASE Statement",
    "Root Cause Analysis": "The stored function IsMemberOfTeam was not declared as DETERMINISTIC, leading to incorrect query execution and results due to optimizer behavior."
}