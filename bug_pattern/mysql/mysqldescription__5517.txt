{
    "pattern": "CREATE TABLE t1 (pk INTEGER <constraint_enforce_replace>, i1 INTEGER <constraint_enforce_replace>, c1 CHAR(200) <constraint_enforce_replace>, <constraint_type_parameter> (pk), <dml_values_parameter> (i1)); INSERT INTO t1 SELECT <dml_values_parameter>, <dml_values_parameter>, 'Text' FROM (SELECT 0 AS i1 UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a0, (SELECT 0 AS i1 UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a1, (SELECT 0 AS i1 UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a2, (SELECT 0 AS i1 UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a3, (SELECT 0 AS i1 UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a4, (SELECT 0 AS i1 UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a5; EXPLAIN SELECT * FROM t1 WHERE pk <comparison_operator_replace> 90000 AND i1 <comparison_operator_replace> 100; DROP TABLE t1;",
    "applied_rules": [
        "<constraint_enforce_replace>",
        "<constraint_type_parameter>",
        "<dml_values_parameter>",
        "<comparison_operator_replace>"
    ],
    "Affected Elements": "index_merge, primary index, secondary index, FORCE INDEX clause",
    "Root Cause Analysis": "The optimizer incorrectly determines that using index merge is more efficient than using a range scan on the secondary index when primary key columns are included in it."
}