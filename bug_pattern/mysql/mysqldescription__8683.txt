{
    "pattern": "CREATE TABLE t (c1 INT <constraint_type_parameter>, c2 INT <constraint_type_parameter>, c3 INT <constraint_type_parameter>, INDEX i_c2(c2 <index_parameter>)); INSERT INTO t <dml_values_parameter>; INSERT INTO t <dml_values_parameter>; INSERT INTO t <dml_values_parameter>; INSERT INTO t <dml_values_parameter>; INSERT INTO t <dml_values_parameter>; INSERT INTO t <dml_values_parameter>; INSERT INTO t <dml_values_parameter>; INSERT INTO t <dml_values_parameter>; INSERT INTO t <dml_values_parameter>; INSERT INTO t <dml_values_parameter>; ANALYZE TABLE t; EXPLAIN SELECT SUM(c1) <aggregation_function_parameter> FROM t WHERE c2 <comparison_operator_parameter> 1 <logical_operator_replace> c2 <comparison_operator_parameter> 3 GROUP BY c2 <order_parameter>; EXPLAIN SELECT SUM(c1) <aggregation_function_parameter> FROM t <index_usage_replace> WHERE c2 <comparison_operator_parameter> 1 <logical_operator_replace> c2 <comparison_operator_parameter> 3 GROUP BY c2 <order_parameter>; DROP TABLE t;",
    "applied_rules": [
        "<constraint_type_parameter>",
        "<dml_values_parameter>",
        "<aggregation_function_parameter>",
        "<comparison_operator_parameter>",
        "<logical_operator_replace>",
        "<order_parameter>",
        "<index_usage_replace>"
    ],
    "Affected Elements": "INDEX SCAN, range condition, FORCE INDEX",
    "Root Cause Analysis": "The optimizer incorrectly opts for an index scan instead of an index range scan despite the presence of range conditions, leading to poor query performance in scenarios where the buffer pool cannot load the entire table."
}