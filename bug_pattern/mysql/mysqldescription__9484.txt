{
    "pattern": "SET <variable_parameter> = <value_parameter>, <variable_parameter> = <value_parameter>; CREATE TABLE t2 ( created_at DATE <constraint_type_parameter>) PARTITION BY RANGE (<function_category_parameter>(created_at)) ( PARTITION <partition_parameter> VALUES LESS THAN (<value_parameter>), PARTITION <partition_parameter> VALUES LESS THAN <max_value_parameter> ); INSERT INTO t2 VALUES (<dml_values_parameter>), (<dml_values_parameter>); SET <variable_parameter> = <select_parameter> <from_parameter> t2 <where_parameter> created_at <in_operator_replace> (?, ?); PREPARE <stmt_parameter> FROM <variable_parameter>; EXECUTE <stmt_parameter> USING <variable_parameter>, <variable_parameter>; SELECT <found_rows_parameter>(); DEALLOCATE <stmt_parameter>;",
    "applied_rules": [
        "<variable_parameter>",
        "<value_parameter>",
        "<constraint_type_parameter>",
        "<function_category_parameter>",
        "<partition_parameter>",
        "<max_value_parameter>",
        "<dml_values_parameter>",
        "<select_parameter>",
        "<from_parameter>",
        "<where_parameter>",
        "<in_operator_replace>",
        "<stmt_parameter>",
        "<found_rows_parameter>"
    ],
    "Affected Elements": "FOUND_ROWS(), EXECUTE stmt USING",
    "Root Cause Analysis": "The bug appears to be related to the use of parameters in prepared statements against partitioned tables, leading to incorrect behavior of the FOUND_ROWS() function."
}