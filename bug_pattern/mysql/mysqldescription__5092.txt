{
    "pattern": "CREATE TABLE `entry` (`id` int(11) <constraint_type_parameter>, `group_id` int(11) <constraint_type_parameter>, `entry_val` smallint(6) <constraint_type_parameter>, `uneven_val` smallint(6) <constraint_type_parameter>, PRIMARY KEY (`id`), KEY `idx_entry_on_group_id` (`group_id`), KEY `idx_entry_on_uneven_val` (`uneven_val`)) ENGINE=InnoDB DEFAULT CHARSET=utf8; CREATE TABLE `entry_group` (`id` int(11) <constraint_type_parameter>, `category_id` smallint(6) <constraint_type_parameter>, `grp_val1` smallint(6) <constraint_type_parameter>, `grp_val2` smallint(6) <constraint_type_parameter>, PRIMARY KEY (`id`), KEY `idx_entry_group_on_category_id` (`category_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8; CREATE TABLE `category` (`id` smallint(6) <constraint_type_parameter>, `name` varchar(10) <constraint_type_parameter>, PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8; INSERT INTO `entry` (`group_id`, `entry_val`, `uneven_val`) VALUES <dml_values_parameter>; INSERT INTO `entry_group` (`category_id`) VALUES <dml_values_parameter>; SELECT e.id, g.id, c.id FROM entry e <join_operator_replace> entry_group g ON g.id = e.group_id <join_operator_replace> category c ON c.id = g.category_id WHERE e.uneven_val <comparison_operator_replace> 300 AND 10000;",
    "applied_rules": [
        "<constraint_type_parameter>",
        "<dml_values_parameter>",
        "<join_operator_replace>",
        "<comparison_operator_replace>"
    ],
    "Affected Elements": "INNER JOIN, WHERE clause, BETWEEN operator",
    "Root Cause Analysis": "The optimizer is not selecting the best access path due to uneven distribution of values in the indexed column, leading to inefficient query execution."
}