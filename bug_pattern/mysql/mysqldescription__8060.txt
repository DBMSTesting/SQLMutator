{
    "pattern": "CREATE TABLE `lineorderi` (`LO_OrderKey` bigint DEFAULT <dml_values_parameter>, `LO_LineNumber` tinyint DEFAULT <dml_values_parameter>, `LO_CustKey` int DEFAULT <dml_values_parameter>, `LO_PartKey` int DEFAULT <dml_values_parameter>, `LO_SuppKey` int DEFAULT <dml_values_parameter>, `LO_OrderDateKey` int DEFAULT <dml_values_parameter>, `LO_OrderPriority` varchar(15) DEFAULT <dml_values_parameter>, `LO_ShipPriority` char(1) DEFAULT <dml_values_parameter>, `LO_Quantity` tinyint DEFAULT <dml_values_parameter>, `LO_ExtendedPrice` int DEFAULT <dml_values_parameter>, `LO_OrdTotalPrice` int DEFAULT <dml_values_parameter>, `LO_Discount` int DEFAULT <dml_values_parameter>, `LO_Revenue` int DEFAULT <dml_values_parameter>, `LO_SupplyCost` int DEFAULT <dml_values_parameter>, `LO_Tax` tinyint DEFAULT <dml_values_parameter>, `LO_CommitDateKey` int DEFAULT <dml_values_parameter>, `LO_ShipMode` varchar(10) DEFAULT <dml_values_parameter>, KEY `LO_OrderDateKey` (`LO_OrderDateKey`), KEY `LO_OrderDateKey_2` (`LO_OrderDateKey`,`LO_Quantity`,`LO_Discount`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci; analyze table lineorderi; explain select sum(lo_extendedprice * lo_discount) as revenue from lineorderi where lo_orderdatekey between <dml_condition_replace> and <dml_condition_replace> and LO_discount between <dml_condition_replace> and <dml_condition_replace> and LO_quantity < <comparison_operator_replace>; select sum(lo_extendedprice * lo_discount) as revenue from lineorderi where lo_orderdatekey between <dml_condition_replace> and <dml_condition_replace> and LO_discount between <dml_condition_replace> and <dml_condition_replace> and LO_quantity < <comparison_operator_replace>; explain select sum(lo_extendedprice * lo_discount) as revenue from lineorderi force index (lo_orderdatekey_2) where lo_orderdatekey between <dml_condition_replace> and <dml_condition_replace> and LO_discount between <dml_condition_replace> and <dml_condition_replace> and LO_quantity < <comparison_operator_replace>; select sum(lo_extendedprice * lo_discount) as revenue from lineorderi force index (lo_orderdatekey_2) where lo_orderdatekey between <dml_condition_replace> and <dml_condition_replace> and LO_discount between <dml_condition_replace> and <dml_condition_replace> and LO_quantity < <comparison_operator_replace>; explain analyze select sum(lo_extendedprice * lo_discount) as revenue from lineorderi force index (lo_orderdatekey_2) where lo_orderdatekey between <dml_condition_replace> and <dml_condition_replace> and LO_discount between <dml_condition_replace> and <dml_condition_replace> and LO_quantity < <comparison_operator_replace>; explain analyze select sum(lo_extendedprice * lo_discount) as revenue from lineorderi where lo_orderdatekey between <dml_condition_replace> and <dml_condition_replace> and LO_discount between <dml_condition_replace> and <dml_condition_replace> and LO_quantity < <comparison_operator_replace>; ",
    "applied_rules": [
        "<dml_values_parameter>",
        "<dml_condition_replace>",
        "<comparison_operator_replace>"
    ],
    "Affected Elements": "INDEX, FORCE INDEX, WHERE, SUM",
    "Root Cause Analysis": "The optimizer is not accurately estimating the number of rows that will be filtered by the conditions applied to the index, leading to suboptimal query performance."
}