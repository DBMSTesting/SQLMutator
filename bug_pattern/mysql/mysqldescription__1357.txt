{
    "pattern": "DROP TABLE IF EXISTS t1; DROP TABLE IF EXISTS t2; DROP PROCEDURE IF EXISTS p1; DROP FUNCTION IF EXISTS f1; CREATE TABLE t1 (s1 INT <constraint_type_parameter>); CREATE TABLE t2 (s1 INT <constraint_type_parameter>); INSERT INTO t1 VALUES (<dml_values_parameter>); DELIMITER $$; CREATE PROCEDURE p1() BEGIN DECLARE a INT; DECLARE c CURSOR FOR SELECT f1() FROM t1; DECLARE CONTINUE HANDLER FOR <sql_exception_parameter> SELECT 'caught an exception'; DECLARE CONTINUE HANDLER FOR <sql_error_code_parameter> SELECT 'caught cursor is not open'; SELECT 'Before open'; OPEN c; SELECT 'Before fetch'; FETCH c INTO a; SELECT 'Before close'; CLOSE c; END $$; CREATE FUNCTION f1() RETURNS INT BEGIN INSERT INTO t2 VALUES (<dml_values_parameter>), (<dml_values_parameter>); RETURN <function_return_value_parameter>; END $$; DELIMITER ;$$; CALL p1(); DROP TABLE t1; DROP PROCEDURE p1; DROP FUNCTION f1;",
    "applied_rules": [
        "<constraint_type_parameter>",
        "<dml_values_parameter>",
        "<sql_exception_parameter>",
        "<sql_error_code_parameter>",
        "<function_return_value_parameter>"
    ],
    "Affected Elements": "cursor, declare, open, fetch, close, handler for sqlexception, handler for 1326",
    "Root Cause Analysis": "The cursor state is not fully cleaned up after an exception, leading to reference count leaks in the MEMORY storage engine."
}