{
    "pattern": "DELIMITER $$; DROP PROCEDURE IF EXISTS `sp_existsTest` $$ CREATE PROCEDURE `sp_existsTest` (IN _id <bigint_parameter>) BEGIN DROP TEMPORARY TABLE IF EXISTS tmpA; CREATE TEMPORARY TABLE tmpA (id <bigint_parameter> NOT NULL, PRIMARY KEY (id)) ENGINE=<engine_parameter>; INSERT INTO tmpA VALUES (_id); DROP TEMPORARY TABLE IF EXISTS tmpB; CREATE TEMPORARY TABLE tmpB ( `companyId` <bigint_parameter> NOT NULL, `createBy` <bigint_parameter> NULL, PRIMARY KEY (`companyId`) ) ENGINE=<engine_parameter>; INSERT INTO tmpB VALUES (0, 0), (1, 1), (2, 2), (3, 3), (4, 4); IF EXISTS (SELECT 1 FROM tmpB <join_operator_replace> tmpA ON tmpA.id = tmpB.companyId WHERE tmpB.createBy <comparison_operator_replace> _id) THEN SELECT 'BROKEN'; END IF; DROP TEMPORARY TABLE IF EXISTS tmpB, tmpA; END; $$ DELIMITER ; CALL sp_existsTest(<dml_values_parameter>);",
    "applied_rules": [
        "<bigint_parameter>",
        "<engine_parameter>",
        "<join_operator_replace>",
        "<comparison_operator_replace>",
        "<dml_values_parameter>"
    ],
    "Affected Elements": "IF EXISTS, SELECT, INNER JOIN, WHERE",
    "Root Cause Analysis": "The bug is caused by the incorrect behavior of the IF EXISTS clause in conjunction with temporary tables, leading to inconsistent results on subsequent executions of the stored procedure."
}