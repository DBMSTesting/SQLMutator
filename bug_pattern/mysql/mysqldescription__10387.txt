{
    "pattern": "CREATE TABLE tt (id INT <constraint_type_parameter>, p_id VARCHAR(36) DEFAULT <dml_values_parameter>, o_id VARCHAR(36) DEFAULT <dml_values_parameter>, tag INT DEFAULT <dml_values_parameter>, status INT DEFAULT <dml_values_parameter>, update_time DATETIME, KEY idx_1 (o_id, status, update_time), KEY idx_2 (o_id, p_id, tag, status)); INSERT INTO tt (update_time) VALUES (<dml_values_parameter>); ANALYZE TABLE tt; SET optimizer_switch = <dml_values_parameter>; EXPLAIN ANALYZE SELECT id, p_id, tag, status, update_time FROM tt WHERE o_id = <dml_values_parameter> AND status = <dml_values_parameter> AND update_time BETWEEN <dml_values_parameter> AND <dml_values_parameter> ORDER BY update_time, id LIMIT <dml_values_parameter>, <dml_values_parameter>; SET optimizer_switch = <dml_values_parameter>; PREPARE stmt1 FROM 'EXPLAIN ANALYZE SELECT id, p_id, tag, status, update_time FROM tt WHERE o_id = ? AND status = ? AND update_time BETWEEN ? AND ? ORDER BY update_time, id LIMIT <dml_values_parameter>, <dml_values_parameter>'; SET @v1 = <dml_values_parameter>; SET @v2 = <dml_values_parameter>; SET @v3 = <dml_values_parameter>; SET @v4 = <dml_values_parameter>; EXECUTE stmt1 USING @v1, @v2, @v3, @v4;",
    "applied_rules": [
        "<constraint_type_parameter>",
        "<dml_values_parameter>"
    ],
    "Affected Elements": "Index range scan, Index lookup",
    "Root Cause Analysis": "The optimizer does not switch from an index lookup to an index range scan when using prepared statements due to how placeholder values are handled."
}