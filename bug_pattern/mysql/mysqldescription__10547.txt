{
    "pattern": "CREATE TABLE simple_table (id VARCHAR(20) <constraint_type_parameter>, unique_col VARCHAR(20), status VARCHAR(20), <constraint_enforce_replace>); START TRANSACTION; SELECT <select_parameter> FROM simple_table WHERE unique_col <comparison_operator_parameter> 'unique1'; START TRANSACTION; INSERT INTO simple_table (id, unique_col, status) <dml_values_parameter> ON DUPLICATE KEY UPDATE unique_col = VALUES(unique_col); COMMIT; INSERT INTO simple_table (id, unique_col, status) <dml_values_parameter> ON DUPLICATE KEY UPDATE unique_col = VALUES(unique_col); SELECT <select_parameter> FROM simple_table WHERE unique_col <comparison_operator_parameter> 'unique1'; COMMIT; SELECT <select_parameter> FROM simple_table WHERE unique_col <comparison_operator_parameter> 'unique1'; DROP TABLE simple_table;",
    "applied_rules": [
        "<constraint_type_parameter>",
        "<constraint_enforce_replace>",
        "<select_parameter>",
        "<comparison_operator_parameter>",
        "<dml_values_parameter>"
    ],
    "Affected Elements": "INSERT INTO ... ON DUPLICATE KEY UPDATE, REPEATABLE_READ isolation level",
    "Root Cause Analysis": "The MVCC appears to not handle the semantics of no-op upserts correctly, leading to read-after-write inconsistencies when no actual modification is made to the row."
}