{
    "pattern": "DROP TABLE IF EXISTS <object_dependency_replace>; CREATE TABLE <object_dependency_replace> (id BIGINT NOT NULL AUTO_INCREMENT, cpr VARCHAR(10) NOT NULL, payload TEXT, payload_hash VARCHAR(128) DEFAULT NULL, <constraint_type_parameter> (id)) ENGINE=<object_dependency_replace>; INSERT INTO <object_dependency_replace> (cpr, payload, payload_hash) VALUES (<dml_values_parameter>); INSERT INTO <object_dependency_replace> (cpr, payload, payload_hash) VALUES (<dml_values_parameter>); INSERT INTO <object_dependency_replace> (cpr, payload, payload_hash) VALUES (<dml_values_parameter>); INSERT INTO <object_dependency_replace> (cpr, payload, payload_hash) VALUES (<dml_values_parameter>); INSERT INTO <object_dependency_replace> (cpr, payload, payload_hash) VALUES (<dml_values_parameter>); INSERT INTO <object_dependency_replace> (cpr, payload, payload_hash) VALUES (<dml_values_parameter>); CREATE INDEX <object_dependency_replace> ON <object_dependency_replace>(cpr); SELECT * FROM <object_dependency_replace> WHERE cpr=<comparison_operator_parameter> AND payload_hash <is_operator_replace> NULL ORDER BY id <order_by_replace> LIMIT <limit_parameter>;",
    "applied_rules": [
        "<object_dependency_replace>",
        "<constraint_type_parameter>",
        "<dml_values_parameter>",
        "<comparison_operator_parameter>",
        "<is_operator_replace>",
        "<order_by_replace>",
        "<limit_parameter>"
    ],
    "Affected Elements": "select, where, order by, limit",
    "Root Cause Analysis": "The issue arises from how the NDB Cluster engine handles indexing and large text fields, causing queries that should return results to fail when an index is present."
}