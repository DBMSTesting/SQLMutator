{
    "pattern": "CREATE TABLE testi (id INT <constraint_type_parameter>, c1 INT, c2 INT, <constraint_enforce_replace>) ENGINE=<object_dependency_replace>; INSERT INTO testi (c1, c2) VALUES (<dml_values_parameter>); INSERT INTO testi (c1, c2) SELECT <dml_values_parameter> FROM testi; INSERT INTO testi (c1, c2) SELECT <dml_values_parameter> FROM testi; INSERT INTO testi (c1, c2) SELECT <dml_values_parameter> FROM testi; INSERT INTO testi (c1, c2) SELECT <dml_values_parameter> FROM testi; INSERT INTO testi (c1, c2) SELECT <dml_values_parameter> FROM testi; INSERT INTO testi (c1, c2) SELECT <dml_values_parameter> FROM testi; INSERT INTO testi (c1, c2) SELECT <dml_values_parameter> FROM testi; INSERT INTO testi (c1, c2) SELECT <dml_values_parameter> FROM testi; INSERT INTO testi (c1, c2) SELECT <dml_values_parameter> FROM testi; INSERT INTO testi (c1, c2) SELECT <dml_values_parameter> FROM testi; INSERT INTO testi (c1, c2) SELECT <dml_values_parameter> FROM testi; ANALYZE TABLE testi; EXPLAIN SELECT t1.id, COUNT(*) FROM testi t1 <join_operator_replace> testi t2 ON t2.c1 <comparison_operator_parameter> t1.c1 AND t1.c1 + 30 GROUP BY t1.id; ALTER TABLE testi ENGINE=<object_dependency_replace>; EXPLAIN SELECT t1.id, COUNT(*) FROM testi t1 <join_operator_replace> testi t2 ON t2.c1 <comparison_operator_parameter> t1.c1 AND t1.c1 + 30 GROUP BY t1.id; EXPLAIN SELECT t1.id, COUNT(*) FROM testi t1 <join_operator_replace> testi t2 ON t2.c1 <comparison_operator_parameter> t1.c1 AND t1.c1 + 30 GROUP BY t1.id; SELECT t1.id, COUNT(*) FROM testi t1 <join_operator_replace> testi t2 ON t2.c1 <comparison_operator_parameter> t1.c1 AND t1.c1 + 30 GROUP BY t1.id;",
    "applied_rules": [
        "<constraint_type_parameter>",
        "<constraint_enforce_replace>",
        "<dml_values_parameter>",
        "<object_dependency_replace>",
        "<join_operator_replace>",
        "<comparison_operator_parameter>"
    ],
    "Affected Elements": "join, between, explain, straight_join",
    "Root Cause Analysis": "The optimizer fails to efficiently use range checks for self-joins on InnoDB tables, leading to performance issues."
}