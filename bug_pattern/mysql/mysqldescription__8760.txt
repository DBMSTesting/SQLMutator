{
    "pattern": "CREATE TABLE <table_name_parameter> ( <column_definition_parameter>, <column_definition_parameter>, <column_definition_parameter>, <column_definition_parameter>, <column_definition_parameter>, <constraint_type_parameter> ) <engine_parameter> <charset_parameter> <collate_parameter> <row_format_parameter> /*!50100 <partition_type_parameter> ( <partition_definition_parameter> ) */; SELECT <select_parameter> FROM <table_name_parameter> WHERE <where_parameter> AND <comparison_operator_replace> <value_parameter>;",
    "applied_rules": [
        "<table_name_parameter>",
        "<column_definition_parameter>",
        "<constraint_type_parameter>",
        "<engine_parameter>",
        "<charset_parameter>",
        "<collate_parameter>",
        "<row_format_parameter>",
        "<partition_type_parameter>",
        "<partition_definition_parameter>",
        "<select_parameter>",
        "<where_parameter>",
        "<comparison_operator_replace>",
        "<value_parameter>"
    ],
    "Affected Elements": "ha_innpart::records_in_range function, high CPU cost due to full scans of all partitions instead of logarithmic scans",
    "Root Cause Analysis": "The performance issue arises from the refactored logic in ha_innpart::records_in_range, which causes it to scan all N partitions instead of only log(N) - 1 partitions, leading to excessive CPU usage and degraded performance."
}