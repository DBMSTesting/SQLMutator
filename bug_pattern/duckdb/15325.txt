{
    "pattern": "SET memory_limit=<dml_values_parameter>; CREATE TABLE test_table AS SELECT i as id, concat(<string_function_parameter>) as station_name, concat(<string_function_parameter>) as support_type, concat(<string_function_parameter>) as parameter, CASE WHEN i % 10 <comparison_operator_replace> 0 THEN NULL ELSE random() END as measurement, CASE WHEN i % 5 <comparison_operator_replace> 0 THEN NULL ELSE concat(<string_function_parameter>) END as unit FROM range(1, 50000000) t(i); SELECT COUNT(*) as count_star, COUNT(id) as count_values_id, COUNT(DISTINCT id) as count_distinct_id, SUM(CASE WHEN id IS NULL THEN 1 ELSE 0 END) as null_count_id, SUM(CASE WHEN TRY_CAST(id AS DOUBLE) IS NOT NULL THEN 1 ELSE 0 END) as numeric_count_id, COUNT(station_name) as count_values_station, COUNT(DISTINCT station_name) as count_distinct_station, SUM(CASE WHEN station_name IS NULL OR station_name = '' THEN 1 ELSE 0 END) as null_count_station, SUM(CASE WHEN TRY_CAST(station_name AS DOUBLE) IS NOT NULL THEN 1 ELSE 0 END) as numeric_count_station, COUNT(support_type) as count_values_support, COUNT(DISTINCT support_type) as count_distinct_support, SUM(CASE WHEN support_type IS NULL OR support_type = '' THEN 1 ELSE 0 END) as null_count_support, SUM(CASE WHEN TRY_CAST(support_type AS DOUBLE) IS NOT NULL THEN 1 ELSE 0 END) as numeric_count_support, COUNT(parameter) as count_values_parameter, COUNT(DISTINCT parameter) as count_distinct_parameter, SUM(CASE WHEN parameter IS NULL OR parameter = '' THEN 1 ELSE 0 END) as null_count_parameter, SUM(CASE WHEN TRY_CAST(parameter AS DOUBLE) IS NOT NULL THEN 1 ELSE 0 END) as numeric_count_parameter, COUNT(measurement) as count_values_measurement, COUNT(DISTINCT measurement) as count_distinct_measurement, SUM(CASE WHEN measurement IS NULL THEN 1 ELSE 0 END) as null_count_measurement, SUM(CASE WHEN TRY_CAST(measurement AS DOUBLE) IS NOT NULL THEN 1 ELSE 0 END) as numeric_count_measurement, COUNT(unit) as count_values_unit, COUNT(DISTINCT unit) as count_distinct_unit, SUM(CASE WHEN unit IS NULL OR unit = '' THEN 1 ELSE 0 END) as null_count_unit, SUM(CASE WHEN TRY_CAST(unit AS DOUBLE) IS NOT NULL THEN 1 ELSE 0 END) as numeric_count_unit FROM test_table;",
    "applied_rules": [
        "<dml_values_parameter>",
        "<string_function_parameter>",
        "<comparison_operator_replace>"
    ],
    "Affected Elements": "SET memory_limit, CREATE TABLE, range, COUNT, SUM, TRY_CAST",
    "Root Cause Analysis": "The out of memory error is likely caused by the large volume of data being processed (50 million rows) exceeding the allocated memory limit."
}