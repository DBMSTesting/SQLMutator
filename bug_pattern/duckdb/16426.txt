{
    "pattern": "CREATE TABLE sample_docs AS SELECT o_orderkey::<string_function_parameter> AS name, o_comment AS content FROM <object_dependency_replace>; PRAGMA create_fts_index(sample_docs, name, content); USE <object_dependency_replace>; CREATE TABLE postings AS SELECT docid, termid, COUNT(*) AS tf FROM <object_dependency_replace> GROUP BY <group_by_parameter>; WITH termids AS ( WITH tokens AS ( SELECT unnest(tokenize('this is a sample test query')) AS t ), stemmed AS ( SELECT stem(t, 'porter') AS t FROM tokens WHERE tokens.t NOT IN (SELECT stopword FROM stopwords) ), qtfs AS ( SELECT t, COUNT(*) AS qtf FROM stemmed GROUP BY t ) SELECT termid, df, qtf FROM qtfs JOIN dict ON dict.term = qtfs.t ) SELECT docid, first(name) AS name, CASE LOWER('bm25') WHEN 'bm25' THEN SUM( qtf * log(((SELECT num_docs FROM stats) - df + 0.5) / (df + 0.5) ) * (tf * (0.9 + 1)) / ( tf + 0.9 * (1 - 0.4 + 0.4 * len / (SELECT avgdl FROM stats)) ) ) WHEN 'lm' THEN log(FIRST(len)) + SUM( qtf * log(1 + (0.7 * tf * (SELECT SUM(df) FROM dict)) / ((1-0.7) * df * len) ) ) WHEN 'inquery' THEN SUM( qtf * ( 0.4 + (1 - 0.4) * (tf / (tf + 50 + 150 * len / (SELECT avgdl FROM stats))) * log(((SELECT num_docs FROM stats) + 0.5) / df) / log((SELECT num_docs FROM stats) + 1.0) ) ) END AS score FROM postings JOIN docs USING (docid) JOIN termids USING (termid) WHERE termid IN (SELECT termid FROM termids) GROUP BY docid;",
    "applied_rules": [
        "<object_dependency_replace>",
        "<string_function_parameter>",
        "<group_by_parameter>"
    ],
    "Affected Elements": "WHERE clause, CASE expression, SELECT statements",
    "Root Cause Analysis": "The internal error arises from an issue with binding column references in the SQL query, possibly caused by missing or misaligned references in the subqueries or the use of the CASE expression."
}