{
    "pattern": "CREATE TABLE <object_dependency_replace> AS (SELECT <select_parameter> AS c, <select_parameter> AS cn, <select_parameter> AS rn FROM (SELECT <function_category_parameter>(<parameter_replace>), <function_category_parameter>() AS rn FROM <object_dependency_replace>)); CREATE TABLE <object_dependency_replace>(<parameter_replace> INT, <parameter_replace> INT, <parameter_replace> INT); INSERT INTO <object_dependency_replace>(<parameter_replace>,<parameter_replace>,<parameter_replace>) VALUES (<parameter_replace>,<parameter_replace>,<parameter_replace>), (<parameter_replace>,<parameter_replace>,<parameter_replace>), (<parameter_replace>,<parameter_replace>,<parameter_replace>), (<parameter_replace>,<parameter_replace>,<parameter_replace>); CREATE MACRO <macro_name_replace>(<parameter_replace>,<parameter_replace>) AS TABLE (SELECT <select_parameter>,<select_parameter>,<select_parameter> FROM <object_dependency_replace> WHERE NOT (<select_parameter> = <parameter_replace> AND <select_parameter> = <parameter_replace>)); CREATE MACRO <macro_name_replace>(<parameter_replace>,<parameter_replace>) AS TABLE (WITH RECURSIVE <object_dependency_replace> AS (SELECT * FROM <macro_name_replace>(<parameter_replace>,<parameter_replace>)) SELECT <parameter_replace>, <parameter_replace>, <parameter_replace>, CASE WHEN <parameter_replace> THEN <parameter_replace> ELSE <parameter_replace> END AS <parameter_replace>, CASE WHEN <parameter_replace> THEN <parameter_replace> ELSE <parameter_replace> END AS <parameter_replace>, CASE WHEN <parameter_replace> THEN <parameter_replace> ELSE (<parameter_replace> + 1) % 4 END AS <parameter_replace> FROM (SELECT *, <object_dependency_replace>.<select_parameter> != '#' AS <parameter_replace> FROM (SELECT <object_dependency_replace>.<select_parameter> AS <parameter_replace>, <object_dependency_replace>.<select_parameter> AS <parameter_replace>, <object_dependency_replace>.<select_parameter> AS <parameter_replace>, <object_dependency_replace>.<select_parameter> + <object_dependency_replace>.<select_parameter> AS <parameter_replace>, <object_dependency_replace>.<select_parameter> + <object_dependency_replace>.<select_parameter> AS <parameter_replace> FROM <object_dependency_replace> CROSS JOIN <object_dependency_replace> WHERE <object_dependency_replace>.<select_parameter> != '#') JOIN <object_dependency_replace> ON <parameter_replace> = <select_parameter> AND <parameter_replace> = <select_parameter>)); CREATE MACRO <macro_name_replace>(<parameter_replace>,<parameter_replace>) AS TABLE (WITH RECURSIVE <object_dependency_replace> AS MATERIALIZED (SELECT * FROM <macro_name_replace>(<parameter_replace>,<parameter_replace>)), <object_dependency_replace> AS MATERIALIZED (SELECT * FROM <macro_name_replace>(<parameter_replace>,<parameter_replace>)), <object_dependency_replace> AS (SELECT <select_parameter> AS <parameter_replace>, <select_parameter> AS <parameter_replace>, 0 AS <parameter_replace>, [<parameter_replace> || '_' || <parameter_replace> || '_' || <parameter_replace>] AS <parameter_replace> FROM <object_dependency_replace> WHERE <select_parameter> = '^' UNION ALL SELECT <object_dependency_replace>.<select_parameter>, <object_dependency_replace>.<select_parameter>, <object_dependency_replace>.<select_parameter> AS <parameter_replace>, <function_category_parameter>(<parameter_replace>, <parameter_replace>, <parameter_replace>) AS <parameter_replace> FROM <object_dependency_replace> JOIN <object_dependency_replace> ON <parameter_replace> = <object_dependency_replace>.<select_parameter> AND <parameter_replace> = <object_dependency_replace>.<select_parameter> WHERE NOT EXISTS (SELECT 1 FROM (SELECT <function_category_parameter>(<parameter_replace>) AS c FROM <object_dependency_replace> <parameter_replace>) GROUP BY <parameter_replace> HAVING COUNT(*) > 1)) SELECT *, <function_category_parameter>() AS s FROM <object_dependency_replace>); CREATE TABLE <object_dependency_replace> AS (SELECT * FROM <macro_name_replace>(-1,-1)); SELECT COUNT(*) AS <parameter_replace> FROM (SELECT <parameter_replace>, <parameter_replace> FROM <object_dependency_replace> GROUP BY <parameter_replace>, <parameter_replace>); CREATE MACRO <macro_name_replace>(<parameter_replace>,<parameter_replace>) AS (SELECT MAX(<parameter_replace>) == 2 FROM (SELECT COUNT(*) AS <parameter_replace> FROM <macro_name_replace>(<parameter_replace>,<parameter_replace>) GROUP BY <parameter_replace>, <parameter_replace>, <parameter_replace>)); CREATE TABLE <object_dependency_replace> AS (SELECT <parameter_replace>,<parameter_replace> FROM <object_dependency_replace> JOIN <object_dependency_replace> ON <object_dependency_replace>.<select_parameter> = <object_dependency_replace>.<select_parameter> AND <object_dependency_replace>.<select_parameter> = <object_dependency_replace>.<select_parameter> WHERE <object_dependency_replace>.<select_parameter> != '#' GROUP BY <parameter_replace>,<parameter_replace> LIMIT 1); SELECT <parameter_replace>,<parameter_replace>,<macro_name_replace>(<parameter_replace>,<parameter_replace>) AS <parameter_replace> FROM <object_dependency_replace>;",
    "applied_rules": [
        "<object_dependency_replace>",
        "<select_parameter>",
        "<parameter_replace>",
        "<macro_name_replace>",
        "<function_category_parameter>"
    ],
    "Affected Elements": "create table, insert into, select, with recursive, join",
    "Root Cause Analysis": "The internal error is likely due to an assertion failure caused by accessing an out-of-bounds index during recursive query execution or table manipulation."
}