{
    "pattern": "WITH RECURSIVE aoc6_input(i) AS (SELECT '<string_parameter>' ), lines(y,line) AS (SELECT 0, substr(i,1,position(E'\\n' IN i)-1), substr(i,position(E'\\n' IN i)+1) FROM aoc6_input UNION ALL SELECT y+1,substr(r,1,position(E'\\n' IN r)-1), substr(r,position(E'\\n' IN r)+1) FROM lines l(y,l,r) WHERE position(E'\\n' IN r)>0), rawfield(x,y,v) AS (SELECT x::smallint,y::smallint,substr(line,x::integer,1) FROM lines l, LATERAL generate_series(1,length(line)) g(x)), field(x,y,v) AS (SELECT x,y,CASE WHEN v='^' THEN '.' ELSE v END FROM rawfield), startpos(x,y) AS (SELECT x,y FROM rawfield WHERE v='^'), bounds(maxx,maxy) AS (SELECT max(x) AS maxx, max(y) AS maxy FROM field), directions(dd,dx,dy) AS (VALUES(0,0::smallint,-1::smallint),(1,1::smallint,0::smallint),(2,0::smallint,1::smallint),(3,-1::smallint,0::smallint)), part1(px,py,pd) AS (SELECT x,y,0 FROM startpos UNION ALL SELECT CASE WHEN s THEN px+dx ELSE px END, CASE WHEN s THEN py+dy ELSE py END, CASE WHEN s THEN pd ELSE (pd+1)%4 END FROM (SELECT *, f.v IS DISTINCT FROM '#' AS s FROM (part1 p JOIN directions d ON pd=dd) LEFT JOIN field f ON f.x=px+dx AND f.y=py+dy), bounds b WHERE px>0 AND py>0 AND px<=maxx AND py<=maxy), part1pos(vx,vy) AS (SELECT DISTINCT px, py FROM part1, bounds WHERE px>0 AND py>0 AND px<=maxx AND py<=maxy), candidates(vx,vy) AS (SELECT * FROM part1pos, startpos WHERE vx<>x OR vy<>y) SELECT (SELECT count(*) FROM part1pos) AS part1, (SELECT count(*) FROM candidates WHERE NOT EXISTS (WITH RECURSIVE part2(px,py,pd) AS (SELECT x,y,0 FROM startpos UNION SELECT CASE WHEN s THEN px+dx ELSE px END, CASE WHEN s THEN py+dy ELSE py END, CASE WHEN s THEN pd ELSE (pd+1)%4 END FROM (SELECT *, (f.v IS DISTINCT FROM '#' AND ((px+dx<>vx) OR (py+dy<>vy))) AS s FROM (part2 p JOIN directions d ON pd=dd) LEFT JOIN field f ON f.x=px+dx AND f.y=py+dy), bounds b WHERE px>0 AND py>0 AND px<=maxx AND py<=maxy) SELECT * FROM part2, bounds WHERE px<1 OR py<1 OR px>maxx OR py>maxy)) AS part2",
    "applied_rules": [
        "<string_parameter>",
        "<comparison_operator_replace>",
        "<join_operator_replace>",
        "<where_parameter>"
    ],
    "Affected Elements": "with recursive, union all, lateral, generate_series, case when, is distinct from",
    "Root Cause Analysis": "DuckDB may have limitations or differences in handling recursive CTEs compared to Postgres, leading to internal errors during execution."
}