{
    "pattern": "COPY (SELECT <select_parameter>, [ { period: { start_ts: <timestamp_parameter>, end_ts: <timestamp_parameter> } }, { period: { start_ts: <timestamp_parameter>, end_ts: <timestamp_parameter> } } ] AS <alias_parameter>, [ { period: { start_ts: <timestamp_parameter>, end_ts: <timestamp_parameter> }, street: <string_parameter>, city: <string_parameter> }, { period: { start_ts: <timestamp_parameter>, end_ts: <timestamp_parameter> }, street: <string_parameter>, city: <string_parameter> }, { period: { start_ts: <timestamp_parameter>, end_ts: <timestamp_parameter> }, street: <string_parameter>, city: <string_parameter> } ] AS <alias_parameter> FROM <function_parameter>(1,10_000_001) T(<alias_parameter>)) TO <string_parameter> (OVERWRITE <boolean_parameter>); COPY (SELECT <select_parameter>, <alias_parameter>, <function_parameter>(<alias_parameter>, (<variable_parameter>, <variable_parameter>) -> { c1: <variable_parameter>.<attribute_parameter> > <variable_parameter>.<attribute_parameter>, c2: CASE WHEN <variable_parameter> > 1 THEN <variable_parameter>.<attribute_parameter> > <alias_parameter>[<variable_parameter>-1].<attribute_parameter> ELSE NULL::<type_parameter> END }) AS <alias_parameter>, <alias_parameter>, <function_parameter>(<alias_parameter>, (<variable_parameter>, <variable_parameter>) -> { c1: <variable_parameter>.<attribute_parameter> > <variable_parameter>.<attribute_parameter>, c2: CASE WHEN <variable_parameter> > 1 THEN <variable_parameter>.<attribute_parameter> > <alias_parameter>[<variable_parameter>-1].<attribute_parameter> ELSE NULL::<type_parameter> END, during_existence: <function_parameter>(<function_parameter>(<alias_parameter>, <variable_parameter> -> CASE WHEN <variable_parameter>.<attribute_parameter> >= <variable_parameter>.<attribute_parameter> AND <variable_parameter>.<attribute_parameter> <= <variable_parameter>.<attribute_parameter> THEN TRUE ELSE FALSE END)) }) AS <alias_parameter> FROM <string_parameter>) TO <string_parameter> (OVERWRITE <boolean_parameter>); COPY (SELECT <select_parameter>, <alias_parameter>, <function_parameter>(<alias_parameter>, (<variable_parameter>, <variable_parameter>) -> { c1: <variable_parameter>.<attribute_parameter> > <variable_parameter>.<attribute_parameter>, c2: CASE WHEN <variable_parameter> > 1 THEN <variable_parameter>.<attribute_parameter> > <alias_parameter>[<variable_parameter>-1].<attribute_parameter> ELSE NULL::<type_parameter> END }) AS <alias_parameter>, <alias_parameter>, <function_parameter>(<alias_parameter>, (<variable_parameter>, <variable_parameter>) -> { c1: <variable_parameter>.<attribute_parameter> > <variable_parameter>.<attribute_parameter>, c2: CASE WHEN <variable_parameter> > 1 THEN <variable_parameter>.<attribute_parameter> > <alias_parameter>[<variable_parameter>-1].<attribute_parameter> ELSE NULL::<type_parameter> END, during_existence: <function_parameter>(<function_parameter>(<alias_parameter>, <variable_parameter> -> CASE WHEN <variable_parameter>.<attribute_parameter> >= <variable_parameter>.<attribute_parameter> AND <variable_parameter>.<attribute_parameter> <= <variable_parameter>.<attribute_parameter> THEN TRUE ELSE FALSE END)) }) AS <alias_parameter> FROM <string_parameter> LIMIT <limit_parameter>) TO <string_parameter> (OVERWRITE <boolean_parameter>);",
    "applied_rules": [
        "<select_parameter>",
        "<timestamp_parameter>",
        "<string_parameter>",
        "<alias_parameter>",
        "<boolean_parameter>",
        "<function_parameter>",
        "<variable_parameter>",
        "<attribute_parameter>",
        "<type_parameter>",
        "<limit_parameter>"
    ],
    "Affected Elements": "COPY, SELECT, LIST_TRANSFORM, LIMIT",
    "Root Cause Analysis": "The multi-threaded parquet writing process is being hindered by the presence of the LIMIT clause, which appears to serialize the writing operation, resulting in performance degradation when multiple threads are employed."
}