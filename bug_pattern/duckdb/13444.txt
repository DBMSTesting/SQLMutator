{
    "pattern": "CREATE TABLE struct_data(str <struct_parameter>); INSERT INTO struct_data <dml_values_parameter>; WITH foo AS (SELECT str.<function_parameter>((a, b) -> a) AS str FROM struct_data) SELECT str, str.val, str.val <comparison_operator_replace> '', str.val <is_operator_replace> null, str <is_operator_replace> null FROM foo; CREATE TABLE filter_data(foo <array_parameter>); INSERT INTO filter_data <dml_values_parameter>; WITH transformed AS (SELECT foo.<function_parameter>(x -> struct_pack(val := x, conflict := false)).<function_parameter>((res, x) -> CASE <case_parameter> WHEN res.conflict THEN res WHEN res.val <comparison_operator_replace> x.val THEN res ELSE struct_pack(val := null, conflict := true) END) AS result FROM filter_data) SELECT result, result.val <comparison_operator_replace> '' FROM transformed; WITH data_(foo) AS (VALUES (null::<text_array_parameter>), (['a', 'b', 'c'])) transformed AS (SELECT foo.<function_parameter>(x -> struct_pack(val := x, conflict := false)).<function_parameter>((res, x) -> CASE <case_parameter> WHEN res.conflict THEN res WHEN res.val <comparison_operator_replace> x.val THEN res ELSE struct_pack(val := null, conflict := true) END) AS result FROM data_) SELECT result, result.val <comparison_operator_replace> '' FROM transformed;",
    "applied_rules": [
        "<struct_parameter>",
        "<dml_values_parameter>",
        "<function_parameter>",
        "<comparison_operator_replace>",
        "<is_operator_replace>",
        "<array_parameter>",
        "<case_parameter>",
        "<text_array_parameter>"
    ],
    "Affected Elements": "list_reduce, struct_pack, case statement",
    "Root Cause Analysis": "The reduction logic incorrectly handles null and struct values, leading to unexpected empty string results instead of null."
}