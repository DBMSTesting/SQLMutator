{
    "pattern": "INSTALL json; LOAD json; SELECT <select_parameter> FROM pragma_version(); WITH id_with_timepoint AS (SELECT 'ID1' AS user_id, '2024-12-23'::TIMESTAMPTZ AS lastSeen), id_and_payload_with_timepoint AS (SELECT 'ID1' AS user_id, '2024-02-11'::TIMESTAMPTZ AS timepoint, '{ \"amp\": [ {\"k\": \"fqn1\"}, {\"k\": \"fqn2\"}]}'::VARCHAR AS payload), id_with_payload_intermediate AS (SELECT id_with_timepoint.user_id, id_with_timepoint.lastSeen, id_and_payload_with_timepoint.payload FROM id_with_timepoint <join_operator_replace> id_and_payload_with_timepoint ON (id_with_timepoint.user_id = id_and_payload_with_timepoint.user_id AND id_and_payload_with_timepoint.timepoint < id_with_timepoint.lastSeen)), id_with_fqn AS (SELECT user_id, lastSeen, t.k_fqn FROM id_with_payload_intermediate <join_operator_replace> LATERAL UNNEST(payload ->> '$.amp[*].k') AS t (k_fqn) ON TRUE), fqn_table AS (SELECT <select_parameter> FROM (VALUES ('fqn2', '2021-03-03'::TIMESTAMPTZ), ('fqn2', '2021-02-02'::TIMESTAMPTZ), ('fqn1', '2021-01-01'::TIMESTAMPTZ)) AS data (ap_fqn, timepoint)) SELECT id_with_fqn.user_id, id_with_fqn.k_fqn, fqn_table.ap_fqn, fqn_table.timepoint FROM id_with_fqn <join_operator_replace> fqn_table ON (id_with_fqn.k_fqn = fqn_table.ap_fqn AND fqn_table.timepoint < id_with_fqn.lastSeen) ORDER BY k_fqn, timepoint;",
    "applied_rules": [
        "<select_parameter>",
        "<join_operator_replace>",
        "<select_parameter>"
    ],
    "Affected Elements": "ASOF LEFT JOIN, CTEs, LATERAL UNNEST",
    "Root Cause Analysis": "The regression in behavior when using ASOF LEFT JOIN with a CTE rather than a materialized view leads to unexpected row returns due to a join operation being flipped from LEFT to RIGHT in the execution plan."
}