ID: 12796
Title: `fetchnumpy()` does not deliver float arrays with NaN, delivers `MaskedArray` with wrong `fill_value`
Description:
### What happens?

After loading a NumPy float array with a NaN into DuckDB, `fetchnumpy()` returns a `MaskedArray`, which is not necessary for float types. Further, the returned `MaskedArray` does not set `np.nan` as the `fill_value` as expected, but instead 1e+20, which results in `MaskedArray` returning the wrong values when `filled()` is called.

### To Reproduce

```python
>>> import numpy as np
>>> import duckdb
>>> a1 = np.array([3.2, np.nan, 9.1])
>>> a1
array([3.2, nan, 9.1])
>>> d = duckdb.connect().execute('select * from a1').fetchnumpy()
>>> d['column0'] 
masked_array(data=[3.2, --, 9.1],
             mask=[False,  True, False],
       fill_value=1e+20)  # `fill_value` should be np.nan
>>> d['column0'].filled()
array([3.2e+00, 1.0e+20, 9.1e+00])
```

Script:

```python
import numpy as np
import duckdb
a1 = np.array([3.2, np.nan, 9.1])
a1
d = duckdb.connect().execute('select * from a1').fetchnumpy()
d['column0'] 
d['column0'].filled()
```

### OS:

MacOS 14.1.1, arm64

### DuckDB Version:

1.0.0

### DuckDB Client:

Python

### Full Name:

Christopher Ariza

### Affiliation:

Self

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have