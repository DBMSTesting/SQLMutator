ID: 14393
Title: `read_csv` does not detect columns correctly with `rejects_table`
Description:
### What happens?

When reading a specific CSV with `rejects_table`, I get unexpected results. If I remove `rejects_table`, the results are as expected.

### To Reproduce

Run:

```sh
echo "Naam;Rekeningnummer;Omschrijving of betalingskenmerk;Omschrijving of betalingskenmerk aangepast;Transactiestatus;Valuta;Transactiebedrag;Transactiebedrag aangepast;Batchnaam;Gewenste uitvoerdatum;Gewenste uitvoerdatum aangepast;Werkelijke uitvoerdatum;Eigen rekening ccy;Eigen rekening;Eigen rekening naam;Batchtype;Batchstatus;Eerste handtekening;Eerste handtekening datum tijd;Tweede handtekening;Tweede handtekening datum tijd;Bestandsnaam;Controlegetal SHA1;Controlegetal SHA2;Bestand aangepast\nDummy Naam;DUMMYREKENINGNUMMER;1234567890; ;Dummy Transactiestatus;USD;123,45; ;DUMMYBATCHNAAM;2023-01-01; ;2023-01-01;USD;DUMMYEIGENREKENING;Dummy Eigen Rekening Naam;Dummy Batchtype;Dummy Batchstatus; ; ; ; ;dummy_file.xml;DUMMYCHECKSUMSHA1;DUMMYCHECKSUMSHA2;false" > error.csv
```

```sh
v1.1.2 f680b7d08f
Enter ".help" for usage hints.
Connected to a transient in-memory database.
Use ".open FILENAME" to reopen on a persistent database.
```
```sql
SELECT * FROM read_csv('error.csv');
```
```
┌────────────┬─────────────────────┬──────────────────────┬──────────────────────┬──────────────────────┬───┬──────────────────────┬────────────────┬────────────────────┬────────────────────┬───────────────────┐
│    Naam    │   Rekeningnummer    │ Omschrijving of be…  │ Omschrijving of be…  │   Transactiestatus   │ … │ Tweede handtekenin…  │  Bestandsnaam  │ Controlegetal SHA1 │ Controlegetal SHA2 │ Bestand aangepast │
│  varchar   │       varchar       │        int64         │       varchar        │       varchar        │   │       varchar        │    varchar     │      varchar       │      varchar       │      boolean      │
├────────────┼─────────────────────┼──────────────────────┼──────────────────────┼──────────────────────┼───┼──────────────────────┼────────────────┼────────────────────┼────────────────────┼───────────────────┤
│ Dummy Naam │ DUMMYREKENINGNUMMER │           1234567890 │                      │ Dummy Transactiest…  │ … │                      │ dummy_file.xml │ DUMMYCHECKSUMSHA1  │ DUMMYCHECKSUMSHA2  │ false             │
├────────────┴─────────────────────┴──────────────────────┴──────────────────────┴──────────────────────┴───┴──────────────────────┴────────────────┴────────────────────┴────────────────────┴───────────────────┤
│ 1 rows                                                                                                                                                                                    25 columns (10 shown) │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
```
```sql
SELECT * FROM read_csv('error.csv', rejects_table='rejects_table');
```
```
┌──────────────────────┬───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│ Dummy Naam;DUMMYRE…  │ 45; ;DUMMYBATCHNAAM;2023-01-01; ;2023-01-01;USD;DUMMYEIGENREKENING;Dummy Eigen Rekening Naam;Dummy Batchtype;Dummy Batchstatus; ; ; ; ;dummy_file.xml;DUMMYCHECKSUMSHA1;DUMMYCHECKSUMSHA2;f…  │
│       varchar        │                                                                                            varchar                                                                                            │
├──────────────────────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│ Dummy Naam;DUMMYRE…  │ 45; ;DUMMYBATCHNAAM;2023-01-01; ;2023-01-01;USD;DUMMYEIGENREKENING;Dummy Eigen Rekening Naam;Dummy Batchtype;Dummy Batchstatus; ; ; ; ;dummy_file.xml;DUMMYCHECKSUMSHA1;DUMMYCHECKSUMSHA2;f…  │
└──────────────────────┴───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
```

With `rejects_table`, it shows the results as separated with a comma. But with `sniff_csv`, you can see both delimiters are correctly detected:

```sh
v1.1.2 f680b7d08f
Enter ".help" for usage hints.
Connected to a transient in-memory database.
Use ".open FILENAME" to reopen on a persistent database.
```
```sql
SELECT * FROM sniff_csv('error.csv');
```
```
┌───────────┬─────────┬─────────┬──────────────────┬─────────┬───┬────────────┬─────────────────┬───────────────┬──────────────────────┐
│ Delimiter │  Quote  │ Escape  │ NewLineDelimiter │ Comment │ … │ DateFormat │ TimestampFormat │ UserArguments │        Prompt        │
│  varchar  │ varchar │ varchar │     varchar      │ varchar │   │  varchar   │     varchar     │    varchar    │       varchar        │
├───────────┼─────────┼─────────┼──────────────────┼─────────┼───┼────────────┼─────────────────┼───────────────┼──────────────────────┤
│ ;         │ "       │ "       │ \n               │ \0      │ … │ %Y-%m-%d   │                 │               │ FROM read_csv('err…  │
├───────────┴─────────┴─────────┴──────────────────┴─────────┴───┴────────────┴─────────────────┴───────────────┴──────────────────────┤
│ 1 rows                                                                                                          12 columns (9 shown) │
└──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
```
```sql
SELECT * FROM sniff_csv('error.csv', rejects_table='rejects_table');
```
```
┌───────────┬─────────┬─────────┬──────────────────┬─────────┬───┬────────────┬─────────────────┬──────────────────────┬──────────────────────┐
│ Delimiter │  Quote  │ Escape  │ NewLineDelimiter │ Comment │ … │ DateFormat │ TimestampFormat │    UserArguments     │        Prompt        │
│  varchar  │ varchar │ varchar │     varchar      │ varchar │   │  varchar   │     varchar     │       varchar        │       varchar        │
├───────────┼─────────┼─────────┼──────────────────┼─────────┼───┼────────────┼─────────────────┼──────────────────────┼──────────────────────┤
│ ;         │ "       │ "       │ \n               │ \0      │ … │ %Y-%m-%d   │                 │ rejects_table='rej…  │ FROM read_csv('err…  │
├───────────┴─────────┴─────────┴──────────────────┴─────────┴───┴────────────┴─────────────────┴──────────────────────┴──────────────────────┤
│ 1 rows                                                                                                                 12 columns (9 shown) │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
```

Bonus question ^^: in the original file, each line is enclosed with a ". So each line starts with a ", and ends with a ", and there are no " in between. Is there a way to detect this, and clean this with duckdb? Now I do this step separately in python.

### OS:

x86_64

### DuckDB Version:

1.1.2

### DuckDB Client:

CLI

### Hardware:

_No response_

### Full Name:

Frank Verschuren

### Affiliation:

1 Giant Leap Solutions

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have