ID: 12592
Title: `DuckDBPyRelation.intersect()` (Python function API) implicitly performs `.distinct()` operation (i.e. deduplicates for set semantics)
Description:
### What happens?

Python function API `.intersect()` method "*promises*" bag semantics (as suggested in documentation, and as shown by `.sql_query()` method.
However, it actually *delivers* set semantics (i.e. implied `.distinct()`).

### To Reproduce

```python
import duckdb
test = duckdb.sql("SELECT 1 from range(5)")
test
```
```
┌───────┐
│   1   │
│ int32 │
├───────┤
│     1 │
│     1 │
│     1 │
│     1 │
│     1 │
└───────┘
```
i.e. `test` is a table with duplicates.
Intersection with itself should leave it unchanged:
```python
test.intersect(test).sql_query()
```
```sql
'(SELECT 1 FROM range(5)) INTERSECT ALL (SELECT 1 FROM range(5))'
```
i.e. `sql_query()` promises bag semantics (`ALL`), which indeed is provided via `sql()` (DB API):
```python
duckdb.sql(test.intersect(test).sql_query())
```
```
┌───────┐
│   1   │
│ int32 │
├───────┤
│     1 │
│     1 │
│     1 │
│     1 │
│     1 │
└───────┘
```
However, using the function API deduplicates:
```python
test.intersect(test)
```
```
┌───────┐
│   1   │
│ int32 │
├───────┤
│     1 │
└───────┘
```

### OS:

Windows 11

### DuckDB Version:

1.0

### DuckDB Client:

Python (3.12)

### Full Name:

Olaf

### Affiliation:

None

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have