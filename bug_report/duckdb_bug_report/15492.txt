ID: 15492
Title: Unexpected decimal rounding
Description:
### What happens?

Using version 1.1.3 I execute the following statement:
```
SELECT
                4.625 AS a,
                4.625::decimal(38,6) AS b,
                004.625 AS c,
                0004.625 AS d,              
                a::decimal(6,2) AS a_1,
                b::decimal(6,2) AS b_1, -- BUG! Unexpected 4.62 (4.63 is correct)
                c::decimal(6,2) AS c_1,
                d::decimal(6,2) AS d_1, -- BUG! Unexpected 4.62 (4.63 is correct, start from decimal (7,3) or major)
                b::decimal(6,3)::decimal(6,2) AS w_1; -- work around (double cast)
```
This is a simplified scenario, it took me several days to understand this rounding problem in my more complex scenario.

### To Reproduce

```
SELECT
                4.625 AS a,
                4.625::decimal(38,6) AS b,
                004.625 AS c,
                0004.625 AS d,              
                a::decimal(6,2) AS a_1,
                b::decimal(6,2) AS b_1, -- BUG! Unexpected 4.63 (4.62 is correct)
                c::decimal(6,2) AS c_1,
                d::decimal(6,2) AS d_1, -- BUG! Unexpected 4.63 (4.62 is correct, start from decimal (7,3) or major)
                b::decimal(6,3)::decimal(6,2) AS w_1; -- work around (double cast)
```

### OS:

Windows 11 64-bit operating system

### DuckDB Version:

1.1.3

### DuckDB Client:

Cli

### Hardware:

_No response_

### Full Name:

Francesco Gargiulo

### Affiliation:

Irion

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

No - Other reason (please specify in the issue body)

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have