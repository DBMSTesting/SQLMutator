ID: 13591
Title: Switch in-tree DuckDB extension to use DuckDB's semver tag
Description:
This PR changes the in-tree DuckDB extensions to use DuckDB's semver tag.

### Changes
Before this PR, on a stable (tagged) duckdb version you would get:
```
D select extension_version from duckdb_extensions() where extension_name='parquet';
┌───────────────────┐
│ extension_version │
│      varchar      │
├───────────────────┤
│ 1f98600c2c            │
└───────────────────┘
D pragma version;
┌─────────────────┬────────────┐
│ library_version │ source_id  │
│     varchar     │  varchar   │
├─────────────────┼────────────┤
│ v1.0.0          │ 1f98600c2c │
└─────────────────┴────────────┘
```

After this PR you will get:
```
D select extension_version from duckdb_extensions() where extension_name='parquet';
┌───────────────────┐
│ extension_version │
│      varchar      │
├───────────────────┤
│ v1.0.0            │
└───────────────────┘
D pragma version;
┌─────────────────┬────────────┐
│ library_version │ source_id  │
│     varchar     │  varchar   │
├─────────────────┼────────────┤
│ v1.0.0          │ 1f98600c2c │
└─────────────────┴────────────┘
```

### Context
In order to provide some structure to help users understand the phases of stability that can be expected from an extension, I would like to make some new guidelines for extension versioning for `core` extensions. Extensions will be able to move up in stability level, but never down.

I want to define 3 levels of stability, in increasing order of stability:
1. **unstable**:  versioned using the short commit hash
2. **pre-release**: (using semver v0 tag: `v0.<y>.<z>`)
3. **stable**: (using semver stable tag `v<x>.<y>.<z>` where `x > 0`)

The idea here is that extensions start out as **unstable**. This indicates an extension should be handled with some care:
- APIs may change (functions removed, parameters changed, types changed, etc)
- the latest available version can change at any time, and might even be reverted to an earlier version without any warning

Next phase will be **pre-release**. Extensions that are in pre-release mode will only be pushed into the `core` repository using tagged releases. These releases should be available on Github, with a release that explains what changes were made in that release. For in-tree extensions this will just be the DuckDB releases, out-of-tree extensions will need to do their own (e.g. https://github.com/duckdb/duckdb_delta/releases/tag/v0.1.0)

Final phase is **stable** where extensions are tagged with v1.0.0 or higher. Extensions with this tag should ensure that [semver](https://semver.org/) stability guidelines are followed. In general this will mean that things like function signature, types, etc. should be stable and only be changed when bumping a major version.

### Why this change
If we want to move to a slightly more mature versioning schema for our extensions, I feel this change better matches the above guidelines: all of the current in-tree extensions should be stable enough for us to make this commitment AFAICT.

### Discussion:
- Do you agree with versioning scheme proposed above?
- Do you agree with the fact that this means we basically promise to have all the in-tree extensions API-stable from now on? (if not, which ones should be reverted to **unstable**?)

### Follow-up
- Deploy extensions at their versioned paths 
- update docs explaining the stability of core extensions
