ID: 13180
Title: Add 'bugprone-narrowing-conversions' clang-tidy check
Description:
This is a follow up of sort of https://github.com/duckdb/duckdb/pull/11673, where now using clang-tidy infrastructure every cast that is potentially narrowing has to be explicit.

Narrowing casts are like:
* signed <-> unsigned, like uint32_t to int32_t (or reverse)
* wide range -> smaller range, like int64_t to int32_t
* integers -> float that can't exactly represent whole range, like int64_t -> double (here the full range can't be exactly represented as a double, given only 2^53 bits are there for mantissa)
* float -> integers (given fractional numbers can't be represented exactly or numbers above max integers can't be represented at all)

This PR adds:
* `INTEGER_TYPE LossyNumericCast(FLOAT_TYPE val)`
that is currently equivalent to `static_cast<INTEGER_TYPE>(val)`. A check on `val` being in range `[INTEGER_TYPE::Min(), INTEGER_TYPE::Max()]` would still make sense to add for DEBUG runs, but can be done on top of this PR.

* `INTEGER_TYPE NumericCast(FLOAT_TYPE val)`
this in DEBUG mode performs check on the roundtrip `val::INTEGER_TYPE::FLOAT_TYPE == val`, that should demonstrate no information is lost.

This add quite some verbosity, BUT I would argue this is good since this forces to express actual desired semantic.

Note that current code is most likely fine, given there might be additional invariants that make so that the casting is information-preserving, or places where we might be OK with a lossy cast (say only an estimate is needed).

I think being explicit about semantic is still better for code maintenance / readability perspective, and might uncover some possible problems.

Also, this PR enables the check on all subsequent PRs via the CodeQuality workflow. (or via `make clang-tidy` locally).
This might cost some development time, but I would argue it's better caught and addressed when writing code.
At current time only `src/` and `extension/parquet/` source files are checked by default.

Adding `static_cast<DEST>( ... )` will be always available as escape hatch, where one explicitly states that performing the cast is fine.