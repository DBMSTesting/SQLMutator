ID: 16304
Title: Fix roundtripping of stringified nested types
Description:
This PR fixes https://github.com/duckdblabs/duckdb-internal/issues/3945

Follow up to https://github.com/duckdb/duckdb/pull/15944

Single quotes are added around the value when it contains special characters, trailing/leading whitespace or the value is "NULL".
If single quotes or backslashes are present in the value, they are escaped.

Added benchmark results:
New (this PR):

```
benchmark/micro/cast/cast_varcharlist_string.benchmark  1       0.217045
benchmark/micro/cast/cast_varcharlist_string.benchmark  2       0.215973
benchmark/micro/cast/cast_varcharlist_string.benchmark  3       0.224540
benchmark/micro/cast/cast_varcharlist_string.benchmark  4       0.230012
benchmark/micro/cast/cast_varcharlist_string.benchmark  5       0.226749
```
```
benchmark/micro/cast/cast_varcharmap_string.benchmark   1       1.266191
benchmark/micro/cast/cast_varcharmap_string.benchmark   2       1.297789
benchmark/micro/cast/cast_varcharmap_string.benchmark   3       1.297194
benchmark/micro/cast/cast_varcharmap_string.benchmark   4       1.292299
benchmark/micro/cast/cast_varcharmap_string.benchmark   5       1.285754
```
```
benchmark/micro/cast/cast_varcharstruct_string.benchmark        1       0.407835
benchmark/micro/cast/cast_varcharstruct_string.benchmark        2       0.415330
benchmark/micro/cast/cast_varcharstruct_string.benchmark        3       0.407894
benchmark/micro/cast/cast_varcharstruct_string.benchmark        4       0.405755
benchmark/micro/cast/cast_varcharstruct_string.benchmark        5       0.405011
```

Old (`main`):
```
benchmark/micro/cast/cast_varcharlist_string.benchmark  1       0.206750
benchmark/micro/cast/cast_varcharlist_string.benchmark  2       0.211269
benchmark/micro/cast/cast_varcharlist_string.benchmark  3       0.206543
benchmark/micro/cast/cast_varcharlist_string.benchmark  4       0.207847
benchmark/micro/cast/cast_varcharlist_string.benchmark  5       0.210660
```
(casting from map was done by appending to a `std::string`, which explains the speed up)
```
benchmark/micro/cast/cast_varcharmap_string.benchmark   1       1.904629
benchmark/micro/cast/cast_varcharmap_string.benchmark   2       1.997251
benchmark/micro/cast/cast_varcharmap_string.benchmark   3       1.975662
benchmark/micro/cast/cast_varcharmap_string.benchmark   4       2.078949
benchmark/micro/cast/cast_varcharmap_string.benchmark   5       2.047442
```
```
benchmark/micro/cast/cast_varcharstruct_string.benchmark        1       0.244424
benchmark/micro/cast/cast_varcharstruct_string.benchmark        2       0.261174
benchmark/micro/cast/cast_varcharstruct_string.benchmark        3       0.257688
benchmark/micro/cast/cast_varcharstruct_string.benchmark        4       0.246197
benchmark/micro/cast/cast_varcharstruct_string.benchmark        5       0.244702
```

---------------------------------------------------------

### Misc

`generate_extension_entries.py` received some changes.
Most notably the deserializing of the generated `extension_entries.hpp` array entries has been changed from a regex approach to manually parsing the input (to address an unrelated issue, related to entries that span multiple lines).

We used to query the shell with a `-csv` flag, expecting this to produce unquoted values, which is no longer the case as we need to escape `VARCHAR[]` among others.
This has been changed to use `-json` instead, so we can use the `json` python library to reliably retrieve the results.

In `built_in_functions.cpp`, `BuiltinFunctions::RegisterExtensionOverloads` now parses the list of parameter types by casting to `VARCHAR[]` then iterating over the produced list entries.