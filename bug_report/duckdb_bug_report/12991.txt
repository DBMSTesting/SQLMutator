ID: 12991
Title: Implementation of recursive JSONPath expressions
Description:
As part of my Bachelor's Thesis for the Database Research Group at the University of TÃ¼bingen, I have implemented support for recursive JSONPath expressions.
This recursively searches for applicable keys at any level in the document. For example, a wildcard with recursion will simply return all values.
I included both the `..` notation from JSONPath standard ([RFC 9535](https://datatracker.ietf.org/doc/rfc9535/)) and the alternative `.**` notation that is used by PostgreSQL. Therefore, both

```sql
SELECT ('{"o": {"j": 1, "k": 2},"a": [5, 3, [{"j": 4}, {"k": 6}]]}')->>'$..*'
```
and
```sql
SELECT ('{"o": {"j": 1, "k": 2},"a": [5, 3, [{"j": 4}, {"k": 6}]]}')->>'$.**'
```
produce the same result:
```sql
[{"j":1,"k":2}, [5,3,[{"j":4},{"k":6}]], 1, 2, 5, 3, [{"j":4},{"k":6}], {"j":4}, {"k":6}, 4, 6]
```

Similarly, `$.**.j` and `$..j` (and `$..*.j`) will also yield the same result, namely all values with the key j:
```sql
[1,4]
```
And `$.**[0]`, `$..[0]` and `$..*[0]` will return the first values of all arrays:
```sql
[5, {"j":4}]
```