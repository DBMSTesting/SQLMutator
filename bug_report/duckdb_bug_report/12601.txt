ID: 12601
Title: Add `OwningStringMap` - and rework `histogram` and `mode` functions to use this
Description:
This PR adds the `OwningStringMap`. This is essentially a `string_map_t`, but which takes an allocator, and any `string_t` keys added to the map that are not inlined are allocated using the allocator (and freed upon destruction if the allocator is not an arena allocator). 

Previously in aggregates we would use an `unordered_map<std::string, KEY>` instead. The problem with that approach is two-fold: 

* (1) we need to create a `std::string` to do a look-up in the map. When doing a lookup using a `string_t`, this means we are allocating data and copying it, often just to throw it away again if the entry was already present in the map
* (2) The strings created in the map itself are allocated using the standard allocator at random spaces in the heap, and their sizes are not tracked.

The `OwningStringMap` fixes this by only allocating when a non-inlined string is inserted into the map, and allowing allocation using a custom allocator (e.g. the `ArenaAllocator` for aggregates).

The `OwningStringMap` is mostly a drop-in replacement for `unordered_map<string_t, ...>`. There is also a `OrderedOwningStringMap` which is a replacement for `map<string_t, ...>`. The only exception is the constructor - which requires an allocator as parameter. 