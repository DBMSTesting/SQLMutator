ID: 13782
Title: Structured errors and exceptions
Description:
### What happens?

I'd love to see DuckDB offer additional structured, machine-readable error information when exceptions occur while processing queries. This would greatly improve the way applications handle exceptions, removing the need to rely on parsing free-form error messages, which can often be unpredictable.

Currently, when a query error or exception arises, the error message is a freely formatted string. Here are a few examples:

```sql
D select asfasdfasdf;
Binder Error: Referenced column "asfasdfasdf" not found in FROM clause!

D select read_json('foobar');
Binder Error: Function "read_json" is a table function but it was used as a scalar function. This function has to be called in a FROM clause (similar to a table).
LINE 1: select read_json('foobar');

D select * from read_json('foobar');
IO Error: No files found that match the pattern "foobar"
```

As we know, these free-form error messages can change between DuckDB releases, which might lead to unintended breaks in code that relies on parsing these strings.

From the perspective of developers like me who work on building applications and extensions, having error messages that are more structured would bring a lot of value—not just for applications themselves, but also for users who want clearer, actionable feedback from errors.

For example, it could look something like this:

```sql
D select * from read_json('foobar');
IO Error: No files found that match the pattern "foobar"

D .mode line
D select duckdb_last_error();
error = {'type': IO Error, 'message': No files found that match the pattern "foobar", 'subtype': File not found, 'filename': foobar}
```

In this case, the errors would be broken down into fields like:

1. A high-level type (e.g., Binder Error, IO Error, Out of Memory).
2. An optional subtype (e.g., "File Not Found").
3. A free-form message (what is currently provided).
4. Optional fields specific to the error type (e.g., a filename for file-related errors).

This kind of structure would make errors much easier to handle and understand programmatically. I understand that there are probably many systems currently parsing DuckDB’s error messages as they are today, so I'd like to propose a solution that preserves compatibility while adding this extra value.

By introducing a new SQL function, we could retrieve the structured error information when desired, like this:

```sql
CALL duckdb_last_error();
CALL duckdb_last_error(format='json');
```

This would return a single row containing a DuckDB structure with the error details, or a JSON object when requested. The error would be cleared at the start of the next statement, and null would be returned if no error occurred.

I believe this approach would offer significant benefits without disrupting existing behavior. I’d be very open to feedback or alternative suggestions, and I'd be excited to see this type of feature in future versions of DuckDB!

### To Reproduce

select * from read_json('file_that_does_not_exist.json');

### OS:

Mac OS X

### DuckDB Version:

1.0.0

### DuckDB Client:

CLI

### Hardware:

_No response_

### Full Name:

Rusty Conover

### Affiliation:

self

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have