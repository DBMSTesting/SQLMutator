ID: 13947
Title: [Python] Nullability of Arrow table fields are not respected when table is registered with DuckDB.
Description:
### What happens?

I am encountering an issue where DuckDB incorrectly reports an Arrow table column as nullable, despite it being explicitly defined as non-nullable. Below is a minimal example demonstrating the issue.

**Steps to Reproduce:**

1. Create a PyArrow table with a single column (`name`) that is explicitly set as non-nullable.
2. Register this table with DuckDB.
3. Inspect the schema of the registered table using DuckDB's `duckdb_columns()` function.  This shows that column is actually nullable, which makes me suspect the bug is in the code of `register`.
4. Execute a SQL query to retrieve data from the table and check the nullability of the column in the resulting schema.
5. Compare the schema of the output table with the original input schema.

Expected Behavior:

1. The `is_nullable` field in DuckDB’s `duckdb_columns()` output should be False for the `name` column.
2. The `name` column in the output Arrow table schema should be non-nullable.
3. The schema of the output table should match the schema of the input table.

Actual Behavior:

1. The `is_nullable` field in DuckDB’s `duckdb_columns()` output is True for the name column, indicating it is treated as nullable.
2. The name column in the output Arrow table schema is incorrectly marked as nullable.
3. The schema of the output table does not match the schema of the input table.



### To Reproduce

```python
import duckdb
import pyarrow as pa

# Create a table with a single column called name, that is non-nullable.
# This should be equal to:
#
# CREATE TABLE data (name VARCHAR NOT NULL)
#
example_data = pa.Table.from_pylist([{"name": "Rusty"}], schema=pa.schema([("name", pa.string(), False)]))

with duckdb.connect(":memory:") as conn:
    # Allow the data to be queried.
    conn.register("example_data", example_data)

    # Inspect the schema of the table inside of DuckDB.
    column_info = conn.execute("select * from duckdb_columns() where table_name = 'example_data'").arrow().to_pylist()

    # This should be false, but is currently true.
    print("DuckDB schema says column is nullable:", column_info[0]["is_nullable"])

    # Comment out these assertions to see the test fail.
    # assert column_info[0]["is_nullable"] is False

    # Get the data out of the table.
    output_table = conn.execute("SELECT name FROM example_data").arrow()
    print("Output result is nullable: ", output_table.schema.field("name").nullable)

    # Uncomment this assertion to see the test fail.
    # assert output_table.schema.field("name").nullable is False

    # The output schema should match the input schema.
    assert output_table.schema == example_data.schema
```


### OS:

Mac OS X

### DuckDB Version:

1.1.0

### DuckDB Client:

Python

### Hardware:

_No response_

### Full Name:

Rusty Conover

### Affiliation:

self

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have