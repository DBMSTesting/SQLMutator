ID: 13554
Title: Variables can still 'leak' through the stack in Python
Description:
### What happens?

Exact same bug as in https://github.com/duckdb/duckdb/issues/11224 , just occuring when the variables are in subqueries and not regular queries:

> The relation returned by `duckdb.sql(..).execute()` still refers to local context variables, such that if it is used in a different context (e.g., after being returned by a function) it can either fail or return unwanted results.

### To Reproduce

```python
import duckdb

def f():
    a = duckdb.sql('SELECT * from range(1)').execute()
    b = duckdb.sql("SELECT * FROM (SELECT * FROM a)").execute()
    return b

a = duckdb.sql('SELECT * from range(2)').execute()
print(f())
```
Errors with 
```
Traceback (most recent call last):
  File "test.py", line 8, in <module>
    print(f())
duckdb.duckdb.InvalidInputException: Invalid Input Error: Attempting to execute an unsuccessful or closed pending query result
Error: Catalog Error: Table with name a does not exist!
Did you mean "pg_am"?
```

And,
```python
import duckdb

def f():
    a = duckdb.sql('SELECT * from range(1)').execute()
    b = duckdb.sql("SELECT * FROM (SELECT * FROM a)").execute()
    return b

a = duckdb.sql('SELECT * from range(2)').execute()
print(f())
```
returns
```
┌───────┐
│ range │
│ int64 │
├───────┤
│     0 │
│     1 │
└───────┘
```

### OS:

Windows

### DuckDB Version:

1.0.0

### DuckDB Client:

Python

### Full Name:

Tomer Levy

### Affiliation:

University

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have