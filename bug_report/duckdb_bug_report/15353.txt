ID: 15353
Title: export database orders creation of views alphabetically and this leads to problem when importing the database again
Description:
### What happens?

## Workflow explanation

- use in memory duckdb connection in python (not sure if in memory or python important)
- first create a table
- Then create several views
- one view depends on another view that was previously created
- export the database as parquet directory
- when trying to import the exported database again there is an error saying that a view does not exist

## possible reason

```sql
CREATE TABLE table_a(c_1 VARCHAR, c_2 INTEGER, c_3 FLOAT);

CREATE VIEW view_1 AS SELECT c_2 FROM view_3;
CREATE VIEW view_2 AS SELECT c_3 FROM table_a;
CREATE VIEW view_3 AS SELECT c_1, c_2 FROM table_a;
```

- `schema.sql` contains instructions to create the views
- I noticed that these instructions are sorted alphabetically by view name even if the original creation order was different (see python code example)
- this is the reason a view which depends on another view cannot be created (the other view was not created yet)

## possible solution

- perhaps there is a smart way to detect the `view dependency hierarchy`
- but an easy solution would be to keep track of the order in which the original view creation sql instructions were executed
- then this order must be the same in `schema.sql` and it should work again of course

## Final thoughts

I was able to fix my problem by just renaming the views for now.  
In general thanks so much for this wonderful database. I use it everywhere and it is a lot of fun!  
The best new tool in years!!

Looking forward to the next updates and features. :)

### To Reproduce

```python
import duckdb
from pathlib import Path


con = duckdb.connect(":memory:")

# creating database with views that depend on other views
queries = [
    "create table table_a (c_1 varchar, c_2 int, c_3 float)",
    "create view view_3 as (select c_1, c_2 from table_a)",
    "create view view_1 as (select c_2 from view_3)",
    "create view view_2 as (select c_3 from table_a)",
]
for q in queries:
    con.sql(query=q)

# exporting database as parquet folder
export_directory_path = Path(__file__).parent.resolve() / "db_parquet_export"
query = rf"""
EXPORT DATABASE '{export_directory_path.as_posix()}' (
    FORMAT PARQUET,
    COMPRESSION ZSTD
);
"""
con.sql(query=query)
print("exported duckdb database", export_directory_path.as_posix())


# create new connection and try to import database again
con.close()

con = duckdb.connect(":memory:")
con.sql(f"import database '{export_directory_path.as_posix()}'")
```

the following error will appear:

```
con.sql(f"import database '{export_directory_path.as_posix()}'")
duckdb.duckdb.CatalogException: Catalog Error: Table with name view_3 does not exist!
Did you mean "system.information_schema.views"?
LINE 6: CREATE VIEW view_1 AS SELECT c_2 FROM view_3;
                                              ^
```

### OS:

aarch64

### DuckDB Version:

1.1.3

### DuckDB Client:

Python

### Hardware:

MacBook Air M2

### Full Name:

Julius Heine

### Affiliation:

Mercedes-Benz

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have