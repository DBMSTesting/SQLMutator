ID: 14206
Title: Unexpected result of comparison of nested types containing `NULL`
Description:
### What happens?

Consider the following test case. If the first query returning `false` is expected, then the second query of its negation should be `true`. However, the second query returns `NULL`. It might be related to https://github.com/duckdb/duckdb/issues/13924 and perhaps due to the pruning of the NULL values of AND.

### To Reproduce

```sql
SELECT ((NULL,1) IS NULL)AND NULL; -- false
SELECT (NOT ((NULL,1) IS NULL)AND NULL); -- NULL (unexpected)


-- original test case found by TLP
CREATE TABLE  t0(c0 VARCHAR);
INSERT INTO t0(c0) VALUES ('randomtext');

SELECT t0.c0 FROM t0; -- 1 row
SELECT t0.c0 FROM t0 WHERE ((((NULL,1)) IS NULL))AND(NULL) UNION ALL SELECT t0.c0 FROM t0 WHERE (NOT ((((NULL,1)) IS NULL))AND(NULL)) UNION ALL SELECT t0.c0 FROM t0 WHERE ((((((NULL,1)) IS NULL))AND(NULL)) IS NULL); -- 0 rows

```

### OS:

Ubuntu 22.04

### DuckDB Version:

v1.1.2-dev76 8aca4330ac

### DuckDB Client:

CLI

### Hardware:

_No response_

### Full Name:

Suyang Zhong

### Affiliation:

NUS

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a source build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have