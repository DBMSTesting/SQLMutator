ID: 14865
Title: Support non-standard timestamps (SEC, MS, & NS) in the C API
Description:
New C API types:
- `duckdb_timestamp_s`
- `duckdb_timestamp_ms`
- `duckdb_timestamp_ns`
- `duckdb_timestamp_ns_struct` (to hold `nanos`)

New C API functions:
- Conversion:
  - `duckdb_from_timestamp_s`, `duckdb_to_timestamp_s`, `duckdb_is_finite_timestamp_s`
  - `duckdb_from_timestamp_ms`, `duckdb_to_timestamp_ms`, `duckdb_is_finite_timestamp_ms`
  - `duckdb_from_timestamp_ns`, `duckdb_to_timestamp_ns`, `duckdb_is_finite_timestamp_ns`
- Binding:
  - `duckdb_bind_timestamp_s`
  - `duckdb_bind_timestamp_ms`
  - `duckdb_bind_timestamp_ns`
- Value creation/access:
  - `duckdb_create_timestamp_tz`, `duckdb_get_timestamp_tz`
  - `duckdb_create_timestamp_s`, `duckdb_get_timestamp_s`
  - `duckdb_create_timestamp_ms`, `duckdb_get_timestamp_ms`
  - `duckdb_create_timestamp_ns`, `duckdb_get_timestamp_ns`
- Appending:
  - `duckdb_append_timestamp_s`
  - `duckdb_append_timestamp_ms`
  - `duckdb_append_timestamp_ns`

New C API unit tests for all of the above, plus some new tests for appending TS SEC, MS, & NS values with the C++ Appender.

Note that, while I added new C API types for the non-standard timestamps, I didn't change how the C++ layer deals with these types. The C++ layer mostly uses a single type, `timestamp_t`, for these variants. This type has a `value` field that may hold seconds, milliseconds, microseconds, or nanoseconds. There are some more specific subtypes, `timestamp_tz_t`, `timestamp_ns_t`, `timestamp_ms_t`, and `timestamp_sec_t`, but these contain no additional code and are only used in a couple places. I experimented with changing the C++ layer to use these more specific types more, but it seems that would require touching much more code, and I ran into errors I didn't know how to address. Hence this PR focuses on exposing this functionality through the C API, without changing how the C++ layer functions.

Also:
- `duckdb_bind_timestamp_tz` already exists.
- I don't believe `duckdb_append_timestamp_tz` is needed, because `duckdb_append_timestamp` can be used for TIMESTAMP_TZ types. This is because the destination type is already known when appending, and TIMESTAMP and TIMESTAMP_TZ are both represented by `duckdb_timestamp` in the C API, so a theoretical `duckdb_append_timestamp_tz` would have the same signature and behavior as `duckdb_append_timestamp`.