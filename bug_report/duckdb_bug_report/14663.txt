ID: 14663
Title: `LIST_CONCAT()` and `||` don't propagate nulls
Description:
### What happens?

Using the concatenation operator `||` on strings does NULL propagation, ie `'foo' || NULL` results in `NULL`. I think this is good behavior. I expected that for lists, the `||` operator (and the alias function, `LIST_CONCAT()`), to work the same. But instead, they treat NULL as an empty list, so that `NULL || [1,2,3]` results in `[1,2,3]`, where I would expect `NULL`.

### To Reproduce

```sql
SELECT
    a,
    LIST_CONCAT(a, [3, 4]),
    a || [3, 4],
FROM (
    SELECT [1, 2] AS "a"
    UNION ALL
    SELECT [] AS "a"
    UNION ALL
    SELECT NULL AS "a"
);
```

```
┌─────────┬───────────────────────────────────────┬──────────────────────────────┐
│    a    │ list_concat(a, main.list_value(3, 4)) │ (a || main.list_value(3, 4)) │
│ int32[] │                int32[]                │           int32[]            │
├─────────┼───────────────────────────────────────┼──────────────────────────────┤
│ [1, 2]  │ [1, 2, 3, 4]                          │ [1, 2, 3, 4]                 │
│ []      │ [3, 4]                                │ [3, 4]                       │
│ NULL    │ [3, 4]                                │ [3, 4]                       │
└─────────┴───────────────────────────────────────┴──────────────────────────────┘
```

In addition, there is separate issue related to parsing, but may be related so I wanted to bring it up. The way duckdb interprets the types from using `||` vs `LIST_CONCAT` are different. Note the int32 vs the int32[]. This datatype different leads to different values getting produced as well.

```sql
SELECT NULL || [1, 2, 3] as pipes, LIST_CONCAT(NULL, [1, 2, 3]) as list_concat;
```

```
┌───────┬─────────────┐
│ pipes │ list_concat │
│ int32 │   int32[]   │
├───────┼─────────────┤
│  NULL │ [1, 2, 3]   │
└───────┴─────────────┘
```

### OS:

shell.duckdb.org

### DuckDB Version:

1.1.2

### DuckDB Client:

https://shell.duckdb.org/

### Hardware:

_No response_

### Full Name:

Nick Crews

### Affiliation:

Ship Creek Group

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

No - Other reason (please specify in the issue body)

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have