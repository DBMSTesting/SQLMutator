ID: 15557
Title: CTEs with `random()` should be materialised when referenced multiple times
Description:
> [!NOTE]
>
> This might be working by design with the expectation that users "fix" this themselves with the `materialized` keyword. If this is the case, please close this issue immediately.

### What happens?

CTEs that use `random()` aren't necessarily materialised, so multiple references to a CTE that uses `random()` can have unintended consequences as the CTE might be re-computed in each use

Although [the docs do clarify the conditions for automatic CTE materialisation](https://duckdb.org/docs/sql/query_syntax/with.html#cte-materialization) (and using `random()` is not one of them), this might take users by surprise -- it sure did for me, at least ðŸ˜„ 

### To Reproduce

Here's a MWE:

```sql
with loop(x) as (select random())

select
    x as x_1,
    (select x from loop) as x_2
from loop
```

Although it was referenced multiple times, the CTE wasn't performing any grouped aggregation (which are [the conditions for automatic CTE materialisation](https://duckdb.org/docs/sql/query_syntax/with.html#cte-materialization)) -- so `x_1` and `x_2` have different values

This can, of course, be fixed by adding `materialized` to the CTE:

```sql
with loop(x) as materialised (select random())

select
    x as x_1,
    (select x from loop) as x_2
from loop
```

---

For comparison, this behaviour is different to both PostgreSQL and SQLite -- which are also different from each other!

- **SQLite**: `x_1` and `x_2` are equal by default. Using `not materialized` makes `x_1` and `x_2` different
- **PostgreSQL**: `x_1` and `x_2` are equal by default, and also when using `not materialized`

### OS:

Windows

### DuckDB Version:

v1.1.3

### DuckDB Client:

JetBrains JDBC

### Hardware:

_No response_

### Full Name:

Bill Wallis

### Affiliation:

Sainsbury's PLC

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have