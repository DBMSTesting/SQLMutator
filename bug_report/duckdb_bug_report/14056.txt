ID: 14056
Title: CASE checks non-switched expression
Description:
### What happens?

I seek to `unnest()` a column if it has a suitable `json_type()` or `typeof()`. 
A `CASE` statement raises an error for the expression it would not switch to. 

### To Reproduce

```{r}
DBI::dbGetQuery(
  duckdb::dbConnect(duckdb::duckdb()),
  "SELECT CASE WHEN false THEN unnest(1) ELSE 2 END AS x;"
)
# Error: rapi_prepare: Failed to prepare query SELECT CASE WHEN FALSE THEN unnest(1) ELSE 2 END AS x;
# Error: Binder Error: UNNEST() can only be applied to lists, structs and NULL
# LINE 1: SELECT CASE WHEN FALSE THEN unnest(1) ELSE 2 END AS x;
#                                     ^
```
My expectation for the result was, 
```
#   x
# 1 2
```
Is this expected or intended behaviour? 

### OS:

MacOS

### DuckDB Version:

1.1.0

### DuckDB Client:

R

### Hardware:

_No response_

### Full Name:

Ralf Herold

### Affiliation:

private

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a source build

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have