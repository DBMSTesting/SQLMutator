ID: 15788
Title: Possible errors: Floating point results indicate issues
Description:
### What happens?

I encountered inconsistency while executing the following SQL statement. I believe that statement 1 and statement 2 should return the same result,
The first query does not have a where condition, and the second query returns union all results for true, false, and unknown under the same condition. According to the three value logic, these two results should be the same, but in fact, they return different amounts of data
Specifically, we included the data (0.0, -0.0) in the result set of the first search statement, but the data in the result set of the second search statement became (-0.0, -0.0). We continued to execute the statement: SELECT t1.c0, v0.c0 FROM v0 NATURAL LEFT JOIN t1 WHERE (((t1.c0)%('2104151460') ) IN (t1.c0));  The resulting set is also (-0.0, -0.0). Inconsistent phenomenon with the result of the first statement

### To Reproduce

```
CREATE TABLE t0(c0 VARCHAR UNIQUE DEFAULT(''), PRIMARY KEY(c0));
CREATE TABLE t1(c0 FLOAT4 DEFAULT(1.214250137E9), PRIMARY KEY(c0));
INSERT INTO t0(c0) VALUES (TIMESTAMP '1969-12-27 01:43:13'), (DEFAULT), (false);
INSERT INTO t1(c0) VALUES (-1869344473);
INSERT INTO t0(c0) VALUES (0.5106544403216038);
INSERT INTO t1(c0) VALUES (0.3600054637697844);
INSERT INTO t1(c0) VALUES (DEFAULT), (1559844242), (-897810732);
CREATE VIEW v0(c0) AS SELECT (- t1.c0) FROM t1 LIMIT 1574900224;
VACUUM;
INSERT INTO t1(c0) VALUES ('');
INSERT INTO t1(c0) VALUES (0.4140813306940627);
INSERT INTO t1(c0) VALUES (0.5471376994390728), (true);
INSERT INTO t0(c0) VALUES (true);
INSERT INTO t0(c0) VALUES (1986139881);
INSERT INTO t0(c0) VALUES ('pPc');
INSERT INTO t0(c0) VALUES (0.33001424071979846);
CREATE UNIQUE INDEX i4 ON t1(c0 );
INSERT INTO t1(c0) VALUES (0.6038794640138773);
INSERT INTO t1(c0) VALUES (-559523941);
INSERT INTO t1(c0) VALUES (false);
INSERT INTO t0(c0) VALUES (0.5988523135824004);
CREATE INDEX i2 ON t1(c0 );
CREATE INDEX i1 ON t0(c0 );

--First query : "SELECT t1.c0, v0.c0 FROM v0 NATURAL LEFT JOIN t1"
--Second query: "SELECT t1.c0, v0.c0 FROM v0 NATURAL LEFT JOIN t1 WHERE (((t1.c0)%('2104151460')) IN (t1.c0)) UNION ALL SELECT t1.c0, v0.c0 FROM v0 NATURAL LEFT JOIN t1 WHERE (NOT (((t1.c0)%('2104151460')) IN (t1.c0))) UNION ALL SELECT t1.c0, v0.c0 FROM v0 NATURAL LEFT JOIN t1 WHERE (((((t1.c0)%('2104151460')) IN (t1.c0))) IS NULL)"; 
```


### OS:

x86_64

### DuckDB Version:

1.1.3

### DuckDB Client:

Python

### Hardware:

_No response_

### Full Name:

Chenglin

### Affiliation:

Personal

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [x] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [x] Yes, I have