ID: 15457
Title: DuckDB Assertion Failure: std::find(other_alias.get().bindings.begin(), other_alias.get().bindings.end(), col) == other_alias.get().bindings.end()
Description:
### What happens?

The latest version of the DuckDB (latest main: v1.1.4-dev3741 ab8c909857) triggers Assertion Failure when running the following SQL statement: 

```sql
CREATE TABLE v00 (c01 INT, c02 STRING);
FROM 'string' : ( 'string' : ( v00 AS ta03 CROSS JOIN v00 AS ta04 ) SEMI JOIN 'string' : ( v00 AS ta05 ANTI JOIN v00 AS ta06 USING ( c01, c02 ) ) USING ( c01, c02 ) ), 'string' : ( 'string' : ( v00 AS ta07 NATURAL FULL JOIN v00 AS ta08 ) JOIN v00 AS ta09 USING ( c01, c02, ) ) SELECT 'string';
```

Here is the stack trace: 

```
#0  duckdb::InternalException::InternalException (this=0x60d00000c490, Python Exception <class 'gdb.error'> There is no member named _M_dataplus.:
msg=) at /home/duckdb/duckdb/src/common/exception.cpp:320
#1  0x00000000020c1089 in duckdb::InternalException::InternalException<char const*, int, char const*> (this=0x60d00000c490, msg=...,
    params=<optimized out>, params=<optimized out>, params=<optimized out>) at ../../src/include/duckdb/common/exception.hpp:313
#2  0x0000000001e672b1 in duckdb::DuckDBAssertInternal (condition=<optimized out>, condition_name=<optimized out>, file=<optimized out>,
    linenr=<optimized out>) at /home/duckdb/duckdb/src/common/assert.cpp:13
#3  0x0000000006242fe9 in duckdb::BindContext::AddContext (this=0x61900000bf60, other=...) at /home/duckdb/duckdb/src/planner/bind_context.cpp:701
#4  0x0000000005ef75a2 in duckdb::Binder::Bind (this=0x61900000be80, ref=...) at /home/duckdb/duckdb/src/planner/binder/tableref/bind_joinref.cpp:308
#5  0x000000000620025b in duckdb::Binder::Bind (this=0x61900000be80, ref=...) at /home/duckdb/duckdb/src/planner/binder.cpp:398
#6  0x000000000b18e729 in duckdb::Binder::BindNode (this=0x7ffec05be340, statement=...)
    at /home/duckdb/duckdb/src/planner/binder/query_node/bind_select_node.cpp:371
#7  0x00000000061fbe1d in duckdb::Binder::BindNode (this=0x61900000be80, node=...) at /home/duckdb/duckdb/src/planner/binder.cpp:328
#8  0x00000000061fd386 in duckdb::Binder::Bind (this=0x61900000be80, node=...) at /home/duckdb/duckdb/src/planner/binder.cpp:365
#9  0x0000000005cff998 in duckdb::Binder::Bind (this=0x61900000be80, stmt=...) at /home/duckdb/duckdb/src/planner/binder/statement/bind_select.cpp:11
#10 0x00000000061f0c0d in duckdb::Binder::Bind (this=<optimized out>, statement=...) at /home/duckdb/duckdb/src/planner/binder.cpp:150
#11 0x00000000062476bc in duckdb::Planner::CreatePlan (this=0x7ffec05c11f0, statement=...) at /home/duckdb/duckdb/src/planner/planner.cpp:43
#12 0x0000000006250843 in duckdb::Planner::CreatePlan (this=0x60d00000c490, statement=...) at /home/duckdb/duckdb/src/planner/planner.cpp:142
#13 0x00000000035f27e7 in duckdb::ClientContext::CreatePreparedStatementInternal (this=0x616000080190, lock=..., query=..., statement=..., values=...)
    at /home/duckdb/duckdb/src/main/client_context.cpp:344
#14 0x00000000035f9584 in duckdb::ClientContext::CreatePreparedStatement (this=0x616000080190, lock=..., query=..., statement=..., values=...,
    mode=<optimized out>) at /home/duckdb/duckdb/src/main/client_context.cpp:430
#15 0x000000000361b5ea in duckdb::ClientContext::PendingStatementInternal (this=0x616000080190, lock=..., query=..., statement=..., parameters=...)
    at /home/duckdb/duckdb/src/main/client_context.cpp:749
#16 0x0000000003628214 in duckdb::ClientContext::PendingStatementOrPreparedStatement (this=0x616000080190, lock=..., query=..., statement=...,
    prepared=..., parameters=...) at /home/duckdb/duckdb/src/main/client_context.cpp:867
#17 0x0000000003616cf8 in duckdb::ClientContext::PendingStatementOrPreparedStatementInternal (this=0x616000080190, lock=..., query=..., statement=...,
    prepared=..., parameters=...) at /home/duckdb/duckdb/src/main/client_context.cpp:841
#18 0x000000000361ea4b in duckdb::ClientContext::PendingQueryInternal (this=0x616000080190, lock=..., statement=..., parameters=...,
    verify=<optimized out>) at /home/duckdb/duckdb/src/main/client_context.cpp:1058
#19 0x0000000003634b0e in duckdb::ClientContext::PendingQuery (this=0x616000080190, statement=..., values=..., allow_stream_result=<optimized out>)
    at /home/duckdb/duckdb/src/main/client_context.cpp:1045
#20 0x000000000362c020 in duckdb::ClientContext::PendingQuery (this=0x616000080190, statement=..., allow_stream_result=<optimized out>)
    at /home/duckdb/duckdb/src/main/client_context.cpp:1005
#21 0x000000000367b5a8 in duckdb::Connection::PendingQuery (this=<optimized out>, statement=..., allow_stream_result=<optimized out>)
    at /home/duckdb/duckdb/src/main/connection.cpp:140
#22 0x000000000071a344 in duckdb_shell_sqlite3_prepare_v2 (db=0x60f0000007c0, zSql=<optimized out>, nByte=<optimized out>, ppStmt=<optimized out>,
    pzTail=<optimized out>) at ../../tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:224
#23 0x00000000006720f6 in duckdb_shell::ShellState::ExecuteSQL (this=0x7ffec05c38e0,
    zSql=0x61500005f580 "( FROM 'string' : ( 'string' : ( v00 AS ta84806000 CROSS JOIN v00 AS ta84806001 ) SEMI JOIN 'string' : ( v00 AS ta84806002 ANTI JOIN v00 AS ta84806003 USING ( c01, c02, ) ) USING ( c01, c02, ) ), 'str"..., pzErrMsg=<optimized out>) at ../../tools/shell/shell.cpp:3524
#24 0x000000000069d6b3 in duckdb_shell::ShellState::RunOneSqlLine (this=<optimized out>, zSql=<optimized out>) at ../../tools/shell/shell.cpp:8706
#25 0x0000000000692c74 in duckdb_shell::ShellState::ProcessInput (this=0x7ffec05c38e0) at ../../tools/shell/shell.cpp:8936
#26 0x00000000006a396d in main (argc=<optimized out>, argv=<optimized out>) at ../../tools/shell/shell.cpp:10152
```

### To Reproduce

1. Clone the DuckDB Git from the official repo.
2. Checkout to the latest main (v1.1.4-dev3741 ab8c909857).
3. Compile the DuckDB binary by using `make debug`. 
4. Run the compiled DuckDB and input the following SQL:

```sql
CREATE TABLE v00 (c01 INT, c02 STRING);
FROM 'string' : ( 'string' : ( v00 AS ta03 CROSS JOIN v00 AS ta04 ) SEMI JOIN 'string' : ( v00 AS ta05 ANTI JOIN v00 AS ta06 USING ( c01, c02 ) ) USING ( c01, c02 ) ), 'string' : ( 'string' : ( v00 AS ta07 NATURAL FULL JOIN v00 AS ta08 ) JOIN v00 AS ta09 USING ( c01, c02, ) ) SELECT 'string';
```

### OS:

Ubuntu 24.04 LTS

### DuckDB Version:

v1.1.4-dev3741 ab8c909857

### DuckDB Client:

cli

### Hardware:

_No response_

### Full Name:

Yu Liang

### Affiliation:

The Pennsylvania State University

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a source build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have