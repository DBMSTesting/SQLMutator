ID: 14543
Title: addition of CTE in one function causes Binder Error in another function that is otherwise OK
Description:
### What happens?

The program as given below runs properly.

But if the commented-out 'shuffle()' function that uses a CTE is used instead of the original `shuffle()`, then an error is raised:
```
Binder Error: Referenced table "ctes" not found!
```
This borders on the bizarre because `ctes` is in the function that is common to both programs.

This behavior has been observed in v1.0 and v1.1.3-dev38 and other versions too.





### To Reproduce

```
create or replace function shuffle(lst) as (lst[2:] || lst[1:1]);

/* This is the alternative `shuffle` function:

create or replace function shuffle(a) as (
  with cte0 as (select len % 2 = 1 as odd, (len+1)//2 as mid from (select length(a) as len))
  select list_transform( range(1, mid+1), i -> if (i=mid and odd, [a[i]], [a[i], a[mid+i]]) )
         .flatten()
  from cte0
);
*/

create or replace function quiescence(start) as table (
  with recursive ctes as (
    select shuffle(start) as state, 1 as n
    union all
    select shuffle(state) as state, n+1 as n
    from ctes
    where state != start
  )
  select last(n) as nn
  from ctes
  limit 1
);  

from quiescence(range(0,4));
```

### OS:

MacOS

### DuckDB Version:

v1.0 and v1.1.3-dev38 etc

### DuckDB Client:

CLI

### Hardware:

_No response_

### Full Name:

Peter Koppstein

### Affiliation:

Princeton University

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a source build

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have