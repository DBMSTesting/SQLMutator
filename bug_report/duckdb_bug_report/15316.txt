ID: 15316
Title: Literal 'FALSE' much slower than false condition that triggers predicate pushdown
Description:
### What happens?

When querying against parquet files, I am using a JOIN condition that should return no rows. Joining on FALSE is far slower than joining on a FALSE-yielding statement that references a column available in the parquet files.

## Example
In this example, `single_col_table.parquet` col1 is never < 0.

Slow:
```sql
SELECT * 
FROM big_table.parquet c
LEFT OUTER JOIN single_col_table.parquet hd ON hd.col1=c.col1 
AND (
    FALSE
)

```

Fast:
```sql
SELECT * 
FROM big_table.parquet c
LEFT OUTER JOIN single_col_table.parquet hd ON hd.col1=c.col1 
AND (
    hd.col1 = -1
)
```

### To Reproduce

## Generate the tables

`generate.sql`:
```sql

-- Create a large table with two columns
CREATE OR REPLACE TABLE big_table AS
SELECT i.range AS col1,
       CAST(random() * 1000000 AS INTEGER) AS col2
FROM range(1_000_000) i;

-- Create another large table with one column
CREATE OR REPLACE TABLE single_col_table AS
SELECT i.range AS col1
FROM range(500_000) i;

COPY big_table TO 'big_table.parquet' (FORMAT 'parquet');
COPY single_col_table TO 'single_col_table.parquet' (FORMAT 'parquet');

```

```sh

duckdb < generate.sql

```

## Run the fast query
It executes quickly.

`query_fast.sql`:
```sql
SELECT * 
FROM big_table.parquet c
LEFT OUTER JOIN single_col_table.parquet hd ON hd.col1=c.col1 
AND (
    hd.col1 = -1
);
```

```sh
duckdb < query_fast.sql
```

## Run the slow query
It takes a long time.

`query_slow.sql`:
```sql
SELECT * 
FROM big_table.parquet c
LEFT OUTER JOIN single_col_table.parquet hd ON hd.col1=c.col1 
AND (
    FALSE
);
```

```sh
duckdb < query_slow.sql
```

## Notes
* This has an easy workaround, documented in the "fast" query, so I am not requesting any support, but raising this in case it's of interest.
* If the `slow` query runs too quickly for you, just increase the number of records in the `generate` step.

### OS:

macOS Ventura (13.6.9)

### DuckDB Version:

v1.1.3

### DuckDB Client:

duckdb cli (it also repros with github.com/marcboeker/go-duckdb )

### Hardware:

repros on mac ARM and linux x86

### Full Name:

James Pirruccello

### Affiliation:

Carbocation Corporation

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have