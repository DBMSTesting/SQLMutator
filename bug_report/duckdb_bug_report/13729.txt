ID: 13729
Title: Implement `left_projection_map` for joins
Description:
This PR implements `left_projection_map` for joins.

DuckDB already implements `right_projection_map`, which removes unused columns on the build-side of joins. For a long time, it was not important to implement `left_projection_map`, which should remove unused columns on the probe-side of joins, as the overhead of these left-hand side columns is negligible when performing (streaming) in-memory joins. However, for larger-than-memory joins, we have to materialize probe-side data, and it becomes necessary to reduce data size as much as possible.

For a long time now, projection maps have been the source of much frustration for us, as they complicate query planning. Projection maps index columns positionally, while during logical planning, many other things do not use positions to identify columns, but rather `ColumnBinding`s, which uniquely identify columns. To a certain extent, this PR also addresses this problem by modifying `LogicalOperatorVisitor` to recompute projection maps if the positions of columns are changed by an optimization, such as flipping the left- and right-hand side of joins.

For now, `left_projection_map` is only used for hash joins but could be added to other join types.