ID: 15638
Title: Extension type modifier followup
Description:
This PR is another followup to #15373

It turns out that the equality operation for types with/without type modifiers was not symmetric, which besides being generally confusing, also caused some issues on platforms where e.g. the STL compares e.g. map keys (using ==) with the arguments in different order.

This has now been fixed, but I also did some other simplification/future proofing.

The equality comparison logic for extension type modifiers is now much simpler. Basically, type modifiers do not affect the equality of types unless both types have modifiers, in which case their common sequence are compared in order. In short:

Given a type `T` with some combination of modifiers `A` and `B`

- `T == T(A)`
- `T == T(A, B)`
- `T(A) == T(A, B)`
- `T(A) != T(B)`
- `T(A, B) != T(B)`
- `T(B, A) != T(A, B)`

There is no special wildcard logic for NULLs or whatnot.
Additionally, I've also removed the logic for declaring "default type mods" as it mostly just complicates things. If you want to enable type modifiers for a type you need to provide a `bind_logical_type_function_t` callback when registering the type and implement the logic for attaching the modifiers yourself. Similarly, if you want to enforce the presence/absence or some relation between type modifiers you should implement that logic in the `Bind` callback for the individual scalar/aggregate/table functions where it matters, as trying to generalize this to somehow work declaratively is not really possible with duckdbs existing type infrastructure. 

I've also attempted to "future proof" future changes to type modifiers by wrapping the Value in a new `LogicalTypeModifier` struct, which enables us to add additional fields without breaking serialization. 

With this change I've also added an optional "label" string to the `LogicalTypeModifier` struct, which if present, will be used when printing the type instead of the `ToString` of the actual type modifier value. This provides extension authors some more control over how type mods are presented to users. E.g. you may want to store a really large value, but make sure it's truncated or print some shorthand instead. 
