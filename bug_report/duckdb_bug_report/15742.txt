ID: 15742
Title: Errors triggered by comparison operators and column references
Description:
### What happens?

Thank you for your previous reply. There are indeed some grammatical errors in the issue I reported before. I apologize for wasting your time.
Now I will report this issue again.
I encountered inconsistency while executing the following SQL statement. I believe that statement 1 and statement 2 should return the same result,
The first query does not have a where condition, and the second query returns union all results for true, false, and unknown under the same condition. According to the three value logic, these two results should be the same, but in fact, they return different amounts of data.
According to my observation, the data with rowid=7 is not returned by the second query. It should be returned by SELECT t0.c1, t0.rowid, t0.c0 FROM t0 WHERE (NOT (true<(t0.c0))) in the second query and included in the result of union all.


### To Reproduce

```sql
CREATE TABLE t0(c0 INT1 DEFAULT(0.051298212901439655), c1 SIGNED DEFAULT(-185766140));
UPDATE t0 SET c0=false;
INSERT INTO t0(c0) VALUES ('0.08157374931989991');
CREATE VIEW v0(c0) AS SELECT t0.rowid FROM t0 WHERE 0.9268147670313996 ORDER BY t0.c1 DESC, TIMESTAMP '1970-01-17 01:38:09' DESC, t0.rowid ASC LIMIT 824793399 OFFSET 22399636;
CREATE INDEX i2 ON t0(c0 );
INSERT INTO t0(c0) VALUES (0.345533146443321);
UPDATE t0 SET c1=-1736770258, c0=0.18558799648579727;
INSERT INTO t0(c1) VALUES (0.2412596706190676);
VACUUM;
INSERT INTO t0(c1) VALUES (true), (0.37340505447970596);
INSERT INTO t0(c0, c1) VALUES (true, false);
INSERT INTO t0(c1) VALUES (false), (134824512);
CREATE INDEX i4 ON t0(c0 );
INSERT INTO t0(c1) VALUES (0.45268726615221344);
INSERT INTO t0(c1) VALUES (1640241679);

--First query
SELECT t0.c1, t0.rowid, t0.c0 FROM t0;
--whose cardinality is: 10

--Second query
SELECT t0.c1, t0.rowid, t0.c0 FROM t0 WHERE (true<(t0.c0)) UNION ALL SELECT t0.c1, t0.rowid, t0.c0 FROM t0 WHERE (NOT (true<(t0.c0))) UNION ALL SELECT t0.c1, t0.rowid, t0.c0 FROM t0 WHERE (((true<(t0.c0))) IS NULL);
--whose cardinality is: 9
```

### OS:

linux

### DuckDB Version:

v1.1.0

### DuckDB Client:

python

### Hardware:

_No response_

### Full Name:

Chenglin

### Affiliation:

personal

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a source build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [x] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [x] Yes, I have