ID: 12907
Title: Feature #1272: Window Parallel Sink
Description:
Convert the window operator to parallelise the "Sink" portion of the data preparation phase. This includes:

* Converting the task execution model from to a simple, ordered list of tasks for each hash group.
* Reworking the task state machine to have three stages (Sink, Finalize, GetData)
* Parallelising Sink operations by scanning only block ranges
* Wrapping DataChunk with column-level locking to enable parallel Copy operations
* Passing local state and current row into the executor Sink methods
* Adding (temporary) exclusion locks for executor Finalize.
* Adding (temporary) exclusion locks for aggregation accelerators.
* Fix for unaligned count overwrites in ValidityMask::SliceInPlace

One unresolved problem is that using the operator interrupt mechanism
appears to create deadlocks, but yielding does not. The interrupt code
is included but #ifdef-ed out.

Remaining tasks:

* Finish parallelising some Sink internals
* Parallelise the Finalize operations
* Switch to aligned and finer grained scans once the sort blocks have been updated to the ICDE paper format

(I also removed a few spurious uses of the word "over" in some slow test files
as they gum up my development cycle for testing window functionality...)
