ID: 15662
Title: Transaction isolation issue with multiple connections?
Description:
### What happens?

Uncommitted transactions on two different connections while updating the same column for the same key results in a `Conflict on update!` error when executing an `UPDATE` statement.

**Example:**

Connection 1:
```sql
BEGIN TRANSACTION
update FOO set v = 11 where id = 2
```

Connection 2:
```sql
BEGIN TRANSACTION
update FOO set v = 11 where id = 2
```

I'm not 100% if this is intended behavior.  However, reading the documentation it sounds as if this condition should not occur until the transactions are committed.  The larger concern is if one connection goes quite for a while with in flight changes other connections will be blocked from changing data on the uncommitted change.


### To Reproduce

I've been able to reproduce this with a C API unit test against 1.1.3.

```c++
TEST_CASE("Test transaction conflict in C API", "[capi]") {
	duckdb_database db;
	duckdb_connection connection1;
	duckdb_connection connection2;
	duckdb_result result;
	duckdb_result errorMessage;

	REQUIRE(duckdb_open(nullptr, &db) != DuckDBError);
	REQUIRE(duckdb_connect(db, &connection1) != DuckDBError);
	REQUIRE(duckdb_connect(db, &connection2) != DuckDBError);

	REQUIRE(duckdb_query(connection1, "CREATE TABLE FOO(id INTEGER unique, v INTEGER, y INTEGER)", nullptr) != DuckDBError);
	REQUIRE(duckdb_query(connection1, "INSERT INTO FOO VALUES (1, 1, 1), (2, 2, 2)", nullptr) != DuckDBError);

	REQUIRE(duckdb_query(connection1, "BEGIN TRANSACTION", nullptr) != DuckDBError);
	REQUIRE(duckdb_query(connection2, "BEGIN TRANSACTION", nullptr) != DuckDBError);

	REQUIRE(duckdb_query(connection1, "update FOO set v = 11 where id = 2", nullptr) != DuckDBError);
	auto state = duckdb_query(connection2, "update FOO set v = 22 where id = 2", &errorMessage);
	if (state == DuckDBError) {
		// Just here to show what the error message is.
		auto message = duckdb_result_error(&errorMessage);
		REQUIRE(message == "");
		duckdb_destroy_result(&errorMessage);
	}

	//Commit connection 2 only
	REQUIRE(duckdb_query(connection2, "COMMIT", nullptr) != DuckDBError);

	REQUIRE(duckdb_query(connection2, "SELECT * FROM FOO", &result) != DuckDBError);
	REQUIRE(duckdb_value_int32(&result, 1, 1) == 22);

	duckdb_destroy_result(&result);
	duckdb_disconnect(&connection1);
	duckdb_disconnect(&connection2);
	duckdb_close(&db);
}
```

### OS:

macOS 15.2

### DuckDB Version:

1.1.3

### DuckDB Client:

DDB Unit Test/C API

### Hardware:

M1 Max MBP

### Full Name:

Jeremy Osterhoudt

### Affiliation:

Prefer not to say publicly for competitive reasons, but happy to have a conversation in private

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have