ID: 15566
Title: [Dev] `ColumnDataCheckpointer` can now checkpoint column data and validity data together
Description:
### ColumnDataCheckpointData

To give the compression function access to the column data, a reference to the `ColumnDataCheckpointer` was provided to the function.
This is used to extract certain ColumnData information like the LogicalType and the associated ColumnCheckpointState. Since `ColumnDataCheckpointer` is not always associated with a specific ColumnData anymore, a new struct was introduced to hold this information.

```c++
//! Holds state related to a single column during compression
struct ColumnDataCheckpointData {
public:
	//! Default constructor used when column data does not need to be checkpointed
	ColumnDataCheckpointData() {
	}
	ColumnDataCheckpointData(ColumnCheckpointState &checkpoint_state, ColumnData &col_data, DatabaseInstance &db,
	                         RowGroup &row_group, ColumnCheckpointInfo &checkpoint_info)
	    : checkpoint_state(checkpoint_state), col_data(col_data), db(db), row_group(row_group),
	      checkpoint_info(checkpoint_info) {
	}

public:
	CompressionFunction &GetCompressionFunction(CompressionType type);
	const LogicalType &GetType() const;
	ColumnData &GetColumnData();
	RowGroup &GetRowGroup();
	ColumnCheckpointState &GetCheckpointState();
	DatabaseInstance &GetDatabase();

private:
	optional_ptr<ColumnCheckpointState> checkpoint_state;
	optional_ptr<ColumnData> col_data;
	optional_ptr<DatabaseInstance> db;
	optional_ptr<RowGroup> row_group;
	optional_ptr<ColumnCheckpointInfo> checkpoint_info;
};
```

### StandardColumnData

This new functionality of the ColumnDataCheckpointer is used when checkpointing StandardColumnData, this is any type of column data that is non-nested. Nested types like list/array/struct will eventually have StandardColumnData entries as their leaves.

Previously the base data would scan its old data + the old validity data, afterwards the validity would checkpoint and scan the validity data again. This was wasteful and is removed by this change.

In addition to this fix, this change should also allow us to combine validity information into the base data's segments if the compression function allows it, reducing the physical footprint of a column. This change will be made in a future PR.