ID: 15373
Title: Add `ExtensionTypeInfo` to `ExtraTypeInfo`
Description:
A while ago I added a `vector<Value>` of "type modifiers" to our LogicalType, with the intention that it could be used by extensions to create parameterized type variants. In practice this was never used, and the initial implementation turned out to be a bit too primitive to handle my initial use-case in spatial. 

~~This PR changes the type modifiers from `vector<Value>` into a `child_list_t<Value>` which gives "modified" extension types some additional control over how the modifiers are shown when a type is "printed". Additionally, type modifiers prefixed with a double underscore are not printed at all, which enables extensions to "hide" internal metadata in the types without necessarily making it visible to the end-user.~~

This PR moves the type modifiers into a separate `ExtensionTypeInfo` struct (pointed to by `ExtraTypeInfo`), which also holds a `unordered_map<string, Value> properties` map where extension authors can store additional metadata hidden from the end-user. Two types with the same property but with different values are not considered equal, otherwise the presence of properties do not affect type equality.

Ideally extension authors would have even more control over types, and be able to provide their own `ToString` style callbacks, comparison functions or extension data that don't necessarily fit into a `duckdb::Value`, but that would require a much more involved overhaul. By keeping type-modifiers and properties as `duckdb::Value`:s, types remain "self-describing", can be instantiated without a catalog lookup, and don't need any special de/serialization logic.

That said, I am very much interested in working on making custom types more powerful in the future by adding additional settings and hooks to the `ExtensionTypeInfo`.

Also fixes a small issue in the serialization generator when deleting a field from a base type.
I've also streamlined  `BindLogicalType` to be less bloated, but the logic is the same. 