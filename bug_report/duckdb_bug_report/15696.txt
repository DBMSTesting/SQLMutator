ID: 15696
Title: Can not read json-file from URL, reading response-header(?)
Description:
### What happens?

When using read_json to read the json-file available at https://data.brreg.no/enhetsregisteret/api/enheter/lastned (the Norwegian Business Register), I get an error that might indicate that read_json somehow tries to parse the information in the http response header, i.e. a timestamp matching the value of the response header ```last-modified```.

The error I get:
```
InvalidInputException                     Traceback (most recent call last)
Cell In[1], line 3
      1 # %%
      2 import duckdb
----> 3 er = duckdb.read_json(
      4     "https://data.brreg.no/enhetsregisteret/api/enheter/lastned",
      5     compression="gzip",
      6     )

InvalidInputException: Invalid Input Error: Failed to parse string "Tue Jan 14 03:26:02 UTC 2025" with format specifier "%a, %d %h %Y %T %Z"
```

Don't know if this might be the problem, but I've noticed that the server that serves the json.gz-file serves it as an "attachement" according to the response header ```content-disposition```:

```
GET /enhetsregisteret/api/enheter/lastned HTTP/1.1\r\nAccept-Encoding: identity\r\nHost: data.brreg.no\r\nUser-Agent: Python-urllib/3.13\r\nConnection: close\r\n\r\n'
reply: 'HTTP/1.1 200 \r\n'
header: vary: Origin
header: vary: Access-Control-Request-Method
header: vary: Access-Control-Request-Headers
header: x-content-type-options: nosniff
header: x-xss-protection: 0
header: cache-control: no-cache, no-store, max-age=0, must-revalidate
header: pragma: no-cache
header: expires: 0
header: x-frame-options: DENY
header: accept-ranges: bytes
header: etag: b073b0d3f754a194e97a9c3f4c92b59e
header: content-disposition: attachment; filename="enheter_alle.json.gz"
header: last-modified: Mon Jan 13 03:25:38 UTC 2025
header: date: Mon, 13 Jan 2025 22:34:05 GMT
header: keep-alive: timeout=60
header: strict-transport-security: max-age=157680000; includeSubDomains
header: content-type: application/gzip;charset=UTF-8
header: content-length: 178132214
header: set-cookie: 46e4dfce9d932827280cd8fd3a9dd44b=b8edf01768bf912b89ee38b2785acc59; path=/; HttpOnly; Secure; SameSite=None
header: connection: close
header: Set-Cookie: BIGipServer~OCP-prd~ocp01.prd.base.brreg.no-router-443=1040354314.47873.0000; path=/; Httponly; Secure
```

If I test with another json.gz-file that is served directly as the http-response, I have no problems. Maybe I am on the totally wrong track here, though ...

If I download the file using requests, and write it to the file system, and then parse it with duckdb, it works as expected. I.e. it works GREAT :-)


### To Reproduce

```
import duckdb
er = duckdb.read_json(
    "https://data.brreg.no/enhetsregisteret/api/enheter/lastned",
    compression="gzip",
    )
```

### OS:

x86_64, Windows 11 WSL with Ubuntu 22.04

### DuckDB Version:

1.1.3

### DuckDB Client:

Python

### Hardware:

(sorry, missed this. It's an intel i7 laptop)

### Full Name:

Steinar Skagemo

### Affiliation:

The Brønnøysund Register Center

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have not tested with any build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have