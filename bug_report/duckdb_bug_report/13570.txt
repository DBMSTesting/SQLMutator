ID: 13570
Title: Invalid BM25 scores when building index with multiple fields
Description:
### What happens?

The BM25 scores vary for the same field when the search index is constructed using different columns.

### To Reproduce

```sql
INSTALL fts;
LOAD fts;

CREATE OR REPLACE TABLE example (
    id VARCHAR,
    field_a VARCHAR,
    field_b VARCHAR,
);

INSERT INTO example VALUES 
    ('doc1', 'hello', 'hello'),
    ('doc2', 'hello', 'world');

-- everything else remains the same, just swap comment between these two lines
  PRAGMA create_fts_index('example', 'id',            'field_b', stopwords='none', overwrite=1);
--PRAGMA create_fts_index('example', 'id', 'field_a', 'field_b', stopwords='none', overwrite=1);

SELECT 
    *,
    fts_main_example.match_bm25(id, 'hello world', fields:='field_b') bm25_score
FROM 
    example;
```
will give following results:
```
┌─────────┬─────────┬─────────┬────────────────────┐
│   id    │ field_a │ field_b │     bm25_score     │
│ varchar │ varchar │ varchar │       double       │
├─────────┼─────────┼─────────┼────────────────────┤
│ doc1    │ hello   │ hello   │ 0.3010299956639812 │
│ doc2    │ hello   │ world   │ 0.3010299956639812 │
└─────────┴─────────┴─────────┴────────────────────┘
```
Let's swap only the create_fts_index calls:
```sql
INSTALL fts;
LOAD fts;

CREATE OR REPLACE TABLE example (
    id VARCHAR,
    field_a VARCHAR,
    field_b VARCHAR,
);

INSERT INTO example VALUES 
    ('doc1', 'hello', 'hello'),
    ('doc2', 'hello', 'world');

-- everything else remains the same, just swap comment between these two lines
--PRAGMA create_fts_index('example', 'id',            'field_b', stopwords='none', overwrite=1);
  PRAGMA create_fts_index('example', 'id', 'field_a', 'field_b', stopwords='none', overwrite=1);

SELECT 
    *,
    fts_main_example.match_bm25(id, 'hello world', fields:='field_b') bm25_score
FROM 
    example;
```
will give following results:
```
┌─────────┬─────────┬─────────┬─────────────────────┐
│   id    │ field_a │ field_b │     bm25_score      │
│ varchar │ varchar │ varchar │       double        │
├─────────┼─────────┼─────────┼─────────────────────┤
│ doc1    │ hello   │ hello   │ 0.07918124604762482 │
│ doc2    │ hello   │ world   │  0.3010299956639812 │
└─────────┴─────────┴─────────┴─────────────────────┘
```
As observed, the bm25_score differs even though the example documents and the match_bm25 call are identical. The only difference is in the indexing: the first create_fts_index includes only field_b, while the second index incorporates both field_a and field_b. This shouldn't affect scoring since scores should be calculated only among words in field_b.

Based on further investigation, it looks like IDF and other stats are calculated only over all FTS-indexed fields, while stats should be available for all possible combinations of different indexed columns.

### OS:

Ubuntu x86_64

### DuckDB Version:

v0.0.1 26471c2

### DuckDB Client:

CLI

### Full Name:

Jaakko Routamaa

### Affiliation:

-

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a nightly build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have