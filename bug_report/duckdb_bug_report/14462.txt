ID: 14462
Title: ADBC - memory not released 
Description:
### What happens?

I'm experimenting with the ADBC golang API. I have a workload that alternately ingests and deletes all rows in a table using the Go ADBC `bind` interface. When left running, memory usage continues to rise until the application needs to be killed.

### To Reproduce

Tested with Debian docker image running on MacOS host on arm64 architecture.

The code and a Dockerfile to reproduce the issue can be found in this [repo](https://github.com/neveritt/duckdb-adbc-test). For convenience the code is included below.

```
package main

import (
	"context"
	"log"
	"time"

	_ "net/http/pprof"

	"github.com/apache/arrow-adbc/go/adbc"
	"github.com/apache/arrow-adbc/go/adbc/drivermgr"
	"github.com/apache/arrow/go/v17/arrow"
	"github.com/apache/arrow/go/v17/arrow/array"
	"github.com/apache/arrow/go/v17/arrow/memory"
	"golang.org/x/exp/rand"
)

const tableName = "persons"

var (
	schema = arrow.NewSchema(
		[]arrow.Field{
			{Name: "id", Type: arrow.PrimitiveTypes.Int32},
		},
		nil,
	)
)

func connectToDuckDB(ctx context.Context) (adbc.Connection, adbc.Database) {
	var drv drivermgr.Driver
	db, err := drv.NewDatabase(map[string]string{
		"driver":     "duckdb",
		"entrypoint": "duckdb_adbc_init",
		"path":       "/tmp/a.db",
	})

	if err != nil {
		log.Println("failed to open database")
	}

	// After initializing the database, we must create and initialize a connection to it.
	cnxn, err := db.Open(ctx)
	if err != nil {
		log.Println("failed to open connection")
	}
	return cnxn, db
}

func buildSampleArrowRecord(numRows int) arrow.Record {
	// Create an arrow data that needs to be ingested to DuckDB
	pool := memory.DefaultAllocator

	// Create builders for each field
	idBuilder := array.NewInt32Builder(pool)
	defer idBuilder.Release()

	for i := 0; i < numRows; i++ {
		randomID := rand.Int31n(1000) // Generate a random integer between 0 and 999
		idBuilder.Append(randomID)
	}

	idArray := idBuilder.NewArray()
	defer idArray.Release()

	columns := []arrow.Array{idArray}
	record := array.NewRecord(schema, columns, int64(numRows))

	return record
}

func ingestArrowBatch(ctx context.Context, numRowsinBatch int, st adbc.Statement, append bool) {
	// create batch of Arrow record
	sampleArrowRecord := buildSampleArrowRecord(numRowsinBatch)
	defer sampleArrowRecord.Release()

	// Bind uses an arrow record batch to bind parameters to the query
	err := st.Bind(ctx, sampleArrowRecord)
	if err != nil {
		panic(err)
	}

	// Set an option with the table name we want to insert to
	err = st.SetOption(adbc.OptionKeyIngestTargetTable, tableName)
	if err != nil {
		panic(err)
	}

	if append {
		err = st.SetOption(adbc.OptionKeyIngestMode, adbc.OptionValueIngestModeAppend)
		if err != nil {
			panic(err)
		}
	}

	// ExecuteUpdate executes a statement that does not generate a result
	// set. It returns the number of rows affected if known, otherwise -1.
	_, err = st.ExecuteUpdate(ctx)
	if err != nil {
		log.Println("failed to set query")
	}
}

func deleteFromDuckDB(st adbc.Statement, ctx context.Context) {
	err := st.SetSqlQuery(`DELETE FROM "persons"`)
	if err != nil {
		log.Println("failed to set query")
	}
	_, err = st.ExecuteUpdate(ctx)
	if err != nil {
		log.Println("failed to execute query")
	}
}

func main() {
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// Setup connection to duckdb database
	conn, db := connectToDuckDB(ctx)
	defer db.Close()
	defer conn.Close()

	// initialize our statement
	st, err := conn.NewStatement()
	if err != nil {
		log.Println("failed to create statement")
	}
	defer st.Close()

	numRowsinBatch := 10000

	// Ingest Batch of Arrow data into DuckDB table
	appendFalse := false
	ingestArrowBatch(ctx, numRowsinBatch, st, appendFalse)

	for {
		deleteFromDuckDB(st, ctx)
		time.Sleep(10 * time.Millisecond)

		// Ingest New Arrow Data of same size
		append := true
		ingestArrowBatch(ctx, numRowsinBatch, st, append)
		time.Sleep(10 * time.Millisecond)
	}
}
```

### OS:

arm64

### DuckDB Version:

1.1.2

### DuckDB Client:

Golang

### Hardware:

_No response_

### Full Name:

Niklas Everitt

### Affiliation:

Ericsson

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a source build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have