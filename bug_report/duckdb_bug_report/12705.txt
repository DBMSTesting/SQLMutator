ID: 12705
Title: LIST(VARCHAR) - reduce memory usage by avoiding allocation of nullmask for string data, and allocate larger initial batches
Description:
The `LIST` aggregate accumulates strings in the same way that it accumulates a `LIST[UINT8]` - by storing a top-level vector that stores lengths, and a lower level vector that stores the actual data. However, unlike a `LIST[UINT8]`, characters in a string can never be `NULL`. In the previous implementation we would still allocate space for this nullmask - effectively doubling the size of all strings by adding a null byte for every value. This PR removes those null values for the string data.

The list aggregate currently also uses the same initial capacity for every list (4 elements). While 4 elements is a reasonable default for most data types - for characters in a string this is rather low. This is especially true because the list segment structure itself already takes up 16 bytes, and the list data structure must be 8-byte aligned.

As such, with an initial capacity of 4 bytes, we would allocate a struct of 24 bytes only to store the first 4 characters of data within a list. The next 8 bytes will require an allocation of 24 bytes. Followed by 16 bytes which require an allocation of 32 bytes.

To fix this issue this PR makes the initial allocation size variable per data type, and increases the initial allocation size for smaller data types. In particular for characters the allocation size is set to 16.

