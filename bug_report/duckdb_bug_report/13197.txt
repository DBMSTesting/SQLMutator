ID: 13197
Title: [CSV Reader] Data following an errant row is deleted
Description:
### What happens?

When reading in a large CSV with an "expected number of columns" error, the errant row is removed, however, the final column in the next row shows as NULL when data exists in the file. This occurs when `ignore_errors=true` is set, but not when `ignore_errors=true, store_rejects=true` is set.

**Note**: I'd like to share the file but there's a 25 MB limit on GH. The file is 221 MB (40 MB compressed). I've tried pairing it down but size seems to be a contributing factor to the error. Let me know who I can send it to and I'm happy to do so.

### To Reproduce

There are two rows of interest in the data file - line 657,213 and line 657,214. The former is the errant line that we're expecting to be ignored and discarded. The latter is a seemingly fine row of data that _should_ be included in full.

Line 657,213

```
10586385|0|0|47876|3689686|2024-07-28 22:48:08 +00:00|ma|test@email.com|||99ceb3be735e4825807564563f59842c|58332|arn:aws:sns:us-east-1:203113165317:endpoint/GCM/prod-project-12062-app.company.android/e1f4058b-8896-345d-9c59-5b45190962f7|0||13946178||22374184
```

Line 657,214

```
10586385|0|0|47876|3689686|2024-07-28 22:48:08 +00:00|test@email.com|||e3cf6ec6827544119a2761ccf9d6f26c|58332|arn:aws:sns:us-east-1:203113165317:endpoint/GCM/prod-project-12062-app.company.android/f4fc5bf7-2ed7-3949-9244-e1a520809fb5|0||13946178||4229692
```

If we store the rejects upon ignoring errors, we get the expected data returned:

```sql
from read_csv('read_csv_reading_issue.csv', header=true, delim='|', null_padding=true, all_varchar=true, ignore_errors=true, store_rejects=true) where userId = '4229692';
```

This returns the correct data from line 657,214.

When we do not store the reject, however, the `userId` data is mysterious left null. We get the same data from line 657,214 with the following query, yet `userId` is made null.

```sql
from read_csv('read_csv_reading_issue.csv', header=true, delim='|', null_padding=true, all_varchar=true, ignore_errors=true) where userId is null;
```

And, to be more specific, the following filtering by `userId` will return 0 rows:

```sql
from read_csv('read_csv_reading_issue.csv', header=true, delim='|', null_padding=true, all_varchar=true, ignore_errors=true) where userId = '4229692';
```



### OS:

macOS arm64

### DuckDB Version:

1.0.0

### DuckDB Client:

CLI

### Full Name:

Brandon Freeman

### Affiliation:

Hallow

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have not tested with any build

### Did you include all relevant data sets for reproducing the issue?

No - I cannot easily share my data sets due to their large size

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have