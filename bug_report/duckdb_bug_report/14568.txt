ID: 14568
Title: Manage `enable_external_access` at the FileSystem level, and add `allowed_paths` and `allowed_directories` option
Description:
Previously we would check `enable_external_access` in specific functions - e.g. we would prevent users from calling `read_csv` if `enable_external_access` was set to false. As illustrated by [this issue](https://github.com/duckdb/duckdb/security/advisories/GHSA-w2gf-jxc9-pf2q) this is error prone. This PR reworks `enable_external_access` by instead disallowing the usage of file system operations (opening of files, as well as creating/removing files/directories, or checking if they exist).

#### allowed_paths/allowed_directories
`enable_external_access` allows any databases *that were attached prior to the flag being set* to be operated on as usual, e.g. the following needs to work:

```sql
ATTACH 'file.db';
SET enable_external_access=false;
CREATE TABLE file.tbl(i INT);
INSERT INTO file.tbl VALUES (42);
```

This means that `enable_external_access` cannot block *all* file-system operations. Instead, we need to allow operations on *certain files*. In particular:

* For every attached database file, we allow operations on the database file and the corresponding `WAL` file
* We allow operations on the `temp_directory`, if any is set

Rather than making this a special case, these settings are user-extensible using the **allowed_directories** and the **allowed_paths** setting. We can read them from `duckdb_settings`

|       name                   |                                     description                                                  |
|---------------------|----------------------------------------------------------------------------------------------------------------|
| allowed_directories | List of directories/prefixes that are ALWAYS allowed to be queried - even when enable_external_access is false |
| allowed_paths       | List of files that are ALWAYS allowed to be queried - even when enable_external_access is false                |

```sql
ATTACH 'file.db';
SET enable_external_access=false;
SELECT name, value FROM duckdb_settings() WHERE name LIKE 'allowed%';
┌─────────────────────┬────────────────────────┐
│        name         │         value          │
│       varchar       │        varchar         │
├─────────────────────┼────────────────────────┤
│ allowed_directories │ []                     │
│ allowed_paths       │ [file.db.wal, file.db] │
└─────────────────────┴────────────────────────┘
```

We can set them using `SET` commands, but only **before** `enable_external_access` is disabled

```sql
SET allowed_directories=['/tmp/'];
SET enable_external_access=false;
SELECT name, value FROM duckdb_settings() WHERE name LIKE 'allowed%';
┌─────────────────────┬─────────┐
│        name         │  value  │
│       varchar       │ varchar │
├─────────────────────┼─────────┤
│ allowed_directories │ [/tmp/] │
│ allowed_paths       │ []      │
└─────────────────────┴─────────┘

SET allowed_directories=['/tmp/', 'new_dir'];
Invalid Input Error: Cannot change allowed_directories when enable_external_access is disabled
```

#### Remote-Only Querying

One potential use-case for these settings is that we can enable remote-only querying, while disabling local file-system operations. For example:

```sql
SET allowed_directories=['http://', 'https://'];
SET enable_external_access=false;
FROM read_csv('test.csv');
-- Permission Error: Cannot access file "test.csv" - file system operations are disabled by configuration
FROM read_csv('https://duckdb-public-gzip-test.s3.us-east-2.amazonaws.com/test.csv');
┌─────────┬─────────┐
│  'foo'  │  'bar'  │
│ varchar │ varchar │
├─────────┼─────────┤
│ foo     │ bar     │
└─────────┴─────────┘
```

#### Extensions

Extensions that use the DuckDB file-system to do I/O will automatically respect the `enable_external_access` and `allowed_paths/allowed_directories` flags. However, extensions can also do their own I/O using a different file-system implementation/layer. As such, we cannot guarantee that extensions correctly respect the `enable_external_access` setting - particularly for community extensions.
