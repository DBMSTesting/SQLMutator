ID: 12868
Title: Ambiguous key names generated in INFORMATION_SCHEMA.TABLE_CONSTRAINTS for composite keys
Description:
### What happens?

The `INFORMATION_SCHEMA.TABLE_CONSTRAINTS` view produces ambiguous key names for composite keys

### To Reproduce

Try this schema:

```sql
CREATE TABLE a (
  a1 INT, a2 INT, a3 INT, 
  UNIQUE (a1, a2), UNIQUE (a2, a3)
);

CREATE TABLE b (
  a1 INT, a2 INT, a3 INT, 
  FOREIGN KEY (a1, a2) REFERENCES a (a1, a2), 
  FOREIGN KEY (a2, a3) REFERENCES a (a2, a3)
);
```

Now, this query:

```sql
SELECT constraint_name, constraint_type 
FROM information_schema.table_constraints;
```

Produces ambiguous key names for the above unique keys and foreign keys:

```
|constraint_name|constraint_type|
|---------------|---------------|
|a_key          |UNIQUE         |
|a_key          |UNIQUE         |
|b_fkey         |FOREIGN KEY    |
|b_fkey         |FOREIGN KEY    |
```

Even if this bug didn't exist:

- https://github.com/duckdb/duckdb/issues/12867

It would not be possible to correctly figure out which key is which based on the names alone, which should be unique per table.

### OS:

Microsoft Windows [Version 10.0.22631.3737]

### DuckDB Version:

1.0.0

### DuckDB Client:

JDBC

### Full Name:

Lukas Eder

### Affiliation:

Data Geekery

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have