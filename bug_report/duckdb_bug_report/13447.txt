ID: 13447
Title: Prefer depth-first plan evaluation for unions and joins
Description:
This PR adds a way to recursively introduce dependencies in `MetaPipeline` to avoid evaluating query plans breadth-first and instead prefer depth-first.

For now, I've added a simple heuristic. If the LHS child of a union can likely keep all threads busy, we let the RHS depend on it (recursively). This should fix issues where we have query plans with many unions that all use a lot of memory. By not fully evaluating the children, temporary query intermediates pile up, and more offloading is needed than necessary. I think this fixes one of your issues @Alex-Monahan @bleskes.

I've done the same thing for joins. If we have a wide, bushy query plan, we also prefer to evaluate the plan in a depth-first fashion, as this reduces memory pressure. I've used the same heuristic there.

I've added a test for the union and the join, which used to fail but now succeeds with the new dependencies.