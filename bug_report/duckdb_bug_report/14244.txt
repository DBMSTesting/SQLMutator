ID: 14244
Title: 'with recursive cte' within a function bleeds into subsequent 'with recursive cte'
Description:
### What happens?

Perhaps this is a well-known issue, but in case not, contrast the result of these two queries:

```sql
with recursive cte(i,s) as (
    select 1 as i, [[1, 2], [2, 3], [2, 3, 4]] as s
    union all
    select i+1, (from merge_i(s, i) limit 1) as s
    from cte
    where i <= 3
  )
  select * from cte;
```
```console
┌───────┬─────────────────────────────┐
│   i   │              s              │
│ int32 │          int32[][]          │
├───────┼─────────────────────────────┤
│     1 │ [[1, 2], [2, 3], [2, 3, 4]] │
│     2 │ [[1, 2], [2, 3], [2, 3, 4]] │
│     3 │ [[1, 2], [2, 3], [2, 3, 4]] │
│     4 │ [[1, 2], [2, 3], [2, 3, 4]] │
└───────┴─────────────────────────────┘
```
```sql
from merge_i([[1, 2], [2, 3], [2, 3, 4]], 1) limit 1 ;
┌────────────────────────┐
│           s            │
│       int32[][]        │
├────────────────────────┤
│ [[1, 2, 3, 4], [], []] │
└────────────────────────┘
```
The second query shows what the 's' column of the second line of the CTE should look like.

The definition of merge_i() is given below but the point is that it
also includes `with recursive cte(_,_)`.  When one of the two
occurrences of the name "cte" is changed, the correct results are
produced.

I would have hoped that scoping rules would prevent this type of problem,
but even if that's not the case, it would be reasonable to expect
that CTE table names within a function definition should be local to that function.


### To Reproduce

```sql
create or replace function list_update(set, i, value) as (
  set[1:i-1] || [value] || set[i+1:]
);

create or replace function set_union(set1, set2) as (
 list_sort(list_distinct( ( set1 || set2) ) )
);

create or replace function merge(listofsets, i, j) as (
  case when list_has_any(listofsets[i]::INTEGER[], listofsets[j]::INTEGER[]) 
       then list_update(
              list_update(listofsets,
                i,
                set_union(listofsets[i], listofsets[j])),
              j,
              [])
        else listofsets
        end
);

create or replace function merge_i(listofsets, i) as table (
  with recursive cte(j,s) as (
    select i + 1, listofsets
    union all
    select j+1, merge(s, i, j)
    from cte
    where j <= length(listofsets)
  )
  select last(s) as s from cte limit 1
);

with recursive cte(i,s) as (
    select 1 as i, [[1, 2], [2, 3], [2, 3, 4]] as s
    union all
    select i+1, (from merge_i(s, i) limit 1) as s
    from cte
    where i <= 3
  )
  select * from cte;
```

### OS:

macos

### DuckDB Version:

1.0 and others

### DuckDB Client:

CLI

### Hardware:

_No response_

### Full Name:

Peter Koppstein

### Affiliation:

Princeton University

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a source build

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have