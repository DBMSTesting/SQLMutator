ID: 14710
Title: Value interface & serialization clean-up
Description:
This PR does some clean-up in the Value interface and serialization:

* `Value::EMPTYLIST` and `Value::EMPTYARRAY` are removed, instead the interface `Value::LIST(type, values)` can be used to generate an empty list/array
* `Value::MAP` and `Value::STRUCT` now correctly insert casts to enforce that the values are internally consistent with the defined types
* `LogicalType::ANY` is explicitly supported in nested value types - in which case these types are ignored, i.e. we can do `Value::LIST(LogicalType::ANY, values)` with a list of values of any type
* Avoid unnecessary recursive type serialization: when serializing nested values, we no longer need to serialize the type of every value if the type is defined (i.e. not `LogicalType::ANY`). Instead, the type from the upper-layer is used (i.e. if we have `LogicalType::LIST(LogicalType::INT)`, the child elements are deserialized as `LogicalType::INT`).
* For backwards compatibility, we still serialize the type in every `Value` also in nested values, unless the serialization version is set to `>= 1.2.0`.