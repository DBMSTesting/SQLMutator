ID: 15212
Title: Add value creation and accessor functions to the C API for VARINT, DECIMAL, BIT, and UUID
Description:
New C API functions:
- `duckdb_create_varint`
- `duckdb_create_decimal`
- `duckdb_create_bit`
- `duckdb_create_uuid`
- `duckdb_get_varint`
- `duckdb_get_decimal`
- `duckdb_get_bit`
- `duckdb_get_uuid`

New C API types:
- `duckdb_bit`
- `duckdb_varint`

New C++ helpers:
- `UUID::ToUHugeint`
- `Varint::FromByteArray`

Tests for all new C API functions and new C++ helpers.

Notes:

VARINT
The internal binary format of `Varint` (e.g. with the three-byte header) is not exposed through the C API. The format of `duckdb_varint` is a byte array containing the absolute value in little endian format (with no header), its size, plus an `is_negative` bool.
The new C++ helper `Varint::FromByteArray` was necessary to implement `duckdb_create_varint`. It's roughly the inverse of `Varint::GetByteArray` (which already existed).

DECIMAL
The internal physical type of the created decimal value depends on the `width` of the `duckdb_decimal`. But the `value` field of a `duckdb_decimal` is always a `duckdb_hugeint`. (This was pre-existing.)

BIT
The internal bitstring format _is_ exposed through the C API (i.e. the first byte contains the number of padding bits in the second byte, which are set to 1, starting from the MSB). Some way of expressing the padding bits is necessary, and I didn't see a reason to use a different format.

UUID
The internal format, a hugeint with the MSB flipped, is not exposed. Through the C API, UUIDs are `duckdb_uhugeint`s, with no bits flipped.
The new C++ helper `UUID::ToUHugeint` was necessary to implement this conversion in `duckdb_get_uuid`. It's the inverse of `UUID::FromUHugeint` (which already existed). 