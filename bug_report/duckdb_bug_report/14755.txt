ID: 14755
Title: Non-deterministic behavior of deterministic program using array_agg()
Description:
### What happens?

```
$ duckdb
v1.1.4-dev1605 99a401ba10
Enter ".help" for usage hints.
Connected to a transient in-memory database.
Use ".open FILENAME" to reopen on a persistent database.

.read array_agg.issue
┌──────────────────────────┐
│ ijtable2listoflist(2, 2) │
│        float[][]         │
├──────────────────────────┤
│ [[1.0, 2.0], [3.0, 4.0]] │
└──────────────────────────┘

.read array_agg.issue
┌──────────────────────────┐
│ ijtable2listoflist(2, 2) │
│        float[][]         │
├──────────────────────────┤
│ [[3.0, 4.0], [1.0, 2.0]] │
└──────────────────────────┘
```
This request has two main components:

1) A request that the documentation be more explicit that specifying
ORDER BY in the table specification is NOT sufficient to ensure
deterministic behavior of array_agg().

2) An enhancement request to make it easier to specify that array_agg()
should preserve the row-order when a table has a row order EITHER because
of the 'preservation of insertion order' flag OR because the table has
an ORDER BY clause.

Regarding (1), I realize that the existing documentation has a section
on "ORDER BY Clause in Aggregate Functions", but
(a) it seems to suggest (and the example seems to confirm) that it is
intended for post-aggregation sorting
(b) there is nothing explicit about the irrelevance of the table's own ORDER BY clause

Please bear in mind also that calling "array_agg" a *function* has very
strong connotations, and since the order of elements of an "array" is
relevant, the fact that "array_agg()" is generally NOT deterministic
when the underlying table has a defined order bears emphasizing.

Regarding (2), my understanding is that, with the `preserve_insertion_order` flag on,
there are basically two circumstances when the ordering of the results of a SELECT is deterministic:

(a) when the "preserve_insertion_order" flag makes it so;

(b) when an explicit ORDER BY clause makes it so.

Let's call such tables ORDERED.

For both convenience and efficiency reasons, it would be helpful to be
able to specify that array_agg() respect the order of an ORDERED table
(without first having to add a row_id column).  (The discussion
further down on this page includes an example -- see `function explode()`.)

One possibility would be to allow something like array_agg(... ORDER BY TABLE).



### To Reproduce

```
### array_agg.issue
create or replace table cte (i integer, j integer, value float );
insert into cte values
  (1, 1, 1),
  (1, 2, 2),
  (2, 1, 3),
  (2, 2, 4);

create or replace function ijTable2Row(m) as (
  select array_agg(value)
  from (select value
        from cte
        where i = m
        order by j)
);

create or replace function ijTable2ListOfList(m,n) as (
  select array_agg(rowi)
  from (select i, ijTable2Row(i) as rowi
        from range(1, m+1) t(i)
        order by i)
);

select ijTable2ListOfList(2,2);
```

### OS:

MacOS

### DuckDB Version:

v1.1.4-dev1605 99a401ba10

### DuckDB Client:

CLI

### Hardware:

_No response_

### Full Name:

Peter Koppstein

### Affiliation:

Princeton University

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a nightly build

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have