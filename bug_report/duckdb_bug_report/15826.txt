ID: 15826
Title: DuckDB ignores per-column key-value metadata of Parquet files
Description:
### What happens?

DuckDB ignores per-column key-value metadata of Parquet files


### To Reproduce

According to e.g. https://github.com/duckdb/duckdb/pull/9798 DuckDB shows in the result of parquet_metadata() the per-column key-value metadata.
Indeed there is a field for this in the output, but the value is always {}; the true metadata never show up.

Example:
This Python-3.11.4/PyArrow-14.0.1 script creates a tiny Parquet file with some per-column metadata:
```
import pyarrow as pa
import pyarrow.parquet as pq

schema = pa.schema([
    pa.field("col1", pa.int8(),    metadata={'keycol1':'valuecol1'}),
    pa.field("col2", pa.string(),  metadata={'keycol2':'valuecol2','foo':'bar'}),
    pa.field("col3", pa.float64(), metadata={'keycol3':'valuecol3','thud':'blat','yin':'yang'})
])

table = pa.table([
    pa.array([1, 2, 3, 4, 5]),
    pa.array(["a", "b", "c", "d", "e"]),
    pa.array([1.0, 2.0, 3.0, 4.0, 5.0])
  ], schema=schema
)

pq.write_table(table, "example.parquet")
```
This Python/PyArrow script proves that the metadata are really written to the file:
```
import pyarrow.parquet as pq

table = pq.read_table("example.parquet")

for f in ('col1','col2','col3'):
  print(table.schema.field(f).metadata)
```
The output is:
```
{b'keycol1': b'valuecol1'}
{b'keycol2': b'valuecol2', b'foo': b'bar'}
{b'keycol3': b'valuecol3', b'thud': b'blat', b'yin': b'yang'}
```

When examining the file with DuckDB/parquet_metadata(), however, ...
```
duckdb -c 'SELECT * FROM parquet_metadata('example.parquet')'
```
... the key-value metadata are not shown (please scroll to the right):
```
┌─────────────────┬──────────────┬────────────────────┬──────────────────────┬───┬──────────────────────┬──────────────────────┬────────────────────┐
│    file_name    │ row_group_id │ row_group_num_rows │ row_group_num_colu…  │ … │ total_compressed_s…  │ total_uncompressed…  │ key_value_metadata │
│     varchar     │    int64     │       int64        │        int64         │   │        int64         │        int64         │  map(blob, blob)   │
├─────────────────┼──────────────┼────────────────────┼──────────────────────┼───┼──────────────────────┼──────────────────────┼────────────────────┤
│ example.parquet │            0 │                  5 │                    3 │ … │                   94 │                   90 │ {}                 │
│ example.parquet │            0 │                  5 │                    3 │ … │                   80 │                   77 │ {}                 │
│ example.parquet │            0 │                  5 │                    3 │ … │                  120 │                  126 │ {}                 │
├─────────────────┴──────────────┴────────────────────┴──────────────────────┴───┴──────────────────────┴──────────────────────┴────────────────────┤
│ 3 rows                                                                                                                       24 columns (7 shown) │
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
```


### OS:

SUSE Linux Enterprise Server 15 SP5 x86_64

### DuckDB Version:

v1.1.3 19864453f7

### DuckDB Client:

CLI

### Hardware:

_No response_

### Full Name:

elveshoern32

### Affiliation:

non-disclosed - sorry

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a nightly build

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [x] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [x] Yes, I have