ID: 14321
Title: CSV import ignores union_by_name option when either the names or columns option is given
Description:
### What happens?

Created a table with 91 columns, 2 columns were specified as `NOT NULL DEFAULT` and the rest were the same as the CSV that was being `INSERT INTO` the table using `read_csv`. The arguments to `read_csv` included the `union_by_name` option and I tried specifying either the `names` option or the `columns` option with it because the CSV does not include a header. When executing the `INSERT INTO` the following error was issued:
```txt
Binder Error: table boundary has 91 columns but 89 values were supplied
```
This was unexpected since the `union_by_name` option was used with either the `names` or `columns` option and duckdb had enough information to match the names from the CSV with the table and default the 2 columns that were specified as `NOT NULL DEFAULT`.

### To Reproduce

`test_data.csv`

```csv
4,20210401,99991231
4,20220401,99991231
4,20160401,99991231
4,20190701,99991231
4,19940501,99991231
4,20221001,99991231
A,19890401,99991231
A,19880101,99991231
A,19941101,99991231
A,20221001,99991231
A,20201001,99991231
```

`duckdb SQL`

```sql
CREATE OR REPLACE TABLE boundary
(
  row_created      TIMESTAMP  NOT NULL DEFAULT current_timestamp,
  row_updated      TIMESTAMP  NOT NULL DEFAULT current_timestamp,
  record_type      VARCHAR    NOT NULL,
  effective_begin  DATE       NOT NULL,
  effective_end    DATE       NOT NULL
) ;

INSERT INTO boundary SELECT * FROM read_csv
(
  'test_data.csv',
  delim = ',',
  header = false,
  dateformat = '%Y%m%d',
  union_by_name = true,
  names =
  [
    'record_type',
    'effective_begin',
    'effective_end'
  ]
) ;
```

`duckdb SQL`

```sql
CREATE OR REPLACE TABLE boundary
(
  row_created      TIMESTAMP  NOT NULL DEFAULT current_timestamp,
  row_updated      TIMESTAMP  NOT NULL DEFAULT current_timestamp,
  record_type      VARCHAR    NOT NULL,
  effective_begin  DATE       NOT NULL,
  effective_end    DATE       NOT NULL
) ;

INSERT INTO boundary SELECT * FROM read_csv
(
  'test_data.csv',
  delim = ',',
  header = false,
  dateformat = '%Y%m%d',
  union_by_name = true,
  columns =
  {
    'record_type' : 'varchar',
    'effective_begin' : 'date',
    'effective_end' : 'date'
  }
) ;
```

`Error Encountered`

```txt
Binder Error: table boundary has 5 columns but 3 values were supplied
```

### OS:

Windows 10 Pro x64, version 22H2, build 19045.4894

### DuckDB Version:

v1.1.1

### DuckDB Client:

CLI

### Hardware:

Dell OptiPlex 5090, I7-10700 @ 2.90GHz, 8 cores, 16 threads, 32GB memory

### Full Name:

Andrew Houghton

### Affiliation:

Akkodis

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have