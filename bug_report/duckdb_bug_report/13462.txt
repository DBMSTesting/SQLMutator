ID: 13462
Title: [Python] Let `create_function` cancel an open transaction instead of failing
Description:
This PR fixes #13429 

`fetchone()` will start a StreamQueryResult, which remains active, pending further fetching.
Because this is still active, the transaction the query belongs to is also active.

In the past we've opted to let `create_function` fail in this scenario, otherwise the created function would become part of the transaction.
Canceling the transaction by executing a different query before finishing the first fetch, i.e:
```py
res = duckdb.sql("select * from range(50)").fetchone()
duckdb.create_function(...)
res = duckdb.sql("select * from (values (42)) t(a)").fetchone()
```

Results in the created function getting rolled back as well

Instead this now cancels the transaction that the first `fetchone()` had started.