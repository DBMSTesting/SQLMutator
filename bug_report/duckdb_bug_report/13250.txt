ID: 13250
Title: Fuzzer: DuckDB SIGFPE with the TIME_BUCKET function
Description:
### What happens?

DuckDB SIGFPE with the TIME_BUCKET function.

### To Reproduce

```sql
SELECT TIME_BUCKET(CAST('0.' AS INTERVAL), CAST('2000-01-01 00:00:00+00' AS TIMESTAMPTZ));
```
gdb backtrace:
```
Thread 1 "duckdb" received signal SIGFPE, Arithmetic exception.
0x00000000017da7ac in duckdb::ICUTimeBucket::WidthConvertibleToDaysBinaryOperator::Operation(duckdb::interval_t, duckdb::timestamp_t, icu_66::Calendar*) [clone .isra.0] ()
(gdb) bt
#0  0x00000000017da7ac in duckdb::ICUTimeBucket::WidthConvertibleToDaysBinaryOperator::Operation(duckdb::interval_t, duckdb::timestamp_t, icu_66::Calendar*) [clone .isra.0] ()
#1  0x00000000017dae00 in void duckdb::BinaryExecutor::ExecuteSwitch<duckdb::interval_t, duckdb::timestamp_t, duckdb::timestamp_t, duckdb::BinaryLambdaWrapper, bool, duckdb::ICUTimeBucket::ICUTimeBucketFunction(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)::{lambda(duckdb::interval_t, duckdb::timestamp_t)#2}>(duckdb::Vector&, duckdb::Vector&, duckdb::Vector&, unsigned long, duckdb::ICUTimeBucket::ICUTimeBucketFunction(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&)::{lambda(duckdb::interval_t, duckdb::timestamp_t)#2}) ()
#2  0x00000000017e6c10 in duckdb::ICUTimeBucket::ICUTimeBucketFunction(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) ()
#3  0x0000000000a9f2f7 in duckdb::ExpressionExecutor::Execute(duckdb::Expression const&, duckdb::ExpressionState*, duckdb::SelectionVector const*, unsigned long, duckdb::Vector&) ()
#4  0x0000000000ab5705 in duckdb::ExpressionExecutor::EvaluateScalar(duckdb::ClientContext&, duckdb::Expression const&, bool) ()
#5  0x0000000000ab594d in duckdb::ExpressionExecutor::TryEvaluateScalar(duckdb::ClientContext&, duckdb::Expression const&, duckdb::Value&) ()
#6  0x0000000000cca8e6 in duckdb::ConstantFoldingRule::Apply(duckdb::LogicalOperator&, duckdb::vector<std::reference_wrapper<duckdb::Expression>, true>&, bool&, bool) ()
#7  0x0000000000cd68be in duckdb::ExpressionRewriter::ApplyRules(duckdb::LogicalOperator&, duckdb::vector<std::reference_wrapper<duckdb::Rule>, true> const&, duckdb::unique_ptr<duckdb::Expression, std::default_delete<duckdb::Expression>, true>, bool&, bool) ()
#8  0x0000000000cd6b3a in duckdb::ExpressionRewriter::VisitExpression(duckdb::unique_ptr<duckdb::Expression, std::default_delete<duckdb::Expression>, true>*) ()
#9  0x0000000000d8c8d0 in duckdb::LogicalOperatorVisitor::EnumerateExpressions(duckdb::LogicalOperator&, std::function<void (duckdb::unique_ptr<duckdb::Expression, std::default_delete<duckdb::Expression>, true>*)> const&) ()
#10 0x0000000000d8cc6d in duckdb::LogicalOperatorVisitor::VisitOperatorExpressions(duckdb::LogicalOperator&) ()
#11 0x0000000000cd9d72 in duckdb::ExpressionRewriter::VisitOperator(duckdb::LogicalOperator&) ()
#12 0x0000000000cd56e6 in duckdb::Optimizer::RunOptimizer(duckdb::OptimizerType, std::function<void ()> const&) ()
#13 0x0000000000cd7357 in duckdb::Optimizer::Optimize(duckdb::unique_ptr<duckdb::LogicalOperator, std::default_delete<duckdb::LogicalOperator>, true>) ()
#14 0x0000000000b3080b in duckdb::ClientContext::CreatePreparedStatementInternal(duckdb::ClientContextLock&, std::string const&, duckdb::unique_ptr<duckdb::SQLStatement, std::default_delete<duckdb::SQLStatement>, true>, duckdb::optional_ptr<std::unordered_map<std::string, duckdb::Value, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator<std::pair<std::string const, duckdb::Value> > > >) ()
#15 0x0000000000b31012 in duckdb::ClientContext::CreatePreparedStatement(duckdb::ClientContextLock&, std::string const&, duckdb::unique_ptr<duckdb::SQLStatement, std::default_delete<duckdb::SQLStatement>, true>, duckdb::optional_ptr<std::unordered_map<std::string, duckdb::Value, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator<std::pair<std::string const, duckdb::Value> > > >, duckdb::PreparedStatementMode) ()
#16 0x0000000000b311cc in std::_Function_handler<void (), duckdb::ClientContext::PrepareInternal(duckdb::ClientContextLock&, duckdb::unique_ptr<duckdb::SQLStatement, std::default_delete<duckdb::SQLStatement>, true>)::{lambda()#1}>::_M_invoke(std::_Any_data const&) ()
#17 0x0000000000b2aab9 in duckdb::ClientContext::RunFunctionInTransactionInternal(duckdb::ClientContextLock&, std::function<void ()> const&, bool) ()
#18 0x0000000000b2b57b in duckdb::ClientContext::PrepareInternal(duckdb::ClientContextLock&, duckdb::unique_ptr<duckdb::SQLStatement, std::default_delete<duckdb::SQLStatement>, true>) ()
#19 0x0000000000b3b678 in duckdb::ClientContext::Prepare(duckdb::unique_ptr<duckdb::SQLStatement, std::default_delete<duckdb::SQLStatement>, true>) ()
#20 0x0000000000b3b72f in duckdb::Connection::Prepare(duckdb::unique_ptr<duckdb::SQLStatement, std::default_delete<duckdb::SQLStatement>, true>) ()
#21 0x00000000006fa631 in duckdb_shell_sqlite3_prepare_v2 ()
#22 0x00000000006e7a80 in shell_exec ()
#23 0x00000000006e9690 in runOneSqlLine.constprop.0 ()
#24 0x00000000006f1b65 in process_input ()
#25 0x00000000006c6567 in main ()
```

It can be reproduced on the DuckDB Cli and Python Client with the stable release (v1.0.0) and nightly build downloaded from the official website.

However, I failed to reproduce it on the self-compiled binary on the v1.0.0 version with the command `GEN=ninja make`. Maybe I missed some compilation flags. the output on my self-compiled binary is as follows:
```
SELECT TIME_BUCKET(CAST('0.' AS INTERVAL), CAST('2000-01-01 00:00:00+00' AS TIMESTAMPTZ));
Binder Error: No function matches the given name and argument types 'time_bucket(INTERVAL, TIMESTAMP WITH TIME ZONE)'. You might need to add explicit type casts.
        Candidate functions:
        time_bucket(INTERVAL, DATE) -> DATE
        time_bucket(INTERVAL, TIMESTAMP) -> TIMESTAMP
        time_bucket(INTERVAL, DATE, INTERVAL) -> DATE
        time_bucket(INTERVAL, TIMESTAMP, INTERVAL) -> TIMESTAMP
        time_bucket(INTERVAL, DATE, DATE) -> DATE
        time_bucket(INTERVAL, TIMESTAMP, TIMESTAMP) -> TIMESTAMP

LINE 1: SELECT TIME_BUCKET(CAST('0.' AS INTERVAL), CAS...
```

### OS:

Ubuntu 20.04

### DuckDB Version:

v1.0.0 and v1.0.1-dev3542

### DuckDB Client:

cli and python

### Full Name:

Jingzhou Fu

### Affiliation:

Wingtecher Lab of Tsinghua University and ShuiMuYuLin Ltd.

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a nightly build

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have