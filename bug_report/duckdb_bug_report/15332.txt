ID: 15332
Title: COPY TO from parquet to parquet is randomly (but often) very very slow on some parquet files with many columns
Description:
### What happens?

COPY TO from parquet to parquet is often very slow, almost 3h for a 1GB file (1 million lines and 3204 columns : 848 double and
2512 varchar) and sometimes very fast (around 2min) for the same file.

### To Reproduce

Get [this parquet file](https://drive.google.com/file/d/10Df3Xk1Bo5CIqJKT9SE_tnndhkp7qxRq/view?usp=sharing)

And use this SQL : 

```
.timer on
.echo on
COPY (FROM read_parquet('input.parquet')) TO 'output.parquet' (FORMAT PARQUET);
```

Sometimes it takes arount 2min : 

```
COPY (FROM read_parquet('input.parquet')) TO 'output.parquet' (FORMAT PARQUET);
```
```
Run Time (s): real 118.012 user 816.200215 sys 93.522947
```
```
SELECT COUNT(*) FROM 'output.parquet';
```
```
┌──────────────┐
│ count_star() │
│    int64     │
├──────────────┤
│      1000000 │
└──────────────┘
```
But more often it takes forever for the same file : 

```
COPY (FROM read_parquet('input.parquet')) TO 'output.parquet' (FORMAT PARQUET);
Run Time (s): real 10176.360 user 20955.174887 sys 89.146106
SELECT COUNT(*) FROM 'output.parquet';
┌──────────────┐
│ count_star() │
│    int64     │
├──────────────┤
│      1000000 │
└──────────────┘
```

With arrow it always takes around 2 minutes :

```
> tictoc::tic()
> arrow::read_parquet("input.parquet") |> arrow::write_parquet("arrow.parquet")
> tictoc::toc()
138.804 sec elapsed
```

Tested on two servers : 
* 4 x E5-4620 v2 @ 2.60GHz (32 cores) and 1.5TB of memory 
* 2 x E5-2620 v3 @ 2.40GHz (12 cores) and 500GB of memory

### OS:

ubuntu 22.04 x86_64 

### DuckDB Version:

1.1.3 and bleeding

### DuckDB Client:

cli 

### Hardware:

tested on 4 x E5-4620 v2 and 2 x E5-2620 v3

### Full Name:

Nicolas chuche

### Affiliation:

Ministere de la transition écologique

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a nightly build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have