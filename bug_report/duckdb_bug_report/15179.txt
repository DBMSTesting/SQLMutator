ID: 15179
Title: Executing DROP TABLE directly after INSERT using this table, fails.
Description:
### What happens?

For some reason DuckDB is not behaving _blocking_ as I am expecting.



### To Reproduce

In essence I am doing the following.

```python
import duckdb

with duckdb.connect("/tmp/test.duckdb") as con:
    con.execute("CREATE TABLE t1 (t1 TEXT);")
    con.execute("INSERT INTO t1 VALUES ('a');")
    con.execute("INSERT INTO t1 VALUES ('b');")
    con.execute("CREATE TABLE t2 (t2 TEXT PRIMARY KEY);")
    con.execute("INSERT OR REPLACE INTO t2 SELECT t1 FROM t1;")
    con.execute("DROP TABLE t1;")
```

But with a bit of more complex queries.
```
sql_create_table = "CREATE TABLE temp_embedded (parent_class varchar(64) NOT NULL, parent_id varchar(64) NOT NULL, parent_version varchar(64) not null, class varchar(64) not null, id varchar(64) NOT NULL, version varchar(64) NOT NULL, ordr integer, path TEXT);"
cur.execute(sql_create_table)
sql_create_table = f"CREATE TABLE IF NOT EXISTS embedded (parent_class varchar(64) NOT NULL, parent_id varchar(64) NOT NULL, parent_version varchar(64) not null, class varchar(64) not null, id varchar(64) NOT NULL, version varchar(64) NOT NULL, ordr integer, path TEXT NOT NULL, PRIMARY KEY (parent_class, parent_id, parent_version, class, id, version, ordr));"
cur.execute(sql_create_table)
sql_create_table = f"CREATE TABLE IF NOT EXISTS referencing (parent_class varchar(64) NOT NULL, parent_id varchar(64) NOT NULL, parent_version varchar(64) not null, class varchar(64) not null, ref varchar(64) NOT NULL, version varchar(64) NOT NULL, ordr integer, PRIMARY KEY (parent_class, parent_id, parent_version, class, ref, version, ordr));"
cur.execute(sql_create_table)
cur.execute("INSERT OR REPLACE INTO embedded SELECT DISTINCT * FROM temp_embedded WHERE path IS NOT NULL;")
cur.execute("INSERT OR REPLACE INTO referencing SELECT DISTINCT parent_class, parent_id, parent_version, \"class\", id, version, ordr FROM temp_embedded WHERE path IS NULL;")
cur.execute("DROP TABLE temp_embedded;")
```

What happens:
```
  File "/mnt/storage/home/skinkie/Sources/references/gtfs-netex-test/netex_to_db.py", line 47, in <module>
    main(args.netex, args.database, args.clean_database, args.referencing, args.log_file)
  File "/mnt/storage/home/skinkie/Sources/references/gtfs-netex-test/netex_to_db.py", line 32, in main
    insert_database(db, classes, sub_file)
  File "/mnt/storage/home/skinkie/Sources/references/gtfs-netex-test/netexio/dbaccess.py", line 798, in insert_database
    cur.execute("INSERT OR REPLACE INTO embedded SELECT DISTINCT * FROM temp_embedded WHERE path IS NOT NULL;")
duckdb.duckdb.CatalogException: Catalog Error: Table with name temp_embedded does not exist!
Did you mean "embedded"?

LINE 1: INSERT OR REPLACE INTO embedded SELECT DISTINCT * FROM temp_embedded WHERE path IS NOT NULL;
```

Now if I would add something like `sleep(120)` before the `DROP TABLE` I first get the sleep (120s pause), and then get the error.

```
        cur.execute("INSERT OR REPLACE INTO embedded SELECT DISTINCT * FROM temp1_embedded WHERE path IS NOT NULL;")
        cur.execute("INSERT OR REPLACE INTO referencing SELECT DISTINCT parent_class, parent_id, parent_version, \"class\", id, version, ordr FROM temp1_embedded WHERE path IS NULL;")

        print("sleep!")
        time.sleep(120)
        cur.execute("DROP TABLE temp1_embedded;")
```
```
sleep!
Traceback (most recent call last):
  File "/mnt/storage/home/skinkie/Sources/references/gtfs-netex-test/netex_to_db.py", line 47, in <module>
    main(args.netex, args.database, args.clean_database, args.referencing, args.log_file)
  File "/mnt/storage/home/skinkie/Sources/references/gtfs-netex-test/netex_to_db.py", line 32, in main
    insert_database(db, classes, sub_file)
  File "/mnt/storage/home/skinkie/Sources/references/gtfs-netex-test/netexio/dbaccess.py", line 799, in insert_database
    cur.execute("INSERT OR REPLACE INTO embedded SELECT DISTINCT * FROM temp1_embedded WHERE path IS NOT NULL;")
duckdb.duckdb.CatalogException: Catalog Error: Table with name temp1_embedded does not exist!
Did you mean "embedded"?

LINE 1: INSERT OR REPLACE INTO embedded SELECT DISTINCT * FROM temp1_embedded WHERE path IS NOT NULL;
```

When leaving out the `DROP TABLE` everything works as expected. Renamed temp1_embedded, to exclude the change that some catalogue issues could be there with my previous run where I tried `CREATE TEMPORARY TABLE`.

### OS:

Linux

### DuckDB Version:

duckdb-1.1.4.dev2920

### DuckDB Client:

Python

### Hardware:

_No response_

### Full Name:

Stefan de Konink

### Affiliation:

Stichting OpenGeo

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a nightly build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have