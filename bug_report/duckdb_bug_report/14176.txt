ID: 14176
Title: Avoid recompilations of duckdb when there are no actual changes
Description:
Currently on iterative rebuilds a few targets are rebuilt (about 15, but varies with number of extensions compiled)
```bash
GEN=ninja make
.... builds 400+ targets
GEN=ninja make
.... builds 15 targets
GEN=ninja make
.... builds 15 targets
time GEN=ninja make
GEN=ninja make  2.26s user 1.28s system 109% cpu 3.227 total

```


After this PR it should be that if no changes to code or configuration happens, no compilations of linking will be taking place. Only step that will still taking place is the creation of the repository, that needs some more refactoring to remove while keeping functionality the same, but looks to be fast. Still no recompilation/linking happening, only file system.
```bash
GEN=ninja make
.... builds 400+ targets
GEN=ninja make
.... builds 1 target
GEN=ninja make
.... builds 1 target
time GEN=ninja make
GEN=ninja make  0.81s user 0.55s system 95% cpu 1.425 total
```
Of the remaining 0.80 seconds, most of them are spend by CMake to check if everything is up to date, it can likely be improved there at the Makefile level but not certain how.

This is not only on recompilations triggered directly, but even like:
```bash
GEN=ninja make
GEN=ninja make unittest_release
```
would on the second command trigger recompilation of extensions.

----
#### What could go wrong?
This PR should be pretty straightforward, but for the fact that it might uncover pre-existing bugs that might have been hidden by the fact that we were recompiling on every invocation.
This is hypothetical, if that happens `make clean` is always the way forward.