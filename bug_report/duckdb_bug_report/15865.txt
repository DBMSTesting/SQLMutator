ID: 15865
Title: OOM when loading (read_ndjson) large compressed dataset (12GB) on Apple M1 and other platforms
Description:
### What happens?

My goal is to load a 12GB compressed dataset on my Apple M1. Doesn't matter what I try DuckDB tries to load the entire dataset in memory then OOMs.

```sql
CREATE OR REPLACE TABLE table_name AS (
  SELECT * FROM read_ndjson(
    './data/xxxx-xx-xx/*.ndjson.gz',
    map_inference_threshold = -1, maximum_depth = 1, union_by_name = true
  )
);
```

This has been reproduced on Mac ARM and Intel, Ubuntu Intel, big machines and smaller machines. So far the only alternative is to split the data loading int chunks that fit in memory, which makes DuckDB less attractive as a Swiss army knife solution.

We tried pretty much every workaround we found on github, blog posts, reddit, by setting lower memory, play with jmalloc configuration, or setting things that are not very obvious to me why they help like:

```
SET temp_directory = './tmp';
SET allocator_background_threads = true; -- https://duckdb.org/docs/extensions/jemalloc
SET preserve_insertion_order = false; -- https://duckdb.org/docs/guides/performance/how_to_tune_workloads.html
```

The goal of our pipeline is to load an undefined amount of data for each day, with memory and compute constrains and unbounded time to process, from multiple 10MB gzipped ndjson files. Each root key in the json file should result in a column of type JSON. All columns are consistent over time.

We would like to then repartition on demand the data into parquet file as final destination for consumption.

Is this a bug/memory leak or a misunderstanding of how DuckDB work or how to achieve the goal?

### To Reproduce

```sql
CREATE OR REPLACE TABLE table_name AS (
  SELECT * FROM read_ndjson(
    './data/xxxx-xx-xx/*.ndjson.gz',
    map_inference_threshold = -1, maximum_depth = 1, union_by_name = true
  )
);
```

### OS:

macOS 14.7.2, Ubuntu 22.04, Ubuntu 24.04

### DuckDB Version:

1.1.3

### DuckDB Client:

CLI, Go

### Hardware:

Intel/ARM

### Full Name:

Kilian Ciuffolo

### Affiliation:

Roblox

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

No - I cannot share the data sets because they are confidential

### Did you include all code required to reproduce the issue?

- [x] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [x] Yes, I have