ID: 12800
Title: unittest Error both for AddressSanitizer and ThreadSanitizer
Description:
### What happens?

AddressSanitizer Error:
zzhao@zzhao-System-Version:~/Code/Work/Public/duckdb/build/debug/test$ ./unittest 
`[114/3154] (3%): Test RESET statement for ClientConfig options                  ==144785==ERROR: AddressSanitizer: Joining already joined thread, aborting.`

ThreadSanitizer error:
zzhao@zzhao-System-Version:~/Code/Work/Public/duckdb/build/debug/test$ ./unittest 
```
[114/3154] (3%): Test RESET statement for ClientConfig options                  ThreadSanitizer: CHECK failed: sanitizer_thread_registry.cpp:348 "((t)) != (0)" (0x0, 0x0) (tid=157535)
    #0 __tsan::CheckUnwind() <null> (unittest+0x1dbbdf) (BuildId: f2cfb832aba66db55298be5f5c728a665919572e)
    #1 __sanitizer::CheckFailed(char const*, int, char const*, unsigned long long, unsigned long long) <null> (unittest+0x15b936) (BuildId: f2cfb832aba66db55298be5f5c728a665919572e)
    #2 __sanitizer::ThreadRegistry::ConsumeThreadUserId(unsigned long) <null> (unittest+0x15a7ae) (BuildId: f2cfb832aba66db55298be5f5c728a665919572e)
    #3 pthread_join <null> (unittest+0x1779ff) (BuildId: f2cfb832aba66db55298be5f5c728a665919572e)
    #4 background_threads_disable_single /home/zzhao/Code/Work/Public/duckdb/extension/jemalloc/jemalloc/src/background_thread.c:300:6 (libduckdb.so+0x5814414) (BuildId: a8e9ec5ac8fb8cbb4044a2b43bc48bcdd46318f8)
    #5 duckdb_je_background_threads_disable /home/zzhao/Code/Work/Public/duckdb/extension/jemalloc/jemalloc/src/background_thread.c:631:6 (libduckdb.so+0x581426b) (BuildId: a8e9ec5ac8fb8cbb4044a2b43bc48bcdd46318f8)
    #6 background_thread_ctl /home/zzhao/Code/Work/Public/duckdb/extension/jemalloc/jemalloc/src/ctl.c:2061:8 (libduckdb.so+0x5823475) (BuildId: a8e9ec5ac8fb8cbb4044a2b43bc48bcdd46318f8)
    #7 duckdb_je_ctl_byname /home/zzhao/Code/Work/Public/duckdb/extension/jemalloc/jemalloc/src/ctl.c:1620:9 (libduckdb.so+0x581fa43) (BuildId: a8e9ec5ac8fb8cbb4044a2b43bc48bcdd46318f8)
    #8 duckdb_je_mallctl /home/zzhao/Code/Work/Public/duckdb/extension/jemalloc/jemalloc/src/jemalloc.c:3933:8 (libduckdb.so+0x57f6893) (BuildId: a8e9ec5ac8fb8cbb4044a2b43bc48bcdd46318f8)
    #9 duckdb::JemallocCTL(char const*, void*, unsigned long*, void*, unsigned long) /home/zzhao/Code/Work/Public/duckdb/extension/jemalloc/jemalloc_extension.cpp:31:6 (libduckdb.so+0x57ad7d0) (BuildId: a8e9ec5ac8fb8cbb4044a2b43bc48bcdd46318f8)
    #10 void duckdb::SetJemallocCTL<bool>(char const*, bool&) /home/zzhao/Code/Work/Public/duckdb/extension/jemalloc/jemalloc_extension.cpp:41:2 (libduckdb.so+0x57ad592) (BuildId: a8e9ec5ac8fb8cbb4044a2b43bc48bcdd46318f8)
    #11 duckdb::JemallocExtension::SetBackgroundThreads(bool) /home/zzhao/Code/Work/Public/duckdb/extension/jemalloc/jemalloc_extension.cpp:102:2 (libduckdb.so+0x57ad521) (BuildId: a8e9ec5ac8fb8cbb4044a2b43bc48bcdd46318f8)
    #12 duckdb::Allocator::SetBackgroundThreads(bool) /home/zzhao/Code/Work/Public/duckdb/src/common/allocator.cpp:253:2 (libduckdb.so+0x3fe22ba) (BuildId: a8e9ec5ac8fb8cbb4044a2b43bc48bcdd46318f8)
    #13 duckdb::TaskScheduler::SetAllocatorBackgroundThreads(bool) /home/zzhao/Code/Work/Public/duckdb/src/parallel/task_scheduler.cpp:285:2 (libduckdb.so+0x4a9dd2a) (BuildId: a8e9ec5ac8fb8cbb4044a2b43bc48bcdd46318f8)
    #14 duckdb::AllocatorBackgroundThreadsSetting::ResetGlobal(duckdb::DatabaseInstance*, duckdb::DBConfig&) /home/zzhao/Code/Work/Public/duckdb/src/main/settings/settings.cpp:1717:36 (libduckdb.so+0x48e69e7) (BuildId: a8e9ec5ac8fb8cbb4044a2b43bc48bcdd46318f8)
    #15 ____C_A_T_C_H____T_E_S_T____0() /home/zzhao/Code/Work/Public/duckdb/test/api/test_reset.cpp:232:5 (unittest+0x488ad8) (BuildId: f2cfb832aba66db55298be5f5c728a665919572e)
    #16 Catch::TestInvokerAsFunction::invoke() const /home/zzhao/Code/Work/Public/duckdb/test/../third_party/catch/catch.hpp:14443:9 (unittest+0x7b3c47) (BuildId: f2cfb832aba66db55298be5f5c728a665919572e)
    #17 Catch::TestCase::invoke() const /home/zzhao/Code/Work/Public/duckdb/test/../third_party/catch/catch.hpp:14282:15 (unittest+0x7abc44) (BuildId: f2cfb832aba66db55298be5f5c728a665919572e)
    #18 Catch::RunContext::invokeActiveTestCase() /home/zzhao/Code/Work/Public/duckdb/test/../third_party/catch/catch.hpp:13101:27 (unittest+0x7abb03) (BuildId: f2cfb832aba66db55298be5f5c728a665919572e)
    #19 Catch::RunContext::runCurrentTest(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&) /home/zzhao/Code/Work/Public/duckdb/test/../third_party/catch/catch.hpp:13074:17 (unittest+0x7a998c) (BuildId: f2cfb832aba66db55298be5f5c728a665919572e)
    #20 Catch::RunContext::runTest(Catch::TestCase const&) /home/zzhao/Code/Work/Public/duckdb/test/../third_party/catch/catch.hpp:12819:13 (unittest+0x7a88fb) (BuildId: f2cfb832aba66db55298be5f5c728a665919572e)
    #21 Catch::(anonymous namespace)::TestGroup::execute() /home/zzhao/Code/Work/Public/duckdb/test/../third_party/catch/catch.hpp:13463:45 (unittest+0x7af547) (BuildId: f2cfb832aba66db55298be5f5c728a665919572e)
    #22 Catch::Session::runInternal() /home/zzhao/Code/Work/Public/duckdb/test/../third_party/catch/catch.hpp:13675:39 (unittest+0x7ae52c) (BuildId: f2cfb832aba66db55298be5f5c728a665919572e)
    #23 Catch::Session::run() /home/zzhao/Code/Work/Public/duckdb/test/../third_party/catch/catch.hpp:13631:24 (unittest+0x7ae241) (BuildId: f2cfb832aba66db55298be5f5c728a665919572e)
    #24 int Catch::Session::run<char>(int, char const* const*) /home/zzhao/Code/Work/Public/duckdb/test/../third_party/catch/catch.hpp:13312:30 (unittest+0x7fa943) (BuildId: f2cfb832aba66db55298be5f5c728a665919572e)
    #25 main /home/zzhao/Code/Work/Public/duckdb/test/unittest.cpp:83:32 (unittest+0x7cf0a9) (BuildId: f2cfb832aba66db55298be5f5c728a665919572e)
    #26 __libc_start_call_main csu/../sysdeps/nptl/libc_start_call_main.h:58:16 (libc.so.6+0x2a1c9) (BuildId: 08134323d00289185684a4cd177d202f39c2a5f3)
    #27 __libc_start_main csu/../csu/libc-start.c:360:3 (libc.so.6+0x2a28a) (BuildId: 08134323d00289185684a4cd177d202f39c2a5f3)
    #28 _start <null> (unittest+0x146504) (BuildId: f2cfb832aba66db55298be5f5c728a665919572e)
```


### To Reproduce

reproduce   AddressSanitizer Error:
CC=clang-18 CXX=clang++-18 GEN=ninja DISABLE_UNITY=1 make debug && cd build/debug/test && ./unitest


reproduce ThreadSanitizer error:
 1  change CMakelist.txt under your root dir:
```
zzhao@zzhao-System-Version:~/Code/Work/Public/duckdb/build/debug/test$ git diff
diff --git a/CMakeLists.txt b/CMakeLists.txt
index fc5aa535c0..ea87169f3c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -139,8 +139,8 @@ option(ENABLE_EXTENSION_AUTOLOADING "Enable extension auto-loading by default."
 option(ENABLE_EXTENSION_AUTOINSTALL "Enable extension auto-installing by default." FALSE)
 option(EXTENSION_TESTS_ONLY "Only load the tests for extensions, don't actually build them; useful for testing loadable extensions" FALSE)
 option(WASM_LOADABLE_EXTENSIONS "WebAssembly build with loadable extensions." FALSE)
-option(ENABLE_SANITIZER "Enable address sanitizer." TRUE)
-option(ENABLE_THREAD_SANITIZER "Enable thread sanitizer." FALSE)
+option(ENABLE_SANITIZER "Enable address sanitizer." FALSE)
+option(ENABLE_THREAD_SANITIZER "Enable thread sanitizer." TRUE)
 option(ENABLE_UBSAN "Enable undefined behavior sanitizer." TRUE)
 option(DISABLE_VPTR_SANITIZER "Disable vptr sanitizer; work-around for sanitizer false positive on Macbook M1" FALSE)
 option(

```
2 run cmd:
 CC=clang-18 CXX=clang++-18 GEN=ninja DISABLE_UNITY=1 make clean && CC=clang-18 CXX=clang++-18 GEN=ninja DISABLE_UNITY=1 make debug && cd build/debug/test && ./unitest


to acccelarate test u can just run 
CC=clang-18 CXX=clang++-18 GEN=ninja DISABLE_UNITY=1 make clean && CC=clang-18 CXX=clang++-18 GEN=ninja DISABLE_UNITY=1 make debug && cd build/debug/test &&  ./unitest "Test RESET statement for ClientConfig options"

### OS:

Ubuntu 24.04 LTS (Linux 6.8.0-36-generic)  x86_64

### DuckDB Version:

latest main

### DuckDB Client:

cli

### Full Name:

zhao zhou

### Affiliation:

personal

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have not tested with any build

### Did you include all relevant data sets for reproducing the issue?

No - Other reason (please specify in the issue body)

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [x] Yes, I have