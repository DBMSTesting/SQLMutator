ID: 13500
Title: C++ UDF produces fatal crash with carriage return chars
Description:
### What happens?

When using a UDF in C++, which manipulates string values, if `duckdb::string_t` is passed a string which contains `\r`, `\v`, etc, the resulting query crashes with error:

```json

{"exception_type":"Invalid Input","exception_message":"Invalid unicode (byte sequence mismatch) detected in value construction"}
```

This happens when you provide a `std::string` with `\r` to the `duckdb::string_t` constructor, whether or not you received the string from `string_t.GetString()`.


Hint: - I think this may be due to how the `string_t(const string &value)` is implemented ??

### To Reproduce

### Create a UDF which returns a `string_t` type

```c++

duckdb::string_t my_udf(duckdb::string_t value) {
    
    // Create a std::string from this value...
    std::string copy = value.GetString();
    
    // Do any manipulation you might want on the std::string...
    
    
    // Create a new string_t value to return back...
    duckdb::string_t outputString = duckdb::string_t(copy);
    
    return outputString;
}
```

### Setup connection and add the function

```c++

duckdb::DuckDB db(nullptr);
duckdb::Connection con(db);

// Add our DuckDB UDF...
con.CreateScalarFunction<duckdb::string_t, duckdb::string_t>("my_udf", &my_udf);

```

### Execute the Query against a value with `\r` or other special character

Example file: [failing-value.parquet.zip](https://github.com/user-attachments/files/16698594/failing-value.parquet.zip)

```c++

string query = "SELECT my_udf(\"Class\") AS x FROM 'failing-value.parquet'";
    
std::unique_ptr<duckdb::QueryResult> result = con.Query(query);
```

### Fetch a data chunk via `GetValue` and receive error
```c++
while (true) {
        auto chunk = result->Fetch();
        if (!chunk || chunk->size() == 0) {
            break;
        }
        
        auto finalResult = chunk->GetValue(0, 0); // Only 0,0 because we have 1 value, and 1 chunk in this test...
        
        cout << finalResult.GetValueUnsafe<string>() << endl;
}
```

### Error


```libc++abi: terminating due to uncaught exception of type duckdb::InvalidInputException: {"exception_type":"Invalid Input","exception_message":"Invalid unicode (byte sequence mismatch) detected in value construction"}```

### OS:

macOS

### DuckDB Version:

1.0.0

### DuckDB Client:

C++

### Full Name:

Ryan Melehan

### Affiliation:

Coco Alemana, Inc

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have