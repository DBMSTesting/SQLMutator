ID: 14565
Title: Potential Query Time impact when using PyArrow and Schema
Description:
### What happens?

Using PyArrow and schema for loading the table (same as https://github.com/duckdb/duckdb/issues/14497) and using the nigthly build with the fix,
there's a noticeable time impact that **i'm not sure IF IT'S expected or not**. (if it's happening due to PyArrow or something in DuckDB)

```
bash-3.2$ python test.py 
┌──────────────┐
│ "version"()  │
│   varchar    │
├──────────────┤
│ v1.1.3-dev61 │
└──────────────┘

Data loaded (With schema)
┌─────────────┐
│ activity_id │
│    int32    │
├─────────────┤
│          99 │
└─────────────┘

Time spent  0.32207637489773333
Data loaded (Without Schema)
┌─────────────┐
│ activity_id │
│    int64    │
├─────────────┤
│          99 │
└─────────────┘

Time spent  0.002856791950762272
```

### To Reproduce

Use the following python script

```python
import duckdb
import pyarrow
from pyiceberg.schema import Schema
import json

import time

data = []
for i in range(0, 150000):
    data.append({'activity_id': 99, "category_uid": 4})


with open("./schema.json", 'r') as fp2:
    print(duckdb.sql("select version()"))
    schema = Schema.model_validate_json(fp2.read()).as_arrow()

    arrow_table = pyarrow.Table.from_pylist(data, schema=schema)
    print("Data loaded with Schema")
    t1 = time.perf_counter()

    print(duckdb.sql(
        "Select activity_id  from arrow_table where activity_id > 1 UNION Select activity_id from arrow_table where activity_id > 300"))
    print("Time spent ", time.perf_counter() - t1)

    no_schema_arrow_table = pyarrow.Table.from_pylist(data, schema=None)
    print("Data loaded")
    t1 = time.perf_counter()

    print(duckdb.sql(
        "Select activity_id  from no_schema_arrow_table where activity_id > 1 UNION Select activity_id from no_schema_arrow_table where activity_id > 300"))
    print("Time spent ", time.perf_counter() - t1)


```

Use the attache schema.json file.
[schema.json](https://github.com/user-attachments/files/17527309/schema.json)


### OS:

OSX Sonoma 14.16.1 - M1 -23.6.0 Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:30 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_ arm64

### DuckDB Version:

v1.1.3-dev61 

### DuckDB Client:

Python

### Hardware:

_No response_

### Full Name:

Leandro Costantino

### Affiliation:

Cisco

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a nightly build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have