ID: 15168
Title: Why does `1 = '1'::STRING` work but `[1, '1'::STRING]` throws?
Description:
### What happens?

@Mytherin said in https://github.com/duckdb/duckdb/issues/13847#issuecomment-2343042949 that

> There's indeed two sets of implicit cast rules - those used by function overloads, and those used by comparisons, set operations and operations like list_value where types are "combined". 

Either there are really _three_ sets of implicit cast rules, or it seems to be a bug that `1 = '1'::STRING` works but `[1, '1'::STRING]` doesn't.

### To Reproduce

The following two comparisons  work
```sql
SELECT 1 = '1', 1 = '1'::STRING, 
```
```
┌───────────┬────────────────────────────┐
│ (1 = '1') │ (1 = CAST('1' AS VARCHAR)) │
│  boolean  │          boolean           │
├───────────┼────────────────────────────┤
│ true      │ true                       │
└───────────┴────────────────────────────┘
```
but the second list creation below throws an error:
```sql
SELECT [1, '1'], [1, '1'::STRING]
```
```
Binder Error: Cannot create a list of types INTEGER_LITERAL and VARCHAR - an explicit cast is required
```



### OS:

Linux

### DuckDB Version:

1.1.3

### DuckDB Client:

Python

### Hardware:

AMD64

### Full Name:

Soeren Wolfers

### Affiliation:

G-Research

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have