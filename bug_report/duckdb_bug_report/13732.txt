ID: 13732
Title: Fix array/list distance operators
Description:
This PR does a couple of things:

Fixes the array/list distance metric binary operators `<=>`, `<#>` to actually return "distances" the same way as in PGVector. It used to be that e.g. `<=>` was an alias for `array/list_cosine_similarity`, but it's actually supposed to return the cosine "distance", i.e. `1.0 - cosine_similarity`. This confusion on my part also causes part of the optimizations/rewrite rules present in `vss` to be ... wrong. The same goes for `array/list_inner_product` where the corresponding operator should return the negative inner product.

Ideally we could make the cosine/inner product distance function/operator a macro based on the existing cosine similarity/inner product, but since these binary operators are already implemented as functions we can't remove them without breaking backwards plan serialization compatibility. Therefore they are now implemented as aliases over two new functions, `array/list_cosine_distance` and `array/list_negative_inner_product`. ~~In the future however we may be able to attempt deserializing missing functions as macros as a fall-back at which point we could swap the implementations to be macros in order to reduce code bloat.~~ - Actually no, we should not implement binary operators as macros until we support overloading macro functions.

To compensate, I've unified the functors used to compute these functions for both arrays and list types, and also modified the binding logic for the array functions so that it does not have to be templated.  

Empty lists in the `_cosine_` functions also now return NULL instead of throwing an error.


