ID: 15596
Title: Timestamps rough around the edges: Bugs
Description:
### What happens?

Breaking down https://github.com/duckdb/duckdb/issues/15512 ; first part, bugs:


The handling of large and infinite values in timestamps needs some love:

**Bugs:**

1. The difference of two `TIMESTAMPTZ` values  returns finite values even when one of the involved operands is infinite (essentially following integer arithmetic ignoring the infinity sentinel). For`TIMESTAMP` values, all such operations throw. In PostgreSQL for both types, the difference behaves like IEEE754 except an error is thrown where IEEE754 would return NaN.

```sql
SELECT
    TIMESTAMPTZ 'Infinity' - TIMESTAMPTZ 'Infinity', -- 0 but should throw
    TIMESTAMPTZ 'Infinity' - TIMESTAMPTZ '-Infinity', -- large value but should be infinity (or throw, because duckdb's INTERVAL can't be infinite currently)
    TIMESTAMPTZ 'Infinity' - TIMESTAMPTZ '2020-01-01', -- large value but should be infinity (or throw, because duckdb's INTERVAL can't be infinite currently)
```

2. For `TIMESTAMP_NS`, the timestamp corresponding to `2**63 - 1` provides the `Infinity` sentinel; for `TIMESTAMP` and `TIMESTAMPTZ` it throws:

```sql
SELECT
    TIMESTAMP_NS '2262-04-11 23:47:16.854775807', -- infinity
    TIMESTAMP '294247-01-10 04:00:54.775807', -- "Conversion Error: timestamp field value out of range: "294247-01-10 04:00:54.775807", expected format is (YYYY-MM-DD HH:MM:SS[.US][Â±HH:MM| ZONE])"
```


3. `make_timestamp(microseconds)` and `make_timestamptz(microseconds)` provide the `Infinity` sentinel when fed  `2**63 - 1` (as integer literal), unlike the constructors, which throw on the corresponding timestamps:

```sql
SELECT
    make_timestamp(9223372036854775807), -- Infinity
    make_timestamptz(9223372036854775807), -- Infinity
    TIMESTAMP '294247-01-10 04:00:54.775807', -- Error
```

4. For inputs where the correct output would be out-of-range for `INT64`, the  `epoch_ns(TIMESTAMP)` and `epoch_ns(TIMESTAMPTZ)` functions throw cryptic and scary errors. They should return `INT128` instead of `INT64`, so that they never overflow:
 
```sql
SELECT
    epoch_ns(TIMESTAMP '294247-1-1 00:00:00'),-- "Invalid Input Error: Attempting to execute an unsuccessful or closed pending query result. Error: Conversion Error: Could not convert Timestamp(US) to Timestamp(NS)"
    epoch_ns(TIMESTAMPTZ '294247-1-1 00:00:00'),-- "Invalid Input Error: Attempting to execute an unsuccessful or closed pending query result. Error: Conversion Error: Could not convert Timestamp(US) to Timestamp(NS)"
```

### To Reproduce

Run 
```sql
SET TimeZone='UTC';
```
before executing the snippets above.

### OS:

linux

### DuckDB Version:

1.1.3

### DuckDB Client:

Any

### Hardware:

Any

### Full Name:

Soeren Wolfers

### Affiliation:

G-Research

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a nightly build

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have