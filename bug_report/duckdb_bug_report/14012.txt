ID: 14012
Title: FROM generate_series(_,_) generates error in CASE statement because of deficient static type checking (generate_series() should probably in any case be more like range())
Description:
### What happens?

The program below is a working prime number tester, and works even for primep(1):
```
D select primep(1);
┌───────────┐
│ primep(1) │
│  boolean  │
├───────────┤
│ false     │
└───────────┘
```
However, if one replaces the line containing the call to unnest()
by the commented-out line immediately above it, primep(1) no longer works.
It produces the message:
```
Binder Error: start is bigger than end, but increment is positive: cannot generate infinite series
```
Evidently, the guard `when nnumber > 2' is insufficient.

~~If it's too much to hope that the static type checking can be improved to~~
~~prevent the problem, then I believe a perfectly fine solution would be to make~~
In any case, please consider making
generate_series() more like range() (that is, not produce an error when
an error is not actually required).

In this connection, it's worth noting that:
```
from unnest(generate_series(2,1)) as t(n); 
```
succeeds:
```
┌────────┐
│   n    │
│ int64  │
├────────┤
│ 0 rows │
└────────┘
```
However an attempt to use this feature in the program below fails for reasons which are probably
also worth looking into.  


### To Reproduce

Works:

```sql
create or replace function primep(nnumber) as (
  select
    case
    when nnumber < 2 then false
    when nnumber = 2 then true
    when nnumber > 2 then
      case when exists
         ( select * from 
           ( select (nnumber % anumber) as modNumber
             -- from generate_series(2, nnumber) _(anumber)  -- This ought to work because of the 'number > 2' guard
             from (select unnest(range(2, nnumber)) as anumber)
           ) 
           where modNumber = 0 
         ) 
       then false
       else true
       end
    end
);          
select primep(1);
```

Doesn't work:

```sql
create or replace function primep(nnumber) as (
  select
    case
    when nnumber < 2 then false
    when nnumber = 2 then true
    when nnumber > 2 then
      case when exists
         ( select * from 
           ( select (nnumber % anumber) as modNumber
             from generate_series(2, nnumber) _(anumber)
           ) 
           where modNumber = 0 
         ) 
       then false
       else true
       end
    end
);          
select primep(1);
```

### OS:

MacOS

### DuckDB Version:

1.0, 1.1

### DuckDB Client:

CLI

### Hardware:

_No response_

### Full Name:

Peter Koppstein

### Affiliation:

Princeton University

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a source build

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have