ID: 14303
Title: Deadlock in duckdb::StorageLock::GetExclusiveLock
Description:
### What happens?

After several thousand insert statements, the execution stops.

```
#0  0x00007ffff5e25746 in duckdb::StorageLock::GetExclusiveLock() () from /mnt/storage/home/skinkie/Sources/references/venv/lib/python3.11/site-packages/duckdb/duckdb.cpython-311-x86_64-linux-gnu.so
#1  0x00007ffff5e25853 in duckdb::DataTable::GetCheckpointLock() () from /mnt/storage/home/skinkie/Sources/references/venv/lib/python3.11/site-packages/duckdb/duckdb.cpython-311-x86_64-linux-gnu.so
#2  0x00007ffff5e2a662 in duckdb::SingleFileCheckpointWriter::WriteTable(duckdb::TableCatalogEntry&, duckdb::Serializer&) ()
   from /mnt/storage/home/skinkie/Sources/references/venv/lib/python3.11/site-packages/duckdb/duckdb.cpython-311-x86_64-linux-gnu.so
#3  0x00007ffff5e42159 in duckdb::SingleFileCheckpointWriter::CreateCheckpoint() () from /mnt/storage/home/skinkie/Sources/references/venv/lib/python3.11/site-packages/duckdb/duckdb.cpython-311-x86_64-linux-gnu.so
#4  0x00007ffff5e424f6 in duckdb::SingleFileStorageManager::CreateCheckpoint(duckdb::CheckpointOptions) ()
   from /mnt/storage/home/skinkie/Sources/references/venv/lib/python3.11/site-packages/duckdb/duckdb.cpython-311-x86_64-linux-gnu.so
#5  0x00007ffff5f63ff5 in duckdb::DuckTransactionManager::CommitTransaction(duckdb::ClientContext&, duckdb::Transaction&) ()
   from /mnt/storage/home/skinkie/Sources/references/venv/lib/python3.11/site-packages/duckdb/duckdb.cpython-311-x86_64-linux-gnu.so
#6  0x00007ffff5f6207f in duckdb::MetaTransaction::Commit() () from /mnt/storage/home/skinkie/Sources/references/venv/lib/python3.11/site-packages/duckdb/duckdb.cpython-311-x86_64-linux-gnu.so
#7  0x00007ffff5f62436 in duckdb::TransactionContext::Commit() () from /mnt/storage/home/skinkie/Sources/references/venv/lib/python3.11/site-packages/duckdb/duckdb.cpython-311-x86_64-linux-gnu.so
#8  0x00007ffff5b76008 in duckdb::ClientContext::EndQueryInternal(duckdb::ClientContextLock&, bool, bool, duckdb::optional_ptr<duckdb::ErrorData, true>) ()
   from /mnt/storage/home/skinkie/Sources/references/venv/lib/python3.11/site-packages/duckdb/duckdb.cpython-311-x86_64-linux-gnu.so
#9  0x00007ffff5b76446 in duckdb::ClientContext::CleanupInternal(duckdb::ClientContextLock&, duckdb::BaseQueryResult*, bool) ()
   from /mnt/storage/home/skinkie/Sources/references/venv/lib/python3.11/site-packages/duckdb/duckdb.cpython-311-x86_64-linux-gnu.so
#10 0x00007ffff5b76a3d in duckdb::ClientContext::FetchResultInternal(duckdb::ClientContextLock&, duckdb::PendingQueryResult&) ()
   from /mnt/storage/home/skinkie/Sources/references/venv/lib/python3.11/site-packages/duckdb/duckdb.cpython-311-x86_64-linux-gnu.so
--Type <RET> for more, q to quit, c to continue without paging--
#11 0x00007ffff5b77626 in duckdb::PendingQueryResult::ExecuteInternal(duckdb::ClientContextLock&) () from /mnt/storage/home/skinkie/Sources/references/venv/lib/python3.11/site-packages/duckdb/duckdb.cpython-311-x86_64-linux-gnu.so
#12 0x00007ffff5b776c5 in duckdb::PendingQueryResult::Execute() () from /mnt/storage/home/skinkie/Sources/references/venv/lib/python3.11/site-packages/duckdb/duckdb.cpython-311-x86_64-linux-gnu.so
#13 0x00007ffff6006757 in duckdb::DuckDBPyConnection::CompletePendingQuery(duckdb::PendingQueryResult&) ()
   from /mnt/storage/home/skinkie/Sources/references/venv/lib/python3.11/site-packages/duckdb/duckdb.cpython-311-x86_64-linux-gnu.so
#14 0x00007ffff601579b in duckdb::DuckDBPyConnection::ExecuteInternal(duckdb::PreparedStatement&, pybind11::object) ()
   from /mnt/storage/home/skinkie/Sources/references/venv/lib/python3.11/site-packages/duckdb/duckdb.cpython-311-x86_64-linux-gnu.so
#15 0x00007ffff601b941 in duckdb::DuckDBPyConnection::Execute(pybind11::object const&, pybind11::object) ()
   from /mnt/storage/home/skinkie/Sources/references/venv/lib/python3.11/site-packages/duckdb/duckdb.cpython-311-x86_64-linux-gnu.so
#16 0x00007ffff60350bc in pybind11::cpp_function::initialize<pybind11::cpp_function::initialize<duckdb::shared_ptr<duckdb::DuckDBPyConnection, true>, duckdb::DuckDBPyConnection, pybind11::object const&, pybind11::object, pybind11::name, pybind11::is_method, pybind11::sibling, char [86], pybind11::arg, pybind11::arg_v>(duckdb::shared_ptr<duckdb::DuckDBPyConnection, true> (duckdb::DuckDBPyConnection::*)(pybind11::object const&, pybind11::object), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [86], pybind11::arg const&, pybind11::arg_v const&)::{lambda(duckdb::DuckDBPyConnection*, pybind11::object const&, pybind11::object)#1}, duckdb::shared_ptr<duckdb::DuckDBPyConnection, true>, duckdb::DuckDBPyConnection*, pybind11::object const&, pybind11::object, pybind11::name, pybind11::is_method, pybind11::sibling, char [86], pybind11::arg, pybind11::arg_v>(pybind11::cpp_function::initialize<duckdb::shared_ptr<duckdb::DuckDBPyConnection, true>, duckdb::DuckDBPyConnection, pybind11::object const&, pybind11::object, pybind11::name, pybind11::is_method, pybind11::sibling, char [86], pybind11::arg, pybind11::arg_v>(duckdb::shared_ptr<duckdb::DuckDBPyConnection, true> (duckdb::DuckDBPyConnection::*)(pybind11::object const&, pybind11::object), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [86], pybind11::arg const&, pybind11::arg_v const&)::{lambda(duckdb::DuckDBPyConnection*, pybind11::object const&, pybind11::object)#1}&&, duckdb::shared_ptr<duckdb::DuckDBPyConnection, true> (*)(duckdb::DuckDBPyConnection*, pybind11::object const&, pybind11::object), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [86], pybind11::arg const&, pybind11::arg_v const&)::{lambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call&) () from /mnt/storage/home/skinkie/Sources/references/venv/lib/python3.11/site-packages/duckdb/duckdb.cpython-311-x86_64-linux-gnu.so
#17 0x00007ffff5f9cc03 in pybind11::cpp_function::dispatcher(_object*, _object*, _object*) () from /mnt/storage/home/skinkie/Sources/references/venv/lib/python3.11/site-packages/duckdb/duckdb.cpython-311-x86_64-linux-gnu.so
#18 0x00007ffff7bed6a1 in ?? () from /usr/lib64/libpython3.11.so.1.0
#19 0x00007ffff7bd1353 in _PyObject_MakeTpCall () from /usr/lib64/libpython3.11.so.1.0
#20 0x00007ffff7c1839b in _PyEval_EvalFrameDefault () from /usr/lib64/libpython3.11.so.1.0
#21 0x00007ffff7c16f83 in ?? () from /usr/lib64/libpython3.11.so.1.0
#22 0x00007ffff7c9fc08 in PyEval_EvalCode () from /usr/lib64/libpython3.11.so.1.0
#23 0x00007ffff7cb778d in ?? () from /usr/lib64/libpython3.11.so.1.0
#24 0x00007ffff7cb7716 in ?? () from /usr/lib64/libpython3.11.so.1.0
#25 0x00007ffff7cb8971 in ?? () from /usr/lib64/libpython3.11.so.1.0
#26 0x00007ffff7cb8734 in _PyRun_SimpleFileObject () from /usr/lib64/libpython3.11.so.1.0
#27 0x00007ffff7cb8568 in _PyRun_AnyFileObject () from /usr/lib64/libpython3.11.so.1.0
#28 0x00007ffff7cc2351 in Py_RunMain () from /usr/lib64/libpython3.11.so.1.0
--Type <RET> for more, q to quit, c to continue without paging--
#29 0x00007ffff7cc1e0b in Py_BytesMain () from /usr/lib64/libpython3.11.so.1.0
#30 0x00007ffff78e1f90 in __libc_start_call_main () from /lib64/libc.so.6
#31 0x00007ffff78e2049 in __libc_start_main () from /lib64/libc.so.6
#32 0x0000000000401085 in _start ()
```

### To Reproduce

I wish it was as easy as this, but it is not. I am able to reproduce the deadlock 100% of the time. Should I try to shrink that project down? Or does the code below and backtrace above already give a hint where this might occur?

```
import duckdb

with duckdb.connect("/tmp/mytest.duckdb") as con:
    cur = con

    sql_create_table = "CREATE TABLE IF NOT EXISTS referencing (parent_class varchar(64) NOT NULL, parent_id varchar(64) NOT NULL, parent_version varchar(64) not null, class varchar(64) not null, ref varchar(64) NOT NULL, version varchar(64) NOT NULL, ordr integer, PRIMARY KEY (parent_class, parent_id, parent_version, class, ref, version, ordr));"
    cur.execute(sql_create_table)

    i = 0

    while True:
        sql_insert_object = "INSERT INTO referencing (parent_class, parent_id, parent_version, class, ref, version, ordr) VALUES (?, ?, ?, ?, ?, ?, ?) ON CONFLICT DO NOTHING;"
        cur.execute(sql_insert_object, ('something', 'else', 1, 'something', 'other', 'than', i % 41))
        i += 1
        print(i)
```

I have already tried a pattern where ON CONFLICT DO NOTHING, is replaced with a try-except duckdb.duckdb.ConstraintException, which hangs at exactly the same point.

After removing the primary key is removed, the process continues a few hunderd inserts further. 

### OS:

Linux

### DuckDB Version:

duckdb-1.1.2.dev108
duckdb-1.1.1

### DuckDB Client:

Python

### Hardware:

amd64

### Full Name:

Stefan de Konink

### Affiliation:

Stichting OpenGeo

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a nightly build

### Did you include all relevant data sets for reproducing the issue?

No - Other reason (please specify in the issue body)

### Did you include all code required to reproduce the issue?

- [ ] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have