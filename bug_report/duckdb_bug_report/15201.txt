ID: 15201
Title: DuckDB Internal Error: No binding with name
Description:
### What happens?

The latest version of the DuckDB (latest main: v1.1.4-dev3057 1db3def66e) triggers Internal Error when running the following SQL statement: 

```sql
CREATE TABLE v00 (c01 INT, c02 STRING);
SELECT 'any_string' IN c02, FROM ( v00 AS ta01 NATURAL RIGHT JOIN 'string' : ( v00 AS ta02 NATURAL FULL JOIN v00 AS ta03 ) ), ( v00 AS ta04 SEMI JOIN v00 AS ta05 USING ( c02, c01 ) ) ;
```

Stacktrace from latest main(1db3def66e):

```
#0  0x0000000001079f0c in duckdb::InternalException::InternalException (this=<optimized out>, msg=...) at ../../src/include/duckdb/common/exception.hpp:313
#1  duckdb::InternalException::InternalException<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > (this=0x339eced0, Python Exception <class 'gdb.error'> There is no member named _M_dataplus.:
msg=, params=..., params=...) at ../../src/include/duckdb/common/exception.hpp:313
#2  0x0000000002907344 in duckdb::BindContext::GetActualColumnName (this=<optimized out>, binding_alias=..., column_name=...)
    at /home/duckdb/duckdb/src/planner/bind_context.cpp:171
#3  0x0000000002905fb0 in duckdb::BindContext::GetUsingBinding (this=0x339eae28, Python Exception <class 'gdb.error'> There is no member named _M_dataplus.:
column_name=) at /home/duckdb/duckdb/src/planner/bind_context.cpp:103
#4  0x00000000025e1c04 in duckdb::ExpressionBinder::QualifyColumnName (this=0xffffc287e6d0, Python Exception <class 'gdb.error'> There is no member named _M_dataplus.:
column_name=, error=...)
    at /home/duckdb/duckdb/src/planner/binder/expression/bind_columnref_expression.cpp:58
#5  0x00000000025ec1cc in duckdb::ExpressionBinder::QualifyColumnName (this=0xffffc287e6d0, col_ref=..., error=...)
    at /home/duckdb/duckdb/src/planner/binder/expression/bind_columnref_expression.cpp:381
#6  0x00000000025e441c in duckdb::ExpressionBinder::QualifyColumnNames (this=0xffffc287e6d0, expr=..., lambda_params=..., within_function_expression=true)
    at /home/duckdb/duckdb/src/planner/binder/expression/bind_columnref_expression.cpp:126
#7  0x000000000055aed8 in std::function<void (duckdb::unique_ptr<duckdb::ParsedExpression, std::default_delete<duckdb::ParsedExpression>, true>&)>::operator()(duckdb::unique_ptr<duckdb::ParsedExpression, std::default_delete<duckdb::ParsedExpression>, true>&) const (this=0xffffc287e5c0, __args=...)
    at /usr/bin/../lib/gcc/aarch64-linux-gnu/9/../../../../include/c++/9/bits/std_function.h:688
#8  duckdb::ParsedExpressionIterator::EnumerateChildren(duckdb::ParsedExpression&, std::function<void (duckdb::unique_ptr<duckdb::ParsedExpression, std::default_delete<duckdb::ParsedExpression>, true>&)> const&) (expr=..., callback=...) at /home/duckdb/duckdb/src/parser/parsed_expression_iterator.cpp:75
#9  0x00000000025e4edc in duckdb::ExpressionBinder::QualifyColumnNames (this=0xffffc287e6d0, expr=..., lambda_params=..., within_function_expression=false)
    at /home/duckdb/duckdb/src/planner/binder/expression/bind_columnref_expression.cpp:170
#10 0x00000000025e6b08 in duckdb::ExpressionBinder::QualifyColumnNames (binder=..., expr=...)
    at /home/duckdb/duckdb/src/planner/binder/expression/bind_columnref_expression.cpp:218
#11 0x0000000004b16694 in duckdb::Binder::BindSelectNode (this=0x339eada0, statement=...,
    from_table=<error reading variable: Cannot access memory at address 0x0>) at /home/duckdb/duckdb/src/planner/binder/query_node/bind_select_node.cpp:437
#12 0x0000000004b14e44 in duckdb::Binder::BindNode (this=0x339eada0, statement=...)
    at /home/duckdb/duckdb/src/planner/binder/query_node/bind_select_node.cpp:373
#13 0x00000000028f4d0c in duckdb::Binder::BindNode (this=0x339eada0, node=...) at /home/duckdb/duckdb/src/planner/binder.cpp:328
#14 0x00000000028f5698 in duckdb::Binder::Bind (this=0x339eada0, node=...) at /home/duckdb/duckdb/src/planner/binder.cpp:365
#15 0x00000000028eff68 in duckdb::Binder::Bind (this=0x339eada0, statement=...) at /home/duckdb/duckdb/src/planner/binder.cpp:150
#16 0x00000000029203c0 in duckdb::Planner::CreatePlan (this=0xffffc287f380, statement=...) at /home/duckdb/duckdb/src/planner/planner.cpp:43
#17 0x0000000001890fc8 in duckdb::ClientContext::CreatePreparedStatementInternal (this=<optimized out>, lock=..., Python Exception <class 'gdb.error'> There is no member named _M_dataplus.:
query=, statement=..., values=...)
    at /home/duckdb/duckdb/src/main/client_context.cpp:340
#18 0x0000000001895214 in duckdb::ClientContext::CreatePreparedStatement (this=<optimized out>, lock=..., Python Exception <class 'gdb.error'> There is no member named _M_dataplus.:
query=, statement=..., values=...,
    mode=duckdb::PreparedStatementMode::PREPARE_AND_EXECUTE) at /home/duckdb/duckdb/src/main/client_context.cpp:426
#19 0x00000000018ab804 in duckdb::ClientContext::PendingStatementInternal (this=0x3384fd60, lock=..., Python Exception <class 'gdb.error'> There is no member named _M_dataplus.:
query=, statement=..., parameters=...)
    at /home/duckdb/duckdb/src/main/client_context.cpp:745
#20 0x00000000018b50d0 in duckdb::ClientContext::PendingStatementOrPreparedStatement (this=<optimized out>, lock=..., Python Exception <class 'gdb.error'> There is no member named _M_dataplus.:
query=, statement=..., prepared=...,
    parameters=...) at /home/duckdb/duckdb/src/main/client_context.cpp:863
#21 0x00000000018a93d4 in duckdb::ClientContext::PendingStatementOrPreparedStatementInternal (this=0x3384fd60, lock=..., Python Exception <class 'gdb.error'> There is no member named _M_dataplus.:
query=, statement=...,
    prepared=..., parameters=...) at /home/duckdb/duckdb/src/main/client_context.cpp:837
#22 0x00000000018adc34 in duckdb::ClientContext::PendingQueryInternal (this=0x3384fd60, lock=..., statement=..., parameters=..., verify=<optimized out>)
    at /home/duckdb/duckdb/src/main/client_context.cpp:1054
#23 0x00000000018be110 in duckdb::ClientContext::PendingQuery (this=0x3384fd60, statement=..., values=std::unordered_map with 0 elements,
    allow_stream_result=<optimized out>) at /home/duckdb/duckdb/src/main/client_context.cpp:1041
#24 0x00000000018b7dfc in duckdb::ClientContext::PendingQuery (this=0x2ad8, statement=..., allow_stream_result=false)
    at /home/duckdb/duckdb/src/main/client_context.cpp:1001
#25 0x00000000018ec7d4 in duckdb::Connection::PendingQuery (this=<optimized out>, statement=..., allow_stream_result=false)
    at /home/duckdb/duckdb/src/main/connection.cpp:140
#26 0x00000000004b40f0 in duckdb_shell_sqlite3_prepare_v2 (db=0x337ae6d0, zSql=<optimized out>, nByte=<optimized out>, ppStmt=<optimized out>,
    pzTail=<optimized out>) at ../../tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:224
#27 0x000000000046f9dc in duckdb_shell::ShellState::ExecuteSQL (this=<optimized out>, zSql=0x339eb630 "SELECT 'any_string' IN c02, FROM ( v00 AS ta01 NATURAL RIGHT JOIN 'string' : ( v00 AS ta02 NATURAL FULL JOIN v00 AS ta03 ) ), ( v00 AS ta04 SEMI JOIN v00 AS ta05 USING ( c02, c01 ) ) ;", pzErrMsg=<optimized out>) at ../../tools/shell/shell.cpp:1762
#28 0x0000000000485b74 in duckdb_shell::ShellState::RunOneSqlLine (this=0xffffc2880638, zSql=0x339eb630 "SELECT 'any_string' IN c02, FROM ( v00 AS ta01 NATURAL RIGHT JOIN 'string' : ( v00 AS ta02 NATURAL FULL JOIN v00 AS ta03 ) ), ( v00 AS ta04 SEMI JOIN v00 AS ta05 USING ( c02, c01 ) ) ;") at ../../tools/shell/shell.cpp:4353
#29 0x0000000000480480 in duckdb_shell::ShellState::ProcessInput (this=<optimized out>) at ../../tools/shell/shell.cpp:4468
#30 0x0000000000489dac in main (argc=1, argv=0xffffc2880988) at ../../tools/shell/shell.cpp:5076
```

The bug is only reproducible on the latest main, NOT on the stable release (v1.1.3). 

### To Reproduce

1. Clone the DuckDB Git from the official repo.
2. Checkout to the latest main (1db3def66e).
3. Compile the DuckDB binary by using `make relassert`.
4. Run the compiled DuckDB and input the following SQL:

```sql
CREATE TABLE v00 (c01 INT, c02 STRING);
SELECT 'any_string' IN c02, FROM ( v00 AS ta01 NATURAL RIGHT JOIN 'string' : ( v00 AS ta02 NATURAL FULL JOIN v00 AS ta03 ) ), ( v00 AS ta04 SEMI JOIN v00 AS ta05 USING ( c02, c01 ) ) ;
```

### OS:

Ubuntu 24.04 LTS

### DuckDB Version:

latest main(1db3def66e)

### DuckDB Client:

cli

### Hardware:

_No response_

### Full Name:

Yu Liang

### Affiliation:

The Pennsylvania State University

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a nightly build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have