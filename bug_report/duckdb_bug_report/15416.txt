ID: 15416
Title: CTE does implicit and unexpected cross join when referencing columns that aren't in the table in the from clause
Description:
### What happens?

When creating a CTE you are allowed to reference columns that are not in the table in the from clause of the CTE, and instead of getting an error it does a cross join (I think) which blows up the rows processed internally and the query time.

### To Reproduce

```sql
CREATE TABLE a as (
    SELECT row_number() OVER () as id1, row_number() OVER () as id2, random() as c1, random() as c2
    FROM generate_series(1,10000)
);
CREATE TABLE b as (
    SELECT row_number() OVER () as id1, row_number() OVER () as id2
    FROM generate_series(1,10000)
);
WITH b_cte as (
    -- table b does not have columns c1 or c2! why does this work
    SELECT id1, id2, c1, c2
    FROM b
)
SELECT a.id1, a.id2, a.c1, a.c2
FROM a
INNER JOIN b_cte ON b_cte.id1 = a.id1 and b_cte.id2 = a.id2;
```

See inside the CTE the columns `c1` and `c2` and not in table `b`, yet there is no error. EXPLAIN shows a projection up to many more rows than necessary (due to cross join between table b and a?):

```
┌───────────────────────────┐
│         PROJECTION        │
│    ────────────────────   │
│            id1            │
│            id2            │
│             c1            │
│             c2            │
│                           │
│       ~50000000 Rows      │
└─────────────┬─────────────┘
┌─────────────┴─────────────┐
│      RIGHT_DELIM_JOIN     │
│    ────────────────────   │
│      Join Type: INNER     │
│                           │
│        Conditions:        │
│         id1 = id1         ├──────────────┐
│         id2 = id2         │              │
│ c1 IS NOT DISTINCT FROM c1│              │
│ c2 IS NOT DISTINCT FROM c2│              │
│                           │              │
│       ~50000000 Rows      │              │
└─────────────┬─────────────┘              │
┌─────────────┴─────────────┐┌─────────────┴─────────────┐
│         SEQ_SCAN          ││         HASH_JOIN         │
│    ────────────────────   ││    ────────────────────   │
│             a             ││      Join Type: INNER     │
│                           ││                           │
│        Projections:       ││        Conditions:        │
│             c1            ││         id1 = id1         ├───────────────────────────────────────────┐
│             c2            ││         id2 = id2         │                                           │
│            id1            ││ c1 IS NOT DISTINCT FROM c1│                                           │
│            id2            ││ c2 IS NOT DISTINCT FROM c2│                                           │
│                           ││                           │                                           │
│        ~10000 Rows        ││       ~50000000 Rows      │                                           │
└───────────────────────────┘└─────────────┬─────────────┘                                           │
                             ┌─────────────┴─────────────┐                             ┌─────────────┴─────────────┐
                             │       CROSS_PRODUCT       ├──────────────┐              │         DUMMY_SCAN        │
                             └─────────────┬─────────────┘              │              └───────────────────────────┘
                             ┌─────────────┴─────────────┐┌─────────────┴─────────────┐
                             │         SEQ_SCAN          ││         DELIM_SCAN        │
                             │    ────────────────────   ││    ────────────────────   │
                             │             b             ││       Delim Index: 1      │
                             │                           ││                           │
                             │        Projections:       ││                           │
                             │            id1            ││                           │
                             │            id2            ││                           │
                             │                           ││                           │
                             │        ~10000 Rows        ││         ~5000 Rows        │
                             └───────────────────────────┘└───────────────────────────┘
```

### OS:

x86_64, Amazon Linux 2023 distro on ec2 instance

### DuckDB Version:

1.1.3

### DuckDB Client:

CLI and python

### Hardware:

_No response_

### Full Name:

Fisher Moritzburke

### Affiliation:

Liquid Analytics

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have