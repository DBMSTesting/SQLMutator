ID: 14980
Title: NULL pointer dereference scanning from arrow with lists of structs
Description:
### What happens?

There's a segfault when trying to select a column from an arrow batch that has two lists and one of them is a list of structs. Maybe there's a simpler explanation, but this is what I've been able to trivially reproduce. I first filed this under https://github.com/marcboeker/go-duckdb/issues/321, but it's not very go specific, and the Python support seems more first-class so this repro seemed more likely to get some attention.

### To Reproduce

Create an arrow batch with lists of structs and then try to scan one of them. Below is an example in Python, but it also happens using the C-API from go. 

```python
# /// script
# requires-python = ">=3.12"
# dependencies = [
#     "duckdb",
#     "pyarrow",
# ]
# ///

import pyarrow as pa

schema = pa.schema([
    pa.field("m", pa.struct([
        pa.field("array", pa.list_(
            pa.struct([pa.field("a", pa.int64())])
        ))
    ])),
    pa.field("a", pa.struct([
        pa.field("array", pa.list_(pa.int64()))
    ]))
])
m_a_values = pa.array([1], type=pa.int64())  # Values for "a"
m_array = pa.ListArray.from_arrays(
    offsets=pa.array([0, 1], type=pa.int32()),  # One list with one element
    values=pa.StructArray.from_arrays([m_a_values], names=["a"])
)
m = pa.StructArray.from_arrays([m_array], names=["array"])
a_array_values = pa.array([1], type=pa.int64())  # Values for the list
a_array = pa.ListArray.from_arrays(
    offsets=pa.array([0, 1], type=pa.int32()),  # One list with one element
    values=a_array_values
)
a = pa.StructArray.from_arrays([a_array], names=["array"])
record_batch = pa.RecordBatch.from_arrays([m, a], schema.names)

import duckdb
con = duckdb.connect()
results = con.execute("SELECT a FROM record_batch").arrow()
```

```
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
duckdb.duckdb.InternalException: INTERNAL Error: Attempted to dereference unique_ptr that is NULL!
This error signals an assertion failure within DuckDB. This usually occurs due to unexpected conditions or errors in the program's logic.
For more information, see https://duckdb.org/docs/dev/internal_errors
```

### OS:

linux x86_64

### DuckDB Version:

1.1.3

### DuckDB Client:

Python

### Hardware:

_No response_

### Full Name:

Andrew Werner

### Affiliation:

Data Ex Machina, Inc

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have