ID: 13306
Title: Failed to commit: Invalid bitmask for FixedSizeAllocator
Description:
### What happens?

Concurrent multiple transactions causing exception 

```text
java.sql.SQLException: TransactionContext Error: Failure while replaying WAL file "/duckdb.wal": Failed to commit: Invalid bitmask for FixedSizeAllocator
	at org.duckdb.DuckDBNative.duckdb_jdbc_startup(Native Method) ~[duckdb_jdbc-1.0.0.jar!/:na]
	at org.duckdb.DuckDBConnection.newConnection(DuckDBConnection.java:48) ~[duckdb_jdbc-1.0.0.jar!/:na]
	at org.duckdb.DuckDBDriver.connect(DuckDBDriver.java:41) ~[duckdb_jdbc-1.0.0.jar!/:na]
	at java.sql/java.sql.DriverManager.getConnection(DriverManager.java:682) ~[java.sql:na]
	at java.sql/java.sql.DriverManager.getConnection(DriverManager.java:191) ~[java.sql:na]
```

### To Reproduce

```java
    /**
     * Writes data to the database using the provided query and parameters.
     * 
     * @param query      SQL query to be executed
     * @param parameters List of parameters to be set in the query
     */
    public void batch(String query, List<List<?>> parameters) {
        Connection conn = null;
        boolean failed = false;
        try {
            // Establish connection to the DuckDB database
            conn = (Connection) DriverManager.getConnection(jdbcurl);
            PreparedStatement stmt = conn.prepareStatement(query);
            conn.setAutoCommit(false);
            // Logging query and parameter information
            logger.debug("Executing query: {}", query);
            if (parameters != null && !parameters.isEmpty()) {
                for (List<?> paramlist : parameters) {
                    int i = 1;
                    for (Object param : paramlist) {
                        stmt.setObject(i++, param);
                    }
                    stmt.addBatch();
                }
            }

            // Execute the batch of statements
            stmt.executeBatch();
            logger.debug("Query executed successfully");

        } catch (Exception e) {
            failed = true;
            rollback(conn);
            // Log the exception details
            logger.error("Error executing write operation", e);
        } finally {
            // Ensure the connection is closed
            closeconnection(conn, failed);
        }
    }
```

### OS:

IOS

### DuckDB Version:

 <dependency>     <groupId>org.duckdb</groupId>     <artifactId>duckdb_jdbc</artifactId>     <version>1.0.0</version> </dependency>

### DuckDB Client:

Java 22

### Full Name:

Sankalp Pandey

### Affiliation:

Binaryflux

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

No - Other reason (please specify in the issue body)

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have