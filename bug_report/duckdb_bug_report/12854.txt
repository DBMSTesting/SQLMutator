ID: 12854
Title: Optimized Rule, filter_combiner
Description:
### What happens?

In file filter_combiner.cpp, function `FilterResult FilterCombiner::AddTransitiveFilters(BoundComparisonExpression &comparison, bool is_root)`, line 904, I found that programmer create a object filter and push back. However, the logic of the code is create a new filter that take the transition, for example, we get j >= i AND i = 10, so we need to create a new filter j >= 10. But in the implementation, we create the filter with ` auto filter = make_uniq<BoundComparisonExpression>(comparison.type, comparison.left->Copy(), comparison.right->Copy()`. 

### To Reproduce

I think here might be create a new filter as follow:
`
auto constant_ = make_uniq<BoundConstantExpression>(info.constant);
auto filter = make_uniq<BoundComparisonExpression>(comparison.type, comparison.left->Copy(), std::move(constant_));
`



### OS:

x64

### DuckDB Version:

v1.0.0

### DuckDB Client:

C++

### Full Name:

Yaohua Li

### Affiliation:

Sun Yat-sen University

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have not tested with any build

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [ ] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [ ] Yes, I have