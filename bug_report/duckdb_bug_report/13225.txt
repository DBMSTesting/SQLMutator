ID: 13225
Title: (Nightly Build) Fuzzer: DuckDB SEGV at duckdb::ValidityMask::CopySel
Description:
### What happens?

DuckDB SEGV at duckdb::ValidityMask::CopySel.

### To Reproduce

```sql
SELECT LIST_REDUCE(c, (x, y) -> x + y) FROM TEST_VECTOR_TYPES(CAST(NULL AS INT[])) AS t(c) WHERE LENGTH(REPEAT(c,2)) > 0
```

gdb backtrace:
```
Thread 1 "duckdb" received signal SIGSEGV, Segmentation fault.
0x00005555559b5ad2 in duckdb::ValidityMask::CopySel(duckdb::ValidityMask const&, duckdb::SelectionVector const&, unsigned long, unsigned long, unsigned long) ()
(gdb) bt
#0  0x00005555559b5ad2 in duckdb::ValidityMask::CopySel(duckdb::ValidityMask const&, duckdb::SelectionVector const&, unsigned long, unsigned long, unsigned long) ()
#1  0x0000555555a3ea85 in duckdb::VectorOperations::Copy(duckdb::Vector const&, duckdb::Vector&, duckdb::SelectionVector const&, unsigned long, unsigned long, unsigned long) ()
#2  0x0000555556a83a58 in duckdb::RepeatListFunction(duckdb::DataChunk&, duckdb::ExpressionState&, duckdb::Vector&) ()
#3  0x0000555555b13e70 in duckdb::ExpressionExecutor::Execute(duckdb::BoundFunctionExpression const&, duckdb::ExpressionState*, duckdb::SelectionVector const*, unsigned long, duckdb::Vector&) ()
#4  0x0000555555c5ca2f in duckdb::ExpressionExecutor::Execute(duckdb::Expression const&, duckdb::ExpressionState*, duckdb::SelectionVector const*, unsigned long, duckdb::Vector&) ()
#5  0x0000555555b13e1f in duckdb::ExpressionExecutor::Execute(duckdb::BoundFunctionExpression const&, duckdb::ExpressionState*, duckdb::SelectionVector const*, unsigned long, duckdb::Vector&) ()
#6  0x0000555555c5ca2f in duckdb::ExpressionExecutor::Execute(duckdb::Expression const&, duckdb::ExpressionState*, duckdb::SelectionVector const*, unsigned long, duckdb::Vector&) ()
#7  0x0000555555b165fb in duckdb::ExpressionExecutor::Select(duckdb::BoundComparisonExpression const&, duckdb::ExpressionState*, duckdb::SelectionVector const*, unsigned long, duckdb::SelectionVector*, duckdb::SelectionVector*) ()
#8  0x0000555555c66ee0 in duckdb::ExpressionExecutor::SelectExpression(duckdb::DataChunk&, duckdb::SelectionVector&) ()
#9  0x0000555556741c62 in duckdb::PhysicalFilter::ExecuteInternal(duckdb::ExecutionContext&, duckdb::DataChunk&, duckdb::DataChunk&, duckdb::GlobalOperatorState&, duckdb::OperatorState&) const ()
#10 0x0000555555c5a007 in duckdb::CachingPhysicalOperator::Execute(duckdb::ExecutionContext&, duckdb::DataChunk&, duckdb::DataChunk&, duckdb::GlobalOperatorState&, duckdb::OperatorState&) const ()
#11 0x0000555555d5f0b0 in duckdb::PipelineExecutor::Execute(duckdb::DataChunk&, duckdb::DataChunk&, unsigned long) ()
#12 0x0000555555d5f279 in duckdb::PipelineExecutor::ExecutePushInternal(duckdb::DataChunk&, unsigned long) ()
#13 0x0000555555d60ce3 in duckdb::PipelineExecutor::Execute(unsigned long) ()
#14 0x0000555555d611d2 in duckdb::PipelineTask::ExecuteTask(duckdb::TaskExecutionMode) ()
#15 0x0000555555d5a69d in duckdb::ExecutorTask::Execute(duckdb::TaskExecutionMode) ()
#16 0x0000555555d5eb18 in duckdb::Executor::ExecuteTask(bool) ()
#17 0x0000555555d174c5 in duckdb::ClientContext::ExecuteTaskInternal(duckdb::ClientContextLock&, duckdb::BaseQueryResult&, bool) ()
#18 0x0000555555d17694 in duckdb::PendingQueryResult::ExecuteTaskInternal(duckdb::ClientContextLock&) ()
#19 0x0000555555d177b4 in duckdb::PendingQueryResult::ExecuteInternal(duckdb::ClientContextLock&) ()
#20 0x0000555555d179b4 in duckdb::PendingQueryResult::Execute() ()
#21 0x0000555555d19a40 in duckdb::PreparedStatement::Execute(duckdb::vector<duckdb::Value, true>&, bool) ()
#22 0x00005555558b5461 in duckdb_shell_sqlite3_print_duckbox ()
#23 0x0000555555898d2b in exec_prepared_stmt ()
#24 0x000055555589a0ad in shell_exec ()
#25 0x000055555589bc43 in runOneSqlLine.isra.0 ()
#26 0x00005555558a3cc8 in process_input ()
#27 0x0000555555885378 in main ()
```
**Note**
On stable version v1.0.0, there is no SEGV. Its output is as follow:
```
SELECT LIST_REDUCE(c, (x, y) -> x + y) FROM TEST_VECTOR_TYPES(CAST(NULL AS INT[])) AS t(c) WHERE LENGTH(REPEAT(c,2)) > 0;
Binder Error: No function matches the given name and argument types 'repeat(INTEGER[], INTEGER_LITERAL)'. You might need to add explicit type casts.
        Candidate functions:
        repeat(VARCHAR, BIGINT) -> VARCHAR
        repeat(BLOB, BIGINT) -> BLOB

LINE 1: ...T(NULL AS INT[])) AS t(c) WHERE LENGTH(REPEAT(c,2)) > 0;
```

### OS:

Ubuntu 20.04 x64

### DuckDB Version:

v1.0.1-dev3542 and v1.0.1-dev3550

### DuckDB Client:

python nightly build & cli source build

### Full Name:

Jingzhou Fu

### Affiliation:

Wingtecher Lab of Tsinghua University and ShuiMuYuLin Ltd.

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a source build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have