ID: 15695
Title: “Malformed JSON” with recursive CTE involving large compressed JSON file
Description:
### What happens?

```text
Invalid Input Error: Malformed JSON in file "….jsonl.zst", at byte 1 in record/value 2: invalid literal. 
```

### To Reproduce

`./duckdb < repro.sql`:
```sql
with recursive
    items as (
        select
            json,
            json->>'id' as id,
            json->>'parent' as parent,
        from read_json_objects('hackernews-2024-03-05T07-23-31.jsonl.zst', format='unstructured')
        limit 1000
    ),
    roots as (
        select id, parent as root from items where parent is null
        union all
        select items.id, roots.root from items join roots on items.parent = roots.id where items.parent is not null
    )
select *
from items
join roots on items.id = roots.id
order by roots.root, items.id
limit 10;
```

Associated dataset: [hackernews-2024-03-05T07-23-31.jsonl.zst](https://static.linestarve.com/tmp/hackernews-2024-03-05T07-23-31.jsonl.zst) (12MB)

Notably this test case is as reduced as I can get it; it does *not* reproduce with smaller files, uncompressed files, or without joining a recursive CTE.

**Workaround:** Use uncompressed jsonl files. Removing the compression makes the error go away, confirming that despite the error message the JSON is not actually malformed.

### OS:

Linux (Ubuntu Noble 24.04)

### DuckDB Version:

v1.1.4-dev2261 ed90e384ef

### DuckDB Client:

CLI

### Hardware:

_No response_

### Full Name:

Wolfgang Faust

### Affiliation:

None

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a nightly build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have