ID: 15559
Title: No way to enforce type-safe comparisons (disable implicit typecasting)
Description:
### What happens?

I'm using DuckDB heavily for data cleaning, and interfacing with other systems like Athena, BigQuery, etc.

I've run into an issue which doesn't seem to have an easy fix... Specifically, when comparing a string with a numerical value, DuckDB implicitly typecasts to a numerical value. This makes sense when both sides of the operator are numerical values, and comparable. However, this makes much less sense when one side is a string, and the other numerical. It can cause some weird comparison behavior, which can be catastrophic when filtering or cleaning data...


Why this is important:

Other languages like Python, and other SQL dialects like Presto & BigQuery, do not perform implicit type casting during comparison.

As an example:

Python
```python
'1'==1 # False
```

BigQuery:

```sql
SELECT '1'=1; -- No matching signature for operator = for argument types: STRING, INT64 Signature: T1 = T1 Unable to find common supertype for templated argument <T1> Input types for <T1>: {INT64, STRING} at [1:8]

```


When working with strings which act as codes, such as `0001`, `001` or `1`, there might be a real difference between the values. However, if you forget the type of column you're working with, and you apply a predicate like `WHERE code=1`, you now get back results for three values, instead of the one. This is unbelievably common, and goes unnoticed.

I assume this is because DuckDB is trying to mimic the Postgres functionality...

I haven't found a way to do comparisons in a type-safe way. Javascript has this same issue (and 100 more which should frankly be considered programming war crimes), and has a "type-safe" comparator: `===`.

Also, in DuckDB (and Postgres + others) it's a bit ambiguous to have:

```sql
SELECT '01'=1; -- true

-- but also have

SELECT NULL = NULL; -- NULL

```


Bottom line... Is there a way to either:
- Disable implicit type casting during comparison
- Write an expression which takes the types into consideration


It may also be good to create a separate operator for type-safe comparisons :)

Until then, I am thinking of just writing my own UDF to handle these cases, but wanted to point it out :)

### To Reproduce

Take the following examples:

```sql
-- VARCHAR x NUMERICAL
SELECT '1' = 1; -- true

SELECT ' 1'=1; -- true

SELECT ' 1 ' =1; -- true

SELECT '01'=1; -- true

SELECT ' 01 '=1; -- true

SELECT CAST(' 01' AS VARCHAR) = CAST(1 AS INTEGER); -- true

-- VARCHAR x VARCHAR
SELECT '1' = '1'; -- true

SELECT '01' = '01'; -- true

SELECT '01'='1'; -- false

SELECT ' 1'='1'; -- false

SELECT ' 01 ' = '01'; -- false

-- VARCHAR (num) x INTEGER (num)

SELECT '1.23' = 1.23; -- true; Period Decimal (North America, etc.)

SELECT '1,23'=1.23; -- Conversion Error: Could not convert string "1,23" to DECIMAL(3,2); Comma Decimal (Europe, South America, etc.)
```

### OS:

macOS

### DuckDB Version:

v1.1.0

### DuckDB Client:

CLI, C++ (any version really)

### Hardware:

_No response_

### Full Name:

Ryan Melehan

### Affiliation:

Coco Alemana, Inc.

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have