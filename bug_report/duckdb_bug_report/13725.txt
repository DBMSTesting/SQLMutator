ID: 13725
Title: Using both `hive_partitioning` and `hive_types` in `read_json_objects` intermittently segfaults
Description:
### What happens?

duckdb cli will intermittently segfault when using `read_json_objects` with `hive_partitioning = true` and defined `hive_types`.

Specifically the segfault is of type `EXC_BAD_ACCESS`, subtype `KERN_INVALID_ADDRESS at 0x0000000000000004`

The intermittency varies, however in my local testing running the supplied script will cause the issue on anything between 1-120 attempts at a query.

### To Reproduce

To reproduce:

- Install duckdb (in my case by using `brew install duckdb` on macOS)
- Create the following script in your editor, and run it.  It should run the problematic command repeatedly until it segfaults at which point it should say upon which attempt this occurred.
```sh
#!/bin/sh

mkdir "month=07"
echo '{ "hello": "there" }' > month=07/mytest.json

counter=1
until duckdb -s "select * from read_json_objects('./month=*/*.json', hive_partitioning = true, format = auto, hive_types = {'month': int}, filename = true ) where month = 7;" 
  [ $? -eq 139 ]
do counter=$((counter+1)) 
done

printf "segfaulted on try: $counter\n"
```

In the hopes of saving you some debug time, some additional info:

- The state occurs when both when running duckdb interactively or via `-s`.... I only use `-s` here to make repeat testing until a failure state easier
- The same issue seems to manifest with single JSON objects, and line delimited JSON files with multiple objects
- The issue manifests with all sorts of JSON content, the content in the above script is just to illustrate, it does not appear to be the problem.
- Using `hive_partitioning = true` but not setting `hive_types` does not seem to trigger the condition



### OS:

macOS 14.5 (23F79), arm64

### DuckDB Version:

v1.0.0 1f98600c2c

### DuckDB Client:

Native CLI Client

### Full Name:

Lee Brotherston

### Affiliation:

OpsHelmInc

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have