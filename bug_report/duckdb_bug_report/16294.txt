ID: 16294
Title: Problems when using the VAR_POP function
Description:
### What happens?

Inconsistency occurs when using the var_pop function. Query 1 and Query 2 should return the same result because the condition in having simulates three-valued logic. The result after the union of the three statements should be the same as that of Query 1, but the calculation results are inconsistent.
Specifically, the result of Query 1 contains two data items -- [8.2499999999999998, 0.0], while the result of Query 2 is -- [8.2499999999999977, 0.0]

```
SELECT VAR_POP(t0.rowid) FROM t55, t0 GROUP BY t0.c0;
--[8.249999999999998, 0.0]
SELECT VAR_POP(t0.rowid) FROM t55, t0 GROUP BY t0.c0 HAVING t0.c0 UNION ALL SELECT VAR_POP(t0.rowid) FROM t55, t0 GROUP BY t0.c0 HAVING (NOT t0.c0) UNION ALL SELECT VAR_POP(t0.rowid) FROM t55, t0 GROUP BY t0.c0 HAVING ((t0.c0) IS NULL);
--[8.249999999999977, 0.0]
```

### To Reproduce

```sql
CREATE TABLE t55(c0 VARCHAR, PRIMARY KEY(c0));
CREATE TABLE t0(c0 BOOLEAN);
INSERT INTO t55(c0) VALUES (DATE '1969-12-10');
CREATE INDEX i2 ON t0(c0 );
INSERT INTO t55(c0) VALUES (DATE '1970-01-19');
INSERT INTO t0(c0) VALUES (0.9462447929936977);
INSERT INTO t0(c0) VALUES (-1246660391);
CREATE INDEX i4 ON t55(c0 );
INSERT INTO t0(c0) VALUES (false), (-1447222737), (false);
VACUUM;
INSERT INTO t55(c0) VALUES (0.7155749800384938), (782745098), (true);
UPDATE t0 SET c0=-1206692251;
INSERT INTO t0(c0) VALUES (DEFAULT);
INSERT INTO t55(c0) VALUES (TIMESTAMP '1969-12-20 18:43:08');
ANALYZE;
CREATE INDEX i3 ON t55(c0 DESC);
UPDATE t0 SET c0=0.6283504250404676;
UPDATE t0 SET c0=0.9277893033061982;
INSERT INTO t0(c0) VALUES (885906116), (0.2133380094162144), (DEFAULT);
INSERT INTO t55(c0) VALUES (false), (-1.46804299E8), (-1155959904);
INSERT INTO t55(c0) VALUES ('pO');
INSERT INTO t0(c0) VALUES (DEFAULT);
UPDATE t0 SET c0=0.3117033648021942;
INSERT INTO t55(c0) VALUES (DATE '1970-01-23');
INSERT INTO t0(c0) VALUES (NULL);

SELECT VAR_POP(t0.rowid) FROM t55, t0 GROUP BY t0.c0;
--[8.249999999999998, 0.0]
SELECT VAR_POP(t0.rowid) FROM t55, t0 GROUP BY t0.c0 HAVING t0.c0 UNION ALL SELECT VAR_POP(t0.rowid) FROM t55, t0 GROUP BY t0.c0 HAVING (NOT t0.c0) UNION ALL SELECT VAR_POP(t0.rowid) FROM t55, t0 GROUP BY t0.c0 HAVING ((t0.c0) IS NULL);
--[8.249999999999977, 0.0]
```

### OS:

x86_64

### DuckDB Version:

v1.1.3

### DuckDB Client:

python

### Hardware:

_No response_

### Full Name:

Chenglin Tian

### Affiliation:

Personal

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a source build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [x] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [x] Yes, I have