ID: 16370
Title: `create_function` raises a `DeprecationWarning` with python 3.13
Description:
### What happens?

Registering a python UDF via the `create_function` method from a DuckDB connection raises a DeprecationWarning in python 3.13.

This does not happen with previous python versions!

### To Reproduce

Create **repro_test.py**:

```py
import duckdb
from duckdb.typing import VARCHAR


def test_repro() -> None:
    conn = duckdb.connect()
    conn.create_function("blah", lambda x: x, return_type=VARCHAR)

if __name__ == "__main__":
    test_repro()
```

Then run:

`python test_repro.py`

Result:

```terminal
DeprecationWarning: numpy.core is deprecated and has been renamed to numpy._core. The numpy._core namespace contains private NumPy internals and its use is discouraged, as NumPy internals can change without warning in any release. In practice, most real-world usage of numpy.core is to access functionality in the public NumPy API. If that is the case, use the public NumPy API. If not, you are using NumPy internals. If you would still like to access an internal attribute, use numpy._core.multiarray.
  conn.create_function("blah", lambda x: x, return_type=VARCHAR)
```


### OS:

Linux-5.15.133.1-microsoft-standard-WSL2-x86_64-with-glibc2.35

### DuckDB Version:

1.2, 1.1.3

### DuckDB Client:

Python 3.13

### Hardware:

_No response_

### Full Name:

Francesco Bruzzesi

### Affiliation:

Narwhals devs

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [x] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [x] Yes, I have