ID: 12688
Title: DuckDB.jl `execute` doesn't like non-null terminated strings
Description:
### What happens?

[If I call `DBInterface.execute` with some string bind parameters, that aren't null terminated (e.g., `SubString`s), the call doesn't work as expected. DuckDB ignores the stored length of the string, and parses the parameter up to the null termination (wherever that may be).

### To Reproduce

Here's a somewhat contrived MVP:

```julia
julia> using DuckDB
julia> db = DuckDB.DB()
julia> only(DBInterface.execute(db, "SELECT length(?) as len", ["foo"])).len
3

julia> only(DBInterface.execute(db, "SELECT length(?) as len", [SubString("foobar", 1:3)])).len
6
```

The last call should also return 3.

As a workaround, one can explicitly cast the bind argument to `String`, which makes it null terminated:

```julia
julia> only(DBInterface.execute(db, "SELECT length(?) as len", [String(SubString("foobar", 1:3))])).len
3
```

### OS:

Linux

### DuckDB Version:

1.0.0

### DuckDB Client:

Julia

### Full Name:

David Hanak

### Affiliation:

Cursor Insight

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have