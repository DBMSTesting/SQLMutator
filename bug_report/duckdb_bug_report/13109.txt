ID: 13109
Title: [Explain (mostly internal only)] Change the way key-value pairs of information are stored for RenderTreeNodes
Description:
Previous:
```c++
string extra_info;
```

Now:
```c++
InsertionOrderPreservingMap<string> extra_info;
```

Previously this string was populated with `[INFOSEPARATOR]` to indicate where one key-value pair ends and another begins. This requires manual parsing of the string and has resulted in improperly formatting the extra info in certain scenarios.

By separating the key-value pairs explicitly, those separations are no longer needed.
In some situations two items were grouped together without an INFOSEPARATOR, perhaps on purpose - that is lost by this PR.

This change makes it easier for custom TreeRenderer implementations to work with the extra info and display it properly.
Such as the JSONTreeRenderer for example.

### Profiling Metrics

Currently in the `QueryProfiler` the profiling information is rendered separately from the other extra info, this change makes it easier to merge the options added by the profiler with the existing extra info.

### Operator Extensions

The extra info gets populated through the `ParamsToString` method, of which the signature used to be:
```c++
virtual string ParamsToString() const;
```

This has now been changed to
```c++
virtual InsertionOrderPreservingMap<string> ParamsToString() const;
```

Extensions that override this virtual method should update to the new version.

### Misc

`SplitStringBuffer` had a bug where it didn't take into account the characters left on the next line after a split, causing it to create lines that exceed the maximum length for the TextTreeRenderer, resulting in a `...` and loss of information.

The TextTreeRenderer printed additional whitespace at the end of lines regardless if there were more nodes adjacent to it or not, the excessive whitespace has been removed

### QueryProfiler `ToJSON`

This method has been changed to make use of the recently bundled-into-core `yyjson` library to programmatically build the JSON before it gets rendered, cleaning up the manual string construction we had before.

### JSONTreeRenderer

Add `extra_info` to the JSONTreeRenderer output (`EXPLAIN (FORMAT JSON) ...`)

### Future work

While we do get rid of the code surrounding `INFOSEPARATOR` parsing, we still need `SplitStringBuffer` because a value could contain multiple items, delimited by newlines.
Using a `Value` instead of `string` would make this easier to work with as this could represent structured data such as LISTs.