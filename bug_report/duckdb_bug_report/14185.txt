ID: 14185
Title: Fix extension size increase
Description:
In v1.1.0, the addition of the C Extension API has caused the extension binaries to increase quite significantly:

name | v1.0.0 uncompressed | v1.1.0 uncompressed
-- | -- | --
json | 29M | 77M
spatial | 55M | 110M
sqlite | 27M | 77M
prql | 18M | 40M

The reason is that due to the way we build extensions, we statically link duckdb in its entirety into the extension binary, then rely on the linker being able to prune the unused parts. What this means is that its quite easy unknowingly link in significant parts of DuckDB causing the extension binary to significantly grow.

This is precisely what happened when someone (possibly me) wrote some code that produces a struct containing all C API function pointers. Since the C API touches a lot of things throughout DuckDB this prevented the linker from being able to prune much.

The solution is to generate the struct of function pointers centrally in the DatabaseInstance, then hand out pointers to those.

@Mytherin I think we have 2 options: either put this behind a lock and lazily initialize, or initialize this in `DatabaseInstance::Initialize` then pass const pointers, I went with the latter.

Also I added a regression test for this that tests the size of `[json,parquet,tpch,tpcds]`. (theshold for check failure is currently at 20%).
