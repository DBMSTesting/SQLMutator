ID: 13084
Title: Add support for SQL-level variables
Description:
This PR adds support for SQL level variables that can be set using the `SET VARIABLE` statement, e.g.:

```sql
SET VARIABLE my_variable = 'value';
```

Variables can have any type - including nested types. They can be used in subsequent queries using the `getvariable` function, e.g.:

```sql
D SELECT getvariable('my_variable') AS result;
┌─────────┐
│ result  │
│ varchar │
├─────────┤
│ value   │
└─────────┘
```

We can list all of the variables using the `SHOW VARIABLES` command, or the `duckdb_variables()` function, e.g.:

```sql
SHOW VARIABLES;
┌─────────────┬─────────┬─────────┐
│    name     │  value  │  type   │
│   varchar   │ varchar │ varchar │
├─────────────┼─────────┼─────────┤
│ my_variable │ value   │ VARCHAR │
└─────────────┴─────────┴─────────┘
```

We can remove specific variables again using the `RESET VARIABLE` statement.

```sql
RESET VARIABLE my_variable;
```

Variables are expanded to constants during bind time. This is useful as this allows them to be used in places where only constants can be used. For example, we can use variables to read a list of CSV files that is stored in a table, e.g.:

```sql
-- write some CSV files
COPY (SELECT 42 AS a) TO 'test.csv';
COPY (SELECT 84 AS a) TO 'test2.csv';

-- add a list of CSV files to a table
CREATE TABLE csv_files(file VARCHAR);
INSERT INTO csv_files VALUES ('test.csv'), ('test2.csv');

-- initialize a variable with the list of csv files
SET VARIABLE list_of_files = (SELECT LIST(file) FROM csv_files);

-- read the CSV files
D SELECT * FROM read_csv(getvariable('list_of_files'), filename := True);
┌───────┬───────────┐
│   a   │ filename  │
│ int64 │  varchar  │
├───────┼───────────┤
│    42 │ test.csv  │
│    84 │ test2.csv │
└───────┴───────────┘
```

