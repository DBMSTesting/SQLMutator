ID: 13406
Title: Add `map_contains`, `map_contains_entry` and `map_contains_value` functions, `list_position` now returns null.
Description:
This PR adds 3 new map functions,
- `map_contains(m, key)` check if a map contains a given key
- `map_contains_entry(m, entry)` check if a map contains a given "entry" (key-value pair struct)
- `map_contains_value(m, v)` check if a map contains a given value

The last two of these are implemented as macros, which is now actually pretty performant as the underlying list_contains function has been optimized to use sort key-serialization for nested types. We also reuse that code in `map_contains` making the implementation pretty small.

`map_contains` is also an alias for the now-overloaded `contains` function, so that it is now possible to check key-containment using the new `IN` operator, e.g. `SELECT 'my_key' IN map(['my_key'], ['my_value'])` now works.

We also handle the special-case when a constant `map([],[])` is given as input and return constant false.

Additionally, this PR changes the semantics of `list_position`. Instead of returning 0 when the element is not found, it now returns null. This is also how the equivalent function in PostgreSQL works.