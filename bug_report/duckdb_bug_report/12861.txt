ID: 12861
Title: Autodetected type of nested JSON field in `read_json_auto` depends on amount of null values in input
Description:
### What happens?

When using `read_json_auto` to determine the type of a nested object field, whether the field is parsed as a `STRUCT` or `JSON` data type appears to depend on the number of items in the input that have this field as null. This results in an inconsistent autodetected schema when calling the same script multiple times with dynamic input where this may vary.

### To Reproduce

File `fewnulls.json`:

```
{ "test":  { "one":  1, "two": "2" }}
{ "test":  null}
```

File `manynulls.json`:

```
{ "test":  { "one":  1, "two": "2" }}
{ "test":  null}
{ "test":  null}
{ "test":  null}
{ "test":  null}
{ "test":  null}
{ "test":  null}
{ "test":  null}
{ "test":  null}
{ "test":  null}
{ "test":  null}
```

SQL script in same directory:
```
CREATE TABLE fewnulls AS
SELECT *
FROM read_json_auto('fewnulls.json');

CREATE TABLE manynulls AS
SELECT *
FROM read_json_auto('manynulls.json');

DESCRIBE fewnulls;
DESCRIBE manynulls;
```

`DESCRIBE` shows that `fewnulls` has column type `STRUCT(one BIGINT, two VARCHAR)`, while `manynulls` has column type `JSON`. I would expect them to have the same type.

### OS:

Mac Sonoma 14.1 (23B74), Darwin 23.1.0 ARM64 (but has also been observed on an Ubuntu 22.04 CI runner)

### DuckDB Version:

1.0.0

### DuckDB Client:

CLI application

### Full Name:

Astrid Jahn

### Affiliation:

Mobimeo GmbH

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have not tested with any build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have