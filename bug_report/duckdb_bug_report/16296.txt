ID: 16296
Title: Add connection and transaction identifiers
Description:
### What?
This PR adds logging-related improvements:
- adds new (database-globally unique) ids for `Connection` and `MetaTransactions`.
- adds new system scalar functions: `current_connection_id`, `current_transaction_id`, `current_query_id`
- adds `pragma enable_logging` and `pragma disable_logging`

a LogContext now holds 4 identifiers to help understand where a log entry came from:

identifier | description | generated by
-- | -- | -- | 
connection_id | identifies the `Connection`/`ClientContext` |  `ConnectionManager::AssignConnectionId`
transaction_id | identifies the `MetaTransaction`, unique across connections |  `DatabaseManager::GetNewTransactionNumber`
query_id | identifies the individual query, unique across connections, also called the query number internally |  `DatabaseManager::GetNewQueryNumber`
thread_id | identifies which thread the log entry came from | `TaskScheduler::GetEstimatedCPUId`

### Why?
With this we can do cool stuff like:

-> Get logs of previous query:
```SQL
PRAGMA enable_logging;

SELECT 1 as value;
SELECT 2 as value;  

-- prints the log messages generated only for `SELECT 2 as value;` 
SELECT * FROM duckdb_logs WHERE query_id=current_query_id()-1; 
```

-> Get logs of previous transaction:
```SQL
PRAGMA enable_logging;

BEGIN TRANSACTION;
SELECT write_log('my_label');
SELECT 1 as value;
SELECT 2 as value;
COMMIT;  

-- prints the log messages generated for the whole previous transaction
SELECT * FROM duckdb_logs WHERE transaction_id=current_transaction_id()-1; 
```

-> Store the transaction id of a transaction you're interested in logging
```SQL
PRAGMA enable_logging;

BEGIN TRANSACTION;
SET VARIABLE my_transaction_id = current_transaction_id();
SELECT 1 as value;
SELECT 2 as value;
COMMIT;

-- Only prints messages from the first transaction 
FROM duckdb_logs 
WHERE transaction_id = getvariable('my_transaction_id')
```

-> Group queries and add labels in the log through transactions
```SQL
PRAGMA enable_logging;

BEGIN TRANSACTION;
SELECT write_log('my_label');
SELECT 1 as value;
SELECT 2 as value;
COMMIT;

BEGIN TRANSACTION;
SELECT write_log('my_label_2');
SELECT 3 as value;
SELECT 4 as value;
COMMIT;

-- Only prints messages from the transaction which contains the 'my_label' log message
FROM duckdb_logs 
WHERE transaction_id IN (
	SELECT transaction_id 
	FROM duckdb_logs
	WHERE message='my_label'
)
```

### Future work
As we think more about how we want to use logging, I think we can consider creating a set of utility macros to run the above. examples and whatever other crazy stuff we can come up it.
