ID: 15654
Title: support 'categories' label in function catalog
Description:
This PR adds a 'categories' label to the function catalog
The 'categories' label can be used to filter function information relevant for a functional domain, for example to generate documentation

Note that this PR only implements the category labels for a limit number of functions (only blob-related functions).

To define categories for a specific function (overload), use the following steps:

**1. add a "categories" attribute in `functions.json`. Note that this can be done with or without defining variants.**

```json
{
    "name": "octet_length",
    "variants": [
        {
            "parameters": [
                {"name": "blob", "type": "BLOB"}
            ],
            "description": "Number of bytes in blob.",
            "example": "octet_length('\\xAA\\xBB'::BLOB)",
            "categories": ["blob"]
        },
        {
            "parameters": [
                {"name": "bitstring", "type": "BIT"}
            ],
            "description": "Returns the number of bytes in the bitstring.",
            "example": "octet_length('1101011'::BITSTRING)",
            "categories": ["bitstring"]
        }
    ],
    "type": "scalar_function_set"
}
```
```json
{
    "name": "unhex",
    "parameters": "value",
    "description": "Converts a value from hexadecimal representation to a blob.",
    "example": "unhex('2A')",
    "type": "scalar_function",
    "categories": ["string", "blob"],
    "aliases": ["from_hex"]
}
```

**2. script `scripts/generate_functions.py` generates the function header files, and adds the "categories" information**
```cpp
struct OctetLengthFun {
	static constexpr const char *Name = "octet_length";
	static constexpr const char *Parameters = "blob::BLOB\1bitstring::BIT";
	static constexpr const char *Description = "Number of bytes in blob.\1Returns the number of bytes in the bitstring.";
	static constexpr const char *Example = "octet_length('\\xAA\\xBB'::BLOB)\1octet_length('1101011'::BITSTRING)";
	static constexpr const char *Categories = "blob\1bitstring";

	static ScalarFunctionSet GetFunctions();
};
```


**3. `duckdb_functions()` shows the added `categories` column**
```
D select function_name, description, return_type, parameters, parameter_types, examples, categories from duckdb_functions() where categories != [] order by all;
┌───────────────┬───────────────────────────────────────────────────────────────────────────┬─────────────┬────────────────┬─────────────────┬──────────────────────────────────────┬──────────────────────┐
│ function_name │                                description                                │ return_type │   parameters   │ parameter_types │               examples               │      categories      │
│    varchar    │                                  varchar                                  │   varchar   │   varchar[]    │    varchar[]    │              varchar[]               │      varchar[]       │
├───────────────┼───────────────────────────────────────────────────────────────────────────┼─────────────┼────────────────┼─────────────────┼──────────────────────────────────────┼──────────────────────┤
│ base64        │ Convert a blob to a base64 encoded string.                                │ VARCHAR     │ [blob]         │ [BLOB]          │ [base64('A'::blob)]                  │ [string, blob]       │
│ decode        │ Convert blob to varchar. Fails if blob is not valid utf-8.                │ VARCHAR     │ [blob]         │ [BLOB]          │ [decode('\xC3\xBC'::BLOB)]           │ [blob]               │
│ encode        │ Convert varchar to blob. Converts utf-8 characters into literal encoding. │ BLOB        │ [string]       │ [VARCHAR]       │ [encode('my_string_with_ü')]         │ [blob]               │
│ from_base64   │ Convert a base64 encoded string to a character string (blob).             │ BLOB        │ [string]       │ [VARCHAR]       │ [from_base64('QQ==')]                │ [string, blob]       │
│ from_binary   │ Converts a value from binary representation to a blob.                    │ BLOB        │ [value]        │ [VARCHAR]       │ [unbin('0110')]                      │ [string, blob]       │
│ from_hex      │ Converts a value from hexadecimal representation to a blob.               │ BLOB        │ [value]        │ [VARCHAR]       │ [unhex('2A')]                        │ [string, blob]       │
│ hex           │ Converts blob to VARCHAR using hexadecimal encoding.                      │ VARCHAR     │ [blob]         │ [BLOB]          │ [hex('\xAA\xBB'::BLOB)]              │ [blob]               │
│ hex           │ Converts the string to hexadecimal representation.                        │ VARCHAR     │ [string]       │ [VARCHAR]       │ [hex('Hello')]                       │ [string]             │
│ hex           │ Converts the value to hexadecimal representation.                         │ VARCHAR     │ [value]        │ [BIGINT]        │ [hex(42)]                            │ [numeric]            │
│ hex           │ Converts the value to hexadecimal representation.                         │ VARCHAR     │ [value]        │ [HUGEINT]       │ [hex(42)]                            │ [numeric]            │
│ hex           │ Converts the value to hexadecimal representation.                         │ VARCHAR     │ [value]        │ [UBIGINT]       │ [hex(42)]                            │ [numeric]            │
│ hex           │ Converts the value to hexadecimal representation.                         │ VARCHAR     │ [value]        │ [UHUGEINT]      │ [hex(42)]                            │ [numeric]            │
│ hex           │ Converts the value to hexadecimal representation.                         │ VARCHAR     │ [value]        │ [VARINT]        │ [hex(42)]                            │ [numeric]            │
│ octet_length  │ Number of bytes in blob.                                                  │ BIGINT      │ [blob]         │ [BLOB]          │ [octet_length('\xAA\xBB'::BLOB)]     │ [blob]               │
│ octet_length  │ Returns the number of bytes in the bitstring.                             │ BIGINT      │ [bitstring]    │ [BIT]           │ [octet_length('1101011'::BITSTRING)] │ [bitstring]          │
│ to_base64     │ Convert a blob to a base64 encoded string.                                │ VARCHAR     │ [blob]         │ [BLOB]          │ [base64('A'::blob)]                  │ [string, blob]       │
│ to_hex        │ Converts blob to VARCHAR using hexadecimal encoding.                      │ VARCHAR     │ [blob]         │ [BLOB]          │ [hex('\xAA\xBB'::BLOB)]              │ [blob]               │
│ to_hex        │ Converts the string to hexadecimal representation.                        │ VARCHAR     │ [string]       │ [VARCHAR]       │ [hex('Hello')]                       │ [string]             │
│ to_hex        │ Converts the value to hexadecimal representation.                         │ VARCHAR     │ [value]        │ [BIGINT]        │ [hex(42)]                            │ [numeric]            │
│ to_hex        │ Converts the value to hexadecimal representation.                         │ VARCHAR     │ [value]        │ [HUGEINT]       │ [hex(42)]                            │ [numeric]            │
│ to_hex        │ Converts the value to hexadecimal representation.                         │ VARCHAR     │ [value]        │ [UBIGINT]       │ [hex(42)]                            │ [numeric]            │
│ to_hex        │ Converts the value to hexadecimal representation.                         │ VARCHAR     │ [value]        │ [UHUGEINT]      │ [hex(42)]                            │ [numeric]            │
│ to_hex        │ Converts the value to hexadecimal representation.                         │ VARCHAR     │ [value]        │ [VARINT]        │ [hex(42)]                            │ [numeric]            │
│ unbin         │ Converts a value from binary representation to a blob.                    │ BLOB        │ [value]        │ [VARCHAR]       │ [unbin('0110')]                      │ [string, blob]       │
│ unhex         │ Converts a value from hexadecimal representation to a blob.               │ BLOB        │ [value]        │ [VARCHAR]       │ [unhex('2A')]                        │ [string, blob]       │
│ ||            │ Concatenates two lists.                                                   │ ANY         │ [list1, list2] │ [ANY, ANY]      │ [list_concat([2, 3], [4, 5, 6])]     │ [string, list, blob] │
├───────────────┴───────────────────────────────────────────────────────────────────────────┴─────────────┴────────────────┴─────────────────┴──────────────────────────────────────┴──────────────────────┤
│ 26 rows                                                                                                                                                                                        7 columns │
└──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
```