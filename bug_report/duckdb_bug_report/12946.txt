ID: 12946
Title: Appending Int32 via Julia client truncates module Int16
Description:
### What happens?

When appending an `Int32` (4 byte integer) julia value to a DuckDB, it gets truncated module `Int16` (2 byte integer). For example, appending an `Int32(2^16)` fills the entry with the value `0` instead of `65536`. Might be due to [this line](https://github.com/duckdb/duckdb/blob/0ec9ff78c80e0d11268b22fbfc7e35fd47bc558b/tools/juliapkg/src/api.jl#L2613) in the DuckDB source code.

### To Reproduce

Script:

```julia
using DuckDB
db = DuckDB.DB("test.duckdb")

DBInterface.execute(db, "CREATE TABLE mytable(id INTEGER)")

appender = DuckDB.Appender(db, "mytable")

DuckDB.append(appender, Int32(2^16))
DuckDB.end_row(appender)
DuckDB.flush(appender)
DuckDB.close(appender)

res = DBInterface.execute(db, "SELECT id FROM mytable")
```

Output:

```julia
(id = Union{Missing, Int32}[0],)
```

whereas I was expecting

```julia
(id = Union{Missing, Int32}[65536],)
```

This is my minimal julia (v1.10.4) enviroment to reproduce

```
(jl_CoroC4) pkg> status
Status `/tmp/jl_CoroC4/Project.toml`
  [d2f5444f] DuckDB v1.0.0

(jl_CoroC4) pkg> status --manifest
Status `/tmp/jl_CoroC4/Manifest.toml`
  [a10d1c49] DBInterface v2.6.1
  [9a962f9c] DataAPI v1.16.0
  [e2d170a0] DataValueInterfaces v1.0.0
  [d2f5444f] DuckDB v1.0.0
  [fb4d412d] FixedPointDecimals v0.5.2
  [842dd82b] InlineStrings v1.4.1
  [82899510] IteratorInterfaceExtensions v1.0.0
  [692b3bcd] JLLWrappers v1.5.0
  [bac558e1] OrderedCollections v1.6.3
  [69de0a69] Parsers v2.8.1
  [aea7be01] PrecompileTools v1.2.1
  [21216c6a] Preferences v1.4.3
  [3783bdb8] TableTraits v1.0.1
  [bd369af6] Tables v1.11.1
  [ea10d353] WeakRefStrings v1.4.2
  [2cbbab25] DuckDB_jll v1.0.0+0
  [56f22d72] Artifacts
  [ade2ca70] Dates
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [de0858da] Printf
  [9a3f8284] Random
  [ea8e919c] SHA v0.7.0
  [fa267f1f] TOML v1.0.3
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
  [e66e0078] CompilerSupportLibraries_jll v1.1.1+0
  [4536629a] OpenBLAS_jll v0.3.23+4
  [8e850b90] libblastrampoline_jll v5.8.0+1
```

### OS:

Ubuntu 24.04 amd64

### DuckDB Version:

1.0.0 (everything installed by adding DuckDB.jl v1.0.0)

### DuckDB Client:

Julia (julia v1.10.4)

### Full Name:

Pietro Vertechi

### Affiliation:

Lambda Solutions

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with the stable release.

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have