ID: 15876
Title: Matching FunctionDescriptions with Named Parameters
Description:
### What happens?

I am encountering an issue with matching FunctionDescriptions for a function set that includes named parameters.

The current matching logic in `ExtractFunctionData()` (in `duckdb_functions.cpp`) identifies a `FunctionDescription` by matching the `.arguments` returned via `OP::GetParameterLogicalTypes` of the function. However, the `.arguments` field does not include named parameters.

If I modify the `FunctionDescription` to only include the positional arguments, the named parameters are included as unnamed in the output. This causes the named parameter to appear in the parameters list without its name.


```sql
select * from duckdb_functions() where database_name = 'example';
```
```
   database_name = example
    database_oid = 1244
     schema_name = test1
   function_name = hello
   function_type = table
     description = NULL
         comment = NULL
            tags = {}
     return_type = NULL
      parameters = [name, address, col2]
 parameter_types = [VARCHAR, STRUCT(city VARCHAR, country VARCHAR), INTEGER]
         varargs = NULL
macro_definition = NULL
has_side_effects = NULL
        internal = true
    function_oid = 1249
        examples = []
       stability = NULL
```


In this example:

`col2` is a named argument called `age`, but it is included as an unnamed argument in the output.

Should named parameters be included in the `parameter_names` and `parameter_types` vectors of `FunctionDescription`?
Is there a standard way to handle named parameters so that they appear correctly in the output?

### To Reproduce

Create a function (likely a table returning function) that takes named parameters.    Maybe `iceberg_scan()` will work, check to see if its FunctionDescription is returned.

### OS:

MacOS

### DuckDB Version:

1.1.4-dev

### DuckDB Client:

CLI

### Hardware:

_No response_

### Full Name:

Rusty Conover

### Affiliation:

none

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a source build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [x] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [x] Yes, I have