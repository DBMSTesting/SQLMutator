ID: 13318
Title: Bitstring equality fails when in select position
Description:
### What happens?

Im was trying to use BITSTRING in a where clause and noticed I didn't receive the expected results. After asking around on the Discord channel (https://discord.com/channels/909674491309850675/1032659480539824208/1270137420360450179) This seemed to be a bug, hence the bug report here.

The conclusion in the Discord thread: 
the bitstring created by the & operator seems to not have the right internal structure somehow causing the equality operator to return false.

### To Reproduce

```sql
CREATE TABLE IF NOT EXISTS mask_test (
    flags        BITSTRING,
);

INSERT INTO mask_test (flags) VALUES ('00000001'::BIT);
INSERT INTO mask_test (flags) VALUES ('00000011'::BIT);

-- This select statement shows that the flags & <MASK> equals '0000001' for both entries
SELECT (flags & '00000001'::BIT) from main.mask_test;

-- The select statement below returns 0 results, where i would expect it to return 2 rows.
SELECT * from main.mask_test WHERE (flags & '00000001'::BIT) = '00000001'::BIT;


-- This works after casting
SELECT (flags & '00000001')::VARCHAR::BIT = '00000001'::BIT from main.mask_test;

-- This doesn't work
SELECT (flags & '00000001')::BIT = '00000001'::BIT from main.mask_test;

```

### OS:

macOS

### DuckDB Version:

1.0

### DuckDB Client:

Rust

### Full Name:

Robert den Harink

### Affiliation:

Full Join

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have not tested with any build

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have