ID: 16352
Title: Complete materialisation of results on insert causes memory usage equal to the full data size
Description:
### What happens?

I am current running against a major limitation of DuckDB which can be completely simplified as:

`CREATE TABLE something2 AS SELECT * FROM something1;`

The above causes an _enormous memory_ usage because the data is not written towards the target as the data comes in. What I am doing myself is unnesting a user defined function, and want to store that result. But even then I am only doing so for 1.000.000 rows, I am ending up in gigabytes of memory used.

I have removed the unnest from the equation, this is already reported in #16319


### To Reproduce

```python
import duckdb

with duckdb.connect("data16166i2.duckdb") as con:
    con.execute("""
        create table data16166 (dt datetime, id double, name varchar);
        insert into data16166
        select  
            d,
            epoch(d),
            d::varchar
        from range('2020-01-01'::datetime, '2020-01-10'::datetime, interval 1 millisecond) t(d) 
    """)

    con.execute("drop table data16166;")
    # Even this operation already shows that it is consuming all available memory when the period is extended a few days.
    con.execute("""
        create table data16166 (dt datetime, id double, name varchar);
        insert into data16166
        select  
            d,
            epoch(d),
            d::varchar
        from range('2020-01-01'::datetime, '2020-01-04'::datetime, interval 1 millisecond) t(d) 
    """)
    con.execute("create table data2 as select * from data16166;")
```

### OS:

Linux

### DuckDB Version:

1.2.1

### DuckDB Client:

Python

### Hardware:

_No response_

### Full Name:

Stefan de Konink

### Affiliation:

Stichting OpenGeo

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

_Latest pre version._

### Did you include all relevant data sets for reproducing the issue?

No - Other reason (please specify in the issue body)

### Did you include all code required to reproduce the issue?

- [x] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [x] Yes, I have