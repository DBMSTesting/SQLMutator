ID: 15639
Title: [C-API] List Vector APIs have strange behaviour/docs that might lead to segfaults and use-after-free errors
Description:
### What happens?

I noticed that segmentation faults happen if working with list vectors above a certain size (likely > 2048).

I traced it, and found that _strictly_ it is a bug _in my code_ however the documentation of the API is not clear _enough_ in this regard (in my opinion).

__So, it is either expected behavior with missing details in the documentation OR a bug.
In both cases, it creates potential segmentation faults and user-after free errors which is not ideal.__

I noticed this while working on the Julia client, however I checked the `vector_buffer.cpp` source file and it seems like it should affect __all__ clients using the C API.

## More details

Currently the C API offers the following functions (among others) to work with list vectors.

```C
// resizing the buffer, without changing size
duckdb_state duckdb_list_vector_reserve(duckdb_vector vector, idx_t required_capacity);

// Changing the size variable, WITHOUT checking the buffer (UNEXPECTED)
duckdb_state duckdb_list_vector_set_size(duckdb_vector vector, idx_t size);

// Just returning the size variable, WITHOUT checking the buffer
idx_t duckdb_list_vector_get_size(duckdb_vector vector);

// and to get the pointer to the underlying buffer:
void *duckdb_vector_get_data(duckdb_vector vector);
```

The first function changes the size of the underlying buffer without changing the size of the vector. The second function might suggest that the underlying buffer is resized as well (or an error is returned if the buffer is too small), __however__ this is not the case. The size is stored as a class property without checking or changing the buffer.


The docstring for this function only says:
```text
Sets the total size of the underlying child-vector of a list vector.
```

The problem is that the `get_size` and `set_size` simply return and change an integer value without actually checking the size of the underlying data buffer. 
- It would be great to mention this in the documentation that `duckdb_list_vector_set_size` does not resize the buffer and that the buffer that is returned `duckdb_vector_get_data` is not correctly sized unless `duckdb_list_vector_reserve` was called.
- Even better in my opinion would be, if the `duckdb_list_vector_set_size` function checks the capacity of the buffer and returns an error if the size is larger than the buffer.



Implementation in `vector_buffer.cpp` (and others) (commit hash (c28ce39))

```Cpp 

duckdb_state duckdb_list_vector_set_size(duckdb_vector vector, idx_t size) {
	if (!vector) {
		return duckdb_state::DuckDBError;
	}
	auto v = reinterpret_cast<duckdb::Vector *>(vector);
	duckdb::ListVector::SetListSize(*v, size);
	return duckdb_state::DuckDBSuccess;
}

void ListVector::SetListSize(Vector &vec, idx_t size) {
	if (vec.GetVectorType() == VectorType::DICTIONARY_VECTOR) {
		auto &child = DictionaryVector::Child(vec);
		ListVector::SetListSize(child, size);
		return;
	}
        //!!!! No checks? !!!!
	vec.auxiliary->Cast<VectorListBuffer>().SetSize(size);
}

void VectorListBuffer::SetSize(idx_t new_size) {
        //!!!! Strange? !!!!
	this->size = new_size;
}
```



### To Reproduce

I have a short code snippet that uses the Julia Client to reproduce the error. However I think this affects _all_ clients that use the C-API.

Below is a example in Julia that triggers this problem.

After checking the source code, I dont think that using the latest dev version would change this problem.


## Environment

I'm using Julia v1.11.2 and the following dependencies:

```text
  [a10d1c49] DBInterface v2.6.1
  [fb4d412d] FixedPointDecimals v0.5.3
  [bd369af6] Tables v1.12.0
  [ea10d353] WeakRefStrings v1.4.2
  [2cbbab25] DuckDB_jll v1.1.2+0
  [ade2ca70] Dates v1.11.0
  [cf7118a7] UUIDs v1.11.0
```



## Code Example


```julia
using DuckDB

# !!!!! It only occurs if enough elements are written, I assume more than 2048 !!!!
#N_list_entries = 100  # does not trigger the seg fault
N_list_entries = 2048  # triggers it (most of the time)
N_entries_per_vec = 20

# Dummy data
X = [rand(1:20, rand(1:N_entries_per_vec)) for _ in 1:N_list_entries]
T = typeof(X[1])

# Create a Data chunk with 1 coloumn
logical_type = DuckDB.create_logical_type(T)
output_type = DuckDB.duckdb_type_to_julia_type(logical_type)
chunk_ptr = DuckDB.duckdb_create_data_chunk([logical_type.handle], 1)
chunk = DuckDB.DataChunk(chunk_ptr, true)
DuckDB.set_size(chunk, N_list_entries) # N_list_entries lists

Base.GC.@preserve chunk begin
    vec_i = DuckDB.get_vector(chunk, 1)
    @test DuckDB.get_type_id(DuckDB.get_logical_type(vec_i)) == DuckDB.DUCKDB_TYPE_LIST

    child_vec = DuckDB.list_child(vec_i)
    child_vec_size = DuckDB.list_size(vec_i)
    child_vec_type = DuckDB.LogicalType(DuckDB.duckdb_vector_get_column_type(child_vec.handle))
    child_vec_type_id = DuckDB.get_type_id(child_vec_type)
    internal_type = DuckDB.duckdb_type_to_internal_type(child_vec_type_id)
    list_entries = DuckDB.get_array(vec_i, DuckDB.duckdb_list_entry_t, N_list_entries)

    local offset = 0
    for i in 1:N_list_entries
        println("i: ", i)
        xi = X[i]
        N = length(xi)
        N_total = N + offset
        
        # !!! UNCOMMENT THE LINE BELOW AND IT NO LONGER SEGFAULTS !!!
        # DuckDB.duckdb_list_vector_reserve(vec_i.handle, N_total)
        DuckDB.duckdb_list_vector_set_size(vec_i.handle, N_total)
        
        
        child_data = DuckDB.get_array(child_vec, internal_type, N_total)

        entry = DuckDB.duckdb_list_entry_t(offset, N)
        list_entries[i] = entry
        k = 1
        for j in offset+1:N_total
            child_data[j] = xi[k]
            k+=1
        end
        offset += N
    end
end

```

in my case, it prints:

```text
julia(66167,0x208e18240) malloc: Incorrect checksum for freed object 0x102848e00: probably modified after being freed.
Corrupt value: 0x14
julia(66167,0x208e18240) malloc: *** set a breakpoint in malloc_error_break to debug
```

### OS:

macOS

### DuckDB Version:

1.1.2

### DuckDB Client:

Julia

### Hardware:

_No response_

### Full Name:

Benjamin Kulnik

### Affiliation:

Student

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have