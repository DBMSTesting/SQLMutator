ID: 14754
Title: Static library for Windows is not working: unresolved symbols
Description:
### What happens?

When I follow the below instructions to build duckdb, then use the static library `duckdb_static.lib`, I got lots of unresolved symbols error:
https://duckdb.org/docs/dev/building/build_instructions.html


### To Reproduce

```
git clone https://github.com/duckdb/duckdb
git checkout -b v1.1.3 tags/v1.1.3

cd duckdb
python scripts/windows_ci.py
cmake . -B build64 \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_GENERATOR_PLATFORM=x64 \
    -DENABLE_EXTENSION_AUTOLOADING=1 \
    -DENABLE_EXTENSION_AUTOINSTALL=1 \
    -DDUCKDB_EXTENSION_CONFIGS=".github/config/bundled_extensions.cmake" \
    -DDISABLE_UNITY=1 \
    -DOVERRIDE_GIT_DESCRIBE="v1.1.3" -DCMAKE_INSTALL_PREFIX=install64

cmake --build build64 --config Release --parallel
cmake --install build64 # Everything will be installed to `install64` folder
```

Under `install64` folder, I got `include`, `lib` and `cmake` and `bin` folders. I create a simple C++ console application with Visual Studio 2022, and link against `duckdb_static.lib`:
```
#include <iostream>
#include <duckdb.h>

int main()
{
    duckdb_database db;
    duckdb_connection con;

    if (duckdb_open(NULL, &db) == DuckDBError) 
    {
        std::cout << "Failed to open memory duck db" << std::endl;
        return -1;
    }

    if (duckdb_connect(db, &con) == DuckDBError) 
    {
        std::cout << "Failed to connect duck db" << std::endl;
        return -1;
    }

    // create a table
    duckdb_state state = duckdb_query(con, "CREATE TABLE integers (i INTEGER, j INTEGER);", NULL);
    if (state == DuckDBError) 
    {
        std::cout << "Failed to create table" << std::endl;
        return -1;
    }

    // insert three rows into the table
    state = duckdb_query(con, "INSERT INTO integers VALUES (3, 4), (5, 6), (7, NULL);", NULL);
    if (state == DuckDBError) 
    {
        std::cout << "Failed to insert data to table" << std::endl;
        return -1;
    }

    duckdb_result result;
    // query rows again
    state = duckdb_query(con, "SELECT * FROM integers", &result);
    if (state == DuckDBError) 
    {
        std::cout << "Failed to query table" << std::endl;
        return -1;
    }
    
    // destroy the result after we are done with it
    duckdb_destroy_result(&result);

    // cleanup
    duckdb_disconnect(&con);
    duckdb_close(&db);

    return 0;
}
```

then I got `unresolved external symbol` errors like: 
```
1>DuckDBTest.obj : error LNK2019: unresolved external symbol __imp_duckdb_open referenced in function main
1>DuckDBTest.obj : error LNK2019: unresolved external symbol __imp_duckdb_close referenced in function main
1>DuckDBTest.obj : error LNK2019: unresolved external symbol __imp_duckdb_connect referenced in function main
1>DuckDBTest.obj : error LNK2019: unresolved external symbol __imp_duckdb_disconnect referenced in function main
1>DuckDBTest.obj : error LNK2019: unresolved external symbol __imp_duckdb_query referenced in function main
1>DuckDBTest.obj : error LNK2019: unresolved external symbol __imp_duckdb_destroy_result referenced in function main
```
If I link against `duckdb.lib` and copy duckdb.dll from `bin` to output folder, then compiling is fine and there is no error when running the application.

When I use `dumpbin /symbols duckdb_static.lib | findstr duckdb_open` to check the symbol, I found that the symbol is marked as `External`.


### OS:

Windows 11

### DuckDB Version:

1.1.3

### DuckDB Client:

1.1.3

### Hardware:

_No response_

### Full Name:

Ben

### Affiliation:

None

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a source build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have