ID: 16156
Title: Internal exceptions also invalidate the DB
Description:
This PR ensures consistency in how internal exceptions behave by making them invalidate the database and marking them as invalidating exceptions. Also, it adds stack traces for FATAL exceptions.

---
One thing I also noticed is, that there are [two](https://github.com/motherduckdb/public-duckdb/blob/ffa89b01df7307c1a7f4932e4ccda51371baec16/src/main/stream_query_result.cpp#L95) [instances](https://github.com/motherduckdb/public-duckdb/blob/ffa89b01df7307c1a7f4932e4ccda51371baec16/src/main/client_context.cpp#L901) of the pattern below in DuckDB. Is this something we can remove, or is it essential in these two places. It was, at least to me, not obvious, why we need those. Even if a verification step throws a `ExceptionType::FATAL`, it would not do any harm to invalidate the DB in this case, right?

```cpp
if (!config.query_verification_enabled) {
		auto &db_instance = DatabaseInstance::GetDatabase(*this);
		ValidChecker::Invalidate(db_instance, error.RawMessage());
}
```
