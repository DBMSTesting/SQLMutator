ID: 16406
Title: IO Error: Failure while replaying WAL file
Description:
### What happens?

I write data into duckdb by C API
the data can be read by C API, but it can't be open by duckdb program

![Image](https://github.com/user-attachments/assets/d7a8d226-3a0f-491b-883a-d63ca8f50349)

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "duckdb.h"
#include <unistd.h> 

void selectFromDoc(duckdb_connection con);
void insertIntoDoc(duckdb_prepared_statement stmt);
void createTable(const char *path);


void insertIntoDoc(duckdb_prepared_statement stmt) {
    char title[256];
    char content[10240];
    duckdb_state state;

    fprintf(stdout, "title: ");
    fgets(title, sizeof(title), stdin);
    size_t len = strlen(title);

    if (len > 0 && title[len - 1] == '\n') {
        title[len - 1] = '\0';
    }
    fprintf(stdout, "content: ");
    fgets(content, sizeof(content), stdin);
    len = strlen(content);

    if (len > 0 && content[len - 1] == '\n') {
        content[len - 1] = '\0';
    }

    duckdb_bind_varchar(stmt, 1, title); // the parameter index starts counting at 1!
    duckdb_bind_varchar(stmt, 2, content);

    state = duckdb_execute_prepared(stmt, NULL);
    if (state == DuckDBSuccess) {
        printf("append success\n");
    } else {
        printf("append failed\n");
    }
}

void selectFromDoc(duckdb_connection con) {
    duckdb_state state;
    duckdb_result result;

    state = duckdb_query(con, "SELECT title, content FROM documents", &result);
    if (state == DuckDBError) {
        // handle error
        printf("select error\n");
        const char *msg = duckdb_result_error(&result);
        printf("%s\n", msg);
        return ;
    }

    duckdb_data_chunk res = duckdb_fetch_chunk(result);

    // get the number of rows from the data chunk
    idx_t row_count = duckdb_data_chunk_get_size(res);
    printf("got %lu rows\n", row_count);

    duckdb_vector res_col_1 = duckdb_data_chunk_get_vector(res, 0);
    duckdb_string_t *vector_data_1 = (duckdb_string_t *) duckdb_vector_get_data(res_col_1);
    uint64_t *vector_validity_1 = duckdb_vector_get_validity(res_col_1);
    duckdb_vector res_col_2 = duckdb_data_chunk_get_vector(res, 1);
    duckdb_string_t *vector_data_2 = (duckdb_string_t *) duckdb_vector_get_data(res_col_2);
    uint64_t *vector_validity_2 = duckdb_vector_get_validity(res_col_2);
    for (idx_t row = 0; row < row_count; row++) {
		if (duckdb_validity_row_is_valid(vector_validity_1, row)) {
			duckdb_string_t str = vector_data_1[row];
			if (duckdb_string_is_inlined(str)) {
				// use inlined string
				printf("%.*s", str.value.inlined.length, str.value.inlined.inlined);
			} else {
				// follow string pointer
				printf("%.*s", str.value.pointer.length, str.value.pointer.ptr);
			}
		} else {
			printf("NULL");
		}
        printf(", ");
        if (duckdb_validity_row_is_valid(vector_validity_2, row)) {
			duckdb_string_t str2 = vector_data_2[row];
			if (duckdb_string_is_inlined(str2)) {
				// use inlined string
				printf("%.*s", str2.value.inlined.length, str2.value.inlined.inlined);
			} else {
				// follow string pointer
				printf("%.*s", str2.value.pointer.length, str2.value.pointer.ptr);
			}
		} else {
			printf("NULL");
		}
        printf("\n");
	}

    // destroy the result after we are done with it
    duckdb_destroy_result(&result);
}

void createTable(const char *path) {
    duckdb_database db;
    char *errMsg[1000];
    duckdb_state state;
    duckdb_connection con;

    if (duckdb_open_ext(path, &db, NULL, errMsg) == DuckDBSuccess) {
        printf("创建数据库成功\n");

        if (duckdb_connect(db, &con) == DuckDBError) {
            // handle error
            printf("connect error\n");
        }

        state = duckdb_query(con, "CREATE SEQUENCE doc_id_seq START 1;CREATE TABLE documents (docId INT PRIMARY KEY DEFAULT nextval('doc_id_seq'), title VARCHAR, content VARCHAR);", NULL);
        if (state == DuckDBSuccess) {
            printf("创建数据表成功\n");
        } else {
            printf("创建数据表失败\n");
        }

        duckdb_disconnect(&con);
        duckdb_close(&db);
    } else {
        printf("create table error: %s\n", errMsg[0]);
    }
}

int main() {
    int code;
    char *errMsg[100];

    duckdb_database db;
    duckdb_connection con;

    const char path[100] = "./storage/documents.duckdb";
    
    // char msg[1000];

    if (access(path, F_OK) != 0) {
        createTable(path);
    }

    if (duckdb_open(path, &db) == DuckDBError) {
        // handle error
        printf("open error\n");
        return 1;
    }
    if (duckdb_connect(db, &con) == DuckDBError) {
        // handle error
        printf("connect error\n");
        return 1;
    }

    duckdb_prepared_statement stmt;
    if (duckdb_prepare(con, "insert into documents (title, content) values($1, $2)", &stmt) == DuckDBError) {
        // handle error
        printf("prepare error\n");
        return 1;
    }

    while (true) {
        fprintf(stdout,
            "**********************************\n"
            "  --show              输出表中内容\n"
            "  --append            插入文本\n"
            "  --quit              退出程序\n"
            "**********************************\n"
            "--"
        );
    
        char input[300];
        fgets(input, sizeof(input), stdin);
        // printf("get %s\n", input);
        size_t len = strlen(input);
        if (len > 0 && input[len - 1] == '\n') {
            input[len - 1] = '\0';
        }

        if (strcmp(input, "show") == 0) {
            selectFromDoc(con);
        } else if (strcmp(input, "append") == 0) {
            insertIntoDoc(stmt);
        } else if (strcmp(input, "quit") == 0) {
            printf("Bye\n");
            exit(0);
        } else {
            printf("选项输入错误，请重新输入。\n");
        }
    }

    duckdb_destroy_prepare(&stmt);
    // cleanup
    duckdb_disconnect(&con);
    duckdb_close(&db);

    return 0;
}
``` 
bulid
```c
gcc -o test test.c -L/home/luwei/code/cDuckdb/lib -lduckdb -I/home/luwei/code/cDuckdb/include
``` 
append data

![Image](https://github.com/user-attachments/assets/67382b36-21d1-4bf8-b26d-e9951db5a9a0)

open with duckdb

![Image](https://github.com/user-attachments/assets/1d8f4d3a-6a6f-4fac-8477-f0d2ce1be631)

 

### To Reproduce

lib from here
https://github.com/duckdb/duckdb/releases/download/v1.2.0/libduckdb-linux-amd64.zip

### OS:

ubuntu 20.04

### DuckDB Version:

v1.3.0

### DuckDB Client:

command line

### Hardware:

_No response_

### Full Name:

Lu Wei

### Affiliation:

DolphinDB

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a source build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [x] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [x] Yes, I have