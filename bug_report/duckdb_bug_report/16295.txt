ID: 16295
Title: Problems when using the STRING_AGG function
Description:
### What happens?

Inconsistency occurs when using the var_pop function. Query 1 and Query 2 should return the same result because the condition in having simulates three-valued logic. The result after the union of the three statements should be the same as that of Query 1, but the calculation results are inconsistent.
Specifically, the result of Query 1 contains one data items -- [0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5], while the result of Query 2 is -- [0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5]

```
SELECT STRING_AGG(t1.rowid) FROM t1, t0 GROUP BY ((((0.7559241830112852)AND(((TIMESTAMP '1969-12-07 15:04:23')!=(DATE '1969-12-18'))))) IS NULL)
--[0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5]
SELECT STRING_AGG(t1.rowid) FROM t1, t0 GROUP BY ((((0.7559241830112852)AND(((TIMESTAMP '1969-12-07 15:04:23')!=(DATE '1969-12-18'))))) IS NULL) HAVING FIRST(t1.c0) UNION ALL SELECT STRING_AGG(t1.rowid) FROM t1, t0 GROUP BY ((((0.7559241830112852)AND(((TIMESTAMP '1969-12-07 15:04:23')!=(DATE '1969-12-18'))))) IS NULL) HAVING (NOT FIRST(t1.c0)) UNION ALL SELECT STRING_AGG(t1.rowid) FROM t1, t0 GROUP BY ((((0.7559241830112852)AND(((TIMESTAMP '1969-12-07 15:04:23')!=(DATE '1969-12-18'))))) IS NULL) HAVING ((FIRST(t1.c0)) IS NULL);
--[0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5]
```

### To Reproduce

```sql
CREATE TABLE t0(c0 FLOAT4, PRIMARY KEY(c0));
CREATE TABLE t1(c0 TINYINT);
INSERT INTO t0(c0) VALUES (828162875);
ANALYZE;
CREATE UNIQUE INDEX i4 ON t0(c0 );
INSERT INTO t0(c0) VALUES (true), (0.23844998330498623);
DELETE FROM t1;
UPDATE t1 SET c0=true;
INSERT INTO t1(c0) VALUES (DEFAULT);
INSERT INTO t1(c0) VALUES (false);
INSERT INTO t0(c0) VALUES (0.008868014415201575);
INSERT INTO t1(c0) VALUES (-0.0);
VACUUM;
INSERT INTO t1(c0) VALUES (0.1344221522427579);
INSERT INTO t0(c0) VALUES (0.4213777084710949);
INSERT INTO t1(c0) VALUES (true), (DEFAULT);
UPDATE t1 SET c0=false;
UPDATE t1 SET c0=false;
CREATE INDEX i3 ON t0(c0 );
CREATE INDEX i2 ON t0(c0 );
INSERT INTO t0(c0) VALUES ('0.8077319368432945');
UPDATE t1 SET c0=0.0740568656443994;
CREATE UNIQUE INDEX i0 ON t0(c0 );
CREATE UNIQUE INDEX i1 ON t0(c0 );

SELECT STRING_AGG(t1.rowid) FROM t1, t0 GROUP BY ((((0.7559241830112852)AND(((TIMESTAMP '1969-12-07 15:04:23')!=(DATE '1969-12-18'))))) IS NULL);
--[0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5]
SELECT STRING_AGG(t1.rowid) FROM t1, t0 GROUP BY ((((0.7559241830112852)AND(((TIMESTAMP '1969-12-07 15:04:23')!=(DATE '1969-12-18'))))) IS NULL) HAVING FIRST(t1.c0) UNION ALL SELECT STRING_AGG(t1.rowid) FROM t1, t0 GROUP BY ((((0.7559241830112852)AND(((TIMESTAMP '1969-12-07 15:04:23')!=(DATE '1969-12-18'))))) IS NULL) HAVING (NOT FIRST(t1.c0)) UNION ALL SELECT STRING_AGG(t1.rowid) FROM t1, t0 GROUP BY ((((0.7559241830112852)AND(((TIMESTAMP '1969-12-07 15:04:23')!=(DATE '1969-12-18'))))) IS NULL) HAVING ((FIRST(t1.c0)) IS NULL);
--[0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5]
```

### OS:

x86_64

### DuckDB Version:

v1.1.3

### DuckDB Client:

python

### Hardware:

_No response_

### Full Name:

Chenglin Tian

### Affiliation:

Personal

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a source build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [x] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [x] Yes, I have