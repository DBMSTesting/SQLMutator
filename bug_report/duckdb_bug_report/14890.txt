ID: 14890
Title: Does ConcurrentQueue::Enqueue really need a mutex lock?
Description:
### What happens?

Run duckdb in multi-threads senarios, mutex lock/unlock tasks too much overload,  here is the report.

![image](https://github.com/user-attachments/assets/b6fd2a37-9ae4-41c3-bc27-ca7967d2b566)

The most obvious ones are:
1. ConcurrentQueue::Enqueue/Dequeue - this is a lock-free queue, do we really need to add a lock here?
2. Executor::HasError - Can this be optimized with a read/write lock? Because report error is a low probability event.


### To Reproduce

set threads = 16;
duckdb_query(some_query);

### OS:

linux

### DuckDB Version:

1.1.3

### DuckDB Client:

duckapi-c

### Hardware:

x86-64

### Full Name:

fanvanzh

### Affiliation:

fanvanzh

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

No - Other reason (please specify in the issue body)

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have