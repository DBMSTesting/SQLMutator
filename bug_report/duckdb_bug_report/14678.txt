ID: 14678
Title: incorrect (sometimes erratic) results when using table-oriented version of a program that works correctly when direct computations are made
Description:
### What happens?

The following program computes binomial transforms correctly, and
when the "round-trip" computations are done individually, there is no
problem.

However, when these "round-trip" computations are done in one step
(see the SELECT immediately following "MATRIX COMPUTATION"), the
results are wrong, or at least sometimes wrong --- indeed, one clue is
that the MATRIX COMPUTATION results vary from run to run, at least
when using DuckDB v1.1.3-dev158 (c3ca3607c2).

Closer investigation confirms that the numerical results do in fact differ.

Here are the results from a typical run.
All the boolean values should be true.

```
sequenceName = Catalan number sequence:
round-trip = true
self-inverting = true

sequenceName = Prime flip-flop sequence:
round-trip = true
self-inverting = true

MATRIX COMPUTATION
    seqName = Catalan number sequence:
  roundTrip = false
re-inverted = false

    seqName = Prime flip-flop sequence:
  roundTrip = false
re-inverted = false

```


### To Reproduce

```
# nCk assuming n >= r
# The caller should ensure 2r < n
create or replace function binomial(n, r) as
  (with recursive cte as
      (SELECT 1::HUGEINT as c, n as numerator, 1::HUGEINT as m
       UNION ALL
       SELECT (c * numerator / m) as c,
       (numerator - 1) as numerator,
       (m + 1) as m
       FROM cte
       WHERE m <= r
  )
  SELECT last(c)
  FROM cte
);

create or replace function forward(a) as (
  select array_agg((select sum( binomial(n, k) * a[k+1] )
                    from range(0, n+1) as u(k) ))
  from range(0, length(a)) as t(n)
);

create or replace function inverse(b) as (
  select array_agg((select sum( binomial(n, k) * b[k+1]
                                * if ( (n - k) % 2 = 0, 1, -1))
                    from range(0, n+1) as u(k)))
  from range (0, length(b)) as t(n)
);

create or replace function selfInverting(a) as (
  select array_agg((select sum( binomial(n, k) * a[k+1] 
                                * if( k % 2 = 0, 1, -1) )
          from range(0, n+1) as u(k) ))
  from range(0, length(a)) as t(n)
);

create or replace function roundTrip(a) as (
  inverse( (select forward(a)) )
);

create or replace function selfInvertSelfInvert(a) as (
  selfInverting( (select selfInverting(a)) )
);

## Pretty print
create or replace function pp(lst) as array_to_string(lst, ' ');

### The names of the integer sequences
set variable sequenceName = [
  'Catalan number sequence:',
  'Prime flip-flop sequence:'
  ];

set variable sequence = [
  [1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129644790, 477638700, 1767263190],
  [0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0]
  ];

.mode line
set variable i=1;
select getvariable('sequenceName')[getvariable('i')] as sequenceName;
select eq as "round-trip"
from (select getvariable('sequence')[getvariable('i')] as l, l = roundTrip(l) as eq);
select eq as "self-inverting"
from (select getvariable('sequence')[getvariable('i')] as l, l = selfInvertSelfInvert(l) as eq);
.print

set variable i=2;
select getvariable('sequenceName')[getvariable('i')] as sequenceName;
select eq as "round-trip"
from (select getvariable('sequence')[getvariable('i')] as l, l = roundTrip(l) as eq);
select eq as "self-inverting"
from (select getvariable('sequence')[getvariable('i')] as l, l = selfInvertSelfInvert(l) as eq);
.print

.print MATRIX COMPUTATION
## Check the forward/inverse and self-inversion round-trips:
select seqName,
       seq = roundTrip( seq ) as roundTrip,
       seq = selfInvertSelfInvert( seq ) as "re-inverted"
from unnest(getvariable('sequenceName')) as t(seqName)
     positional join unnest(getvariable('sequence')) as u(seq)
;
```

### OS:

MacOS

### DuckDB Version:

v1.1.3-dev158 (c3ca3607c2)

### DuckDB Client:

CLI

### Hardware:

_No response_

### Full Name:

Peter Koppstein

### Affiliation:

Princeton University

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a source build

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have