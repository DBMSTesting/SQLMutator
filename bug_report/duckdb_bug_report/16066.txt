ID: 16066
Title: pb/compressed vector serialization
Description:
Vector::Serialize() and Vector::Deserialize() now understand CONSTANT, SEQUENCE and DICTIONARY vectors, and do not flatten these; rather keep them compressed (writing an optional field vector_type that by absence is FLAT_VECTOR).

In the case of DICTIONARY vectors,  only the *used* part of a dictionary is serialized. Note that in storage, dictionaries are created on the RowGroup level and hence a dictionary is often larger than a vector, so serializing the DICTIONARY vector as-is would be larger than the flattened version. Also, RLE storage leads to dictionary vectors that only use a small contiguous subset of the dictionary entries, which generates this problem. By creating a subset of the dictionary, this is prevented. This PR aims to always do better in terms of byte-size than the previous approach.

Now the Serialize/Deserialize methods always attempt compression, at least on the latest serialization version, by using ShouldSerialize(5) aka v1.3.0 (or v1.2.1). But these new versions would have to be added still. **For the moment I have put in ShouldSerialize(1)** to trigger the code in CI - especially the DEBUG run does serialize/deserialize for all query results in the Verify() code. 

Both methods defer to the old code in new private methods resp. SerializeFlat/DeserializeFlat if there is no vector compression.

An alternative would be to name the methods SerializeCompressed() and DeserializeCompressed() and not rename the previous methods in SerializeFlat/DeserializeFlat. In that case, MotherDuck would be in charge  of deciding when to call SerializeCompressed() or not. That would also potentially allow to enrich the method with more parameters. I was specifically thinking about a Map of dictionary_ids/value-bitmaps. In a stateful connection, this would allow to incrementally send over dictionaries. Not sure whether that complexity would be worth it, though.   