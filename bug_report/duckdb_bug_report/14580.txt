ID: 14580
Title: Silent numerical errors using UHUGEINT
Description:
### What happens?

Below is a subfactorial function definition that works perfectly well
when UHUGEINT is replaced by HUGEINT.

Using HUGEINT, the query `from subfact(20);` produces correct results, including !19 and !20:
```
┌───────┬────────────────────┐
│   n   │        sub         │
│ int32 │       int128       │
...
│    19 │  44750731559645106 │
│    20 │ 895014631192902121 │
```

The problem is that when HUGEINT is replaced by UHUGEINT, it
starts to produce erroneous results at !19:
```
┌───────┬────────────────────┐
│   n   │        sub         │
│ int32 │      uint128       │
├───────┼────────────────────┤
...
│    19 │  44750731559645104 │ wrong
│    20 │ 895014631192902016 │ wrong
├───────┴────────────────────┤
│ 21 rows          2 columns │
└────────────────────────────┘
```

Here is the function with UHUGEINT.

*/


### To Reproduce

```
CREATE OR REPLACE FUNCTION subfact(num) as table (
  with recursive cte(n,psub,sub) as (
    -- psub means `previous sub`
    select 0 as n, 1::UHUGEINT as psub, 1::UHUGEINT as sub
    union all
    select
     n+1 as n,
     sub as psub,
     (n * (sub + psub)) as sub
    from cte
    where n < num
  ) select n, sub from cte
)  ;

from subfact(20);
```

### OS:

MacOS

### DuckDB Version:

v1.0.0 and v1.1.3-dev75 etc

### DuckDB Client:

CLI

### Hardware:

_No response_

### Full Name:

Peter Koppstein

### Affiliation:

Princeton University

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a source build

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have