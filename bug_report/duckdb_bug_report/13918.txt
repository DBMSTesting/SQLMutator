ID: 13918
Title: Problem loading json with nullable columns from file
Description:
### What happens?

This problem is related to the JSON extension (`INSTALL json; LOAD json;`).

I am unable to load data from a JSON file in the following scenario:
* A table is pre-defined with nullable columns
* The JSON file contains only one object, with one missing column/field

This does however work if the input file has two objects: each object is missing one column, but - when combined - both objects contain all columns.

My expectation was that I will be able to load JSON data into a table, even if it the input is missing nullable columns.

### To Reproduce

First create the table:

```sql
CREATE TABLE test (
      a VARCHAR, 
      b STRUCT(
        n_b VARCHAR
      ), 
      c STRUCT(
        n_c VARCHAR
      ), 
);
```

Then load data from a JSON file: 

```sql
INSERT INTO test SELECT * FROM read_json_auto('/tmp/test1.json');
```

```console
Binder Error: table test has 3 columns but 2 values were supplied
```

It is **not** possible to load the following file (`test1.json`) into the table:

```console
[ { "a" : 1, "b" : { "n_b" : 1 } } ]
```

The following file can be **successfully loaded**:
```
[
  { "a" : 1, "b" : { "n_b" : 1 } },
  { "a" : 2, "c" : { "n_c" : 2 } }
]
```

### OS:

Linux 6.8.0-1011 Ubuntu x86_64

### DuckDB Version:

v1.0.0 1f98600c2c

### DuckDB Client:

DuckDB CLI

### Hardware:

_No response_

### Full Name:

Christian Bauer

### Affiliation:

-

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have