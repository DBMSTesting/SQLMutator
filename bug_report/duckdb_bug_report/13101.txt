ID: 13101
Title: clang-tidy: rework Makefile and CI
Description:
#### Developer side
Add TIDY_CHECKS option, can be used like:
```
TIDY_CHECKS='cppcoreguidelines-narrowing-conversions' make tidy_check
```

Those options are provided on top of the standard list in `.clang-tidy` file.

Examples:
`'cppcoreguidelines-narrowing-conversions'` = specified test, plus all default ones 
`'*'` = all
`'-*,performance-*,bugprone-*'` = all performance or bugprone, none of the rest (= no default ones)

One thing to check is that via `pip install clang_tidy` I upgraded the version I had, and I while current options work with the most recent one (e.g. `-*` has to be explicitly specified to remove recommended checks), I have not checked this might impact current local workflows.
I think @Mytherin uses this for sure.
Note that empty `TIDY_CHECK` keeps current semantic, so it should be OK.

#### CI side
Bumped ubuntu from 22 to 24, that in turns means a newer clang-tidy. Also specified a subset of checks that are currently not failing, taken from the list of previously run checks, minus `readability-identifier-naming` that now has been improved and trigger in 2 instances (weak_ptr and enable_from_this class names).

Brief math on the list-checks output reveals there are around 500 (some might be aliases) and we are failing at least 100 unique categories. Unsure which one are relevant to tackle, I would consider `cppcoreguidelines-narrowing-conversions` as one of the first to investigate.

There are probably plenty more that can and should be added at the current config.

One thing I am not sure: whether the list of currently checked / supported list of checks should live. One one end it would be simpler to edit as an extra file with the list of checks, then compiled to the comma separated list. On the other this is simpler. I can look into moving that to a file, but can likely also be done as a follow up.

This PR also adds possibility to trigger the clang-tidy on a given subset of checks, passed via workflow_dispatch input. Idea is that it could be handy to expand the list.