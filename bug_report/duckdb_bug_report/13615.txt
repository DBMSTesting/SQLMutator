ID: 13615
Title: Equivalent MACRO definitions yield different results
Description:
### What happens?

It is my understanding that
```sql
CREATE MACRO s2(x) AS (sum(x) OVER());
```
and
```sql
CREATE MACRO s1(x) AS (SELECT sum(y) OVER() FROM (SELECT x AS y));
```
should yield identical results. They produce, however, different results.

If `s1()` is for some reason not allowed, it should at least issue an error instead of providing a wrong result.


In this example it is easy to workaround (by choosing `s2()` instead of `s1()`). But when using it in more complex context, such a subquery construction might become necessary to e.g. avoid a "nested window functions not allowed" error.

### To Reproduce

```sql
CREATE TABLE tab (x int);

INSERT INTO tab VALUES (3);
INSERT INTO tab VALUES (7);

CREATE MACRO s1(x) AS (SELECT sum(y) OVER() FROM (SELECT x AS y));
CREATE MACRO s2(x) AS (sum(x) OVER());

SELECT s1(x), s2(x) FROM tab;
```

Output:
```
┌───────┬───────┐
│ s1(x) ┆ s2(x) │
╞═══════╪═══════╡
│     3 ┆    10 │
│     7 ┆    10 │
└───────┴───────┘
```

### OS:

MS Windows 10, x64

### DuckDB Version:

1.0.0

### DuckDB Client:

Wasm

### Full Name:

Lukas Schneiderbauer

### Affiliation:

None

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have