CREATE TABLE artists (
  id integer NOT NULL PRIMARY KEY AUTOINCREMENT,
  name varchar(255)
);
CREATE TABLE albums (
  id integer NOT NULL PRIMARY KEY AUTOINCREMENT,
  name varchar(255),
  artist_id integer REFERENCES artists
);
INSERT INTO artists (name) VALUES ('Ar');
INSERT INTO albums (name, artist_id) VALUES ('Al', 1);
SELECT artists.*
FROM artists
INNER JOIN artists AS 'b' ON (b.id = artists.id)
WHERE (artists.id IN (
  SELECT albums.artist_id
  FROM albums
  WHERE ((name = 'Al')
    AND (albums.artist_id IS NOT NULL)
    AND (albums.id IN (
      SELECT id
      FROM (
        SELECT albums.id,
               row_number() OVER (
                 PARTITION BY albums.artist_id
                 ORDER BY name
               ) AS 'x'
        FROM albums
        WHERE (name = 'Al')
      ) AS 't1'
      WHERE (x = 1)
    ))
    AND (albums.id IN (1, 2)))
));
This problem was reported on the mailing list by Jeremy Evans.
drh added on 2018-11-08 19:27:38:
This appears to have nothing to do with window functions. The use of window functions in the example above merely disables the query flattener. The problem can also be seen in the following query:
CREATE TABLE t1 (a);
CREATE TABLE t2 (b);
CREATE TABLE t3 (c);
CREATE TABLE t4 (d);
INSERT INTO t1 (a) VALUES (104);
INSERT INTO t2 (b) VALUES (104);
INSERT INTO t3 (c) VALUES (104);
INSERT INTO t4 (d) VALUES (104);

.testctrl optimizations 0x01

SELECT *
FROM t1 CROSS JOIN t2 ON (t1.a = t2.b) WHERE t2.b IN (
  SELECT t3.c
  FROM t3
  WHERE t3.c IN (
    SELECT d FROM (SELECT d FROM t4) AS innermost WHERE innermost.d=104
  )
);

