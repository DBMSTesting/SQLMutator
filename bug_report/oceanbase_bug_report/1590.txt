ID: 1590
Title: [Bug]: different join results when change calculate order
Description:
**Describe the bug**
<!-- A clear and concise description of bug. -->

When join columns with differnet FLOAT type, the results are influenced by the calculate order.

**Environment**
<!-- Environment Details sometimes important -->
- OS Version and CPU Arch(`uname -a`):
```bash
Linux localhost.localdomain 3.10.0-1160.92.1.el7.x86_64 #1 SMP Tue Jun 20 11:48:01 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux
```
- OB Version(`LD_LIBRARY_PATH=../lib:$LD_LIBRARY_PATH ./observer -V`):
- This command does not work:
```bash
bash: ./observer: No such file or directory
```
Get OB version in this way:
```mysql
MySQL [(none)]> select version();
+------------------------------+
| version()                    |
+------------------------------+
| 5.7.25-OceanBase_CE-v4.0.0.0 |
+------------------------------+
1 row in set (0.00 sec)
```

**Fast Reproduce Steps(Required)**

1. Init database with two tables:

```mysql
create table t0 (a decimal(5,3));
insert into t0 values(0.01);
create table t1 (a double);
insert into t1 values(0.1);
```

Steps to reproduce the behavior:

2. Join `t0` and `t1`:


```mysql
select * from t0,t1 where t0.a = t1.a - t1.a + t0.a; -- q1

select * from t0,t1 where t0.a = t0.a +  t1.a - t1.a; -- q2
```

**Expected behavior**
<!-- A clear and concise description of what you expected to happen. -->

`q1` and `q2` return the same result as below, since their only differences are the calculate order.

```mysql
+-------+------+
| a     | a    |
+-------+------+
| 0.010 |  0.1 |
+-------+------+
1 row in set (0.03 sec)
```

**Actual Behavior**
<!-- What is the result? picture is allowed -->

They result different join results as below.

```mysql
MySQL [test]> select * from t0,t1 where t0.a = t1.a - t1.a + t0.a; -- q1
+-------+------+
| a     | a    |
+-------+------+
| 0.010 |  0.1 |
+-------+------+
1 row in set (0.01 sec)

MySQL [test]> select * from t0,t1 where t0.a = t0.a +  t1.a - t1.a; -- q2
Empty set (0.00 sec)
```

**Additional context**
<!-- Add any other context about the problem here. -->

We check the qurey plan and find that `t0.a` is casted as DOUBLE, which may cause float-point bias.
Though float-point bias is expected, some rewrite rules(e.g. reduce a-a) may cause unexpected results.
