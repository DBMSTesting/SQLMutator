ID: 316
Title: pop_back() in ObSEArrayImpl may need to call destructor of T
Description:
The first pop_back() function in `ObSEArrayImpl` may need to call destructor of T like the second function, or there may be risk of memory leaks.
```
template <typename T, int64_t LOCAL_ARRAY_SIZE, typename BlockAllocatorT, bool auto_free>
void ObSEArrayImpl<T, LOCAL_ARRAY_SIZE, BlockAllocatorT, auto_free>::pop_back()
{
  if (OB_UNLIKELY(count_ <= 0)) {
  } else {
    --count_;
  }
}

template <typename T, int64_t LOCAL_ARRAY_SIZE, typename BlockAllocatorT, bool auto_free>
int ObSEArrayImpl<T, LOCAL_ARRAY_SIZE, BlockAllocatorT, auto_free>::pop_back(T& obj)
{
  int ret = OB_SUCCESS;
  if (OB_UNLIKELY(count_ <= 0)) {
    ret = OB_ENTRY_NOT_EXIST;
  } else {
    if (is_memcpy_safe()) {
      memcpy(&obj, &data_[--count_], sizeof(T));
    } else {
      if (OB_FAIL(copy_assign(obj, data_[count_ - 1]))) {
        LIB_LOG(WARN, "failed to copy data", K(ret));
      }
      data_[count_ - 1].~T();
      count_--;
    }
  }
  return ret;
}
```