ID: 2126
Title: [Bug]: CRASH ERROR in `oceanbase::sql::ObExprLike::record_last_check<true>`
Description:
**Describe the bug**
build `master` branch with sanity, client lost connection after executing a SQL.

**Environment**
<!-- Environment Details sometimes important -->
- OS Version and CPU Arch(`uname -a`):
```
Linux c0c380f80f1a 6.5.0-44-generic #44~22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Tue Jun 18 14:36:16 UTC 2 x86_64 x86_64 x86_64 GNU/Linux
```
  
- OB Version(`LD_LIBRARY_PATH=../lib:$LD_LIBRARY_PATH ./observer -V`):
```
observer (OceanBase_CE 4.3.3.0)

REVISION: 1-77368f00e6612c47702fddfb6217f0cf864fb0a8
BUILD_BRANCH: master
BUILD_TIME: Sep 18 2024 12:38:51
BUILD_FLAGS: RelWithDebInfo|Sanity
BUILD_INFO: 

Copyright (c) 2011-present OceanBase Inc.
```

**Fast Reproduce Steps(Required)**
1. Execute `init.sql.txt`
[init.sql.txt](https://github.com/user-attachments/files/17057626/init.sql.txt)

2. Execute `error.sql.txt`
[error.sql.txt](https://github.com/user-attachments/files/17057625/error.sql.txt)

**Expected behavior**
no crash

**Actual Behavior**
```

CRASH ERROR!!! IP=7ff9fad009fc, RBP=1a5ce, sig=6, sig_code=-6, sig_addr=0x1a31c, RLIMIT_CORE=unlimited, timestamp=1726741782006296, tid=107982, tname=T1002_L0_G0, trace_id=Y27110A000A0B-0006227665D51408-0-0, extra_info=(), lbt=0x3de4e858 0x3ddb8177 0x7ff9facac51f 0x7ff9fad009fc 0x7ff9facac475 0x7ff9fac927f2 0xa0956de 0xa095943 0xa0959f2 0x1a35bb06 0x1a07a8e5 0x1a060703 0x17dd3c82 0x389d16a6 0x3b3f0aa0 0x17dd3c82 0x1902db59 0x20fd59d1 0x20fc7e69 0x20fcbdc2 0x20fca07f 0x21024194 0x1bb25e3d 0x1bb019b6 0x1bb05d6e 0x1bb0f857 0x1bb019b6 0x1ded6b33 0x1dede30a 0x1de6aa6a 0x19023f0c 0x1dc4e225 0x1dc4e98d 0x19023f0c 0x190371b5 0x19022568 0x19020a8c 0x11cfc968 0x11cf2613 0x18329a46 0x19208c34 0x191ee182 0x191ed17a 0x1901ba66 0x191e15a2 0x, SQL_ID=08E1CDD978CCF0D7FFDE97E39F0205F8, SQL_STRING=...
```

symbolized output:
```shell
$ llvm-addr2line-18 -Cfpe /data/db/vendor/ob/ob_fork/build_sanity/src/observer/observer 0xa0956de 0xa095943 0xa0959f2 0x1a35bb06 0x1a07a8e5 0x1a060703 0x17dd3c82 0x389d16a6 0x3b3f0aa0 0x17dd3c82 0x1902db59 0x20fd59d1 0x20fc7e69 0x20fcbdc2 0x20fca07f 0x21024194 0x1bb25e3d 0x1bb019b6 0x1bb05d6e 0x1bb0f857 0x1bb019b6 0x1ded6b33 0x1dede30a 0x1de6aa6a 0x19023f0c 0x1dc4e225 0x1dc4e98d 0x19023f0c 0x190371b5 0x19022568 0x19020a8c 0x11cfc968 0x11cf2613 0x18329a46 0x19208c34 0x191ee182 0x191ed17a 0x1901ba66 0x191e15a2
memory_sanity_abort at ./build_sanity/deps/oblib/src/lib/./deps/oblib/src/lib/alloc/memory_sanity.cpp:0
sanity_check_range(void const*, long) at ./build_sanity/deps/oblib/src/lib/./deps/oblib/src/lib/alloc/memory_sanity.h:163
memcpy at ./build_sanity/deps/oblib/src/lib/./deps/oblib/src/lib/alloc/memory_sanity.cpp:146
void oceanbase::sql::ObExprLike::record_last_check<true>(oceanbase::sql::ObExprLike::ObExprLikeContext&, oceanbase::common::ObString, oceanbase::common::ObString, oceanbase::common::ObIAllocator*) at ./build_sanity/src/sql/./src/sql/engine/expr/ob_expr_like.cpp:884 (discriminator 30)
int oceanbase::sql::ObExprLike::vector_like<oceanbase::common::ObVectorBase, oceanbase::common::ObVectorBase>(oceanbase::sql::ObExpr const&, oceanbase::sql::ObEvalCtx&, oceanbase::sql::ObBitVectorImpl<unsigned long> const&, oceanbase::sql::EvalBound const&) at ./build_sanity/src/sql/./src/sql/engine/expr/ob_expr_like.cpp:1618
oceanbase::sql::ObExprLike::eval_like_expr_vector_only_text_vectorized(oceanbase::sql::ObExpr const&, oceanbase::sql::ObEvalCtx&, oceanbase::sql::ObBitVectorImpl<unsigned long> const&, oceanbase::sql::EvalBound const&) at ./build_sanity/src/sql/./src/sql/engine/expr/ob_expr_like.cpp:1654
oceanbase::sql::ObExpr::eval_vector(oceanbase::sql::ObEvalCtx&, oceanbase::sql::ObBitVectorImpl<unsigned long> const&, oceanbase::sql::EvalBound const&) const at ./build_sanity/src/sql/./src/sql/engine/expr/ob_expr.cpp:1247 (discriminator 60)
int oceanbase::common::eval_right_operand<oceanbase::common::ObUniformFormat<false>>(oceanbase::sql::ObExpr const&, oceanbase::sql::ObExpr const&, oceanbase::sql::ObExpr const&, oceanbase::sql::ObEvalCtx&, oceanbase::sql::ObBitVectorImpl<unsigned long> const&, oceanbase::sql::EvalBound const&) at ./build_sanity/src/share/./src/share/vector/expr_cmp_func.cpp:210
oceanbase::common::FixedVectorCmp<(oceanbase::common::VecValueTypeClass)1, (oceanbase::common::VecValueTypeClass)1, (oceanbase::common::ObCmpOp)5>::eval_vector(oceanbase::sql::ObExpr const&, oceanbase::sql::ObEvalCtx&, oceanbase::sql::ObBitVectorImpl<unsigned long> const&, oceanbase::sql::EvalBound const&) at ./build_sanity/src/share/./src/share/vector/expr_cmp_func_simd.ipp:56
oceanbase::sql::ObExpr::eval_vector(oceanbase::sql::ObEvalCtx&, oceanbase::sql::ObBitVectorImpl<unsigned long> const&, oceanbase::sql::EvalBound const&) const at ./build_sanity/src/sql/./src/sql/engine/expr/ob_expr.cpp:1247 (discriminator 60)
oceanbase::sql::ObOperator::filter_row_vector(oceanbase::sql::ObEvalCtx&, oceanbase::common::ObIArray<oceanbase::sql::ObExpr*> const&, oceanbase::sql::ObBitVectorImpl<unsigned long> const&, bool&) at ./build_sanity/src/sql/./src/sql/engine/ob_operator.cpp:1529 (discriminator 26)
oceanbase::sql::ObPushdownOperator::filter_row_outside(oceanbase::common::ObIArray<oceanbase::sql::ObExpr*> const&, oceanbase::sql::ObBitVectorImpl<unsigned long> const&, bool&) at ./build_sanity/src/storage/./src/sql/engine/basic/ob_pushdown_filter.h:1287 (discriminator 26)
oceanbase::storage::ObMultipleMerge::process_fuse_row(bool, oceanbase::blocksstable::ObDatumRow&, oceanbase::blocksstable::ObDatumRow*&) at ./build_sanity/src/storage/./src/storage/access/ob_multiple_merge.cpp:867 (discriminator 2)
oceanbase::storage::ObMultipleMerge::get_next_normal_rows(long&, long) at ./build_sanity/src/storage/./src/storage/access/ob_multiple_merge.cpp:607 (discriminator 54)
oceanbase::storage::ObMultipleMerge::get_next_rows(long&, long) at ./build_sanity/src/storage/./src/storage/access/ob_multiple_merge.cpp:516
oceanbase::storage::ObTableScanIterator::get_next_rows(long&, long) at ./build_sanity/src/storage/./src/storage/access/ob_table_scan_iterator.cpp:679 (discriminator 206)
oceanbase::sql::ObDASScanIter::inner_get_next_rows(long&, long) at ./build_sanity/src/sql/./src/sql/das/iter/ob_das_scan_iter.cpp:128 (discriminator 208)
oceanbase::sql::ObDASIter::get_next_rows(long&, long) at ./build_sanity/src/sql/./src/sql/das/iter/ob_das_iter.cpp:128 (discriminator 52)
oceanbase::sql::ObDASMergeIter::get_next_seq_rows(long&, long) at ./build_sanity/src/sql/./src/sql/das/iter/ob_das_merge_iter.cpp:551 (discriminator 52)
oceanbase::sql::ObDASMergeIter::inner_get_next_rows(long&, long) at ./build_sanity/src/sql/./src/sql/das/iter/ob_das_merge_iter.cpp:380 (discriminator 212)
oceanbase::sql::ObDASIter::get_next_rows(long&, long) at ./build_sanity/src/sql/./src/sql/das/iter/ob_das_iter.cpp:128 (discriminator 52)
oceanbase::sql::ObTableScanOp::get_next_batch_with_das(long&, long) at ./build_sanity/src/sql/./src/sql/engine/table/ob_table_scan_op.cpp:2083 (discriminator 206)
oceanbase::sql::ObTableScanOp::inner_get_next_batch_for_tsc(long) at ./build_sanity/src/sql/./src/sql/engine/table/ob_table_scan_op.cpp:2279 (discriminator 2)
oceanbase::sql::ObTableScanOp::inner_get_next_batch(long) at ./build_sanity/src/sql/./src/sql/engine/table/ob_table_scan_op.cpp:2224
oceanbase::sql::ObOperator::get_next_batch(long, oceanbase::sql::ObBatchRows const*&) at ./build_sanity/src/sql/./src/sql/engine/ob_operator.cpp:1346 (discriminator 206)
oceanbase::sql::ObHashUnionVecOp::get_child_next_batch(long, oceanbase::sql::ObBatchRows const*&) at ./build_sanity/src/sql/./src/sql/engine/set/ob_hash_union_vec_op.cpp:73 (discriminator 206)
oceanbase::sql::ObHashUnionVecOp::inner_get_next_batch(long) at ./build_sanity/src/sql/./src/sql/engine/set/ob_hash_union_vec_op.cpp:113 (discriminator 2)
oceanbase::sql::ObOperator::get_next_batch(long, oceanbase::sql::ObBatchRows const*&) at ./build_sanity/src/sql/./src/sql/engine/ob_operator.cpp:1346 (discriminator 206)
oceanbase::sql::ObBatchRowIter::get_next_row(oceanbase::sql::ObEvalCtx&, oceanbase::sql::ObOpSpec const&) at ./build_sanity/src/sql/./src/sql/engine/ob_operator.cpp:1828 (discriminator 206)
oceanbase::sql::ObOperator::get_next_row_vectorizely() at ./build_sanity/src/sql/./src/sql/engine/ob_operator.cpp:1755 (discriminator 54)
oceanbase::sql::ObOperator::get_next_row() at ./build_sanity/src/sql/./src/sql/engine/ob_operator.cpp:1210
oceanbase::sql::ObSubQueryRelationalExpr::subquery_cmp_eval_with_all(oceanbase::sql::ObExpr const&, oceanbase::sql::ObEvalCtx&, oceanbase::common::ObDatum&, oceanbase::sql::ObExpr**, oceanbase::sql::ObEvalCtx&, oceanbase::sql::ObExpr**, oceanbase::sql::ObSubQueryIterator*, bool) at ./build_sanity/src/sql/./src/sql/engine/expr/ob_expr_operator.cpp:4301 (discriminator 4)
oceanbase::sql::ObSubQueryRelationalExpr::subquery_cmp_eval(oceanbase::sql::ObExpr const&, oceanbase::sql::ObEvalCtx&, oceanbase::common::ObDatum&) at ./build_sanity/src/sql/./src/sql/engine/expr/ob_expr_operator.cpp:4184
oceanbase::sql::ObExpr::eval_one_datum_of_batch(oceanbase::sql::ObEvalCtx&, oceanbase::common::ObDatum*&) const at ./build_sanity/src/sql/./src/sql/engine/expr/ob_expr.cpp:739 (discriminator 52)
oceanbase::sql::ObExpr::eval(oceanbase::sql::ObEvalCtx&, oceanbase::common::ObDatum*&) const at ./build_sanity/src/sql/./src/sql/engine/expr/ob_expr.h:1299
oceanbase::sql::ObSubPlanFilterOp::prepare_onetime_exprs() at ./build_sanity/src/sql/./src/sql/engine/subquery/ob_subplan_filter_op.cpp:1217
oceanbase::sql::ObSubPlanFilterOp::rescan() at ./build_sanity/src/sql/./src/sql/engine/subquery/ob_subplan_filter_op.cpp:487
oceanbase::sql::ObOperator::rescan() at ./build_sanity/src/sql/./src/sql/engine/ob_operator.cpp:932 (discriminator 232)
oceanbase::sql::ObSubQueryIterator::rewind(bool) at ./build_sanity/src/sql/./src/sql/engine/subquery/ob_subplan_filter_op.cpp:125 (discriminator 208)
```


**Additional context**
when using MySQL shell, if failed to reproduce, execute this before `error.sql`:
```
set collation_connection='latin1_bin';
```

#### tenant config
```sql
CREATE RESOURCE UNIT 4c7g MAX_CPU 4, MIN_CPU 4, MEMORY_SIZE '7G';
create resource pool pool_test unit='4c7g', unit_num=1, zone_list=('zone1' ,'zone2', 'zone3');
create tenant test resource_pool_list=('pool_test'), primary_zone='RANDOM',comment 'test tenant', charset='utf8' set ob_tcp_invited_nodes='%', recyclebin=OFF;
```

#### deploy config
```yaml
user:
  username: root
  key_file: private_key
oceanbase-ce:
  servers:
    - name: server1
      ip: 10.0.10.11
    - name: server2
      ip: 10.0.10.12
    - name: server3
      ip: 10.0.10.13
  server1:
    mysql_port: 10000
    rpc_port: 10001
    home_path: /root/data/observer1
    zone: zone1
  server2:
    mysql_port: 10000
    rpc_port: 10001
    home_path: /root/data/observer2
    zone: zone2
  server3:
    mysql_port: 10000
    rpc_port: 10001
    home_path: /root/data/observer3
    zone: zone3
  tag: latest
  include: obd/observer.include.yaml
  global: 
    # for default system config used by farm, please see tools/deploy/obd/observer.include.yaml
    # You can also specify the configuration directly below (stored locally, switching the working directory and redeploying will still take effect)
    production_mode: false
    devname: eth0
    syslog_level: 'WARN'
    syslog_io_bandwidth_limit: '30M'
    log_disk_size: '40G'
    # diag_syslog_per_error_limit: '4'
    max_syslog_file_count: '4'
    cpu_count: '6'
    datafile_size: '10G'
    datafile_next: '5G'
    datafile_maxsize: '30G'
    root_password: ''
    memory_limit: '9G'
    system_memory: '1G'
obproxy-ce:
  servers:
    - 10.0.10.8
  global:
    listen_port: 10004
    prometheus_listen_port: 10005
    syslog_level: 'WARN'
    home_path: /root/data/obproxy
    root_password: ''
  include: obd/obproxy.include.yaml
  depends:
    - oceanbase-ce
```

#### about us
We are the BASS team from the School of Cyber Science and Technology at Beihang University. Our main focus is on system software security, operating systems, and program analysis research, as well as the development of automated program testing frameworks for detecting software defects. Using our self-developed database vulnerability testing tool, we have identified the potential vulnerabilities.
