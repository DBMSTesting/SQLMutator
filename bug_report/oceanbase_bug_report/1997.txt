ID: 1997
Title: [Bug]: `left outer join` some `view` may produce unexpected result.
Description:
**Describe the bug**
`left outer join` some `view` produces unexpected result.

**Fast Reproduce Steps(Required)**

```sql
-- init tables
create table t_ot8lohr ( 
  c_tausij int ,
  c_q7_e5485m tinyint ,
  c_gk06ao9l text ,
  c_hymp tinyint ,
  c_dbby9f_xj int ,
  c_b1wzx9ayt3 int ,
  primary key(c_b1wzx9ayt3, c_dbby9f_xj),
  unique(c_dbby9f_xj),
  index main_index (c_b1wzx9ayt3)) partition by hash(c_dbby9f_xj) partitions 9;

create table t_e as 
select  
    ref_0.c_tausij as c0, 
    ref_0.c_gk06ao9l as c1
  from 
    (t_ot8lohr as ref_0 left outer join t_ot8lohr as ref_1 on (1=1))
;

alter table t_ot8lohr add column c_corupscj tinyint;

create table t_m ( 
  c_ydogyq1 int ,
  c_reoxwl34 int ,
  primary key(c_reoxwl34, c_ydogyq1),
  unique(c_ydogyq1)) partition by hash(c_ydogyq1) partitions 9;

insert into t_m (c_ydogyq1, c_reoxwl34) values 
  (396667551, 217625229), 
  (-368695015, -1288002677), 
  (1741309262, -712324340), 
  (970953275, -1454379871);

create view t_zsp as 
select  
    (select c_corupscj from t_ot8lohr order by c_corupscj limit 1 offset 2)
       as c0, 
    ref_0.c_ydogyq1 as c1,  
    ref_0.c_ydogyq1 as c3, 
    ref_0.c_ydogyq1 as c4
  from 
    t_m as ref_0
  where (EXISTS (
    select  
        1 as c0
      from 
        t_m as ref_1
      where 1=1));

-- error sql
SELECT
  ref_1.c3 as c1
FROM
  ((t_zsp as ref_0
      left outer join t_zsp as ref_1
      on (ref_0.c4 = ref_1.c1 ))
    left outer join (t_e as ref_2
      left outer join t_zsp as ref_3
      on ((ref_2.c0 is NULL)))
    on (ref_0.c0 = ref_3.c0 ));
```
Please be aware that the reproduction process may require several attempts.


**Expected behavior**
In MySQL:
```
mysql> SELECT   ref_1.c3 as c1 FROM   ((t_zsp as ref_0       left outer join t_zsp as ref_1       on (ref_0.c4 = ref_1.c1 ))     left outer join (t_e as ref_2       left outer join t_zsp as ref_3       on ((ref_2.c0 is NULL)))     on (ref_0.c0 = ref_3.c0 ));
+------------+
| c1         |
+------------+
|  970953275 |
|  396667551 |
| -368695015 |
| 1741309262 |
+------------+
4 rows in set (0.00 sec)
```

**Actual Behavior**
OceanBase produced unstable and incorrect result:
```
mysql> SELECT   ref_1.c3 as c1 FROM   ((t_zsp as ref_0       left outer join t_zsp as ref_1       on (ref_0.c4 = ref_1.c1 ))     left outer join (t_e as ref_2       left outer join t_zsp as ref_3       on ((ref_2.c0 is NULL)))     on (ref_0.c0 = ref_3.c0 ));
+------------+
| c1         |
+------------+
|  970953275 |
| 1741309262 |
|  970953275 |
| 1741309262 |
|  970953275 |
| 1741309262 |
|  970953275 |
| 1741309262 |
+------------+
8 rows in set (0.03 sec)
```



**Environment**
```
Linux bass1 6.5.0-28-generic #29~22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Thu Apr  4 14:39:20 UTC 2 x86_64 x86_64 x86_64 GNU/Linux

observer (OceanBase_CE 4.3.2.0)

REVISION: 1-d66ce5ddb37300d9178cc9b9655b679bb567eb6b
BUILD_BRANCH: develop
BUILD_TIME: May 24 2024 19:45:57
BUILD_FLAGS: RelWithDebInfo
BUILD_INFO: 

Copyright (c) 2011-present OceanBase Inc.
```


Distributed deploy config:
```
user:
  username: root
  key_file: private_key
oceanbase-ce:
  servers:
    - name: server1
      ip: 10.0.10.11
    - name: server2
      ip: 10.0.10.12
    - name: server3
      ip: 10.0.10.13
  server1:
    mysql_port: 10000
    rpc_port: 10001
    home_path: /root/data/observer1
    zone: zone1
  server2:
    mysql_port: 10000
    rpc_port: 10001
    home_path: /root/data/observer2
    zone: zone2
  server3:
    mysql_port: 10000
    rpc_port: 10001
    home_path: /root/data/observer3
    zone: zone3
  tag: latest
  include: obd/observer.include.yaml
  global: 
    # for default system config used by farm, please see tools/deploy/obd/observer.include.yaml
    # You can also specify the configuration directly below (stored locally, switching the working directory and redeploying will still take effect)
    production_mode: false
    devname: eth0
    syslog_level: 'WARN'
    syslog_io_bandwidth_limit: '30M'
    log_disk_size: '30G'
    # diag_syslog_per_error_limit: '4'
    max_syslog_file_count: '4'
    cpu_count: '6'
    datafile_size: '10G'
    datafile_next: '5G'
    datafile_maxsize: '30G'
    root_password: ''
    memory_limit: '9G'
    system_memory: '1G'
obproxy-ce:
  servers:
    - 10.0.10.8
  global:
    listen_port: 10004
    prometheus_listen_port: 10005
    syslog_level: 'WARN'
    home_path: /root/data/obproxy
    root_password: ''
  include: obd/obproxy.include.yaml
  depends:
    - oceanbase-ce
 ```

Distributed tenant config:
```
DROP TENANT mysql FORCE;
DROP RESOURCE POOL pool_for_tenant_mysql;

CREATE RESOURCE UNIT 4c7g MAX_CPU 4, MIN_CPU 4, MEMORY_SIZE '7G';
create resource pool pool_test unit='4c7g', unit_num=1, zone_list=('zone1' ,'zone2', 'zone3');
create tenant test resource_pool_list=('pool_test'), primary_zone='RANDOM',comment 'test tenant', charset='utf8' set ob_tcp_invited_nodes='%', recyclebin=OFF, ob_query_timeout=5000000;
```

Single node deploy config:
```
user:
  username: root
  key_file: private_key
oceanbase-ce:
  servers:
    - name: server1
      ip: 10.0.10.21
  server1:
    mysql_port: 10000
    rpc_port: 10001
    home_path: /root/data/observer1
    zone: zone1
    # The directory for data storage. The default value is home_path/store.
    # data_dir: /data
    # The directory for clog, ilog, and slog. The default value is the same as the data_dir value.
    # redo_dir: /redo
  tag: latest
  include: obd/observer.include.yaml
  global: 
    # for default system config used by farm, please see tools/deploy/obd/observer.include.yaml
    # You can also specify the configuration directly below (stored locally, switching the working directory and redeploying will still take effect)
    production_mode: false
    devname: eth0
    syslog_level: 'WARN'
    syslog_io_bandwidth_limit: '30M'
    log_disk_size: '40G'
    max_syslog_file_count: '4'
    cpu_count: '6'
    datafile_size: '10G'
    datafile_next: '5G'
    datafile_maxsize: '30G'
    root_password: ''
    memory_limit: '9G'
    system_memory: '1G'

```

Single node tenant config:
```
DROP TENANT mysql FORCE;
DROP RESOURCE POOL pool_for_tenant_mysql;

CREATE RESOURCE UNIT 4c7g MAX_CPU 4, MIN_CPU 4, MEMORY_SIZE '7G';
create resource pool pool_test unit='4c7g', unit_num=1, zone_list=('zone1');
create tenant test resource_pool_list=('pool_test'), primary_zone='RANDOM',comment 'test tenant', charset='utf8' set ob_tcp_invited_nodes='%', recyclebin=OFF, ob_query_timeout=5000000;
```


**Additional Context** 
We are the BASS team from the School of Cyber Science and Technology at Beihang University. Our main focus is on system software security, operating systems, and program analysis research, as well as the development of automated program testing frameworks for detecting software defects. Using our self-developed database vulnerability testing tool, we have identified the above-mentioned vulnerabilities that may lead to database logic error.
