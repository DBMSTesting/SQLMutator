ID: 2148
Title: [Bug]: Some SQL fails to obtain the execution plan
Description:
# Describe the bug
**SQL failed to obtain the execution plan for some views 
Prompt:No memory or reach tenant memory limit**

So through view SQL disassembly we found a certain pattern, which will be described next
A review of the official documents found some parameter adjustments
```set global ob_sql_work_area_percentage = 10```;
Found after setting ~
![image](https://github.com/user-attachments/assets/f6351db4-69b7-441a-b3cc-d5a7a4296b25)
Be in agreement
![image](https://github.com/user-attachments/assets/cb61fcfa-fba0-4039-9125-8ed4fa2d5153)


**Environment**
<!-- Environment Details sometimes important -->
- OS Version and CPU Arch:
![image](https://github.com/user-attachments/assets/565636a8-d13b-4ba9-be42-9443e9919d9e)
- OB Version:
![image](https://github.com/user-attachments/assets/8c7d4aa5-3d9c-4801-9bfb-5d731fa94aa5)

# Fast Reproduce Steps(Required)
## List structure
```sql
CREATE TABLE `部门表` (
  `ID` bigint(255) NOT NULL,
  `上级ID` bigint(255) DEFAULT NULL,
  `编码` varchar(1024) COLLATE utf8mb4_bin DEFAULT NULL,
  `名称` varchar(1024) COLLATE utf8mb4_bin DEFAULT NULL,
  PRIMARY KEY (`ID`)
)  WITH COLUMN GROUP(all columns, each column);


CREATE TABLE `病案主页_T1` (
  `病人ID` bigint(255) NOT NULL,
  `主页ID` int(255) NOT NULL,
  `住院号` bigint(255) DEFAULT NULL,
  `出院科室ID` bigint(255) DEFAULT NULL,
  PRIMARY KEY (`病人ID`, `主页ID`)
) WITH COLUMN GROUP(all columns, each column);


CREATE TABLE `病人变动记录_T1` (
  `ID` bigint(255) NOT NULL,
  `病人ID` bigint(255) DEFAULT NULL,
  `主页ID` int(255) DEFAULT NULL,
  `开始时间` varchar(1024) COLLATE utf8mb4_bin DEFAULT NULL,
  `开始原因` int(255) DEFAULT NULL,
  PRIMARY KEY (`ID`)
) WITH COLUMN GROUP(all columns, each column);
```

## Sample data
```sql
INSERT INTO `test`.`病案主页_T1` (`病人ID`, `主页ID`, `住院号`, `出院科室ID`) VALUES (1, 1, 666, 1);
INSERT INTO `test`.`病人变动记录_T1` (`ID`, `病人ID`, `主页ID`, `开始时间`, `开始原因`) VALUES (1, 666, 666, '2024-10-17 00:00:00', 1);
INSERT INTO `test`.`部门表` (`ID`, `上级ID`, `编码`, `名称`) VALUES (1, 2, '123', 'TEST');
```

## Execute SQL
```sql
explain
SELECT
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`))
FROM
	`ods_whfkyy_his_hisdbdg_zlhis`.`病案主页_T1` `a`,
	`ods_whfkyy_his_hisdbdg_zlhis`.`病人变动记录_T1` `c`
WHERE
	(`c`.`开始原因` IN (1, 3, 15))
	AND (`a`.`病人ID` = `c`.`病人ID`)
	AND (`a`.`主页ID` = `c`.`主页ID`)
LIMIT 0,200
```
## Result
![image](https://github.com/user-attachments/assets/67fbc2cb-b80d-4f27-9866-af539972e48d)

# Verify
## Verification 1: Delete the number of subqueries in the same table
Execute SQL

```sql
explain
SELECT
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`)),
	(
	SELECT
		`部门表`.`编码`
	FROM
		`ods_whfkyy_his_hisdbdg_zlhis`.`部门表`
	WHERE
		(`部门表`.`ID` = `a`.`出院科室ID`))
FROM
	`ods_whfkyy_his_hisdbdg_zlhis`.`病案主页_T1` `a`,
	`ods_whfkyy_his_hisdbdg_zlhis`.`病人变动记录_T1` `c`
WHERE
	(`c`.`开始原因` IN (1, 3, 15))
	AND (`a`.`病人ID` = `c`.`病人ID`)
	AND (`a`.`主页ID` = `c`.`主页ID`)
LIMIT 0,200
```

Results: explain was found to be fast and returned normally

![](https://cdn.nlark.com/yuque/0/2024/png/25948767/1729064120959-9a6d3d44-efdd-42fb-af2f-124333d6713a.png)

Summary: According to SQL, we found that the rule is actually due to multiple occurrences of the same table subquery in SQL

## Verification 2: Delete the associated primary key
Execute SQL: The operation is carried out using the repeated SQL, and only the primary key field in the department table of the source is deleted

```sql
ALTER TABLE ods_whfkyy_his_hisdbdg_zlhis.部门表 DROP PRIMARY KEY;
```

Result: At this time we find that the conclusion of verification 1 seems to be overturned, and the number of sub-queries in the same table is also a lot of line!

![](https://cdn.nlark.com/yuque/0/2024/png/25948767/1729064317088-e41fc61f-dc14-499e-8be2-e3047502ac6d.png)

Summary: After deleting the primary key of the '部门表', the accident can be ~ seems to be the SQL engine to retrieve the index caused by the execution plan generation exception

## Verification 3: Data storage method
Execute SQL: This is to convert the row to the column

```sql
ALTER table `ods_whfkyy_his_hisdbdg_zlhis`.`部门表` ADD COLUMN GROUP (each column);
ALTER TABLE  `ods_whfkyy_his_hisdbdg_zlhis`.`部门表` DROP COLUMN GROUP(all columns);
```

Results: After switching row storage and column storage, it was found that the problem existed

Summary: Therefore, it can be ruled out that the execution plan generation exception caused by different storage, which is estimated to be the problem of verification 2

## Verification 4: Execute the schedule stack
An exception found in the SQL execution plan stack will always be reported SPF WILL USE BASIC METHOD

![](https://cdn.nlark.com/yuque/0/2024/png/25948767/1729058944944-144d0ccb-12b8-4321-a912-6b4b4d250783.png)

Little brother is not very understand this, the big guy can help look at the stack analysis

Attach normal (no primary key index)

[optimizer_trace_d9q8R2_trace_正常SQL栈.zip](https://www.yuque.com/attachments/yuque/0/2024/zip/25948767/1729060461144-cfc76775-02c1-4ede-af60-d2efe0fa2b5c.zip)

Attach exception (with primary key index)

[optimizer_trace_mm4eD1_trace_t异常SQL栈.zip](https://www.yuque.com/attachments/yuque/0/2024/zip/25948767/1729060464719-69f62031-ab47-4264-a88c-585c296885a3.zip)



## conclusion
**At present, it is found that it is related to the primary key index of the sub-query table, and look at the community leaders to see whether the execution plan is generated by the old Bug~**
