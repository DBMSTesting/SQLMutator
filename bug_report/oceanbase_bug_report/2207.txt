ID: 2207
Title: [Bug]: NULL DEREFERENCE error - case 1
Description:
**Describe the bug**
<!-- A clear and concise description of bug. -->
Detected by static analysisi tool - StatiCode from Software Security Co, Ltd. This is a NULL DERERENCE (空指针解引用) error. 
**Environment**
<!-- Environment Details sometimes important -->
- OS Version and CPU Arch(`uname -a`):
  Linux ubuntu18 4.15.0-213-generic SMP Mon Jun 19 13:30:12 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux
- OB Version(`LD_LIBRARY_PATH=../lib:$LD_LIBRARY_PATH ./observer -V`):
  observer (OceanBase_CE 4.3.5.0)

REVISION: 1-
BUILD_BRANCH:
BUILD_TIME: Dec 17 2024 14:48:11
BUILD_FLAGS: RelWithDebInfo
BUILD_INFO:

Copyright (c) 2011-present OceanBase Inc.

**Fast Reproduce Steps(Required)**
![屏幕截图 2024-12-18 151338](https://github.com/user-attachments/assets/d21506af-f087-413e-aae3-c55448380c47)
The above snapshot is the analysis result shown by StatiCode. In step 4, there is a null dereference error.  
![屏幕截图 2024-12-18 145833](https://github.com/user-attachments/assets/4f4b893a-d82e-414e-a922-59c3a49956fb)
The reason is that in NDEBUG mode, the OB_ASSERT is defined as void function, so the OB_ASSERT(expr!=NULL) cannot ensure that is expr is always not a NULL in NDEBUG mode, while the expr->basic_func causes the deference of potential NULL pointer.
Steps to reproduce the behavior:
Following the steps 1,2,3,4 in the above snatshot, in step 4, the null dereference error was generated.  
**Expected behavior**
<!-- A clear and concise description of what you expected to happen. -->

**Actual Behavior**
<!-- What is the result? picture is allowed -->

**Additional context**
<!-- Add any other context about the problem here. -->
