ID: 1041
Title: [Bug]: Floating-point expressions shall not be directly or indirectly tested for equality or inequality
Description:
### Please check the issue list for the same bug

- [X] I have checked issue list and this bug is encountered for the first time.

### Environment

```markdown
- OB Version&commit_id or other module version&commit_id (e.g. observer V3.1.2 8b23a93):
- Hardware parameter:OS type & Compliler & CPU etc. 
- Others
```


### Fast Reproduce Steps(Required)

in file ob_expr_mod.cpp

```cpp
int ObExprMod::mod_double(ObObj& res, const ObObj& left, const ObObj& right, ObIAllocator* allocator, ObScale scale)
{

  int ret = OB_SUCCESS;
  if (OB_UNLIKELY(left.get_type_class() != right.get_type_class())) {
    ret = OB_INVALID_ARGUMENT;
    LOG_WARN("Invalid types", K(ret), K(left), K(right));
  } else if (fabs(right.get_double()) == 0.0) { // float value shall not be directly or indirectly tested for equality or inequality
    if (lib::is_oracle_mode()) {
      res.set_double(left.get_double());
    } else {
      res.set_null();
    }
  } else {
    res.set_double(fmod(left.get_double(), right.get_double()));
    LOG_DEBUG("succ to mod double", K(res), K(left), K(right));
  }
  UNUSED(allocator);
  UNUSED(scale);
  return ret;
}
```

### Actual Behavior

null

### Expected Behavior

null

### other information

null