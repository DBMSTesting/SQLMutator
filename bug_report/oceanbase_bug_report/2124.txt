ID: 2124
Title: [Bug]: OB 分区负载均衡算法有大坑，经过OB的自动负载均衡后，负载更不均衡了。 || [Bug]: There is a big pitfall in the OB partition load balancing algorithm. After OB's automatic load balancing, the load becomes even more unbalanced.
Description:
**Describe the bug**
![image](https://github.com/user-attachments/assets/72349bfb-0ef2-44f6-8a4d-09c7cbb1c281)

我将系统中 具有业务关联的多个表放入同一个表组，而且这些也是核心业务表，负载比普通表要高不少。

如上图所示，我希望将表组 `z2` 下的数据表的主副本全部挪到 Zone 3（具体在哪个 Zone 不是关键，关键是希望表组 `z1`、`z2`、`z3` 能够分布在3个不同的 Zone ）。

![image](https://github.com/user-attachments/assets/0b226b0b-1858-4390-821c-8a317d5297e7)

然而，哪怕这个时候 Zone 3 没有一个表组分布，哪怕 Zone 3 的 表分区数量也是最少的，但 `z2` 表组就是死活赖在 Zone 2，而不会被自动负载均衡到 Zone 3。

请问，OB 分区负载均衡的算法大概是怎样实现的呢 ？
如何才能按照自己的意愿，将指定表组的主副本转移到指定 Zone 呢 ？

**Environment**
OceanBase_CE_V4.3.2.1

**Expected behavior**
能够自定义表组的主副本优先所在的 Zone。

**Actual Behavior**
负载并不均衡。

**Additional context**
我感觉 OB 目前的分区负载均衡算法有较大的问题：

在大多数业务上，感觉按照 分区数量 和 磁盘 去均衡，似乎不是一个好的主意。以最常见的 `1-1-1` 集群为例：

先说磁盘，如果3个 Zone 都是**全功能**副本，那么三者占用的数据磁盘空间几乎是相差无几的，除非 单个 Zone 里面 存在 多个机器节点。

再说 分区数量，以电商为例，有些业务表 如 用户、商品、订单、支付， 这些核心业务表，读写 都是非常频繁的，数据量也会很大，会占用大部分的 CPU 时间。

而其他一些数据表，比如 费率配置、意见反馈、后台员工、后台角色，这些表不仅数据量少，并且读写频率很低。

**没有分区的两个表，在分区数量上可能都是1，但是 数据量、读写频率 却可能天壤之别。**

我建议 优先考虑如下因素 来实现 主副本的表分区负载均衡 可能会更好：

1.  **业务相关性**，根据执行过的历史SQL数据分析，尽量将处于同一个事务、关联查询 的表 放在同一个 Zone，这样可以避免分布式的处理开销。
2. **数据表的负载**，优先根据每个表的性能消耗（而不是表的数量），例如一定周期内的 累计CPU时间、磁盘IO 来综合评估负载均衡（数据量不一定是关键，因为也存在归档的冷数据表，数据量大不代表产生的负载就大）
3. 开发人员 更了解实际业务情况，允许 开发人员 自定义 某个表组 或 数据表 的主副本优先所在的 Zone （只是优先，如果该  Zone 宕机，还是要能够转移到其他 Zone ）。
4. 如果一个 Zone 有多台机器节点，再按照 每个表分区的负载、数据量 进一步加权负载均衡，会更合理。


<!--This is a translation content dividing line, the content below is generated by machine, please do not modify the content below-->
---
**Describe the bug**
![image](https://github.com/user-attachments/assets/72349bfb-0ef2-44f6-8a4d-09c7cbb1c281)

I put multiple tables with business relationships in the system into the same table group, and these are also core business tables, and the load is much higher than ordinary tables.

As shown in the figure above, I hope to move all the primary copies of the data tables under table group `z2` to Zone 3 (the specific Zone is not the key, the key is that I hope that table groups `z1`, `z2`, `z3` can Distributed in 3 different Zones).

![image](https://github.com/user-attachments/assets/0b226b0b-1858-4390-821c-8a317d5297e7)

However, even if there is no table group distributed in Zone 3 at this time, and even if Zone 3 has the smallest number of table partitions, the `z2` table group depends on Zone 2 for life and death and will not be automatically load balanced to Zone 3.

May I ask how the OB partition load balancing algorithm is implemented?
How can I transfer the primary copy of the specified table group to the specified Zone according to my own wishes?

**Environment**
OceanBase_CE_V4.3.2.1

**Expected behavior**
Ability to customize the zone where the primary copy of the table group is preferred.

**Actual Behavior**
The load is not balanced.

**Additional context**
I feel that OB’s current partition load balancing algorithm has major problems:

In most businesses, it seems that balancing according to the number of partitions and disks is not a good idea. Take the most common `1-1-1` cluster as an example:

Let's talk about the disk first. If the three Zones are all **full-featured** copies, then the data disk space occupied by the three will be almost the same, unless there are multiple machine nodes in a single Zone.

Let’s talk about the number of partitions. Taking e-commerce as an example, some business tables such as users, products, orders, and payments are read and written very frequently, and the amount of data will be very large, which will take up most of the CPU time.

As for other data tables, such as rate configuration, feedback, back-end employees, and back-end roles, these tables not only have a small amount of data, but also have a very low read and write frequency.

**Two tables without partitions may both have 1 partition number, but the data volume and read and write frequency may be very different. **

I suggest that it may be better to prioritize the following factors to achieve table partition load balancing of the primary replica:

1. **Business correlation**, based on the historical SQL data analysis performed, try to put the tables in the same transaction and related query in the same Zone, so as to avoid distributed processing overhead.
2. **Data table load**, priority is given to comprehensively evaluating load balancing based on the performance consumption of each table (rather than the number of tables), such as the cumulative CPU time and disk IO within a certain period (the amount of data is not necessarily the key) , because there are also archived cold data tables. A large amount of data does not mean a large load.)
3. Developers have a better understanding of the actual business situation, allowing developers to customize the Zone where the primary copy of a certain table group or data table is preferred (it is just a priority, if the Zone goes down, it still needs to be able to be transferred to other Zones).
4. If a Zone has multiple machine nodes, it will be more reasonable to further weight the load balancing according to the load and data volume of each table partition.
