ID: 2180
Title: [Bug]: Column Store Hint is Invalid
Description:
**Describe the bug**
<!-- A clear and concise description of bug. -->

I find that the column store hint behaves differently than expected.

Besides, I think that the current documentation on columnar storage in OceanBase is a little bit simplified, lacking detailed explanations about when columnar storage is effective and under what circumstances it remains ineffective even when a Hint is added. The official link is provided below (https://www.oceanbase.com/docs/common-oceanbase-database-cn-1000000000640601). 

Next, I will use the official documentation as an example to illustrate scenarios where the following hints are sometimes effective and sometimes ineffective:

**Environment**

- OS Version and CPU Arch(`uname -a`):

```
Linux localhost.localdomain 3.10.0-1160.102.1.el7.x86_64 #1 SMP Tue Oct 17 15:42:21 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux
```

- OB Version(`LD_LIBRARY_PATH=../lib:$LD_LIBRARY_PATH ./observer -V`):

```
select version();
-- 5.7.25-OceanBase_CE-v4.3.4.0
```

**Fast Reproduce Steps(Required)**

Steps to reproduce the behavior:

See the following cases.

**Expected behavior**

<!-- A clear and concise description of what you expected to happen. -->

When we use /*+ USE_COLUMN_TABLE(tt_column_row) */, it should access data in the columnar storage, i.e., execute COLUMN TABLE FULL SCAN; otherwise, it should access the row storage, i.e., execute TABLE FULL SCAN.

**Actual Behavior**
<!-- What is the result? picture is allowed -->

```sql
MySQL [test]> drop table if exists tt_column_row;
Query OK, 0 rows affected (0.21 sec)

MySQL [test]> CREATE TABLE  tt_column_row (c1 int PRIMARY KEY, c2 int , c3 int) WITH COLUMN GROUP (all columns, each column);

Query OK, 0 rows affected (0.13 sec)

MySQL [test]> SHOW CREATE TABLE  tt_column_row;
+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Table         | Create Table                                                                                                                                                                                                                                                                                                                                                   |
+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| tt_column_row | CREATE TABLE `tt_column_row` (
  `c1` int(11) NOT NULL,
  `c2` int(11) DEFAULT NULL,
  `c3` int(11) DEFAULT NULL,
  PRIMARY KEY (`c1`)
) DEFAULT CHARSET = utf8mb4 ROW_FORMAT = DYNAMIC COMPRESSION = 'zstd_1.3.8' REPLICA_NUM = 1 BLOCK_SIZE = 16384 USE_BLOOM_FILTER = FALSE TABLET_SIZE = 134217728 PCTFREE = 0 WITH COLUMN GROUP(all columns, each column) |
+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.02 sec)

// Case1: select *
MySQL [test]> EXPLAIN SELECT /*+ USE_COLUMN_TABLE(tt_column_row) */ * FROM tt_column_row;
+--------------------------------------------------------------------------------------------------+
| Query Plan                                                                                       |
+--------------------------------------------------------------------------------------------------+
| ========================================================                                         |
| |ID|OPERATOR       |NAME         |EST.ROWS|EST.TIME(us)|                                         |
| --------------------------------------------------------                                         |
| |0 |TABLE FULL SCAN|tt_column_row|1       |3           |                                         |
| ========================================================                                         |
| Outputs & filters:                                                                               |
| -------------------------------------                                                            |
|   0 - output([tt_column_row.c1], [tt_column_row.c2], [tt_column_row.c3]), filter(nil), rowset=16 |
|       access([tt_column_row.c1], [tt_column_row.c2], [tt_column_row.c3]), partitions(p0)         |
|       is_index_back=false, is_global_index=false,                                                |
|       range_key([tt_column_row.c1]), range(MIN ; MAX)always true                                 |
+--------------------------------------------------------------------------------------------------+
11 rows in set (0.00 sec)

MySQL [test]> EXPLAIN SELECT /*+ NO_USE_COLUMN_TABLE(tt_column_row) */ * FROM tt_column_row;
+--------------------------------------------------------------------------------------------------+
| Query Plan                                                                                       |
+--------------------------------------------------------------------------------------------------+
| ========================================================                                         |
| |ID|OPERATOR       |NAME         |EST.ROWS|EST.TIME(us)|                                         |
| --------------------------------------------------------                                         |
| |0 |TABLE FULL SCAN|tt_column_row|1       |3           |                                         |
| ========================================================                                         |
| Outputs & filters:                                                                               |
| -------------------------------------                                                            |
|   0 - output([tt_column_row.c1], [tt_column_row.c2], [tt_column_row.c3]), filter(nil), rowset=16 |
|       access([tt_column_row.c1], [tt_column_row.c2], [tt_column_row.c3]), partitions(p0)         |
|       is_index_back=false, is_global_index=false,                                                |
|       range_key([tt_column_row.c1]), range(MIN ; MAX)always true                                 |
+--------------------------------------------------------------------------------------------------+
11 rows in set (0.00 sec)


// Case2: select c1
MySQL [test]> EXPLAIN SELECT /*+ USE_COLUMN_TABLE(tt_column_row) */ c1 FROM tt_column_row;
+------------------------------------------------------------------+
| Query Plan                                                       |
+------------------------------------------------------------------+
| ===============================================================  |
| |ID|OPERATOR              |NAME         |EST.ROWS|EST.TIME(us)|  |
| ---------------------------------------------------------------  |
| |0 |COLUMN TABLE FULL SCAN|tt_column_row|1       |3           |  |
| ===============================================================  |
| Outputs & filters:                                               |
| -------------------------------------                            |
|   0 - output([tt_column_row.c1]), filter(nil), rowset=16         |
|       access([tt_column_row.c1]), partitions(p0)                 |
|       is_index_back=false, is_global_index=false,                |
|       range_key([tt_column_row.c1]), range(MIN ; MAX)always true |
+------------------------------------------------------------------+
11 rows in set (0.00 sec)

MySQL [test]> EXPLAIN SELECT /*+ NO_USE_COLUMN_TABLE(tt_column_row) */ c1 FROM tt_column_row;
+------------------------------------------------------------------+
| Query Plan                                                       |
+------------------------------------------------------------------+
| ===============================================================  |
| |ID|OPERATOR              |NAME         |EST.ROWS|EST.TIME(us)|  |
| ---------------------------------------------------------------  |
| |0 |COLUMN TABLE FULL SCAN|tt_column_row|1       |3           |  |
| ===============================================================  |
| Outputs & filters:                                               |
| -------------------------------------                            |
|   0 - output([tt_column_row.c1]), filter(nil), rowset=16         |
|       access([tt_column_row.c1]), partitions(p0)                 |
|       is_index_back=false, is_global_index=false,                |
|       range_key([tt_column_row.c1]), range(MIN ; MAX)always true |
+------------------------------------------------------------------+
11 rows in set (0.00 sec)

// Case3: select c2
MySQL [test]> EXPLAIN SELECT /*+ USE_COLUMN_TABLE(tt_column_row) */ c2 FROM tt_column_row;
+------------------------------------------------------------------+
| Query Plan                                                       |
+------------------------------------------------------------------+
| ===============================================================  |
| |ID|OPERATOR              |NAME         |EST.ROWS|EST.TIME(us)|  |
| ---------------------------------------------------------------  |
| |0 |COLUMN TABLE FULL SCAN|tt_column_row|1       |3           |  |
| ===============================================================  |
| Outputs & filters:                                               |
| -------------------------------------                            |
|   0 - output([tt_column_row.c2]), filter(nil), rowset=16         |
|       access([tt_column_row.c2]), partitions(p0)                 |
|       is_index_back=false, is_global_index=false,                |
|       range_key([tt_column_row.c1]), range(MIN ; MAX)always true |
+------------------------------------------------------------------+
11 rows in set (0.00 sec)

MySQL [test]> EXPLAIN SELECT /*+ NO_USE_COLUMN_TABLE(tt_column_row) */ c2 FROM tt_column_row;
+------------------------------------------------------------------+
| Query Plan                                                       |
+------------------------------------------------------------------+
| ===============================================================  |
| |ID|OPERATOR              |NAME         |EST.ROWS|EST.TIME(us)|  |
| ---------------------------------------------------------------  |
| |0 |COLUMN TABLE FULL SCAN|tt_column_row|1       |3           |  |
| ===============================================================  |
| Outputs & filters:                                               |
| -------------------------------------                            |
|   0 - output([tt_column_row.c2]), filter(nil), rowset=16         |
|       access([tt_column_row.c2]), partitions(p0)                 |
|       is_index_back=false, is_global_index=false,                |
|       range_key([tt_column_row.c1]), range(MIN ; MAX)always true |
+------------------------------------------------------------------+
11 rows in set (0.00 sec)

// Case4: select c1, c3
MySQL [test]> EXPLAIN SELECT /*+ USE_COLUMN_TABLE(tt_column_row) */ c1, c3 FROM tt_column_row;
+------------------------------------------------------------------------------+
| Query Plan                                                                   |
+------------------------------------------------------------------------------+
| ========================================================                     |
| |ID|OPERATOR       |NAME         |EST.ROWS|EST.TIME(us)|                     |
| --------------------------------------------------------                     |
| |0 |TABLE FULL SCAN|tt_column_row|1       |3           |                     |
| ========================================================                     |
| Outputs & filters:                                                           |
| -------------------------------------                                        |
|   0 - output([tt_column_row.c1], [tt_column_row.c3]), filter(nil), rowset=16 |
|       access([tt_column_row.c1], [tt_column_row.c3]), partitions(p0)         |
|       is_index_back=false, is_global_index=false,                            |
|       range_key([tt_column_row.c1]), range(MIN ; MAX)always true             |
+------------------------------------------------------------------------------+
11 rows in set (0.00 sec)

MySQL [test]> EXPLAIN SELECT /*+ NO_USE_COLUMN_TABLE(tt_column_row) */ c1, c3 FROM tt_column_row;
+------------------------------------------------------------------------------+
| Query Plan                                                                   |
+------------------------------------------------------------------------------+
| ========================================================                     |
| |ID|OPERATOR       |NAME         |EST.ROWS|EST.TIME(us)|                     |
| --------------------------------------------------------                     |
| |0 |TABLE FULL SCAN|tt_column_row|1       |3           |                     |
| ========================================================                     |
| Outputs & filters:                                                           |
| -------------------------------------                                        |
|   0 - output([tt_column_row.c1], [tt_column_row.c3]), filter(nil), rowset=16 |
|       access([tt_column_row.c1], [tt_column_row.c3]), partitions(p0)         |
|       is_index_back=false, is_global_index=false,                            |
|       range_key([tt_column_row.c1]), range(MIN ; MAX)always true             |
+------------------------------------------------------------------------------+
11 rows in set (0.00 sec)
```

**Additional context**
<!-- Add any other context about the problem here. -->
None