ID: 2029
Title: [Bug]: OceanBase 二级组合分区表的分区裁剪优化问题
Description:
**Describe the bug**
Version: OceanBase CE 4.2.1.7 （ CentOS 8.2 ）

```sql
CREATE TABLE `t` (
    `id` bigint unsigned NOT NULL COMMENT '主键ID',
    `merchant_id` int unsigned NOT NULL COMMENT '商户ID',
    `user_id` int unsigned NOT NULL COMMENT '用户ID',    
    `local_time` datetime NOT NULL COMMENT '时间',
    `days` TINYINT UNSIGNED GENERATED ALWAYS AS ( (id & 65024) >> 9 ) VIRTUAL,
    `mid` TINYINT UNSIGNED GENERATED ALWAYS AS ( (id & 480) >> 5 ) VIRTUAL,
    `uid` TINYINT UNSIGNED GENERATED ALWAYS AS ( id & 31 ) VIRTUAL,
    PRIMARY KEY (`id`) USING BTREE,
    KEY `idx_merchantId_userId_localTime` (`merchant_id`,`user_id`,`local_time`),
    KEY `idx_localTime` (`local_time`) 
) DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
    PARTITION BY LIST COLUMNS (days, mid)
        SUBPARTITION BY HASH (uid) SUBPARTITIONS 32
    (
        PARTITION P20240326_0 VALUES IN ( (25,0), (25,1), (25,2), (25,3), (25,4), (25,5), (25,6), (25,7) )
        ,PARTITION P20240326_1 VALUES IN ( (25,8), (25,9), (25,10), (25,11), (25,12), (25,13), (25,14), (25,15) )
);

-- 添加分区
ALTER  TABLE `t` ADD PARTITION (
    PARTITION P20240327_0 VALUES IN ( (26,0), (26,1), (26,2), (26,3), (26,4), (26,5), (26,6), (26,7) )
    ,PARTITION P20240327_1 VALUES IN ( (26,8), (26,9), (26,10), (26,11), (26,12), (26,13), (26,14), (26,15) )
);

-- 测试数据
INSERT INTO `t` (`id`, `merchant_id`, `user_id`, `local_time`) VALUES (19821263444783649, 1, 1, '2024-03-26 12:00:00');
INSERT INTO `t` (`id`, `merchant_id`, `user_id`, `local_time`) VALUES (19823728756011905, 1, 1, '2024-03-26 00:00:00');
INSERT INTO `t` (`id`, `merchant_id`, `user_id`, `local_time`) VALUES (19823995043984353, 1, 1, '2024-03-26 23:59:59');
INSERT INTO `t` (`id`, `merchant_id`, `user_id`, `local_time`) VALUES (19824424540713825, 1, 1, '2024-03-26 08:59:59');
INSERT INTO `t` (`id`, `merchant_id`, `user_id`, `local_time`) VALUES (19824845447508577, 1, 1, '2024-03-26 10:59:59');
```
如上述代码所示，创建一个二级分区表，并插入少量测试数据。
出于业务考虑，该二级分区表的分区键包含3个虚拟列，这3个虚拟列都基于 主键ID 自动生成：
1. `days` 占7位，0~127，共128天的数据（循环使用）；
2. `mid` 占4位，0~15，与 `days` 一起组成联合的一级分区；
3. `uid` 占5位，0~31，采用 Hash 二级分区。

执行以下SQL
```sql
EXPLAIN SELECT * FROM gs_game_play_log_new WHERE id = 19821263444783649
```
得到如下返回结果：
```
=========================================================================
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |7           |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |6           |
|2 |  └─PX PARTITION ITERATOR|        |1       |3           |
|3 |    └─TABLE GET          |t       |1       |3           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t.id, t.merchant_id, t.user_id, t.local_time, column_conv(TINYINT UNSIGNED,PS:(3,0),NULL,cast((T_OP_BIT_RIGHT_SHIFT, cast((T_OP_BIT_AND,
       cast(t.id, BIGINT(-1, 0)), 65024), BIGINT(-1, 0)), 9), TINYINT UNSIGNED(-1, 0))), column_conv(TINYINT UNSIGNED,PS:(3,0),NULL,cast((T_OP_BIT_RIGHT_SHIFT,
       cast((T_OP_BIT_AND, cast(t.id, BIGINT(-1, 0)), 480), BIGINT(-1, 0)), 5), TINYINT UNSIGNED(-1, 0))), column_conv(TINYINT UNSIGNED,PS:(3,0),NULL,cast((T_OP_BIT_AND,
       cast(t.id, BIGINT(-1, 0)), 31), TINYINT UNSIGNED(-1, 0))))]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t.id, t.merchant_id, t.user_id, t.local_time, column_conv(TINYINT UNSIGNED,PS:(3,0),NULL,cast((T_OP_BIT_RIGHT_SHIFT, cast((T_OP_BIT_AND,
       cast(t.id, BIGINT(-1, 0)), 65024), BIGINT(-1, 0)), 9), TINYINT UNSIGNED(-1, 0))), column_conv(TINYINT UNSIGNED,PS:(3,0),NULL,cast((T_OP_BIT_RIGHT_SHIFT,
       cast((T_OP_BIT_AND, cast(t.id, BIGINT(-1, 0)), 480), BIGINT(-1, 0)), 5), TINYINT UNSIGNED(-1, 0))), column_conv(TINYINT UNSIGNED,PS:(3,0),NULL,cast((T_OP_BIT_AND,
       cast(t.id, BIGINT(-1, 0)), 31), TINYINT UNSIGNED(-1, 0))))]), filter(nil), rowset=16
      dop=1
  2 - output([t.id], [column_conv(TINYINT UNSIGNED,PS:(3,0),NULL,cast((T_OP_BIT_RIGHT_SHIFT, cast((T_OP_BIT_AND, cast(t.id, BIGINT(-1, 0)), 65024), BIGINT(-1,
       0)), 9), TINYINT UNSIGNED(-1, 0)))], [column_conv(TINYINT UNSIGNED,PS:(3,0),NULL,cast((T_OP_BIT_RIGHT_SHIFT, cast((T_OP_BIT_AND, cast(t.id, BIGINT(-1, 
      0)), 480), BIGINT(-1, 0)), 5), TINYINT UNSIGNED(-1, 0)))], [column_conv(TINYINT UNSIGNED,PS:(3,0),NULL,cast((T_OP_BIT_AND, cast(t.id, BIGINT(-1, 0)), 31),
       TINYINT UNSIGNED(-1, 0)))], [t.merchant_id], [t.user_id], [t.local_time]), filter(nil), rowset=16
      force partition granule
  3 - output([t.id], [column_conv(TINYINT UNSIGNED,PS:(3,0),NULL,cast((T_OP_BIT_RIGHT_SHIFT, cast((T_OP_BIT_AND, cast(t.id, BIGINT(-1, 0)), 65024), BIGINT(-1,
       0)), 9), TINYINT UNSIGNED(-1, 0)))], [column_conv(TINYINT UNSIGNED,PS:(3,0),NULL,cast((T_OP_BIT_RIGHT_SHIFT, cast((T_OP_BIT_AND, cast(t.id, BIGINT(-1, 
      0)), 480), BIGINT(-1, 0)), 5), TINYINT UNSIGNED(-1, 0)))], [column_conv(TINYINT UNSIGNED,PS:(3,0),NULL,cast((T_OP_BIT_AND, cast(t.id, BIGINT(-1, 0)), 31),
       TINYINT UNSIGNED(-1, 0)))], [t.merchant_id], [t.user_id], [t.local_time]), filter(nil), rowset=16
      access([t.id], [t.merchant_id], [t.user_id], [t.local_time]), partitions(p0sp1, p1sp1, p2sp1, p3sp1)
      is_index_back=false, is_global_index=false, 
      range_key([t.id]), range[19821263444783649 ; 19821263444783649], 
      range_cond([t.id = 19821263444783649])
```

由于 `id` 已经隐含了 `days` 、`mid` 和 `uid`。
然而，从 执行计划 来看，仅通过 `id` 查询，并没有很好地实现分区裁剪优化，只有 二级分区 有裁剪。

之前测试过，如果只有单列的一级分区，OceanBase 是能够根据 `id` 实现裁剪优化的。
然而，如果情况复杂一点，比如这种分区键较多时，OceanBase 似乎还是会**遍历所有** 一级分区。
希望 分区裁剪 能够进一步优化，以避免扫描更多的表分区。