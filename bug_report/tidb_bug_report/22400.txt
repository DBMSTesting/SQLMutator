ID: 22400
Title: TiDB timeout when killing an instance of TiKV
Description:
## Bug Report

Please answer these questions before submitting your issue. Thanks!

### 1. Minimal reproduce step (Required)

Deploy a cluster with at least four TiKV nodes and enable shuffle scheduling.
Kill a node randomly and check if all tables can be accessed and then restart it.

### 2. What did you expect to see? (Required)

The operation can be repeated infinitely.

### 3. What did you see instead (Required)

TiDB timeout after a few loops.

### 4. What is your TiDB version? (Required)

nightly
<!-- Paste the output of SELECT tidb_version() -->

Joint consensus is enabled in master, which is possible to make a leader step down as a learner during a conf change. And hibernate region is also enabled by default in master, so after the leader step down, there can be a long time that there is no leader in the region until requests are sent to followers or hibernate timeout. But from logs, I can see TiDB keeps querying the learner instead of trying other followers, hence it keeps timeout until hibernate is woken up.
```
[2021/01/14 21:22:15.288 +08:00] [WARN] [backoff.go:342] ["regionMiss backoffer.maxSleep 200000ms is exceeded, errors:\nnot leader: region_id:740 , ctx: region ID: 740, meta: id:740 start_key:\"t\\200\\000\\000\\000\\000\\000\\000;\" end_key:\"t\\200\\000\\000\\000\\000\\000\\000;_r\\200\\000\\000\\000\\000\\004'\\000\" region_epoch:<conf_ver:5474 version:30 > peers:<id:572242 store_id:5 > peers:<id:574937 store_id:1 > peers:<id:579904 store_id:7 role:Learner > peers:<id:580548 store_id:8 > , peer: id:579904 store_id:7 role:Learner, idx: 2, reqStoreType: TiKvOnly, runStoreType: tikv at 2021-01-14T21:22:14.285622938+08:00\nepoch_not_match:<>  at 2021-01-14T21:22:14.785875308+08:00\nnot leader: region_id:740 , ctx: region ID: 740, meta: id:740 start_key:\"t\\200\\000\\000\\000\\000\\000\\000;\" end_key:\"t\\200\\000\\000\\000\\000\\000\\000;_r\\200\\000\\000\\000\\000\\004'\\000\" region_epoch:<conf_ver:5474 version:30 > peers:<id:572242 store_id:5 > peers:<id:574937 store_id:1 > peers:<id:579904 store_id:7 role:Learner > peers:<id:580548 store_id:8 > , peer: id:579904 store_id:7 role:Learner , idx: 2, reqStoreType: TiKvOnly, runStoreType: tikv at 2021-01-14T21:22:15.288185955+08:00"]
```

We can make it hardly happen in TiKV side, but it can't be avoided. For example, a restarted learner can never know who is the leader until leader is woken up, it's recommended TiDB to try other peers.