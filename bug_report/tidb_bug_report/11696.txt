ID: 11696
Title: getGeneratedKeys from batch insert return wrong ids
Description:
## Bug Report

Please answer these questions before submitting your issue. Thanks!

1. What did you do?
invoke code as follow in muti thread to batch insert and record generated keys which is auto increment
```java
Statement.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);
ResultSet rs = stmt.getGeneratedKeys();
while (rs.next()) {
    record(rs.getLong(1));//record the generated keys
}
```
**I found out that the keys return in program are different from keys in database(tidb).**
What if i use mysql, it works fine.

If possible, provide a recipe for reproducing the error.

create table before run java code:
```sql
CREATE TABLE `test1` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `val` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`)
) 

-- tast2 is used to record the test1 generated keys
CREATE TABLE `test2` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `test1Id` bigint(20) DEFAULT NULL,
  `test1Val` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`)
) 
```
run java code:
```java
import java.sql.*;
import java.util.*;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicLong;

public class TestKeyDuplicate {

    static final AtomicLong INTEGER_INCR = new AtomicLong(1);

    static final String DB_URL = "";

    static final String USER = "";

    static final String PASSWORD = "";

    public static void main(String[] args) {
        int concurrentThreshold = 5;
        CountDownLatch countDownLatch = new CountDownLatch(concurrentThreshold);
        for (int i = 0; i < concurrentThreshold; i++) {
            new Thread(()->{
                try{
                    Class.forName("com.mysql.jdbc.Driver");
                    try(Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD)) {

                        //取消自动提交
                        conn.setAutoCommit(false);
                        try(Statement stmt = conn.createStatement()) {

                            //插入test1表
                            StringBuilder insertTest1Sql = new StringBuilder("insert into test1(val) values ");
                            List<Long> vals = new ArrayList<>();
                            List<Long> test1Ids = new ArrayList<>();

                            List<String> sql1Params = new ArrayList<>();
                            for (int j = 0; j < 500; j++) {
                                vals.add(INTEGER_INCR.getAndIncrement());
                            }
                            for (Long val : vals) {
                                sql1Params.add("("+val+")");
                            }
                            insertTest1Sql.append(String.join(",", sql1Params));

                            stmt.executeUpdate(insertTest1Sql.toString(), Statement.RETURN_GENERATED_KEYS);

                            //获取自动生成ID
                            ResultSet rs = stmt.getGeneratedKeys();
                            while (rs.next()) {
                                test1Ids.add(rs.getLong(1));
                            }

                            assert vals.size() == test1Ids.size();

                            ResultSet lastInsertIdRs = stmt.executeQuery("SELECT LAST_INSERT_ID()");
                            if (lastInsertIdRs.next()) {
                                System.out.println("LAST_INSERT_ID = "+lastInsertIdRs.getLong(1));
                            }

                            countDownLatch.countDown();

                            //插入test1表
                            StringBuilder insertTest2Sql = new StringBuilder("insert into test2(test1Id,test1Val) values ");
                            List<String> sql2Params = new ArrayList<>();
                            for (int j = 0; j < vals.size(); j++) {
                                sql2Params.add("("+test1Ids.get(j)+","+vals.get(j)+")");
                            }
                            insertTest2Sql.append(String.join(",", sql2Params));
                            stmt.executeUpdate(insertTest2Sql.toString());
                        }
                        //提交
                        conn.commit();
                    };
                } catch (ClassNotFoundException | SQLException e) {
                    e.printStackTrace();
                }
            }).start();
        }
    }
}
```

run sql as follow to check if the keys return from program are different from the key database actually generated:
``` sql
SELECT
	test1.id AS test1Id,
	test1.val AS test1Val,
	test2.test1Id AS test1IdInTest2 
FROM
	test1
	LEFT JOIN test2 ON test1.val = test2.test1Val 
WHERE
	test1.id != test2.test1Id
```

2. What did you expect to see?
Run the last sql and return empty result set.


3. What did you see instead?
Run the last sql and return not empty result set.



4. What version of TiDB are you using (`tidb-server -V` or run `select tidb_version();` on TiDB)?

TiDB : 2.1.15
mysql-connector-java : 5.1.34

I read the source code in mysql-connector-java( calss: com.mysql.jdbc.StatementImpl) and find mysql use LAST_INSERT_ID to be the generate key of the first insert in batch, and repeat incr connection.getAutoIncrementIncrement() to be the rest.
```java
protected ResultSetInternalMethods getGeneratedKeysInternal(int numKeys) throws SQLException {
        synchronized (checkClosed().getConnectionMutex()) {
            Field[] fields = new Field[1];
            fields[0] = new Field("", "GENERATED_KEY", Types.BIGINT, 17);
            fields[0].setConnection(this.connection);
            fields[0].setUseOldNameMetadata(true);

            ArrayList<ResultSetRow> rowSet = new ArrayList<ResultSetRow>();

            long beginAt = getLastInsertID();

            if (beginAt < 0) { // looking at an UNSIGNED BIGINT that has overflowed
                fields[0].setUnsigned();
            }

            if (this.results != null) {
                String serverInfo = this.results.getServerInfo();

                //
                // Only parse server info messages for 'REPLACE' queries
                //
                if ((numKeys > 0) && (this.results.getFirstCharOfQuery() == 'R') && (serverInfo != null) && (serverInfo.length() > 0)) {
                    numKeys = getRecordCountFromInfo(serverInfo);
                }

                if ((beginAt != 0 /* BIGINT UNSIGNED can wrap the protocol representation */) && (numKeys > 0)) {
                    for (int i = 0; i < numKeys; i++) {
                        byte[][] row = new byte[1][];
                        if (beginAt > 0) {
                            row[0] = StringUtils.getBytes(Long.toString(beginAt));
                        } else {
                            byte[] asBytes = new byte[8];
                            asBytes[7] = (byte) (beginAt & 0xff);
                            asBytes[6] = (byte) (beginAt >>> 8);
                            asBytes[5] = (byte) (beginAt >>> 16);
                            asBytes[4] = (byte) (beginAt >>> 24);
                            asBytes[3] = (byte) (beginAt >>> 32);
                            asBytes[2] = (byte) (beginAt >>> 40);
                            asBytes[1] = (byte) (beginAt >>> 48);
                            asBytes[0] = (byte) (beginAt >>> 56);

                            BigInteger val = new BigInteger(1, asBytes);

                            row[0] = val.toString().getBytes();
                        }
                        rowSet.add(new ByteArrayRow(row, getExceptionInterceptor()));
                        beginAt += this.connection.getAutoIncrementIncrement();
                    }
                }
            }

            com.mysql.jdbc.ResultSetImpl gkRs = com.mysql.jdbc.ResultSetImpl.getInstance(this.currentCatalog, fields, new RowDataStatic(rowSet),
                    this.connection, this, false);

            return gkRs;
        }
```
It works find in mysql because the auto-increment ID is allocated sequentially.
I assume this issue is caused by :
<a href="https://github.com/pingcap/docs/blob/master/v2.0/sql/mysql-compatibility.md">tidb not guaranteed to be allocated sequentially<a>


