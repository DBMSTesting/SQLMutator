ID: 56384
Title: Optimizer generates full table scan for composite key range queries instead of partial index scan
Description:
## Bug Report

Please answer these questions before submitting your issue. Thanks!

### 1. Minimal reproduce step (Required)
```sql
CREATE TABLE test
(
    a INT NOT NULL,
    b INT NOT NULL,
    c INT,
    PRIMARY KEY (a, b)
);

INSERT INTO test (a, b, c) VALUES (1, 1, 1), (1, 2, 2), (2, 1, 3), (2, 2, 4);

EXPLAIN
SELECT *
FROM test
WHERE (a, b)  <  (1, 2)
ORDER BY a DESC, b DESC;
```

You will get full scan
```
TableReader_14,6.40,root,"",data:Selection_13
└─Selection_13,6.40,cop[tikv],"","if(ne(test_db.test.a, 1), lt(test_db.test.a, 1), if(isnull(ne(test_db.test.a, 1)), NULL, lt(test_db.test.b, 2)))"
  └─TableFullScan_12,8.00,cop[tikv],table:test,"keep order:true, desc"
```

But it should translate to partial read of index skipping (1,2)

but for 
```sql
EXPLAIN
SELECT *
FROM test
WHERE (a, b)  =  (1, 2)
ORDER BY a DESC, b DESC;
```

optimizer generates point lookup which is correct
```
Point_Get_5,0.00,root,"table:test, clustered index:PRIMARY(a, b)",""
```

In the real world, it gives you the inability to use cursor/keyset pagination.

It's possible to mitigate using index equivalence, but it's a PITA 
```
EXPLAIN
SELECT *
FROM test
WHERE a < 1
   OR (a = 1 AND b < 2)
ORDER BY a DESC, b DESC;
```

```
TableReader_12,1.41,root,"",data:TableRangeScan_11
└─TableRangeScan_11,1.41,cop[tikv],table:test,"range:[-inf,1), [1 -inf,1 2), keep order:true, desc"
```

### 4. What is your TiDB version? (Required)

```
Release Version: v8.1.1
Edition: Community
Git Commit Hash: a7df4f9845d5d6a590c5d45dad0dcc9f21aa8765
Git Branch: HEAD
UTC Build Time: 2024-08-22 05:50:03
GoVersion: go1.21.13
Race Enabled: false
Check Table Before Drop: false
Store: tikv
```

