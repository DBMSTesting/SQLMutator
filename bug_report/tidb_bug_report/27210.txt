ID: 27210
Title: Setting the version for TiDB doesn't reflect on global vars
Description:
## Bug Report

Please answer these questions before submitting your issue. Thanks!

### 1. Minimal reproduce step (Required)

Start TiDB with this config:
```
server-version = "8.0.26-tidb-5.2"
```

### 2. What did you expect to see? (Required)

`SELECT VERSION()`, The server greeting packet in the MySQL Protocol and `SELECT @@version` all report the same version, the one that was set in the config


### 3. What did you see instead (Required)

`SELECT @@version` not returning the version that I set but instead return the default version

```
mysql> SELECT @@version, VERSION();
+-----------------------------------------+-----------------+
| @@version                               | VERSION()       |
+-----------------------------------------+-----------------+
| 5.7.25-TiDB-v5.2.0-alpha-597-g26237b35f | 8.0.26-tidb-5.2 |
+-----------------------------------------+-----------------+
1 row in set (0.00 sec)
```


### 4. What is your TiDB version? (Required)

```
Release Version: v5.2.0-alpha-597-g26237b35f
Edition: Community
Git Commit Hash: 26237b35f857c2388eab46f9ee3b351687143681
Git Branch: master
UTC Build Time: 2021-08-12 04:28:47
GoVersion: go1.16.4
Race Enabled: false
TiKV Min Version: v3.0.0-60965b006877ca7234adaced7890d7b029ed1306
Check Table Before Drop: false
```

This causes things like MySQL Workbench to not detect the version that I set:
![image](https://user-images.githubusercontent.com/1272980/129345724-fcdfc857-ce88-4b7d-b492-abc9b54bb8b0.png)

This amongst possible other things causes MySQL Workbench to say that the `WITH...` syntax or CTE's is not valid for this version. This also makes it more difficult to test the level of our MySQL 8.0 compatibility, so this is somewhat related to https://github.com/pingcap/tidb/issues/7968