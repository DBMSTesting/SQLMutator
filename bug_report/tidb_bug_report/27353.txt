ID: 27353
Title: goroutine/memory leak when streaming query been cancelled
Description:
## Bug Report

Please answer these questions before submitting your issue. Thanks!

### 1. Minimal reproduce step (Required)

1. prepare data

```sql
create table t (a int auto_increment,b int, c timestamp default current_timestamp(), d varchar(100) default 'abcdefghijklmnopqrstuvwxyz1234', index (a));
split table t between (0) and (100000) regions 100;
insert into t () values (),(),(),(),(),(),(),(),(),();
insert into t select * from t;
insert into t select * from t;
insert into t select * from t;
insert into t select * from t;
insert into t select * from t;
insert into t select * from t;
insert into t select * from t;
insert into t select * from t;
insert into t select * from t;
insert into t select * from t;
insert into t select * from t;
insert into t select * from t;
insert into t select * from t;
insert into t select * from t;
...
...
...
```

2. the TiDB config is :

```
mem-quota-query = 304800
```
```sql
 set @@tidb_enable_streaming=1;
-- make sure following query was failed cause by query memory execeed the `mem-quota-query`.
test> select t1.a,t2.b,t3.c from t t1 join t t2 join t t3 where t1.a = t2.a and t2.a=t3.a order by t1.c limit 10000,100;  
(1105, 'Out Of Memory Quota![conn_id=6]')
```

<!-- a step by step guide for reproducing the bug. -->

### 2. What did you expect to see? (Required)

No goroutine/memory leak.

### 3. What did you see instead (Required)

goroutine/memory leak.

```go
goroutine 15336 [select, 7 minutes]:
github.com/pingcap/tidb/store/copr.(*copIteratorWorker).sendToRespCh(0xc005b111a0, 0xc0003febe0, 0xc005b110e0, 0xc010756700, 0xc005b110e0)
	/Users/cs/code/goread/src/github.com/pingcap/tidb/store/copr/coprocessor.go:520 +0xba
github.com/pingcap/tidb/store/copr.(*copIteratorWorker).run(0xc005b111a0, 0x6e65d10, 0xc00cfe4060)
	/Users/cs/code/goread/src/github.com/pingcap/tidb/store/copr/coprocessor.go:382 +0x196
created by github.com/pingcap/tidb/store/copr.(*copIterator).open
	/Users/cs/code/goread/src/github.com/pingcap/tidb/store/copr/coprocessor.go:415 +0x9a



goroutine 15337 [semacquire, 7 minutes]:
sync.runtime_Semacquire(0xc0072ca128)
	/usr/local/go/src/runtime/sema.go:56 +0x45
sync.(*WaitGroup).Wait(0xc0072ca120)
	/usr/local/go/src/sync/waitgroup.go:130 +0x65
github.com/pingcap/tidb/store/copr.(*copIteratorTaskSender).run(0xc010756800)
	/Users/cs/code/goread/src/github.com/pingcap/tidb/store/copr/coprocessor.go:455 +0xc6
created by github.com/pingcap/tidb/store/copr.(*copIterator).open
	/Users/cs/code/goread/src/github.com/pingcap/tidb/store/copr/coprocessor.go:432 +0x365

```

### 4. What is your TiDB version? (Required)

<!-- Paste the output of SELECT tidb_version() -->


```sql
***************************[ 1. row ]***************************
tidb_version() | Release Version: v5.2.0-alpha-674-gaf66129b1-dirty
Edition: Community
Git Commit Hash: af66129b1e50c4d7bd25a6f83cbcee7390af156d
Git Branch: master
UTC Build Time: 2021-08-18 12:04:51
GoVersion: go1.16.6
Race Enabled: false
TiKV Min Version: v3.0.0-60965b006877ca7234adaced7890d7b029ed1306
Check Table Before Drop: false
```
