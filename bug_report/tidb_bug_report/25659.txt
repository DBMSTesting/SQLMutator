ID: 25659
Title: Frequently updating non-index column causing too many Lock records in the unique index key
Description:
## Bug Report

Please answer these questions before submitting your issue. Thanks!

### 1. Minimal reproduce step (Required)

This problem occurs if a table has:
* Never / rarely updated unique index
* Another column(s) that's frequently updated with point get in pessimistic transaction.

Example table definition: (without clustered index so that the primary key is a separated unique index)

```sql
create table t (id varchar(128), v int, primary key (id));
```

And there's frequent update operations like:

```sql
begin pessimistic;
update t set v = ? where id = ?;
commit;
```

### 2. What did you expect to see? (Required)

Everything goes well

### 3. What did you see instead (Required)

The performance decreases and it can be seen that `next` operation is very high some requests like `acquire_pessimistic_lock`  and `kv_get`.

Since this  locks the unique index key, it will produce a `WriteType::Lock` record in the write cf on the unique index key. When reading value on such a key, it will need to iterate over all these `Lock` records to find the latest `Put` or `Delete` record. Every time it iterates a Lock record, it performs a `next` operation. In some bad cases, reading each key may produce over 100k+ next operations.

### 4. What is your TiDB version? (Required)

4.0.10+, 5.x, master

