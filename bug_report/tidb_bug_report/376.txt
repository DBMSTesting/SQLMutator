ID: 376
Title: select in same SQL should use the unchanged data. 
Description:
```
drop table users, foobar, addresses;
CREATE TABLE users (
    id INTEGER NOT NULL AUTO_INCREMENT, 
    name VARCHAR(30) NOT NULL, 
    some_update VARCHAR(30), 
    PRIMARY KEY (id)
)ENGINE=MyISAM;

CREATE TABLE foobar (
    id INTEGER NOT NULL AUTO_INCREMENT, 
    user_id INTEGER, 
    data VARCHAR(30), 
    some_update VARCHAR(30), 
    PRIMARY KEY (id), 
    FOREIGN KEY(user_id) REFERENCES users (id)
)ENGINE=MyISAM;

CREATE TABLE addresses (
    id INTEGER NOT NULL AUTO_INCREMENT, 
    user_id INTEGER, 
    email_address VARCHAR(50) NOT NULL, 
    PRIMARY KEY (id), 
    FOREIGN KEY(user_id) REFERENCES users (id)
)ENGINE=MyISAM;
INSERT INTO users (id, name, some_update) VALUES 
(8, 'ed', 'value'),
(9, 'fred', 'value');
INSERT INTO addresses (id, user_id, email_address) VALUES 
(2, 8, 'ed@wood.com'),
(3, 8, 'ed@bettyboop.com'),
(4, 9, 'fred@fred.com');
INSERT INTO foobar (id, user_id, data) VALUES 
(2, 8, 'd1'),
(3, 8, 'd2'),
(4, 9, 'd3');
UPDATE addresses, users SET users.name='ed2', users.some_update='im the update', addresses.email_address=users.name WHERE users.id = addresses.user_id AND users.name = 'ed';
SELECT addresses.id, addresses.user_id, addresses.email_address FROM addresses ORDER BY addresses.id;
```

MySQL:

```
+----+---------+---------------+
| id | user_id | email_address |
+----+---------+---------------+
|  2 |       8 | ed            |
|  3 |       8 | ed            |
|  4 |       9 | fred@fred.com |
+----+---------+---------------+
```

Interpreter:

```
+----+---------+------------------+
| id | user_id | email_address    |
+----+---------+------------------+
| 2  | 8       | ed               |
| 3  | 8       | ed@bettyboop.com |
| 4  | 9       | fred@fred.com    |
+----+---------+------------------+
```

The update query `UPDATE addresses, users SET users.name='ed2', users.some_update='im the update', addresses.email_address=users.name WHERE users.id = addresses.user_id AND users.name = 'ed';` causes the problem. 

When we get a row from join, we will update the row data, so that we can get the new changed data from next get from join. 

The whole flow looks below:

```
for reading one row in left table:
    for reading one row in right table:
           // do update so that we can get the modified data later if we get the next row in left table.  
```
