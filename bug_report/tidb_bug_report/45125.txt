ID: 45125
Title: Implement a fast row container reader to dump rows from disk
Description:
## Enhancement

The current implementation of reading rows from `RowContainer` is not fast enough. The following function is used to dump a chunk:

```
// GetRowAndAppendToChunk gets a Row from the ListInDisk by RowPtr. Return the Row and the Ref Chunk.
func (l *ListInDisk) GetRowAndAppendToChunk(ptr RowPtr, chk *Chunk) (row Row, _ *Chunk, err error) {
	off, err := l.getOffset(ptr.ChkIdx, ptr.RowIdx)
	if err != nil {
		return
	}
	r := l.dataFile.getSectionReader(off)
	format := rowInDisk{numCol: len(l.fieldTypes)}
	_, err = format.ReadFrom(r)
	if err != nil {
		return row, nil, err
	}
	row, chk = format.toRow(l.fieldTypes, chk)
	return row, chk, err
}
```

It would be better to pipeline the `format.ReadFrom` (which is blocked by disk) and the `format.toRow` (which is blocked by CPU). 

Also, with the assumption that a whole chunk is stored together tightly, we can get the first row offset and use it for the whole chunk. 