ID: 6109
Title: MySQL JDBC connections severed, single tidb node.
Description:
**1. What did you do?**

We are trialling our application on TiDB. It is java application with a relational repository that we run transactions against.
The application uses a JDBC connection pool and runs very generic SQL against the repository database (as we support other RDBMs as well). Connections from the pool are held open, and reused by different parts of the code. The connections are closed and recreated every hour or so.

In this case we are running the application on the same physical server as a single node TiDB instance.
When running our application these connections are severed randomly. We see these errors in our application:

```
YF:2018-03-20 10:37:23:ERROR (DBAction:error) - Error occured selecting data: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure
 	The last packet successfully received from the server was 1 milliseconds ago.  The last packet sent successfully to the server was 1 milliseconds ago.
 	com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure
 	
 	The last packet successfully received from the server was 1 milliseconds ago.  The last packet sent successfully to the server was 1 milliseconds ago.
 		at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
 		at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
 		at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
 		at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
 		at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
 		at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1121)
 		at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3670)
 		at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3559)
 		at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:4110)
 		at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2570)
 		at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2731)
```


Our Java application is the only application connecting to TiDB.. However, the pool does open multiple connections to the TiDB for concurrent actions.


**2. What did you expect to see?**

Transactional Integrity and no disconnected connections.

**3. What did you see instead?**

The dropped JDBC connections seem to correlate with transaction conflicts in the TiDB logs..

`2018/03/21 12:50:00.049 session.go:340: [warning] [168] retryable error: [try again later]: tikv restarts txn: Txn(Mvcc(WriteConflict { start_ts: 398887865493487617, conflict_ts: 398887904867516422, key: [116, 128, 0, 0, 0, 0, 0, 1, 255, 219, 95, 114, 128, 0, 0, 0, 0, 255, 0, 0, 8, 0, 0, 0, 0, 0, 250], primary: [116, 128, 0, 0, 0, 0, 0, 1, 219, 95, 114, 128, 0, 0, 0, 0, 0, 0, 8] })), txn: {<nil> <nil> 0xc423463b40 map[] [] <nil>}`


Does this error drop JDBC connections?
Does the "Try Again Later" message mean that the application is supposed to reattempt the transaction? Or does TiDB reattempt to run this transaction itself?

(Our legacy application can not be modified to reattempt failed transactions... this is why TiDB was chosen as a possible candidate as we assumed a similar transaction experience to MySQL) 


**4. What version of TiDB are you using (`tidb-server -V` or run `select tidb_version();` on TiDB)?**

Binary install on physical hardware.

Release Version:  v2.0.0-rc.1-66-gdaa866c
Git Commit Hash:  daa866cdd48e4c0f0d1969bc9238e727a87c6813
Git Commit Branch:  master
UTC Build Time:  2018-03-18 01:11:47
GoVersion:  go version go1.10 linux/amd64
TiKV Min Version:  1.1.0-dev.2