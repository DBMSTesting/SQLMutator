ID: 53357
Title: client TLS should not set `InsecureSkipVerify` if need to verify Common Name
Description:
in https://github.com/pingcap/tidb/pull/37479/files#r962687063 I always set `InsecureSkipVerify` and think as the comment of `InsecureSkipVerify` said, our `VerifyPeerCertificate` is enough. 

> 	// InsecureSkipVerify controls whether a client verifies the server's
	// certificate chain and host name. If InsecureSkipVerify is true, crypto/tls
	// accepts any certificate presented by the server and any host name in that
	// certificate. In this mode, TLS is susceptible to machine-in-the-middle
	// attacks unless custom verification is used. This should be used only for
	// testing or in combination with VerifyConnection or VerifyPeerCertificate.
	InsecureSkipVerify bool

However, the comment of `VerifyPeerCertificate` said

> 	// VerifyPeerCertificate, if not nil, is called after normal
	// certificate verification by either a TLS client or server. It
	// receives the raw ASN.1 certificates provided by the peer and also
	// any verified chains that normal processing found. If it returns a
	// non-nil error, the handshake is aborted and that error results.
	//
	// If normal verification fails then the handshake will abort before
	// considering this callback. If normal verification is disabled (on the
	// client when InsecureSkipVerify is set, or on a server when ClientAuth is
	// RequestClientCert or RequireAnyClientCert), then this callback will be
	// considered but the verifiedChains argument will always be nil. When
	// ClientAuth is NoClientCert, this callback is not called on the server.
	// rawCerts may be empty on the server if ClientAuth is RequestClientCert or
	// VerifyClientCertIfGiven.
	//
	// This callback is not invoked on resumed connections, as certificates are
	// not re-verified on resumption.
	//
	// verifiedChains and its contents should not be modified.
	VerifyPeerCertificate func(rawCerts [][]byte, verifiedChains [][]*x509.Certificate) error

For the client, if our verify functions need to read `verifiedChains`, `InsecureSkipVerify` should be false. We only have `WithVerifyCommonName` needs to read `verifiedChains`, and tidb repo does not use this function, so the issue is not found before. And I found this issue when porting `WithVerifyCommonName` to tiflow repo.

