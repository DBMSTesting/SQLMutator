ID: 46264
Title: Can't parse mysql function which has schema as prefix
Description:
Can't parse follow MySQL statement:


select test.f_checkholiday("hk") from test.test


it throws:  parse error: line 1 column 27 near "("hk") from test.test" 

but ok for "select f_checkholiday("hk") from test.test"


test code as follow:


`package main

import (
        "github.com/pingcap/parser"
        "github.com/pingcap/parser/ast"
        _ "github.com/pingcap/parser/test_driver"
)




import (
        "os"
        "fmt"
)


var db string


type tableX struct{
        tableNames []string
}


func (v *tableX) Enter(in ast.Node) (ast.Node, bool) {
        if name, ok := in.(*ast.TableName); ok {
                        if len(name.Schema.O) > 0  {
                                v.tableNames = append(v.tableNames, name.Schema.O + "." + name.Name.O)
                         }
                        if len(name.Schema.O) == 0  {
                                v.tableNames = append(v.tableNames, db + "." + name.Name.O)
                         }
        }
        return in, false
}

func (v *tableX) Leave(in ast.Node) (ast.Node, bool) {
        return in, true
}


func extract(rootNode *ast.StmtNode) []string {
        v := &tableX{}
        (*rootNode).Accept(v)
        return v.tableNames
}




func parse(sql string) (*ast.StmtNode, error) {
        p := parser.New()

        stmtNodes, _, err := p.Parse(sql, "", "")
        if err != nil {
                return nil, err
        }

        return &stmtNodes[0], nil
}





func main() {
        if len(os.Args) != 3 {
                fmt.Println("usage: tables 'SQL statement' 'schema' ")
                return
        }
        sql := os.Args[1]

        db  = os.Args[2]
        astNode, err := parse(sql)
        if err != nil {
                fmt.Printf("parse error: %v\n", err.Error())
                os.Exit(2)
        }
        fmt.Printf("%v\n", extract(astNode))
}

`







