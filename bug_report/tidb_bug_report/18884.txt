ID: 18884
Title: Unexpectedly, Distinct cannot be pushed across Projection when read partition table
Description:
## Description
## Bug Report

Please answer these questions before submitting your issue. Thanks!

### 1. Minimal reproduce step (Required)

<!-- a step by step guide for reproducing the bug. -->
```mysql
CREATE TABLE `tp` (
  `timestamp` timestamp NULL DEFAULT NULL,
  KEY `idx_timestamp` (`timestamp`)
) PARTITION BY RANGE ( UNIX_TIMESTAMP(`timestamp`) ) (
  PARTITION `p2020072312` VALUES LESS THAN (1595480400),
  PARTITION `p2020072313` VALUES LESS THAN (1595484000));
```

### 2. What did you expect to see? (Required)

```mysql
mysql> desc select  DATE_FORMAT(timestamp, '%Y-%m-%d %H') as tt from tp group by tt;
+------------------------------------+----------+-----------+---------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| id                                 | estRows  | task      | access object                   | operator info                                                                                                                     |
+------------------------------------+----------+-----------+---------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| Projection_10                      | 16000.00 | root      |                                 | date_format(test.tp.timestamp, %Y-%m-%d %H)->Column#3                                                                             |
| └─HashAgg_13                       | 16000.00 | root      |                                 | group by:Column#5, funcs:firstrow(Column#6)->test.tp.timestamp                                                                    |
|   └─PartitionUnion_14              | 16000.00 | root      |                                 |                                                                                                                                   |
|     ├─HashAgg_17                   | 8000.00  | root      |                                 | group by:Column#15, funcs:firstrow(Column#13)->Column#6, funcs:firstrow(Column#14)->Column#5                                      |
|     │ └─Projection_37              | 10000.00 | root      |                                 | test.tp.timestamp, date_format(test.tp.timestamp, %Y-%m-%d %H)->Column#14, date_format(test.tp.timestamp, %Y-%m-%d %H)->Column#15 |
|     │   └─TableReader_23           | 10000.00 | root      |                                 | data:TableFullScan_22                                                                                                             |
|     │     └─TableFullScan_22       | 10000.00 | cop[tikv] | table:tp, partition:p2020072312 | keep order:false, stats:pseudo                                                                                                    |
|     └─HashAgg_28                   | 8000.00  | root      |                                 | group by:Column#18, funcs:firstrow(Column#16)->Column#6, funcs:firstrow(Column#17)->Column#5                                      |
|       └─Projection_38              | 10000.00 | root      |                                 | test.tp.timestamp, date_format(test.tp.timestamp, %Y-%m-%d %H)->Column#17, date_format(test.tp.timestamp, %Y-%m-%d %H)->Column#18 |
|         └─TableReader_34           | 10000.00 | root      |                                 | data:TableFullScan_33                                                                                                             |
|           └─TableFullScan_33       | 10000.00 | cop[tikv] | table:tp, partition:p2020072313 | keep order:false, stats:pseudo                                                                                                    |
+------------------------------------+----------+-----------+---------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
11 rows in set (0.01 sec)
```

### 3. What did you see instead (Required)

```mysql
mysql> desc select distinct DATE_FORMAT(timestamp, '%Y-%m-%d %H') as tt from tp ;
+--------------------------------+----------+-----------+---------------------------------+-------------------------------------------------------+
| id                             | estRows  | task      | access object                   | operator info                                         |
+--------------------------------+----------+-----------+---------------------------------+-------------------------------------------------------+
| HashAgg_9                      | 16000.00 | root      |                                 | group by:Column#3, funcs:firstrow(Column#3)->Column#3 |
| └─Projection_10                | 20000.00 | root      |                                 | date_format(test.tp.timestamp, %Y-%m-%d %H)->Column#3 |
|   └─PartitionUnion_11          | 20000.00 | root      |                                 |                                                       |
|     ├─TableReader_13           | 10000.00 | root      |                                 | data:TableFullScan_12                                 |
|     │ └─TableFullScan_12       | 10000.00 | cop[tikv] | table:tp, partition:p2020072312 | keep order:false, stats:pseudo                        |
|     └─TableReader_17           | 10000.00 | root      |                                 | data:TableFullScan_16                                 |
|       └─TableFullScan_16       | 10000.00 | cop[tikv] | table:tp, partition:p2020072313 | keep order:false, stats:pseudo                        |
+--------------------------------+----------+-----------+---------------------------------+-------------------------------------------------------+
7 rows in set (0.00 sec)
```

### 4. Affected version (Required)

<!-- v3.0.0, v4.0.0, etc -->

### 5. Root Cause Analysis

<!-- should be filled by the investigator before it's closed -->

## SIG slack channel

 [#sig-planner](https://slack.tidb.io/invite?team=tidb-community&channel=sig-planner&ref=high-performance)

## Score

- 900

## Mentor

* @lzmhhh123
