ID: 11539
Title: Bug in the sample.go when implement the reservoir alg
Description:
## Bug Report

Please answer these questions before submitting your issue. Thanks!

1. What did you do?
If possible, provide a recipe for reproducing the error.
I'm looking into the [cn doc](https://pingcap.com/blog-cn/tidb-source-code-reading-12/), it implements the reservoir algorithm. but it seems it's not working on edge case.
See below code of sample.go[https://github.com/pingcap/tidb/blob/master/statistics/sample.go]:
```
		shouldAdd := rand.Int63n(c.seenValues) < c.MaxSampleSize
		if shouldAdd {
			idx := rand.Intn(int(c.MaxSampleSize))
			newItem := &SampleItem{Value: types.CloneDatum(d)}
			// To keep the order of the elements, we use delete and append, not direct replacement.
			c.Samples = append(c.Samples[:idx], c.Samples[idx+1:]...)
			c.Samples = append(c.Samples, newItem)
		}
```

2. What did you expect to see?
the collection c.Samples should not exceed the maxSize.
but it will fail when  the rand.int got the idx = c.MaxSampleSize -1.

3. What did you see instead?
I write a similar code (max sample is 3) and the idx is 2.
```
	// [0, 3) -> let's take 2
	idx := 2
	list := make([]string, 3)
	list = append(list, "0")
	list = append(list, "1")
	list = append(list, "2")
	sample := append(list[:idx], list[idx+1:]...)
	fmt.Println("before append", sample)
	sample = append(sample, "New")
	fmt.Println("after append", sample)
```
the output is:
```
before append [  0 1 2]
after append [  0 1 2 New]

```

4. What version of TiDB are you using (`tidb-server -V` or run `select tidb_version();` on TiDB)?
```
Release Version: v3.0.0-rc.1-405-g7093615
Git Commit Hash: 7093615e836ffbad1dd1d041fb44197d73bbefd7
Git Branch: addocetlength
UTC Build Time: 2019-07-26 02:51:49
GoVersion: go version go1.12.7 darwin/amd64
Race Enabled: false
TiKV Min Version: 2.1.0-alpha.1-ff3dd160846b7d1aed9079c389fc188f7f5ea13e
Check Table Before Drop: false

```
