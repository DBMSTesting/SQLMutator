ID: 55980
Title: InRestrictedSQL is used incorrectly in CloseRecordSet
Description:
## Bug Report

Please answer these questions before submitting your issue. Thanks!

### 1. Minimal reproduce step (Required)

<!-- a step by step guide for reproducing the bug. -->
``` 
func (s *session) ExecuteInternal(ctx context.Context, sql string, args ...any) (rs sqlexec.RecordSet, err error) {
	origin := s.sessionVars.InRestrictedSQL
	s.sessionVars.InRestrictedSQL = true
	defer func() {
		s.sessionVars.InRestrictedSQL = origin
		// Restore the goroutine label by using the original ctx after execution is finished.
		pprof.SetGoroutineLabels(ctx)
	}()
```
InRestrictedSQL is reset to false after finishing execute.
And InRestrictedSQL is always false in CloseRecordSet.
So the usages in CloseRecordSet is incorrect, such as:
``` 
func (a *ExecStmt) logAudit() {
	sessVars := a.Ctx.GetSessionVars()
	if sessVars.InRestrictedSQL {
		return
	}
```
### 2. What did you expect to see? (Required)
N/A
### 3. What did you see instead (Required)
N/A
### 4. What is your TiDB version? (Required)
master
<!-- Paste the output of SELECT tidb_version() -->

