ID: 57893
Title: Can partition a table without its unique keys, leading to duplicate primary keys
Description:
## Bug Report

Please answer these questions before submitting your issue. Thanks!

### 1. Minimal reproduce step (Required)
When using PARTITION BY, it allows partitioning on a columns that is not includind in the primary key, leading to not enforcing primary key uniqueness between partitions.
<!-- a step by step guide for reproducing the bug. -->
```mysql
CREATE TABLE t (
a varchar(50) NOT NULL,
b varchar(50) NOT NULL,
c int,
PRIMARY KEY (a,b));

ALTER TABLE t
PARTITION BY RANGE (c) (
PARTITION p0 VALUES LESS THAN (1000000),
PARTITION p1 VALUES LESS THAN (maxvalue));

-- while this fails:
CREATE TABLE t2 (
a varchar(50) NOT NULL,
b varchar(50) NOT NULL,
c int,
PRIMARY KEY (a,b))
PARTITION BY RANGE (c) (
PARTITION p0 VALUES LESS THAN (1000000),
PARTITION p1 VALUES LESS THAN (maxvalue));
-- ERROR 1503 (HY000): A CLUSTERED INDEX must include all columns in the table's partitioning function

-- Which leads to allowing duplicate primary keys:
INSERT INTO t VALUES ('a','a',1), ('a','a',1000000);
SELECT * FROM t;
```
### 2. What did you expect to see? (Required)
ALTER TABLE t PARTITION BY RANGE (c) ... failing

### 3. What did you see instead (Required)
It succeeded, leading to allowing duplicate keys!
```mysql
tidb> CREATE TABLE t (
    -> a varchar(50) NOT NULL,
    -> b varchar(50) NOT NULL,
    -> c int,
    -> PRIMARY KEY (a,b));
Query OK, 0 rows affected (0.08 sec)

tidb> ALTER TABLE t
    -> PARTITION BY RANGE (c) (
    -> PARTITION p0 VALUES LESS THAN (1000000),
    -> PARTITION p1 VALUES LESS THAN (maxvalue));
Query OK, 0 rows affected, 1 warning (1.06 sec)

tidb> CREATE TABLE t2 (
    -> a varchar(50) NOT NULL,
    -> b varchar(50) NOT NULL,
    -> c int,
    -> PRIMARY KEY (a,b))
    -> PARTITION BY RANGE (c) (
    -> PARTITION p0 VALUES LESS THAN (1000000),
    -> PARTITION p1 VALUES LESS THAN (maxvalue));
ERROR 1503 (HY000): A CLUSTERED INDEX must include all columns in the table's partitioning function

tidb> -- Which leads to allowing duplicate primary keys:
Query OK, 0 rows affected, 1 warning (0.00 sec)

tidb> INSERT INTO t VALUES ('a','a',1), ('a','a',1000000);
Query OK, 2 rows affected (0.00 sec)
Records: 2  Duplicates: 0  Warnings: 0

tidb> SELECT * FROM t;
+---+---+---------+
| a | b | c       |
+---+---+---------+
| a | a |       1 |
| a | a | 1000000 |
+---+---+---------+
2 rows in set, 1 warning (0.01 sec)
```

### 4. What is your TiDB version? (Required)

<!-- Paste the output of SELECT tidb_version() -->

