ID: 8787
Title: potential goroutine leak on parallel hash aggregate
Description:
```go
196 // Close implements the Executor Close interface.
197 func (e *HashAggExec) Close() error {
198     if e.isUnparallelExec {
199         e.childResult = nil
200         e.groupSet = nil
201         e.partialResultMap = nil
202         return nil
203     }
204     // `Close` may be called after `Open` without calling `Next` in test.
205     if !e.prepared {
206         close(e.inputCh)
207         for _, ch := range e.partialOutputChs {
208             close(ch)
209         }
210         close(e.finalOutputCh)
211     }
212     close(e.finishCh)
213     for _, ch := range e.partialOutputChs {
214         for range ch {
215         }
216     }
217     for range e.finalOutputCh {
218     }
219     return errors.Trace(e.baseExecutor.Close())
220 }
```

at line 202, we should call `child.Close()` before `return` to avoid goroutine leak.