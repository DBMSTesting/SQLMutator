ID: 16985
Title: I think the `DecodeInt` function in the *util/codec/number.go* may not works as it was expected
Description:
## Bug Report

Please answer these questions before submitting your issue. Thanks!

### 1. What did you do?

I used the function in talent-plan path1 project1 to decode the number which was encoded before. However, I can not get the number I want.

### 2. What did you expect to see?

Here is a simple example

```golang
buf := make([]byte, 4)
buf = codec.EncodeInt(buf, 20)
buf, num, err := codec.DecodeInt(buf)
fmt.Println(buf, num, err)
```

I think the num I get are supposed to be `20`, and the buf should be 4 bytes and totally empty.

### 3. What did you see instead?

I actually get num = -9223372034707292160

First, I think the `DecodeCmpUintToInt` function is not right. It may need to be 

```golang
func DecodeCmpUintToInt (u uint64) int64 {
	return int64(u & ~signMask)
}
```

Also,  I think the slice we get in the `DecodeInt` function should be the last 8 bytes, not the highest 8 bytes.

```golang
func DecodeInt(b []byte) ([]byte, int64, error) {
	if len(b) < 8 {
		return nil, 0, errors.New("insufficient bytes to decode value")
	}

	u := binary.BigEndian.Uint64(b[len(b) - 8:])
	v := DecodeCmpUintToInt(u)
	b = b[:len(b)-8]
	return b, v, nil
}
```

Cause I'm totally new to golang and the talent-plan, if I misunderstood the usage of the function, I'm sorry for wasting your time. Looking forward to your replay.