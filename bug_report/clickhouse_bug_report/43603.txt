ID: 43603
Title: Exception: Illegal column ColumnLowCardinality of first argument of function if
Description:
The `if` function fails under certain conditions. Link to reproducer: https://fiddle.clickhouse.com/597dc754-84bc-4a52-bd48-89229c00ab8b

Fails since `v22.3.8`

**How to reproduce**

1. Run clickhouse v22.10 using default settings.
1. Run queries:
  ```
  create table if not exists t (`arr.key` Array(LowCardinality(String)), `arr.value` Array(LowCardinality(String))) engine = Memory;
  insert into t (`arr.key`, `arr.value`) values (['a'], ['b']);
  select if(true, if(lowerUTF8(joined.key) = 'a', 1, 2), 3) from t left array join arr AS joined format Vertical;
  ```

**Expected behavior**

The `select` query should not fail and should return:
```
Row 1:
──────
if(true, if(equals(lowerUTF8(joined.key), 'a'), 1, 2), 3): 1
```

**Actual result**

The `select` query fails. The error message:
```
Code: 44. DB::Exception: Illegal column ColumnLowCardinality of first argument of function if. Must be ColumnUInt8 or ColumnConstUInt8.: while executing 'FUNCTION if(true :: 1, if(equals(lowerUTF8(joined.key), 'a'), 1, 2) :: 2, 3 :: 5) -> if(true, if(equals(lowerUTF8(joined.key), 'a'), 1, 2), 3) LowCardinality(UInt8) : 4'. (ILLEGAL_COLUMN) (version 22.10.2.11 (official build))
```
The stacktrace:
```
DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool)
DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const
DB::IExecutableFunction::executeWithoutSparseColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const
DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const
DB::ColumnFunction::reduce() const
DB::executeColumnIfNeeded(DB::ColumnWithTypeAndName&, bool)
DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const
DB::IExecutableFunction::executeWithoutSparseColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const
DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const
DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool) const
DB::ExpressionTransform::transform(DB::Chunk&)
DB::ISimpleTransform::work()
DB::ExecutionThreadContext::executeTask()
DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*)
DB::PipelineExecutor::executeImpl(unsigned long)
DB::PipelineExecutor::execute(unsigned long)
DB::CompletedPipelineExecutor::execute()
DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::__1::shared_ptr<DB::Context>, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>, std::__1::optional<DB::FormatSettings> const&)
DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::__1::optional<DB::CurrentThread::QueryScope>&)
DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&)
DB::HTTPServerConnection::run()
Poco::Net::TCPServerConnection::start()
Poco::Net::TCPServerDispatcher::run()
Poco::PooledThread::run()
Poco::ThreadImpl::runnableEntry(void*)
```