ID: 6284
Title: Failure using `join_use_nulls` on non-Nullable types
Description:
**Describe the bug**
When using the `join_use_nulls` setting as enabled while joining with a `FULL`, `LEFT`, or `RIGHT` on two subqueries containing `Array` columns with unmatched rows, the server responds with an exception code 43:

```
Received exception from server (version 19.11.3):
Code: 43. DB::Exception: Received from localhost:9000. DB::Exception: Nested type Array(String) cannot be inside Nullable type.
```

The team appears to have partially addressed this `Nullable` type issue while joining `Array` columns with #5620 and #5700, but the fix does not seem to work when the output includes one of those columns on an unmatched row.

**How to reproduce**
Using either the CLI or the HTTP interface on version `19.11.3.11`, I am able to reproduce the issue using the following query on `system.numbers`:

```sql
SELECT *
FROM
(
    SELECT
        number,
        ['left'],
        number AS left_number
    FROM system.numbers
    LIMIT 10
)
FULL OUTER JOIN
(
    SELECT
        number,
        ['right'],
        number AS right_number
    FROM system.numbers
    LIMIT 5, 10
) USING (number)
ORDER BY number ASC
SETTINGS join_use_nulls = 1
```

**Expected output**
Based on my reading of this setting, I would expect the server to attempt to wrap all columns in `Nullable` but return the defaults for those which that type does not support such nesting:
```
┌─number─┬─['left']─┬─left_number─┬─['right']─┬─right_number─┐
│      0 │ ['left'] │           0 │ []        │         ᴺᵁᴸᴸ │
│      1 │ ['left'] │           1 │ []        │         ᴺᵁᴸᴸ │
│      2 │ ['left'] │           2 │ []        │         ᴺᵁᴸᴸ │
│      3 │ ['left'] │           3 │ []        │         ᴺᵁᴸᴸ │
│      4 │ ['left'] │           4 │ []        │         ᴺᵁᴸᴸ │
│      5 │ ['left'] │           5 │ ['right'] │            5 │
│      6 │ ['left'] │           6 │ ['right'] │            6 │
│      7 │ ['left'] │           7 │ ['right'] │            7 │
│      8 │ ['left'] │           8 │ ['right'] │            8 │
│      9 │ ['left'] │           9 │ ['right'] │            9 │
│     10 │ []       │        ᴺᵁᴸᴸ │ ['right'] │           10 │
│     11 │ []       │        ᴺᵁᴸᴸ │ ['right'] │           11 │
│     12 │ []       │        ᴺᵁᴸᴸ │ ['right'] │           12 │
│     13 │ []       │        ᴺᵁᴸᴸ │ ['right'] │           13 │
│     14 │ []       │        ᴺᵁᴸᴸ │ ['right'] │           14 │
└────────┴──────────┴─────────────┴───────────┴──────────────┘
```

**Additional context**
Here is the query with `join_use_nulls` disabled:

```sql
SELECT *
FROM
(
    SELECT
        number,
        ['left'],
        number AS left_number
    FROM system.numbers
    LIMIT 10
)
FULL OUTER JOIN
(
    SELECT
        number,
        ['right'],
        number AS right_number
    FROM system.numbers
    LIMIT 5, 10
) USING (number)
ORDER BY number ASC
SETTINGS join_use_nulls = 0
```

And its result, which matches the expectation of using defaults for unmatched cells:

```
┌─number─┬─['left']─┬─left_number─┬─['right']─┬─right_number─┐
│      0 │ ['left'] │           0 │ []        │            0 │
│      1 │ ['left'] │           1 │ []        │            0 │
│      2 │ ['left'] │           2 │ []        │            0 │
│      3 │ ['left'] │           3 │ []        │            0 │
│      4 │ ['left'] │           4 │ []        │            0 │
│      5 │ ['left'] │           5 │ ['right'] │            5 │
│      6 │ ['left'] │           6 │ ['right'] │            6 │
│      7 │ ['left'] │           7 │ ['right'] │            7 │
│      8 │ ['left'] │           8 │ ['right'] │            8 │
│      9 │ ['left'] │           9 │ ['right'] │            9 │
│     10 │ []       │           0 │ ['right'] │           10 │
│     11 │ []       │           0 │ ['right'] │           11 │
│     12 │ []       │           0 │ ['right'] │           12 │
│     13 │ []       │           0 │ ['right'] │           13 │
│     14 │ []       │           0 │ ['right'] │           14 │
└────────┴──────────┴─────────────┴───────────┴──────────────┘
```