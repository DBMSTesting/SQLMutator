ID: 71274
Title: StorageObjectStorage and format inference: server fails to start if the blob doesn't exist
Description:
Create an S3 table with format inference, remove the blob, restart the server:

```
2024.10.30 09:44:37.973167 [ 84 ] {} <Error> Application: Code: 722. DB::Exception: Waited job failed: Code: 695. DB::Exception: Load job 'load table tmp_s3.s3_tmp' failed: Code: 499. DB::Exception: Failed to get object info: No response body.. HTTP response code: 404: while reading removed/blob/123: The data format cannot be detected by the contents of the files. You can specify the format manually: Cannot attach table `tmp_s3`.`s3_tmp` from metadata file /var/lib/clickhouse/store/bc3/bc31b0d3-2628-4380-9f53-a483c2370976/s3_tmp.sql from query ATTACH TABLE tmp_s3.s3_tmp UUID '7cc63df0-777c-48c3-b62d-e9127d343dc3' (column String) ENGINE = S3('s3://removed/blob/123') SETTINGS input_format_with_names_use_header = 0. (S3_ERROR), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000c489668
1. DB::S3Exception::S3Exception<String const&, unsigned long>(Aws::S3::S3Errors, fmt::v9::basic_format_string<char, fmt::v9::type_identity<String const&>::type, fmt::v9::type_identity<unsigned long>::type>, String const&, unsigned long&&) @ 0x000000000f144098
2. DB::S3::getObjectInfo(DB::S3::Client const&, String const&, String const&, String const&, bool, bool) @ 0x000000000f1442b4
3. DB::S3ObjectStorage::getObjectMetadata(String const&) const @ 0x000000000f13b1b8
4. DB::StorageObjectStorageSource::KeysIterator::nextImpl(unsigned long) @ 0x000000000f0a5ef0
5. DB::StorageObjectStorageSource::IIterator::next(unsigned long) @ 0x000000000f0a3b48
6. DB::ReadBufferIterator::next() @ 0x000000000f0989a4
7. DB::readSchemaFromFormatImpl(std::optional<String>, std::optional<DB::FormatSettings> const&, DB::IReadBufferIterator&, std::shared_ptr<DB::Context const> const&) @ 0x00000000116cae54
8. DB::StorageObjectStorage::resolveFormatFromData(std::shared_ptr<DB::IObjectStorage> const&, std::shared_ptr<DB::StorageObjectStorage::Configuration> const&, std::optional<DB::FormatSettings> const&, std::shared_ptr<DB::Context const> const&) @ 0x000000000f094460
9. DB::resolveSchemaAndFormat(DB::ColumnsDescription&, String&, std::shared_ptr<DB::IObjectStorage>, std::shared_ptr<DB::StorageObjectStorage::Configuration> const&, std::optional<DB::FormatSettings>, std::shared_ptr<DB::Context const> const&) @ 0x000000000f0b7b04
10. DB::StorageObjectStorage::StorageObjectStorage(std::shared_ptr<DB::StorageObjectStorage::Configuration>, std::shared_ptr<DB::IObjectStorage>, std::shared_ptr<DB::Context const>, DB::StorageID const&, DB::ColumnsDescription const&, DB::ConstraintsDescription const&, String const&, std::optional<DB::FormatSettings>, bool, std::shared_ptr<DB::IAST>) @ 0x000000000f090ed8
11. DB::createStorageObjectStorage(DB::StorageFactory::Arguments const&, std::shared_ptr<DB::StorageObjectStorage::Configuration>, std::shared_ptr<DB::Context const>) @ 0x0000000010f8c244
12. std::shared_ptr<DB::IStorage> std::__function::__policy_invoker<std::shared_ptr<DB::IStorage> (DB::StorageFactory::Arguments const&)>::__call_impl<std::__function::__default_alloc_func<DB::registerStorageS3Impl(String const&, DB::StorageFactory&)::$_0, std::shared_ptr<DB::IStorage> (DB::StorageFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::StorageFactory::Arguments const&) (.llvm.7730970009616707843) @ 0x0000000010f8c7f4
13. DB::StorageFactory::get(DB::ASTCreateQuery const&, String const&, std::shared_ptr<DB::Context>, std::shared_ptr<DB::Context>, DB::ColumnsDescription const&, DB::ConstraintsDescription const&, DB::LoadingStrictnessLevel) const @ 0x0000000010aa83c0
14. DB::createTableFromAST(DB::ASTCreateQuery, String const&, String const&, std::shared_ptr<DB::Context>, DB::LoadingStrictnessLevel) @ 0x000000000f857648
15. DB::DatabaseOrdinary::loadTableFromMetadata(std::shared_ptr<DB::Context>, String const&, DB::QualifiedTableName const&, std::shared_ptr<DB::IAST> const&, DB::LoadingStrictnessLevel) @ 0x000000000f877354
16. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::AsyncLoader::spawn(DB::AsyncLoader::Pool&, std::unique_lock<std::mutex>&)::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x000000000c66caf4
17. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::worker(std::__list_iterator<ThreadFromGlobalPoolImpl<false, true>, void*>) @ 0x000000000c52e264
18. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000c531dd0
19. void* std::__thread_proxy[abi:v15000]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000c530a80
20. ? @ 0x000000000007d5c8
21. ? @ 0x00000000000e5edc
 (version 24.6.1.4609 (official build)). (ASYNC_LOAD_FAILED) (version 24.6.1.4609 (official build)). (ASYNC_LOAD_WAIT_FAILED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000c489668
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000007c8361c
2. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x0000000007c831f8
3. DB::AsyncLoader::wait(std::shared_ptr<DB::LoadJob> const&, bool) @ 0x000000000c6676a4
4. DB::waitLoad(unsigned long, std::vector<std::shared_ptr<DB::LoadTask>, std::allocator<std::shared_ptr<DB::LoadTask>>> const&, bool) @ 0x000000000c6266cc
5. DB::loadMetadata(std::shared_ptr<DB::Context>, String const&, bool) @ 0x00000000106b9fa4
6. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000c61b524
7. Poco::Util::Application::run() @ 0x0000000013a01e7c
8. DB::Server::run() @ 0x000000000c60bf80
9. Poco::Util::ServerApplication::run(int, char**) @ 0x0000000013a0b118
10. mainEntryClickHouseServer(int, char**) @ 0x000000000c609598
11. main @ 0x0000000007c7fea0
12. ? @ 0x00000000000273fc
13. ? @ 0x00000000000274cc
 (version 24.6.1.4609 (official build))
```