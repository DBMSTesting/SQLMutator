ID: 75028
Title: Logical error: 'Cannot calculate columns sizes when columns or checksums are not initialized'
Description:
### Describe the bug

This error is reproduced on a table with a suspicious TTL value and a DEFAULT value inside an INSERT.

### How to reproduce

Run with ClickHouse client with setting `--ignore-error`:

```sql
SET allow_suspicious_ttl_expressions = 1;
CREATE TABLE t0 (c0 Int TTL '2025-01-01 00:00:00'::DateTime) ENGINE = SummingMergeTree() ORDER BY tuple();
INSERT INTO TABLE t0 (c0) VALUES (1);
INSERT INTO TABLE t0 (c0) VALUES (2);
INSERT INTO TABLE t0 (c0) VALUES (3);
INSERT INTO TABLE t0 (c0) VALUES (4);
INSERT INTO TABLE t0 (c0) VALUES (5);
INSERT INTO TABLE t0 (c0) VALUES (6);
INSERT INTO TABLE t0 (c0) VALUES (7);
INSERT INTO TABLE t0 (c0) VALUES (8);
INSERT INTO TABLE t0 (c0) VALUES (9);
INSERT INTO TABLE t0 (c0) VALUES (10);
INSERT INTO TABLE t0 (c0) VALUES (11);
INSERT INTO TABLE t0 (c0) VALUES (12);
INSERT INTO TABLE t0 (c0) VALUES (13);
INSERT INTO TABLE t0 (c0) VALUES (14);
INSERT INTO TABLE t0 (c0) VALUES (15);
INSERT INTO TABLE t0 (c0) VALUES (16);
INSERT INTO TABLE t0 (c0) VALUES (17);
INSERT INTO TABLE t0 (c0) VALUES (18);
INSERT INTO TABLE t0 (c0) VALUES (19);
INSERT INTO TABLE t0 (c0) VALUES (20);
INSERT INTO TABLE t0 (c0) VALUES (21);
INSERT INTO TABLE t0 (c0) VALUES (22);
INSERT INTO TABLE t0 (c0) VALUES (23);
INSERT INTO TABLE t0 (c0) VALUES (24);
INSERT INTO TABLE t0 (c0) VALUES (25);
INSERT INTO TABLE t0 (c0) VALUES (26);
INSERT INTO TABLE t0 (c0) VALUES (27);
INSERT INTO TABLE t0 (c0) VALUES (28);
INSERT INTO TABLE t0 (c0) VALUES (29);
INSERT INTO TABLE t0 (c0) VALUES (30);
INSERT INTO TABLE t0 (c0) VALUES (32::Int), (DEFAULT); --Error
INSERT INTO TABLE t0 (c0) VALUES (33);
INSERT INTO TABLE t0 (c0) VALUES (34);
INSERT INTO TABLE t0 (c0) VALUES (35);
INSERT INTO TABLE t0 (c0) VALUES (36);
INSERT INTO TABLE t0 (c0) VALUES (37);
INSERT INTO TABLE t0 (c0) VALUES (38);
INSERT INTO TABLE t0 (c0) VALUES (39);
INSERT INTO TABLE t0 (c0) VALUES (40);
INSERT INTO TABLE t0 (c0) VALUES (41);
INSERT INTO TABLE t0 (c0) VALUES (42);
INSERT INTO TABLE t0 (c0) VALUES (43);
OPTIMIZE TABLE t0 FINAL; --Logical error
```

### Error message and/or stacktrace

Stack trace:

```
<Fatal> : Logical error: 'Cannot calculate columns sizes when columns or checksums are not initialized'.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. std::exception::exception[abi:ne180100]() @ 0x0000000019754214
1. base/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(String const&, int) @ 0x000000003a8274a0
2. src/Common/Exception.cpp:106: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x0000000026449f4b
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000000195f3cd6
4. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x000000001960afef
5. src/Storages/MergeTree/IMergeTreeDataPart.cpp:2243: DB::IMergeTreeDataPart::calculateColumnsSizesOnDisk(std::optional<DB::Block>) @ 0x0000000035ba0ad8
6. src/Storages/MergeTree/IMergeTreeDataPart.cpp:2236: DB::IMergeTreeDataPart::calculateColumnsAndSecondaryIndicesSizesOnDisk(std::optional<DB::Block>) @ 0x0000000035b854e8
7. src/Storages/MergeTree/MergedBlockOutputStream.cpp:256: DB::MergedBlockOutputStream::finalizePartAsync(std::shared_ptr<DB::IMergeTreeDataPart> const&, bool, DB::NamesAndTypesList const*, DB::MergeTreeDataPartChecksums*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>*) @ 0x0000000036036563
8. src/Storages/MergeTree/MergedBlockOutputStream.cpp:196: DB::MergedBlockOutputStream::finalizePart(std::shared_ptr<DB::IMergeTreeDataPart> const&, bool, DB::NamesAndTypesList const*, DB::MergeTreeDataPartChecksums*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>*) @ 0x0000000036034fab
9. src/Storages/MergeTree/MergeTask.cpp:0: DB::MergeTask::MergeProjectionsStage::finalizeProjectionsAndWholeMerge() const @ 0x0000000035c65221
10. src/Storages/MergeTree/MergeTask.cpp:1455: DB::MergeTask::MergeProjectionsStage::execute() @ 0x0000000035c66633
11. src/Storages/MergeTree/MergeTask.cpp:1515: DB::MergeTask::execute() @ 0x0000000035c645ba
12. src/Storages/MergeTree/MergePlainMergeTreeTask.cpp:57: DB::MergePlainMergeTreeTask::executeStep() @ 0x000000003626b4b1
13. src/Storages/MergeTree/MergePlainMergeTreeTask.h:106: DB::StorageMergeTree::merge(bool, String const&, bool, bool, std::vector<String, std::allocator<String>> const&, bool, std::shared_ptr<DB::MergeTreeTransaction> const&, PreformattedMessage&, bool) @ 0x000000003621dbd4
14. src/Storages/StorageMergeTree.cpp:1651: DB::StorageMergeTree::optimize(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::IAST> const&, bool, bool, std::vector<String, std::allocator<String>> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000036228944
15. src/Interpreters/InterpreterOptimizeQuery.cpp:84: DB::InterpreterOptimizeQuery::execute() @ 0x0000000033344ef7
16. src/Interpreters/executeQuery.cpp:1457: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x00000000332c5275
17. src/Interpreters/executeQuery.cpp:1625: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000332bf34e
18. src/Server/TCPHandler.cpp:658: DB::TCPHandler::runImpl() @ 0x00000000366bc03c
19. src/Server/TCPHandler.cpp:2625: DB::TCPHandler::run() @ 0x00000000366ea6ce
20. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x000000003a951522
21. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x000000003a9521f2
22. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x000000003a8bc137
23. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x000000003a8b7b6e
24. ? @ 0x00007ffff7ca1e2e
25. ? @ 0x00007ffff7d33a4c
```