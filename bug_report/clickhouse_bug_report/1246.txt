ID: 1246
Title: NULL operations with subqueries causes an Internal error
Description:
Here's a sample query

`select subsite_id, case when u=0 then null else cast(v as float)/u end from (select 'test' as subsite_id, 100 as v, 33 as u from groot3.adv_watch) a;`

then leads to an Internal error with the following stack trace:

```
0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x2b2d076]
1. clickhouse-server(DB::Exception::Exception(std::string const&, int)+0x1f) [0x11a410f]
2. clickhouse-server(DB::Conditional::NumericEvaluator<double>::perform(std::vector<DB::Conditional::Branch, std::allocator<DB::Conditional::Branch> > const&, DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, DB::Conditional::NullMapBuilder&)+0x1626) [0x1b5b796]
3. clickhouse-server() [0x1174943]
4. clickhouse-server() [0x117f4dd]
5. clickhouse-server(DB::Conditional::NumericPerformer::perform(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, DB::Conditional::NullMapBuilder&)+0x161c) [0x1b3508c]
6. clickhouse-server(DB::FunctionMultiIf::perform(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, DB::Conditional::NullMapBuilder&)+0x49) [0x1a6f489]
7. clickhouse-server(DB::FunctionMultiIf::executeImpl(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long)+0x28a) [0x1a6f86a]
8. clickhouse-server(DB::FunctionCaseWithoutExpression::executeImpl(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long)+0x19) [0x1a6fc69]
9. clickhouse-server(DB::IFunction::execute(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long)+0x11b) [0x2d448db]
10. clickhouse-server(DB::ExpressionAction::execute(DB::Block&) const+0x2bb) [0x2b10e9b]
11. clickhouse-server(DB::ExpressionActions::execute(DB::Block&) const+0x32) [0x2b131e2]
12. clickhouse-server(DB::ExpressionBlockInputStream::readImpl()+0x33) [0x2dceb63]
13. clickhouse-server(DB::IProfilingBlockInputStream::read()+0x1e6) [0x24c95a6]
14. clickhouse-server(DB::ConcatBlockInputStream::readImpl()+0xb4) [0x2d1a204]
15. clickhouse-server(DB::IProfilingBlockInputStream::read()+0x1e6) [0x24c95a6]
16. clickhouse-server(DB::Aggregator::execute(std::shared_ptr<DB::IBlockInputStream>, DB::AggregatedDataVariants&)+0x25f) [0x2fd953f]
17. clickhouse-server(DB::AggregatingBlockInputStream::readImpl()+0x67b) [0x2f73a6b]
18. clickhouse-server(DB::IProfilingBlockInputStream::read()+0x1e6) [0x24c95a6]
19. clickhouse-server(DB::ExpressionBlockInputStream::readImpl()+0x1a) [0x2dceb4a]
20. clickhouse-server(DB::IProfilingBlockInputStream::read()+0x1e6) [0x24c95a6]
21. clickhouse-server(DB::ExpressionBlockInputStream::readImpl()+0x1a) [0x2dceb4a]
22. clickhouse-server(DB::IProfilingBlockInputStream::read()+0x1e6) [0x24c95a6]
23. clickhouse-server(DB::copyData(DB::IBlockInputStream&, DB::IBlockOutputStream&, std::atomic<bool>*)+0x5c) [0x2dc02ac]
24. clickhouse-server(DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::function<void (std::string const&)>)+0x5b4) [0x2aa4c14]
25. clickhouse-server(DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&)+0x1e53) [0x11be133]
26. clickhouse-server(DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&)+0x336) [0x11c0376]
27. clickhouse-server(Poco::Net::HTTPServerConnection::run()+0x27b) [0x347521b]
28. clickhouse-server(Poco::Net::TCPServerConnection::start()+0xf) [0x345992f]
29. clickhouse-server(Poco::Net::TCPServerDispatcher::run()+0x10b) [0x34774bb]
30. clickhouse-server(Poco::PooledThread::run()+0x87) [0x3678157]
31. clickhouse-server(Poco::ThreadImpl::runnableEntry(void*)+0x96) [0x3639da6]
```

the table groot3.adv_watch has ENGINE = Distributed, when the engine in ReplacingMergeTree or a dictionary there's no problem.