ID: 75498
Title: Bad insert with Array(JSON)
Description:
### Describe the bug

With `input_format_json_infer_incomplete_types_as_strings = 0`, an insert on an array of JSON gives a bad allocation error, because an overflow happened.

### How to reproduce

Run Fiddle: https://fiddle.clickhouse.com/dd3546b2-a7f6-4a94-9fbe-0832a06b8524 

### Error message and/or stacktrace

On my local setup, an overflow happens:

```
src/Common/PODArray.h:253:25: runtime error: addition of unsigned offset to 0x555568c64460 overflowed to 0x555568c6445f
SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior src/Common/PODArray.h:253:25 
########################################
(version 25.2.1.1, build id: 2E4EC10D9F9CEEF7BD1AC9A20A37F402014A97C6, git hash: af0897095434c5e74f4ea1090ed2a8f69acaef76) (from thread 2200872) (no query) Received signal sanitizer trap (-3)
Sanitizer trap.
Stack trace: 0x000055557c566c37 0x000055557c9fd50e 0x0000555570867ec4 0x0000555570875c9d 0x000055558a6543d7 0x000055558a618f08 0x000055558a376d5b 0x000055558a4166e6 0x000055558a6190d3 0x000055558a376d5b 0x00005555870313d1 0x00005555870d4039 0x000055558c2efd94 0x000055558c2edc1a 0x000055558be03fc4 0x000055558bdc9b36 0x000055558bdc94c2 0x000055558bdf44d6 0x000055558bde1c5c 0x000055558bde1ee1 0x000055558bddf51c 0x000055558bddeafc 0x000055558bdf961b 0x000055557c636edd 0x000055557c63df5f 0x00007ffff7ca1e2e 0x00007ffff7d33a4c
0. src/Common/StackTrace.cpp:381: StackTrace::tryCapture() @ 0x0000000027012c37
1.0. inlined from src/Common/StackTrace.h:48: StackTrace
1. src/Common/SignalHandlers.cpp:204: sanitizerDeathCallback() @ 0x00000000274a950e
2. __sanitizer::Die() @ 0x000000001b313ec4
3. ? @ 0x000000001b321c9d
4.0. inlined from src/Common/PODArray.h:253: DB::PODArrayBase<1ul, 4096ul, Allocator<false, false>, 63ul, 64ul>::resize_assume_reserved(unsigned long)
4. src/Columns/ColumnVector.h:108: ? @ 0x00000000351003d7
5. src/Columns/ColumnVariant.cpp:719: DB::ColumnVariant::popBack(unsigned long) @ 0x00000000350c4f08
6. src/Columns/ColumnObject.cpp:794: DB::ColumnObject::popBack(unsigned long) @ 0x0000000034e22d5b
7. src/Columns/ColumnTuple.cpp:277: DB::ColumnTuple::popBack(unsigned long) @ 0x0000000034ec26e6
8. src/Columns/ColumnVariant.cpp:728: DB::ColumnVariant::popBack(unsigned long) @ 0x00000000350c50d3
9. src/Columns/ColumnObject.cpp:794: DB::ColumnObject::popBack(unsigned long) @ 0x0000000034e22d5b
10.0. inlined from src/DataTypes/Serializations/SerializationArray.cpp:510: void DB::deserializeTextImpl<void, DB::SerializationArray::deserializeText(DB::IColumn&, DB::ReadBuffer&, DB::FormatSettings const&, bool) const::$_0>(DB::IColumn&, DB::ReadBuffer&, DB::SerializationArray::deserializeText(DB::IColumn&, DB::ReadBuffer&, DB::FormatSettings const&, bool) const::$_0&&, bool)
10. src/DataTypes/Serializations/SerializationArray.cpp:533: DB::SerializationArray::deserializeText(DB::IColumn&, DB::ReadBuffer&, DB::FormatSettings const&, bool) const @ 0x0000000031add3d1
11. src/DataTypes/Serializations/SerializationNullable.cpp:571: DB::SerializationNullable::deserializeNullAsDefaultOrNestedTextQuoted(DB::IColumn&, DB::ReadBuffer&, DB::FormatSettings const&, std::shared_ptr<DB::ISerialization const> const&) @ 0x0000000031b80039
12.0. inlined from src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:306: DB::ValuesBlockInputFormat::tryReadValue(DB::IColumn&, unsigned long)
12. src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:238: DB::ValuesBlockInputFormat::readRow(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>&, unsigned long) @ 0x0000000036d9bd94
13. src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:129: DB::ValuesBlockInputFormat::read() @ 0x0000000036d99c1a
14. src/Processors/Formats/IInputFormat.cpp:19: DB::IInputFormat::generate() @ 0x00000000368affc4
15. src/Processors/ISource.cpp:139: DB::ISource::tryGenerate() @ 0x0000000036875b36
16. src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x00000000368754c2
17.0. inlined from src/Processors/Executors/ExecutionThreadContext.cpp:49: DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*)
17. src/Processors/Executors/ExecutionThreadContext.cpp:98: DB::ExecutionThreadContext::executeTask() @ 0x00000000368a04d6
18. src/Processors/Executors/PipelineExecutor.cpp:290: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x000000003688dc5c
19. src/Processors/Executors/PipelineExecutor.cpp:256: DB::PipelineExecutor::executeSingleThread(unsigned long) @ 0x000000003688dee1
20. src/Processors/Executors/PipelineExecutor.cpp:455: DB::PipelineExecutor::executeImpl(unsigned long, bool) @ 0x000000003688b51c
21. src/Processors/Executors/PipelineExecutor.cpp:127: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x000000003688aafc
22.0. inlined from src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:83: DB::threadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::shared_ptr<DB::ThreadGroup>, unsigned long, bool)
22.1. inlined from src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:109: operator()
22.2. inlined from contrib/llvm-project/libcxx/include/__type_traits/invoke.h:344: decltype(std::declval<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>()()) std::__invoke[abi:se180100]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&)
22.3. inlined from contrib/llvm-project/libcxx/include/tuple:1424: decltype(auto) std::__apply_tuple_impl[abi:se180100]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&, std::__tuple_indices<...>)
22.4. inlined from contrib/llvm-project/libcxx/include/tuple:1428: decltype(auto) std::apply[abi:se180100]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&)
22.5. inlined from src/Common/ThreadPool.h:311: operator()
22.6. inlined from contrib/llvm-project/libcxx/include/__type_traits/invoke.h:344: decltype(std::declval<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>()()) std::__invoke[abi:se180100]<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)
22.7. inlined from contrib/llvm-project/libcxx/include/__type_traits/invoke.h:419: void std::__invoke_void_return_wrapper<void, true>::__call[abi:se180100]<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&)
22.8. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:208: ?
22. contrib/llvm-project/libcxx/include/__functional/function.h:608: ? @ 0x00000000368a561b
23.0. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:714: ?
23.1. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:981: ?
23. src/Common/ThreadPool.cpp:785: ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x00000000270e2edd
24.0. inlined from contrib/llvm-project/libcxx/include/__type_traits/invoke.h:312: decltype(*std::declval<ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>().*std::declval<void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)()>()()) std::__invoke[abi:se180100]<void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*, void>(void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*&&)
24.1. inlined from contrib/llvm-project/libcxx/include/__thread/thread.h:193: void std::__thread_execute[abi:se180100]<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*, 2ul>(std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>&, std::__tuple_indices<2ul>)
24. contrib/llvm-project/libcxx/include/__thread/thread.h:202: void* std::__thread_proxy[abi:se180100]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x00000000270e9f5f
25. ? @ 0x00007ffff7ca1e2e
26. ? @ 0x00007ffff7d33a4c
```