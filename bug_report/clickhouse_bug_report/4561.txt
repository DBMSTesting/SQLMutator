ID: 4561
Title: Segmentation fault (ubuntu 14.04, clickhouse 19.1.6)
Description:
Around two months ago we transferred some of our stats to the CH db. There we have two tables of the same structure with raw data (around 800 million rows) and precalculated (~ 150 million) plus some views. The stats are transferred to CH from the PG by the 10000 rows chunks (or less). The PG stats load is about 400-450 new rows of stats per second. 
Approximately once in two weeks we get a segfault at a random moment of time (even not exactly at the highload). The stacktrace is below. It doesn't seem it is related to any particular query. 

We're using:
```
clickhouse-server:
  Installed: 19.1.6

Ubuntu 14.04 server, 3.13.0-164-generic
```

Stats table structure:
```
create table stats_1
(
	created DateTime,
	col1 UInt32,
	col2 UInt32,
	col3 UInt64,
	col4 UInt64,
	col5 Nullable(UInt32),
	col6 Nullable(UInt32),
	col7 Nullable(UInt32),
	col8 Nullable(UInt32),
	col9 Nullable(UInt32),
	col10 Nullable(UInt32),
	col11 Nullable(UInt64),
	col12 String,
	col13 Nullable(UInt32),
	col14 Nullable(UInt32),
	col15 String,
	col16 UInt64 default CAST(1, 'UInt64')
)
engine = ReplacingMergeTree() PARTITION BY (toMonday(created), toDayOfWeek(created));
```

Stacktrace:

```
2019.03.02 20:01:51.723380 [ 2 ] {} <Error> BaseDaemon: ########################################
2019.03.02 20:01:51.727920 [ 2 ] {} <Error> BaseDaemon: (from thread 52873436) Received signal Segmentation fault (11).
2019.03.02 20:01:51.727964 [ 2 ] {} <Error> BaseDaemon: Address: 0x75
2019.03.02 20:01:51.727970 [ 2 ] {} <Error> BaseDaemon: Access: read.
2019.03.02 20:01:51.727977 [ 2 ] {} <Error> BaseDaemon: Address not mapped to object.
2019.03.02 20:01:51.913700 [ 2 ] {} <Error> BaseDaemon: 0. clickhouse-server(llvm::Value::~Value()+0x1) [0x92b23b1]
2019.03.02 20:01:51.913746 [ 2 ] {} <Error> BaseDaemon: 1. clickhouse-server(llvm::LLVMContextImpl::~LLVMContextImpl()+0x2ed9) [0x926cc69]
2019.03.02 20:01:51.913754 [ 2 ] {} <Error> BaseDaemon: 2. clickhouse-server(llvm::LLVMContext::~LLVMContext()+0x14) [0x92626f4]
2019.03.02 20:01:51.914718 [ 2 ] {} <Error> BaseDaemon: 3. clickhouse-server(std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()+0x56) [0x33184a6]
2019.03.02 20:01:51.914746 [ 2 ] {} <Error> BaseDaemon: 4. clickhouse-server(DB::LLVMFunction::~LLVMFunction()+0x44) [0x751ee34]
2019.03.02 20:01:51.914754 [ 2 ] {} <Error> BaseDaemon: 5. clickhouse-server(std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()+0x56) [0x33184a6]
2019.03.02 20:01:51.914770 [ 2 ] {} <Error> BaseDaemon: 6. clickhouse-server(DB::LRUCache<DB::UInt128, DB::LLVMFunction, DB::UInt128Hash, DB::TrivialWeightFunction<DB::LLVMFunction> >::removeOverflow(std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&)+0x1a7) [0x7523037]
2019.03.02 20:01:51.915193 [ 2 ] {} <Error> BaseDaemon: 7. clickhouse-server(DB::compileFunctions(std::vector<DB::ExpressionAction, std::allocator<DB::ExpressionAction> >&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, DB::Block const&, std::shared_ptr<DB::CompiledExpressionCache>, unsigned long)+0x1440) [0x751daa0]
2019.03.02 20:01:51.915208 [ 2 ] {} <Error> BaseDaemon: 8. clickhouse-server(DB::ExpressionActions::finalize(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x14e) [0x75008fe]
2019.03.02 20:01:51.915216 [ 2 ] {} <Error> BaseDaemon: 9. clickhouse-server(DB::ExpressionActionsChain::finalize()+0x71a) [0x7502f2a]
2019.03.02 20:01:51.915222 [ 2 ] {} <Error> BaseDaemon: 10. clickhouse-server() [0x6f62651]
2019.03.02 20:01:51.915230 [ 2 ] {} <Error> BaseDaemon: 11. clickhouse-server(DB::InterpreterSelectQuery::analyzeExpressions(DB::QueryProcessingStage::Enum, bool)+0x44e) [0x6f65f0e]
2019.03.02 20:01:51.915240 [ 2 ] {} <Error> BaseDaemon: 12. clickhouse-server(DB::InterpreterSelectQuery::executeImpl(DB::InterpreterSelectQuery::Pipeline&, std::shared_ptr<DB::IBlockInputStream> const&, bool)+0xb09) [0x6f6a729]
2019.03.02 20:01:51.915252 [ 2 ] {} <Error> BaseDaemon: 13. clickhouse-server(DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, std::shared_ptr<DB::IBlockInputStream> const&, std::shared_ptr<DB::IStorage> const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, DB::QueryProcessingStage::Enum, unsigned long, bool)+0x732) [0x6f6bd82]
2019.03.02 20:01:51.915263 [ 2 ] {} <Error> BaseDaemon: 14. clickhouse-server(DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, DB::QueryProcessingStage::Enum, unsigned long, bool)+0x56) [0x6f6caf6]
2019.03.02 20:01:51.915272 [ 2 ] {} <Error> BaseDaemon: 15. clickhouse-server(DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, DB::QueryProcessingStage::Enum, unsigned long, bool)+0x7e7) [0x6f78837]
2019.03.02 20:01:51.915287 [ 2 ] {} <Error> BaseDaemon: 16. clickhouse-server(DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, DB::Context&, DB::QueryProcessingStage::Enum)+0x3b0) [0x6f539a0]
2019.03.02 20:01:51.915295 [ 2 ] {} <Error> BaseDaemon: 17. clickhouse-server() [0x706680f]
2019.03.02 20:01:51.915304 [ 2 ] {} <Error> BaseDaemon: 18. clickhouse-server(DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>)+0xca) [0x706880a]
2019.03.02 20:01:51.915312 [ 2 ] {} <Error> BaseDaemon: 19. clickhouse-server(DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&)+0x3419) [0x33341e9]
2019.03.02 20:01:51.915320 [ 2 ] {} <Error> BaseDaemon: 20. clickhouse-server(DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&)+0x3be) [0x333668e]
2019.03.02 20:01:51.915327 [ 2 ] {} <Error> BaseDaemon: 21. clickhouse-server(Poco::Net::HTTPServerConnection::run()+0x332) [0xa08fe02]
2019.03.02 20:01:51.915333 [ 2 ] {} <Error> BaseDaemon: 22. clickhouse-server(Poco::Net::TCPServerConnection::start()+0xf) [0xa0886af]
2019.03.02 20:01:51.915343 [ 2 ] {} <Error> BaseDaemon: 23. clickhouse-server(Poco::Net::TCPServerDispatcher::run()+0x16a) [0xa088a8a]
2019.03.02 20:01:51.915350 [ 2 ] {} <Error> BaseDaemon: 24. clickhouse-server(Poco::PooledThread::run()+0x77) [0xa6d2037]
2019.03.02 20:01:51.915357 [ 2 ] {} <Error> BaseDaemon: 25. clickhouse-server(Poco::ThreadImpl::runnableEntry(void*)+0x38) [0xa6cdef8]
2019.03.02 20:01:51.915363 [ 2 ] {} <Error> BaseDaemon: 26. clickhouse-server() [0xaa3e73f]
2019.03.02 20:01:51.915369 [ 2 ] {} <Error> BaseDaemon: 27. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8184) [0x7f3fc1b2b184]
```
