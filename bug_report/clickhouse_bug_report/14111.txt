ID: 14111
Title: UndefinedBehaviorSanitizer: signed integer overflow ../src/IO/WriteHelpers.h:875:17
Description:
```
../src/IO/WriteHelpers.h:875:17: runtime error: signed integer overflow: -9223372036854775808 * -1 cannot be represented in type 'long'
SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior ../src/IO/WriteHelpers.h:875:17 in
```

```
(gdb) bt full
#0  0x00000000270a9cd0 in __ubsan::ScopedReport::~ScopedReport() ()
No symbol table info available.
#1  0x00000000270ab4b4 in void handleIntegerOverflowImpl<__ubsan::Value>(__ubsan::OverflowData*, unsigned long, char const*, __ubsan::Value, __ubsan::ReportOptions) ()
No symbol table info available.
#2  0x00000000270ab6b8 in __ubsan_handle_mul_overflow_abort ()
No symbol table info available.
#3  0x0000000029a7aad1 in DB::writeText<long> (x=..., scale=0, ostr=...) at ../src/IO/WriteHelpers.h:875
        part = <optimized out>
#4  0x0000000029a769ee in DB::writeQuoted<DB::Decimal<long> > (x=..., buf=...) at ../src/Common/FieldVisitors.cpp:39
No locals.
#5  DB::formatQuoted<DB::DecimalField<DB::Decimal<long> > > (x=...) at ../src/Common/FieldVisitors.cpp:22
        wb = {<DB::detail::StringHolder> = {value = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 49, __size_ = 32, __data_ = 0x46e0e310 "'"}, __s = {{__size_ = 49 '1', __lx = 49 '1'}, __data_ = "\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\020\343\340F\000\000\000"}, __r = {__words = {49, 32, 1189143312}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}}, <DB::WriteBufferFromVector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >> = {<DB::WriteBuffer> = {<DB::BufferBase> = {pos = 0x46e0e311 "", bytes = 0, working_buffer = {begin_pos = 0x46e0e310 "'", end_pos = 0x46e0e330 ""}, internal_buffer = {begin_pos = 0x46e0e310 "'", end_pos = 0x46e0e330 ""}, padded = false}, _vptr$WriteBuffer = 0xffeffb0 <vtable for DB::WriteBufferFromOwnString+16>}, vector = @0x7fffffffb9d8, is_finished = false, static initial_size = 32, static size_multiplier = 2}, <No data fields>}
#6  0x0000000029a7995b in DB::FieldVisitorToString::operator() (this=<optimized out>, x=...) at ../src/Common/FieldVisitors.cpp:135
No locals.
#7  DB::Field::dispatch<DB::FieldVisitorToString const&, DB::Field const&> (f=..., field=...) at ../src/Core/Field.h:577
        null = <optimized out>
#8  0x0000000029a793ab in DB::applyVisitor<DB::FieldVisitorToString const&, DB::Field const&> (visitor=..., field=...) at ../src/Common/FieldVisitors.h:45
No locals.
#9  0x0000000029a779eb in DB::FieldVisitorToString::operator() (this=0x7fffffffbbc0, x=...) at ../src/Common/FieldVisitors.cpp:172
        it = <optimized out>
        wb = {<DB::detail::StringHolder> = {value = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 49, __size_ = 32, __data_ = 0x46dfd1c0 "(3, "}, __s = {{__size_ = 49 '1', __lx = 49 '1'}, __data_ = "\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\300\321\337F\000\000\000"}, __r = {__words = {49, 32, 1189073344}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}}, <DB::WriteBufferFromVector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >> = {<DB::WriteBuffer> = {<DB::BufferBase> = {pos = 0x46dfd1c4 "", bytes = 0, working_buffer = {begin_pos = 0x46dfd1c0 "(3, ", end_pos = 0x46dfd1e0 ""}, internal_buffer = {begin_pos = 0x46dfd1c0 "(3, ", end_pos = 0x46dfd1e0 ""}, padded = false}, _vptr$WriteBuffer = 0xffeffb0 <vtable for DB::WriteBufferFromOwnString+16>}, vector = @0x7fffffffbb10, is_finished = false, static initial_size = 32, static size_multiplier = 2}, <No data fields>}
#10 0x0000000035bc6c42 in DB::Field::dispatch<DB::FieldVisitorToString, DB::Field const&> (f=..., field=...) at ../src/Core/Field.h:575
        null = {<No data fields>}
#11 0x00000000379ad445 in DB::applyVisitor<DB::FieldVisitorToString, DB::Field const&> (visitor=..., field=...) at ../src/Common/FieldVisitors.h:45
No locals.
#12 DB::ASTLiteral::formatImplWithoutAlias (this=<optimized out>, settings=...) at ../src/Parsers/ASTLiteral.h:48
No locals.
#13 0x00000000379e9f44 in DB::ASTWithAlias::formatImpl (this=0x46e11330, settings=..., state=..., frame=...) at ../src/Parsers/ASTWithAlias.cpp:32
No locals.
#14 0x0000000037992f7a in DB::ASTExpressionList::formatImplMultiline (this=0x46e2b448, settings=..., state=..., frame=...) at ../src/Parsers/ASTExpressionList.cpp:47
        frame_nested = {indent = <optimized out>, need_parens = <optimized out>, expression_list_always_start_on_new_line = false, current_select = 0x46e0ca48}
        it = <optimized out>
        indent_str = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 35322350012938, __size_ = 140737488338080, __data_ = 0x2718a943 <std::__1::shared_ptr<DB::IAST>::shared_ptr(std::__1::shared_ptr<DB::IAST> const&)+275> "\353Ñ¿\340B\t:H\211\306\350\256\001\362\377\277"}, __s = {{__size_ = 10 '\n', __lx = 10 '\n'}, __data_ = "\n    \000\000\240\274\377\377\377\177\000\000C\251\030'\000\000\000"}, __r = {__words = {35322350012938, 140737488338080, 655927619}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}
#15 0x00000000379c0ad1 in DB::ASTSelectQuery::formatImpl (this=0x46e0ca48, s=..., state=..., frame=...) at ../src/Parsers/ASTSelectQuery.cpp:90
        indent_str = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 1189085184, __size_ = 140737488347360, __data_ = 0xf3560abf3cba9bd <error: Cannot access memory at address 0xf3560abf3cba9bd>}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = "\000\340F\000\000\000\000\340\340\377\377\377\177\000\000\275\251\313\363\253`5\017"}, __r = {__words = {1189085184, 140737488347360, 1095888375980468669}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}
#16 0x00000000379cb7ec in DB::ASTSelectWithUnionQuery::formatQueryImpl (this=<optimized out>, settings=..., state=..., frame=...) at ../src/Parsers/ASTSelectWithUnionQuery.cpp:34
        it = <optimized out>
        indent_str = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 140737488289792, __size_ = 656862789, __data_ = 0xa <error: Cannot access memory at address 0xa>}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = "\000\377\377\377\177\000\000E\356&'\000\000\000\000\n\000\000\000\000\000\000"}, __r = {__words = {140737488289792, 656862789, 10}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}
#17 0x00000000379b8305 in DB::ASTQueryWithOutput::formatImpl (this=<optimized out>, s=..., state=..., frame=...) at ../src/Parsers/ASTQueryWithOutput.cpp:27
        indent_str = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 78, __size_ = 140737344329568, __data_ = 0x7ffff76a12a0 <_IO_file_jumps> ""}, __s = {{__size_ = 78 'N', __lx = 78 'N'}, __data_ = "\000\000\000\000\000\000\000`Wj\367\377\177\000\000\240\022j\367\377\177\000"}, __r = {__words = {78, 140737344329568, 140737344311968}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}
#18 0x000000003659bef5 in DB::IAST::format (this=0x46dfde78, settings=...) at ../src/Parsers/IAST.h:212
        state = {printed_asts_with_alias = {__tree_ = {__begin_node_ = 0x7fffffffbea8, __pair1_ = {<std::__1::__compressed_pair_elem<std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>, 0, false>> = {__value_ = {__left_ = 0x0}}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::__tree_node<std::__1::tuple<DB::IAST const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<unsigned long, unsigned long> >, void*> >, 1, true>> = {<std::__1::allocator<std::__1::__tree_node<std::__1::tuple<DB::IAST const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<unsigned long, unsigned long> >, void*> >> = {<No data fields>}, <No data fields>}, <No data fields>}, __pair3_ = {<std::__1::__compressed_pair_elem<unsigned long, 0, false>> = {__value_ = 0}, <std::__1::__compressed_pair_elem<std::__1::less<std::__1::tuple<DB::IAST const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<unsigned long, unsigned long> > >, 1, true>> = {<std::__1::less<std::__1::tuple<DB::IAST const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<unsigned long, unsigned long> > >> = {<std::__1::binary_function<std::__1::tuple<DB::IAST const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<unsigned long, unsigned long> >, std::__1::tuple<DB::IAST const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<unsigned long, unsigned long> >, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}}}}
#19 0x0000000037a97c9f in DB::formatAST (ast=..., s=..., hilite=false, one_line=<optimized out>) at ../src/Parsers/formatAST.cpp:13
        settings = {ostr = @0x46d07468, hilite = false, one_line = false, always_quote_identifiers = false, identifier_quoting_style = DB::IdentifierQuotingStyle::Backticks, nl_or_ws = 10 '\n'}
#20 0x00000000272708eb in DB::QueryFuzzer::fuzzMain (this=0x7fffffffe0e0, ast=...) at ../programs/client/QueryFuzzer.cpp:422
No locals.
#21 0x000000002722d6b1 in DB::Client::processWithFuzzing (this=<optimized out>, text=...) at ../programs/client/Client.cpp:1079
        dump_before_fuzz = {<std::__1::basic_iostream<char, std::__1::char_traits<char> >> = {<No data fields>}, __sb_ = {<std::__1::basic_streambuf<char, std::__1::char_traits<char> >> = {<No data fields>}, __str_ = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 769, __size_ = 767, __data_ = 0x46dfd6d0 "SelectWithUnionQuery, 0x46e4d958\n-ExpressionList, 0x46e01368\n--SelectQuery, 0x46e00978\n---ExpressionList, 0x46e2bbd8\n----Literal_Int64_0, 0x46e0b5c0\n----Literal_NULL, 0x46e20cd0\n----Literal_Tuple_(Int"...}, __s = {{__size_ = 1 '\001', __lx = 1 '\001'}, __data_ = "\003\000\000\000\000\000\000\377\002\000\000\000\000\000\000\320\326\337F\000\000\000"}, __r = {__words = {769, 767, 1189074640}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, __hm_ = 0x46dfd850 "0af20\n----Literal_NULL, 0x46e0b160\n", __mode_ = 24}}
        base_before_fuzz = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 97, __size_ = 84, __data_ = 0x46e20460 "SELECT 0, NULL, (-1, NULL, '0.0001048575'), NULL, (NULL), (256, '10485.77', 1), NULL"}, __s = {{__size_ = 97 'a', __lx = 97 'a'}, __data_ = "\000\000\000\000\000\000\000T\000\000\000\000\000\000\000`\004\342F\000\000\000"}, __r = {__words = {97, 84, 1189217376}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}
        dump_of_cloned_ast = {<std::__1::basic_iostream<char, std::__1::char_traits<char> >> = {<No data fields>}, __sb_ = {<std::__1::basic_streambuf<char, std::__1::char_traits<char> >> = {<No data fields>}, __str_ = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 769, __size_ = 767, __data_ = 0x46dfcab0 "SelectWithUnionQuery, 0x46dfde78\n-ExpressionList, 0x46e1c408\n--SelectQuery, 0x46e0ca48\n---ExpressionList, 0x46e2b448\n----Literal_Int64_0, 0x46e0b4a0\n----Literal_NULL, 0x46e2cc50\n----Literal_Tuple_(Int"...}, __s = {{__size_ = 1 '\001', __lx = 1 '\001'}, __data_ = "\003\000\000\000\000\000\000\377\002\000\000\000\000\000\000\260\312\337F\000\000\000"}, __r = {__words = {769, 767, 1189071536}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, __hm_ = 0x46dfcc30 "11330\n----Literal_NULL, 0x46e2b7b0\n", __mode_ = 24}}
        base_after_fuzz = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 97, __size_ = 85, __data_ = 0x46e20460 "SELECT 0, NULL, (-1, NULL, '0.0001048575'), NULL, (NULL), (256, '10485.77', 1), NULL"}, __s = {{__size_ = 97 'a', __lx = 97 'a'}, __data_ = "\000\000\000\000\000\000\000U\000\000\000\000\000\000\000`\004\342F\000\000\000"}, __r = {__words = {97, 85, 1189217376}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}
        fuzzed_text = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 97, __size_ = 84, __data_ = 0x46e0d840 " \341\340F"}, __s = {{__size_ = 97 'a', __lx = 97 'a'}, __data_ = "\000\000\000\000\000\000\000T\000\000\000\000\000\000\000@\330\340F\000\000\000"}, __r = {__words = {97, 84, 1189140544}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}
        ast_to_process = {__ptr_ = 0x46dfde78, __cntrl_ = 0x46dfde60}
        fuzz_step = 1972
        orig_ast = {__ptr_ = 0x46e46f58, __cntrl_ = 0x46e46f40}
        fuzz_base = {__ptr_ = 0x46e4d958, __cntrl_ = 0x46e4d940}
        this_query_begin = 0x46d46ba0 "select 1 as x, (1,2,3) as y, x in y;\n"
        as_insert = <optimized out>
        this_query_runs = <optimized out>
        begin = 0x46d46bc5 ""
        end = <optimized out>
#22 0x000000002721f4e9 in DB::Client::nonInteractiveWithFuzzing (this=<optimized out>) at ../programs/client/Client.cpp:852
        new_end = <optimized out>
        in = <incomplete type>
        text = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 49, __size_ = 37, __data_ = 0x46d46ba0 "select 1 as x, (1,2,3) as y, x in y;\n"}, __s = {{__size_ = 49 '1', __lx = 49 '1'}, __data_ = "\000\000\000\000\000\000\000%\000\000\000\000\000\000\000\240k\324F\000\000\000"}, __r = {__words = {49, 37, 1188326304}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}
#23 0x00000000272163ae in DB::Client::mainImpl (this=<optimized out>) at ../programs/client/Client.cpp:671
        use_ssl = {<boost::noncopyable_::noncopyable> = {<boost::noncopyable_::base_token> = {<No data fields>}, <No data fields>}, <No data fields>}
        local_tz = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 3415259516394358042, __size_ = 131320293584717, __data_ = 0x0}, __s = {{__size_ = 26 '\032', __lx = 26 '\032'}, __data_ = "Europe/Moscow\000\000\000\000\000\000\000\000\000"}, __r = {__words = {3415259516394358042, 131320293584717, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}
        keys = {<std::__1::__vector_base<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >> = {<std::__1::__vector_base_common<true>> = {<No data fields>}, __begin_ = 0x46dc0180, __end_ = 0x46dc01c8, __end_cap_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, 0, false>> = {__value_ = 0x46dc01e0}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, 1, true>> = {<std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >> = {<No data fields>}, <No data fields>}, <No data fields>}}, <No data fields>}
        prompt_substitutions = {__tree_ = {__begin_node_ = 0x46e43510, __pair1_ = {<std::__1::__compressed_pair_elem<std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>, 0, false>> = {__value_ = {__left_ = 0x46e499e0}}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*> >, 1, true>> = {<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*> >> = {<No data fields>}, <No data fields>}, <No data fields>}, __pair3_ = {<std::__1::__compressed_pair_elem<unsigned long, 0, false>> = {__value_ = 4}, <std::__1::__compressed_pair_elem<std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, 1, true>> = {<std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>> = {<std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >> = {<std::__1::binary_function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}}}
        client_info = <optimized out>
#24 0x00000000272106db in DB::Client::main (this=0x7fffffffc7a0) at ../programs/client/Client.cpp:253
        e = <optimized out>
#25 0x0000000038b53900 in Poco::Util::Application::run (this=0x7fffffffc7a0) at ../contrib/poco/Util/src/Application.cpp:334
        rc = 70
        exc = <optimized out>
        exc = <optimized out>
#26 0x00000000272051a4 in mainEntryClickHouseClient (argc=2, argv=0x46d3bd00) at ../programs/client/Client.cpp:2368
        client = {<Poco::Util::Application> = {<Poco::Util::Subsystem> = {<No data fields>}, _pConfig = {_ptr = 0x46d3c940}, _subsystems = {<std::__1::__vector_base<Poco::AutoPtr<Poco::Util::Subsystem>, std::__1::allocator<Poco::AutoPtr<Poco::Util::Subsystem> > >> = {<std::__1::__vector_base_common<true>> = {<No data fields>}, __begin_ = 0x46d3bca0, __end_ = 0x46d3bca8, __end_cap_ = {<std::__1::__compressed_pair_elem<Poco::AutoPtr<Poco::Util::Subsystem>*, 0, false>> = {__value_ = 0x46d3bca8}, <std::__1::__compressed_pair_elem<std::__1::allocator<Poco::AutoPtr<Poco::Util::Subsystem> >, 1, true>> = {<std::__1::allocator<Poco::AutoPtr<Poco::Util::Subsystem> >> = {<No data fields>}, <No data fields>}, <No data fields>}}, <No data fields>}, _initialized = true, _command = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 0, __size_ = 0, __data_ = 0x0}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = '\000' <repeats 22 times>}, __r = {__words = {0, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, _argv = {<std::__1::__vector_base<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >> = {<std::__1::__vector_base_common<true>> = {<No data fields>}, __begin_ = 0x0, __end_ = 0x0, __end_cap_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, 0, false>> = {__value_ = 0x0}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, 1, true>> = {<std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >> = {<No data fields>}, <No data fields>}, <No data fields>}}, <No data fields>}, _unprocessedArgs = {<std::__1::__vector_base<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >> = {<std::__1::__vector_base_common<true>> = {<No data fields>}, __begin_ = 0x0, __end_ = 0x0, __end_cap_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, 0, false>> = {__value_ = 0x0}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, 1, true>> = {<std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >> = {<No data fields>}, <No data fields>}, <No data fields>}}, <No data fields>}, _options = {_options = {<std::__1::__vector_base<Poco::Util::Option, std::__1::allocator<Poco::Util::Option> >> = {<std::__1::__vector_base_common<true>> = {<No data fields>}, __begin_ = 0x0, __end_ = 0x0, __end_cap_ = {<std::__1::__compressed_pair_elem<Poco::Util::Option*, 0, false>> = {__value_ = 0x0}, <std::__1::__compressed_pair_elem<std::__1::allocator<Poco::Util::Option>, 1, true>> = {<std::__1::allocator<Poco::Util::Option>> = {<No data fields>}, <No data fields>}, <No data fields>}}, <No data fields>}}, _unixOptions = true, _pLogger = 0x46d7ebd0, _startTime = {static TIMEVAL_MIN = -9223372036854775808, static TIMEVAL_MAX = 9223372036854775807, _ts = 1598445624058890}, _stopOptionsProcessing = true, _workingDirAtLaunch = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 8155848970886197016, __size_ = 203497629039, __data_ = 0x0}, __s = {{__size_ = 24 '\030', __lx = 24 '\030'}, __data_ = "/home/qoega/\000\000\000\000\000\000\000\000\000\000"}, __r = {__words = {8155848970886197016, 203497629039, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, static _pInstance = 0x7fffffffc7a0}, exit_strings = {__table_ = {__bucket_list_ = {__ptr_ = {<std::__1::__compressed_pair_elem<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*>**, 0, false>> = {__value_ = 0x46d185f0}, <std::__1::__compressed_pair_elem<std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*>*> >, 1, false>> = {__value_ = {__data_ = {<std::__1::__compressed_pair_elem<unsigned long, 0, false>> = {__value_ = 23}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*>*>, 1, true>> = {<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*>*>> = {<No data fields>}, <No data fields>}, <No data fields>}}}, <No data fields>}}, __p1_ = {<std::__1::__compressed_pair_elem<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*>, 0, false>> = {__value_ = {__next_ = 0x46d11d20}}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*> >, 1, true>> = {<std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*> >> = {<No data fields>}, <No data fields>}, <No data fields>}, __p2_ = {<std::__1::__compressed_pair_elem<unsigned long, 0, false>> = {__value_ = 20}, <std::__1::__compressed_pair_elem<std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, 1, true>> = {<std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >> = {<std::__1::unary_function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, __p3_ = {<std::__1::__compressed_pair_elem<float, 0, false>> = {__value_ = 1}, <std::__1::__compressed_pair_elem<std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, 1, true>> = {<std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >> = {<std::__1::binary_function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}}}, is_interactive = false, need_render_progress = false, has_received_logs = false, echo_queries = false, ignore_error = true, print_time_to_stderr = false, stdin_is_a_tty = false, stdout_is_a_tty = true, connection = {__ptr_ = {<std::__1::__compressed_pair_elem<DB::Connection*, 0, false>> = {__value_ = 0x46d6cbf0}, <std::__1::__compressed_pair_elem<std::__1::default_delete<DB::Connection>, 1, true>> = {<std::__1::default_delete<DB::Connection>> = {<No data fields>}, <No data fields>}, <No data fields>}}, query_id = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 140737488289792, __size_ = 0, __data_ = 0x0}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = "\000\377\377\377\177", '\000' <repeats 17 times>}, __r = {__words = {140737488289792, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, full_query = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 49, __size_ = 37, __data_ = 0x46d6a030 "select 1 as x, (1,2,3) as y, x in y;\n"}, __s = {{__size_ = 49 '1', __lx = 49 '1'}, __data_ = "\000\000\000\000\000\000\000%\000\000\000\000\000\000\000\060\240\326F\000\000\000"}, __r = {__words = {49, 37, 1188470832}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, query_to_send = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 97, __size_ = 84, __data_ = 0x46dfc2e0 "SELECT 0, NULL, (-1, NULL, '0.0001048575'), NULL, (NULL), (256, '10485.77', 1), NULL"}, __s = {{__size_ = 97 'a', __lx = 97 'a'}, __data_ = "\000\000\000\000\000\000\000T\000\000\000\000\000\000\000\340\302\337F\000\000\000"}, __r = {__words = {97, 84, 1189069536}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, format = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 7021223227877839896, __size_ = 431198855538, __data_ = 0x0}, __s = {{__size_ = 24 '\030', __lx = 24 '\030'}, __data_ = "TabSeparated\000\000\000\000\000\000\000\000\000\000"}, __r = {__words = {7021223227877839896, 431198855538, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, is_default_format = true, format_max_block_size = 65505, insert_format = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 32481177325622796, __size_ = 0, __data_ = 0x0}, __s = {{__size_ = 12 '\f', __lx = 12 '\f'}, __data_ = "Values", '\000' <repeats 16 times>}, __r = {__words = {32481177325622796, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, insert_format_max_block_size = 1048545, max_client_network_bandwidth = 0, has_vertical_output_suffix = false, shared_context = {shared = {__ptr_ = {<std::__1::__compressed_pair_elem<DB::ContextShared*, 0, false>> = {__value_ = 0x46d3cf90}, <std::__1::__compressed_pair_elem<std::__1::default_delete<DB::ContextShared>, 1, true>> = {<std::__1::default_delete<DB::ContextShared>> = {<No data fields>}, <No data fields>}, <No data fields>}}}, context = {shared = 0x46d3cf90, client_info = {query_kind = DB::ClientInfo::QueryKind::INITIAL_QUERY, current_user = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 0, __size_ = 0, __data_ = 0x0}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = '\000' <repeats 22 times>}, __r = {__words = {0, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, current_query_id = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 0, __size_ = 0, __data_ = 0x0}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = '\000' <repeats 22 times>}, __r = {__words = {0, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, current_address = {static IPv4 = Poco::Net::AddressFamily::IPv4, static IPv6 = Poco::Net::AddressFamily::IPv6, static UNIX_LOCAL = Poco::Net::AddressFamily::UNIX_LOCAL, _pImpl = {_ptr = 0x46d297b0}}, initial_user = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 0, __size_ = 0, __data_ = 0x0}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = '\000' <repeats 22 times>}, __r = {__words = {0, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, initial_query_id = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 0, __size_ = 0, __data_ = 0x0}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = '\000' <repeats 22 times>}, __r = {__words = {0, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, initial_address = {static IPv4 = Poco::Net::AddressFamily::IPv4, static IPv6 = Poco::Net::AddressFamily::IPv6, static UNIX_LOCAL = Poco::Net::AddressFamily::UNIX_LOCAL, _pImpl = {_ptr = 0x46d1fd40}}, interface = DB::ClientInfo::Interface::TCP, os_user = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 273, __size_ = 5, __data_ = 0x46d165d0 "qoega"}, __s = {{__size_ = 17 '\021', __lx = 17 '\021'}, __data_ = "\001\000\000\000\000\000\000\005\000\000\000\000\000\000\000\320e\321F\000\000\000"}, __r = {__words = {273, 5, 1188128208}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, client_hostname = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 49, __size_ = 29, __data_ = 0x46e3d950 "qoega-qyp.sas.yp-c.yandex.net"}, __s = {{__size_ = 49 '1', __lx = 49 '1'}, __data_ = "\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000P\331\343F\000\000\000"}, __r = {__words = {49, 29, 1189337424}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, client_name = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 8018777211247805206, __size_ = 543519605, __data_ = 0x0}, __s = {{__size_ = 22 '\026', __lx = 22 '\026'}, __data_ = "ClickHouse ", '\000' <repeats 11 times>}, __r = {__words = {8018777211247805206, 543519605, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, client_version_major = 20, client_version_minor = 8, client_version_patch = 1, client_revision = 54438, http_method = DB::ClientInfo::HTTPMethod::UNKNOWN, http_user_agent = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 0, __size_ = 0, __data_ = 0x0}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = '\000' <repeats 22 times>}, __r = {__words = {0, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, quota_key = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 7021223227877818368, __size_ = 431198855538, __data_ = 0x0}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = "\000abSeparated\000\000\000\000\000\000\000\000\000\000"}, __r = {__words = {7021223227877818368, 431198855538, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}}, external_tables_initializer_callback = {<std::__1::__function::__maybe_derive_from_unary_function<void (DB::Context &)>> = {<std::__1::unary_function<DB::Context&, void>> = {<No data fields>}, <No data fields>}, <std::__1::__function::__maybe_derive_from_binary_function<void (DB::Context &)>> = {<No data fields>}, __f_ = {__buf_ = {__lx = '\000' <repeats 31 times>}, __f_ = 0x0}}, input_initializer_callback = {<std::__1::__function::__maybe_derive_from_unary_function<void (DB::Context &, const std::__1::shared_ptr<DB::IStorage> &)>> = {<No data fields>}, <std::__1::__function::__maybe_derive_from_binary_function<void (DB::Context &, const std::__1::shared_ptr<DB::IStorage> &)>> = {<std::__1::binary_function<DB::Context&, std::__1::shared_ptr<DB::IStorage> const&, void>> = {<No data fields>}, <No data fields>}, __f_ = {__buf_ = {__lx = '\000' <repeats 31 times>}, __f_ = 0x0}}, input_blocks_reader = {<std::__1::__function::__maybe_derive_from_unary_function<DB::Block (DB::Context &)>> = {<std::__1::unary_function<DB::Context&, DB::Block>> = {<No data fields>}, <No data fields>}, <std::__1::__function::__maybe_derive_from_binary_function<DB::Block (DB::Context &)>> = {<No data fields>}, __f_ = {__buf_ = {__lx = '\000' <repeats 31 times>}, __f_ = 0x0}}, user_id = {<std::__1::__optional_move_assign_base<StrongTypedef<DB::UInt128, DB::UUIDTag>, true>> = {<std::__1::__optional_copy_assign_base<StrongTypedef<DB::UInt128, DB::UUIDTag>, true>> = {<std::__1::__optional_move_base<StrongTypedef<DB::UInt128, DB::UUIDTag>, true>> = {<std::__1::__optional_copy_base<StrongTypedef<DB::UInt128, DB::UUIDTag>, true>> = {<std::__1::__optional_storage_base<StrongTypedef<DB::UInt128, DB::UUIDTag>, false>> = {<std::__1::__optional_destruct_base<StrongTypedef<DB::UInt128, DB::UUIDTag>, true>> = {{__null_state_ = 0 '\000', __val_ = {t = {low = 0, high = 0}}}, __engaged_ = false}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <std::__1::__sfinae_ctor_base<true, true>> = {<No data fields>}, <std::__1::__sfinae_assign_base<true, true>> = {<No data fields>}, <No data fields>}, current_roles = {<boost::container::dtl::flat_tree<StrongTypedef<DB::UInt128, DB::UUIDTag>, boost::move_detail::identity<StrongTypedef<DB::UInt128, DB::UUIDTag> >, std::__1::less<StrongTypedef<DB::UInt128, DB::UUIDTag> >, void>> = {m_data = {<boost::container::dtl::flat_tree_value_compare<std::__1::less<StrongTypedef<DB::UInt128, DB::UUIDTag> >, StrongTypedef<DB::UInt128, DB::UUIDTag>, boost::move_detail::identity<StrongTypedef<DB::UInt128, DB::UUIDTag> > >> = {<std::__1::less<StrongTypedef<DB::UInt128, DB::UUIDTag> >> = {<std::__1::binary_function<StrongTypedef<DB::UInt128, DB::UUIDTag>, StrongTypedef<DB::UInt128, DB::UUIDTag>, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, m_seq = {m_holder = {<boost::container::new_allocator<StrongTypedef<DB::UInt128, DB::UUIDTag> >> = {<No data fields>}, m_start = 0x0, m_size = 0, m_capacity = 0}}}, static has_stored_allocator_type = true}, <No data fields>}, use_default_roles = false, access = {__ptr_ = 0x0, __cntrl_ = 0x0}, initial_row_policy = {__ptr_ = 0x0, __cntrl_ = 0x0}, current_database = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 0, __size_ = 0, __data_ = 0x0}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = '\000' <repeats 22 times>}, __r = {__words = {0, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, settings = {<DB::BaseSettings<DB::SettingsTraits>> = {<DB::SettingsTraits::Data> = {min_compress_block_size = {value = 65536, changed = false}, max_compress_block_size = {value = 1048576, changed = false}, max_block_size = {value = 65505, changed = false}, max_insert_block_size = {value = 1048545, changed = false}, min_insert_block_size_rows = {value = 1048545, changed = false}, min_insert_block_size_bytes = {value = 268427520, changed = false}, min_insert_block_size_rows_for_materialized_views = {value = 0, changed = false}, min_insert_block_size_bytes_for_materialized_views = {value = 0, changed = false}, max_joined_block_size_rows = {value = 65505, changed = false}, max_insert_threads = {value = 0, changed = false}, max_final_threads = {value = 16, changed = false}, max_threads = {is_auto = true, value = 32, changed = false}, max_alter_threads = {is_auto = true, value = 32, changed = false}, max_read_buffer_size = {value = 1048576, changed = false}, max_distributed_connections = {value = 1024, changed = false}, max_query_size = {value = 262144, changed = false}, interactive_delay = {value = 100000, changed = false}, connect_timeout = {static unit = DB::SettingFieldTimespanUnit::Second, static microseconds_per_unit = 1000000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 10000000}, changed = false}, connect_timeout_with_failover_ms = {static unit = DB::SettingFieldTimespanUnit::Millisecond, static microseconds_per_unit = 1000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 50000}, changed = false}, connect_timeout_with_failover_secure_ms = {static unit = DB::SettingFieldTimespanUnit::Millisecond, static microseconds_per_unit = 1000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 100000}, changed = false}, receive_timeout = {static unit = DB::SettingFieldTimespanUnit::Second, static microseconds_per_unit = 1000000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 300000000}, changed = false}, send_timeout = {static unit = DB::SettingFieldTimespanUnit::Second, static microseconds_per_unit = 1000000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 300000000}, changed = false}, tcp_keep_alive_timeout = {static unit = DB::SettingFieldTimespanUnit::Second, static microseconds_per_unit = 1000000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 0}, changed = false}, queue_max_wait_ms = {static unit = DB::SettingFieldTimespanUnit::Millisecond, static microseconds_per_unit = 1000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 0}, changed = false}, connection_pool_max_wait_ms = {static unit = DB::SettingFieldTimespanUnit::Millisecond, static microseconds_per_unit = 1000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 0}, changed = false}, replace_running_query_max_wait_ms = {static unit = DB::SettingFieldTimespanUnit::Millisecond, static microseconds_per_unit = 1000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 5000000}, changed = false}, kafka_max_wait_ms = {static unit = DB::SettingFieldTimespanUnit::Millisecond, static microseconds_per_unit = 1000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 5000000}, changed = false}, rabbitmq_max_wait_ms = {static unit = DB::SettingFieldTimespanUnit::Millisecond, static microseconds_per_unit = 1000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 5000000}, changed = false}, poll_interval = {value = 10, changed = false}, idle_connection_timeout = {value = 3600, changed = false}, distributed_connections_pool_size = {value = 1024, changed = false}, connections_with_failover_max_tries = {value = 3, changed = false}, s3_min_upload_part_size = {value = 536870912, changed = false}, extremes = {value = false, changed = false}, use_uncompressed_cache = {value = true, changed = false}, replace_running_query = {value = false, changed = false}, background_buffer_flush_schedule_pool_size = {value = 16, changed = false}, background_pool_size = {value = 16, changed = false}, background_move_pool_size = {value = 8, changed = false}, background_schedule_pool_size = {value = 16, changed = false}, background_distributed_schedule_pool_size = {value = 16, changed = false}, distributed_directory_monitor_sleep_time_ms = {static unit = DB::SettingFieldTimespanUnit::Millisecond, static microseconds_per_unit = 1000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 100000}, changed = false}, distributed_directory_monitor_max_sleep_time_ms = {static unit = DB::SettingFieldTimespanUnit::Millisecond, static microseconds_per_unit = 1000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 30000000}, changed = false}, distributed_directory_monitor_batch_inserts = {value = false, changed = false}, optimize_move_to_prewhere = {value = true, changed = false}, insert_in_memory_parts_timeout = {static unit = DB::SettingFieldTimespanUnit::Millisecond, static microseconds_per_unit = 1000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 600000000}, changed = false}, replication_alter_partitions_sync = {value = 1, changed = false}, replication_alter_columns_timeout = {value = 60, changed = false}, load_balancing = {value = DB::LoadBalancing::RANDOM, changed = false}, totals_mode = {value = DB::TotalsMode::AFTER_HAVING_EXCLUSIVE, changed = false}, totals_auto_threshold = {value = 0.5, changed = false}, allow_suspicious_low_cardinality_types = {value = false, changed = false}, compile_expressions = {value = false, changed = false}, min_count_to_compile_expression = {value = 3, changed = false}, group_by_two_level_threshold = {value = 100000, changed = false}, group_by_two_level_threshold_bytes = {value = 100000000, changed = false}, distributed_aggregation_memory_efficient = {value = false, changed = false}, aggregation_memory_efficient_merge_threads = {value = 0, changed = false}, max_parallel_replicas = {value = 1, changed = false}, parallel_replicas_count = {value = 0, changed = false}, parallel_replica_offset = {value = 0, changed = false}, special_sort = {value = DB::SpecialSort::NOT_SPECIFIED, changed = false}, skip_unavailable_shards = {value = false, changed = false}, distributed_group_by_no_merge = {value = false, changed = false}, parallel_distributed_insert_select = {value = false, changed = false}, optimize_distributed_group_by_sharding_key = {value = false, changed = false}, optimize_skip_unused_shards = {value = false, changed = false}, force_optimize_skip_unused_shards = {value = 0, changed = false}, optimize_skip_unused_shards_nesting = {value = 0, changed = false}, force_optimize_skip_unused_shards_nesting = {value = 0, changed = false}, input_format_parallel_parsing = {value = true, changed = false}, min_chunk_bytes_for_parallel_parsing = {value = 10485760, changed = false}, merge_tree_min_rows_for_concurrent_read = {value = 163840, changed = false}, merge_tree_min_bytes_for_concurrent_read = {value = 251658240, changed = false}, merge_tree_min_rows_for_seek = {value = 0, changed = false}, merge_tree_min_bytes_for_seek = {value = 0, changed = false}, merge_tree_coarse_index_granularity = {value = 8, changed = false}, merge_tree_max_rows_to_use_cache = {value = 1048576, changed = false}, merge_tree_max_bytes_to_use_cache = {value = 2013265920, changed = false}, mysql_max_rows_to_insert = {value = 65536, changed = false}, optimize_min_equality_disjunction_chain_length = {value = 3, changed = false}, min_bytes_to_use_direct_io = {value = 0, changed = false}, min_bytes_to_use_mmap_io = {value = 0, changed = false}, force_index_by_date = {value = false, changed = false}, force_primary_key = {value = false, changed = false}, max_streams_to_max_threads_ratio = {value = 1, changed = false}, max_streams_multiplier_for_merge_tables = {value = 5, changed = false}, network_compression_method = {value = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 878332934, __size_ = 90194313239, __data_ = 0x1600000018 <error: Cannot access memory at address 0x1600000018>}, __s = {{__size_ = 6 '\006', __lx = 6 '\006'}, __data_ = "LZ4\000\000\000\000\027\000\000\000\025\000\000\000\030\000\000\000\026\000\000"}, __r = {__words = {878332934, 90194313239, 94489280536}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, changed = false}, network_zstd_compression_level = {value = 1, changed = false}, priority = {value = 0, changed = false}, os_thread_priority = {value = 0, changed = false}, log_queries = {value = true, changed = false}, log_queries_min_type = {value = DB::QUERY_START, changed = false}, log_queries_cut_to_length = {value = 100000, changed = false}, distributed_product_mode = {value = DB::DistributedProductMode::DENY, changed = false}, max_concurrent_queries_for_user = {value = 0, changed = false}, insert_deduplicate = {value = true, changed = false}, insert_quorum = {value = 0, changed = false}, insert_quorum_timeout = {static unit = DB::SettingFieldTimespanUnit::Millisecond, static microseconds_per_unit = 1000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 600000000}, changed = false}, select_sequential_consistency = {value = 0, changed = false}, table_function_remote_max_addresses = {value = 1000, changed = false}, read_backoff_min_latency_ms = {static unit = DB::SettingFieldTimespanUnit::Millisecond, static microseconds_per_unit = 1000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 1000000}, changed = false}, read_backoff_max_throughput = {value = 1048576, changed = false}, read_backoff_min_interval_between_events_ms = {static unit = DB::SettingFieldTimespanUnit::Millisecond, static microseconds_per_unit = 1000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 1000000}, changed = false}, read_backoff_min_events = {value = 2, changed = false}, memory_tracker_fault_probability = {value = 0, changed = false}, enable_http_compression = {value = false, changed = false}, http_zlib_compression_level = {value = 3, changed = false}, http_native_compression_disable_checksumming_on_decompress = {value = false, changed = false}, count_distinct_implementation = {value = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 7023439972286756114, __size_ = 2977486749661426787, __data_ = 0x2952286e6f655820 <error: Cannot access memory at address 0x2952286e6f655820>}, __s = {{__size_ = 18 '\022', __lx = 18 '\022'}, __data_ = "uniqExact\000el(R) Xeon(R)"}, __r = {__words = {7023439972286756114, 2977486749661426787, 2977486758425745440}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, changed = false}, add_http_cors_header = {value = false, changed = false}, max_http_get_redirects = {value = 0, changed = false}, use_client_time_zone = {value = false, changed = false}, send_progress_in_http_headers = {value = false, changed = false}, http_headers_progress_interval_ms = {value = 100, changed = false}, fsync_metadata = {value = true, changed = false}, join_use_nulls = {value = false, changed = false}, join_default_strictness = {value = DB::JoinStrictness::ALL, changed = false}, any_join_distinct_right_table_keys = {value = false, changed = false}, preferred_block_size_bytes = {value = 1000000, changed = false}, max_replica_delay_for_distributed_queries = {value = 300, changed = false}, fallback_to_stale_replicas_for_distributed_queries = {value = true, changed = false}, preferred_max_column_in_block_size_bytes = {value = 0, changed = false}, insert_distributed_sync = {value = false, changed = false}, insert_distributed_timeout = {value = 0, changed = false}, distributed_ddl_task_timeout = {value = 180, changed = false}, stream_flush_interval_ms = {static unit = DB::SettingFieldTimespanUnit::Millisecond, static microseconds_per_unit = 1000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 7500000}, changed = false}, stream_poll_timeout_ms = {static unit = DB::SettingFieldTimespanUnit::Millisecond, static microseconds_per_unit = 1000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 500000}, changed = false}, insert_allow_materialized_columns = {value = false, changed = false}, http_connection_timeout = {static unit = DB::SettingFieldTimespanUnit::Second, static microseconds_per_unit = 1000000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 1000000}, changed = false}, http_send_timeout = {static unit = DB::SettingFieldTimespanUnit::Second, static microseconds_per_unit = 1000000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 1800000000}, changed = false}, http_receive_timeout = {static unit = DB::SettingFieldTimespanUnit::Second, static microseconds_per_unit = 1000000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 1800000000}, changed = false}, optimize_throw_if_noop = {value = false, changed = false}, use_index_for_in_with_subqueries = {value = true, changed = false}, joined_subquery_requires_alias = {value = true, changed = false}, empty_result_for_aggregation_by_empty_set = {value = false, changed = false}, allow_distributed_ddl = {value = true, changed = false}, allow_suspicious_codecs = {value = false, changed = false}, odbc_max_field_size = {value = 1024, changed = false}, query_profiler_real_time_period_ns = {value = 1000000000, changed = false}, query_profiler_cpu_time_period_ns = {value = 1000000000, changed = false}, metrics_perf_events_enabled = {value = false, changed = false}, metrics_perf_events_list = {value = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 120586240, __size_ = 6609954668544, __data_ = 0x100000000 <error: Cannot access memory at address 0x100000000>}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = "\000\060\a\000\000\000\000\000\000\000\000\003\006\000\000\000\000\000\000\001\000\000"}, __r = {__words = {120586240, 6609954668544, 4294967296}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, changed = false}, max_rows_to_read = {value = 0, changed = false}, max_bytes_to_read = {value = 0, changed = false}, read_overflow_mode = {value = DB::OverflowMode::THROW, changed = false}, max_rows_to_group_by = {value = 0, changed = false}, group_by_overflow_mode = {value = DB::OverflowMode::THROW, changed = false}, max_bytes_before_external_group_by = {value = 0, changed = false}, max_rows_to_sort = {value = 0, changed = false}, max_bytes_to_sort = {value = 0, changed = false}, sort_overflow_mode = {value = DB::OverflowMode::THROW, changed = false}, max_bytes_before_external_sort = {value = 0, changed = false}, max_bytes_before_remerge_sort = {value = 1000000000, changed = false}, max_result_rows = {value = 0, changed = false}, max_result_bytes = {value = 0, changed = false}, result_overflow_mode = {value = DB::OverflowMode::THROW, changed = false}, max_execution_time = {static unit = DB::SettingFieldTimespanUnit::Second, static microseconds_per_unit = 1000000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 0}, changed = false}, timeout_overflow_mode = {value = DB::OverflowMode::THROW, changed = false}, min_execution_speed = {value = 0, changed = false}, max_execution_speed = {value = 0, changed = false}, min_execution_speed_bytes = {value = 0, changed = false}, max_execution_speed_bytes = {value = 0, changed = false}, timeout_before_checking_execution_speed = {static unit = DB::SettingFieldTimespanUnit::Second, static microseconds_per_unit = 1000000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 10000000}, changed = false}, max_columns_to_read = {value = 0, changed = false}, max_temporary_columns = {value = 0, changed = false}, max_temporary_non_const_columns = {value = 0, changed = false}, max_subquery_depth = {value = 100, changed = false}, max_pipeline_depth = {value = 1000, changed = false}, max_ast_depth = {value = 1000, changed = false}, max_ast_elements = {value = 50000, changed = false}, max_expanded_ast_elements = {value = 500000, changed = false}, readonly = {value = 0, changed = false}, max_rows_in_set = {value = 0, changed = false}, max_bytes_in_set = {value = 0, changed = false}, set_overflow_mode = {value = DB::OverflowMode::THROW, changed = false}, max_rows_in_join = {value = 0, changed = false}, max_bytes_in_join = {value = 0, changed = false}, join_overflow_mode = {value = DB::OverflowMode::THROW, changed = false}, join_any_take_last_row = {value = false, changed = false}, join_algorithm = {value = DB::JoinAlgorithm::HASH, changed = false}, partial_merge_join_optimizations = {value = true, changed = false}, default_max_bytes_in_join = {value = 1000000000, changed = false}, partial_merge_join_left_table_buffer_bytes = {value = 32000000, changed = false}, partial_merge_join_rows_in_right_blocks = {value = 65536, changed = false}, join_on_disk_max_files_to_merge = {value = 64, changed = false}, temporary_files_codec = {value = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 878332934, __size_ = 11579231830783, __data_ = 0xa88 <error: Cannot access memory at address 0xa88>}, __s = {{__size_ = 6 '\006', __lx = 6 '\006'}, __data_ = "LZ4\000\000\000\000\377\002\000\000\210\n\000\000\210\n\000\000\000\000\000"}, __r = {__words = {878332934, 11579231830783, 2696}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, changed = false}, max_rows_to_transfer = {value = 0, changed = false}, max_bytes_to_transfer = {value = 0, changed = false}, transfer_overflow_mode = {value = DB::OverflowMode::THROW, changed = false}, max_rows_in_distinct = {value = 0, changed = false}, max_bytes_in_distinct = {value = 0, changed = false}, distinct_overflow_mode = {value = DB::OverflowMode::THROW, changed = false}, max_memory_usage = {value = 0, changed = false}, max_memory_usage_for_user = {value = 0, changed = false}, max_untracked_memory = {value = 4194304, changed = false}, memory_profiler_step = {value = 0, changed = false}, memory_profiler_sample_probability = {value = 0, changed = false}, max_network_bandwidth = {value = 0, changed = false}, max_network_bytes = {value = 0, changed = false}, max_network_bandwidth_for_user = {value = 0, changed = false}, max_network_bandwidth_for_all_users = {value = 0, changed = false}, log_profile_events = {value = true, changed = false}, log_query_settings = {value = true, changed = false}, log_query_threads = {value = true, changed = false}, send_logs_level = {value = DB::LogsLevel::fatal, changed = false}, enable_optimize_predicate_expression = {value = true, changed = false}, enable_optimize_predicate_expression_to_final_subquery = {value = true, changed = false}, allow_push_predicate_when_subquery_contains_with = {value = true, changed = false}, low_cardinality_max_dictionary_size = {value = 8192, changed = false}, low_cardinality_use_single_dictionary_for_part = {value = false, changed = false}, decimal_check_overflow = {value = true, changed = false}, prefer_localhost_replica = {value = true, changed = false}, max_fetch_partition_retries_count = {value = 5, changed = false}, http_max_multipart_form_data_size = {value = 1073741824, changed = false}, calculate_text_stack_trace = {value = true, changed = false}, allow_ddl = {value = true, changed = false}, parallel_view_processing = {value = false, changed = false}, enable_debug_queries = {value = false, changed = false}, enable_unaligned_array_join = {value = false, changed = false}, optimize_read_in_order = {value = true, changed = false}, optimize_aggregation_in_order = {value = false, changed = false}, read_in_order_two_level_merge_threshold = {value = 100, changed = false}, low_cardinality_allow_in_native_format = {value = true, changed = false}, cancel_http_readonly_queries_on_client_close = {value = false, changed = false}, external_table_functions_use_nulls = {value = true, changed = false}, allow_hyperscan = {value = true, changed = false}, allow_simdjson = {value = true, changed = false}, allow_introspection_functions = {value = false, changed = false}, max_partitions_per_insert_block = {value = 100, changed = false}, check_query_single_value_result = {value = true, changed = false}, allow_drop_detached = {value = false, changed = false}, distributed_replica_error_half_life = {static unit = DB::SettingFieldTimespanUnit::Second, static microseconds_per_unit = 1000000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 60000000}, changed = false}, distributed_replica_error_cap = {value = 1000, changed = false}, distributed_replica_max_ignored_errors = {value = 0, changed = false}, allow_experimental_live_view = {value = false, changed = false}, live_view_heartbeat_interval = {static unit = DB::SettingFieldTimespanUnit::Second, static microseconds_per_unit = 1000000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 15000000}, changed = false}, max_live_view_insert_blocks_before_refresh = {value = 64, changed = false}, min_free_disk_space_for_temporary_data = {value = 0, changed = false}, default_database_engine = {value = DB::DefaultDatabaseEngine::Ordinary, changed = false}, show_table_uuid_in_table_create_query_if_not_nil = {value = false, changed = false}, enable_scalar_subquery_optimization = {value = true, changed = false}, optimize_trivial_count_query = {value = true, changed = false}, mutations_sync = {value = 0, changed = false}, optimize_move_functions_out_of_any = {value = true, changed = false}, optimize_injective_functions_inside_uniq = {value = true, changed = false}, optimize_arithmetic_operations_in_aggregate_functions = {value = true, changed = false}, optimize_duplicate_order_by_and_distinct = {value = true, changed = false}, optimize_redundant_functions_in_order_by = {value = true, changed = false}, optimize_if_chain_to_multiif = {value = false, changed = false}, optimize_if_transform_strings_to_enum = {value = false, changed = false}, optimize_monotonous_functions_in_order_by = {value = true, changed = false}, allow_experimental_alter_materialized_view_structure = {value = false, changed = false}, enable_early_constant_folding = {value = true, changed = false}, deduplicate_blocks_in_dependent_materialized_views = {value = false, changed = false}, use_compact_format_in_distributed_parts_names = {value = false, changed = false}, multiple_joins_rewriter_version = {value = 2, changed = false}, validate_polygons = {value = true, changed = false}, max_parser_depth = {value = 1000, changed = false}, temporary_live_view_timeout = {static unit = DB::SettingFieldTimespanUnit::Second, static microseconds_per_unit = 1000000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 5000000}, changed = false}, transform_null_in = {value = false, changed = false}, allow_nondeterministic_mutations = {value = false, changed = false}, lock_acquire_timeout = {static unit = DB::SettingFieldTimespanUnit::Second, static microseconds_per_unit = 1000000, value = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 120000000}, changed = false}, materialize_ttl_after_modify = {value = true, changed = false}, function_implementation = {value = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 3618114966326804480, __size_ = 4620787020894056499, __data_ = 0x7a484730312e3220 <error: Cannot access memory at address 0x7a484730312e3220>}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = "\000old 6230 CPU @ 2.10GHz"}, __r = {__words = {3618114966326804480, 4620787020894056499, 8811370943259488800}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, changed = false}, allow_experimental_geo_types = {value = false, changed = false}, allow_experimental_bigint_types = {value = false, changed = false}, data_type_default_nullable = {value = false, changed = false}, cast_keep_nullable = {value = false, changed = false}, alter_partition_verbose_result = {value = false, changed = false}, allow_experimental_database_materialize_mysql = {value = false, changed = false}, allow_experimental_low_cardinality_type = {value = true, changed = false}, compile = {value = false, changed = false}, min_count_to_compile = {value = 0, changed = false}, allow_experimental_multiple_joins_emulation = {value = true, changed = false}, allow_experimental_cross_to_join_conversion = {value = true, changed = false}, allow_experimental_data_skipping_indices = {value = true, changed = false}, merge_tree_uniform_read_distribution = {value = true, changed = false}, mark_cache_min_lifetime = {value = 0, changed = false}, partial_merge_join = {value = false, changed = false}, max_memory_usage_for_all_queries = {value = 0, changed = false}, force_optimize_skip_unused_shards_no_nested = {value = false, changed = false}, experimental_use_processors = {value = true, changed = false}, optimize_trivial_insert_select = {value = true, changed = false}, allow_experimental_database_atomic = {value = true, changed = false}, format_csv_delimiter = {value = 44 ',', changed = false}, format_csv_allow_single_quotes = {value = true, changed = false}, format_csv_allow_double_quotes = {value = true, changed = false}, output_format_csv_crlf_end_of_line = {value = false, changed = false}, input_format_csv_unquoted_null_literal_as_null = {value = false, changed = false}, input_format_skip_unknown_fields = {value = false, changed = false}, input_format_with_names_use_header = {value = true, changed = false}, input_format_import_nested_json = {value = false, changed = false}, optimize_aggregators_of_group_by_keys = {value = true, changed = false}, input_format_defaults_for_omitted_fields = {value = true, changed = false}, input_format_tsv_empty_as_default = {value = false, changed = false}, input_format_null_as_default = {value = false, changed = false}, date_time_input_format = {value = DB::FormatSettings::DateTimeInputFormat::Basic, changed = false}, optimize_group_by_function_keys = {value = true, changed = false}, input_format_values_interpret_expressions = {value = true, changed = false}, input_format_values_deduce_templates_of_expressions = {value = true, changed = false}, input_format_values_accurate_types_of_literals = {value = true, changed = false}, input_format_avro_allow_missing_fields = {value = false, changed = false}, format_avro_schema_registry_url = {value = {static RESERVED_PATH = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 2309892, __size_ = 0, __data_ = 0x0}, __s = {{__size_ = 4 '\004', __lx = 4 '\004'}, __data_ = "?#", '\000' <repeats 20 times>}, __r = {__words = {2309892, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, static RESERVED_QUERY = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 4623854563510927118, __size_ = 0, __data_ = 0x0}, __s = {{__size_ = 14 '\016', __lx = 14 '\016'}, __data_ = "?#/:;+@", '\000' <repeats 15 times>}, __r = {__words = {4623854563510927118, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, static RESERVED_QUERY_PARAM = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 4623854563510927122, __size_ = 15654, __data_ = 0x0}, __s = {{__size_ = 18 '\022', __lx = 18 '\022'}, __data_ = "?#/:;+@&=", '\000' <repeats 13 times>}, __r = {__words = {4623854563510927122, 15654, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, static RESERVED_FRAGMENT = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 0, __size_ = 0, __data_ = 0x0}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = '\000' <repeats 22 times>}, __r = {__words = {0, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, static ILLEGAL = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 6664339516880069926, __size_ = 2965663416525544994, __data_ = 0x5d5b2c24 <error: Cannot access memory at address 0x5d5b2c24>}, __s = {{__size_ = 38 '&', __lx = 38 '&'}, __data_ = "%<>{}|\\\"^`!*'()$,[]\000\000\000"}, __r = {__words = {6664339516880069926, 2965663416525544994, 1566256164}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, _scheme = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 0, __size_ = 0, __data_ = 0x0}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = '\000' <repeats 22 times>}, __r = {__words = {0, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, _userInfo = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 0, __size_ = 0, __data_ = 0x0}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = '\000' <repeats 22 times>}, __r = {__words = {0, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, _host = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 0, __size_ = 0, __data_ = 0x0}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = '\000' <repeats 22 times>}, __r = {__words = {0, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, _port = 0, _path = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 0, __size_ = 0, __data_ = 0x0}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = '\000' <repeats 22 times>}, __r = {__words = {0, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, _query = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 0, __size_ = 0, __data_ = 0x0}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = '\000' <repeats 22 times>}, __r = {__words = {0, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, _fragment = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 0, __size_ = 0, __data_ = 0x0}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = '\000' <repeats 22 times>}, __r = {__words = {0, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}}, changed = false}, output_format_json_quote_64bit_integers = {value = true, changed = false}, output_format_json_quote_denormals = {value = false, changed = false}, output_format_json_escape_forward_slashes = {value = true, changed = false}, output_format_pretty_max_rows = {value = 10000, changed = false}, output_format_pretty_max_column_pad_width = {value = 250, changed = false}, output_format_pretty_max_value_width = {value = 10000, changed = false}, output_format_pretty_color = {value = true, changed = false}, output_format_pretty_grid_charset = {value = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 61767104615690, __size_ = 1048591, __data_ = 0x7e00000000 <error: Cannot access memory at address 0x7e00000000>}, __s = {{__size_ = 10 '\n', __lx = 10 '\n'}, __data_ = "UTF-8\000\000\017\000\020\000\000\000\000\000\000\000\000\000~\000\000"}, __r = {__words = {61767104615690, 1048591, 541165879296}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, changed = false}, output_format_parquet_row_group_size = {value = 1000000, changed = false}, output_format_avro_codec = {value = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 1048576, __size_ = 18446744073709538048, __data_ = 0x4000 <error: Cannot access memory at address 0x4000>}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = "\000\020\000\000\000\000\000\000\313\377\377\377\377\377\377\000@\000\000\000\000\000"}, __r = {__words = {1048576, 18446744073709538048, 16384}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, changed = false}, output_format_avro_sync_interval = {value = 16384, changed = false}, output_format_tsv_crlf_end_of_line = {value = false, changed = false}, input_format_allow_errors_num = {value = 0, changed = false}, input_format_allow_errors_ratio = {value = 0, changed = false}, format_schema = {value = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 0, __size_ = 1048591, __data_ = 0xffffffffffffcb00 <error: Cannot access memory at address 0xffffffffffffcb00>}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = "\000\000\000\000\000\000\000\017\000\020\000\000\000\000\000\000\313\377\377\377\377\377\377"}, __r = {__words = {0, 1048591, 18446744073709538048}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, changed = false}, format_template_resultset = {value = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 140737488289792, __size_ = 140737488346576, __data_ = 0x0}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = "\000\377\377\377\177\000\000\320\335\377\377\377\177\000\000\000\000\000\000\000\000\000"}, __r = {__words = {140737488289792, 140737488346576, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, changed = false}, format_template_row = {value = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 0, __size_ = 140737488346408, __data_ = 0x0}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = "\000\000\000\000\000\000\000(\335\377\377\377\177\000\000\000\000\000\000\000\000\000"}, __r = {__words = {0, 140737488346408, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, changed = false}, format_template_rows_between_delimiter = {value = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 140737471580674, __size_ = 655518061, __data_ = 0x0}, __s = {{__size_ = 2 '\002', __lx = 2 '\002'}, __data_ = "\n\000\377\377\177\000\000mi\022'", '\000' <repeats 11 times>}, __r = {__words = {140737471580674, 655518061, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, changed = false}, format_custom_escaping_rule = {value = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 7234311940023207182, __size_ = 655517952, __data_ = 0x7fffffff0000 ""}, __s = {{__size_ = 14 '\016', __lx = 14 '\016'}, __data_ = "Escaped\000i\022'\000\000\000\000\000\000\377\377\377\177\000"}, __r = {__words = {7234311940023207182, 655517952, 140737488289792}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, changed = false}, format_custom_field_delimiter = {value = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 2306, __size_ = 0, __data_ = 0x46be0101 <ProfileEvents::global_counters_array+1425> ""}, __s = {{__size_ = 2 '\002', __lx = 2 '\002'}, __data_ = "\t", '\000' <repeats 14 times>, "\001\001\276F\000\000\000"}, __r = {__words = {2306, 0, 1186857217}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, changed = false}, format_custom_row_before_delimiter = {value = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 140737488289792, __size_ = 140737488346520, __data_ = 0x7fffffffddd0 "\017"}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = "\000\377\377\377\177\000\000\230\335\377\377\377\177\000\000\320\335\377\377\377\177\000"}, __r = {__words = {140737488289792, 140737488346520, 140737488346576}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, changed = false}, format_custom_row_after_delimiter = {value = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 11376068507784448514, __size_ = 655030954, __data_ = 0x7fffffffdd00 "\020P\332\367\377\177"}, __s = {{__size_ = 2 '\002', __lx = 2 '\002'}, __data_ = "\n\000\353\b\352ß\252\372\n'\000\000\000\000\000\335\377\377\377\177\000"}, __r = {__words = {11376068507784448514, 655030954, 140737488346368}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, changed = false}, format_custom_row_between_delimiter = {value = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 140737488289792, __size_ = 971913014, __data_ = 0xe0 <error: Cannot access memory at address 0xe0>}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = "\000\377\377\377\177\000\000\066\067\356\071\000\000\000\000\340\000\000\000\000\000\000"}, __r = {__words = {140737488289792, 971913014, 224}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, changed = false}, format_custom_result_before_delimiter = {value = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 140737488289792, __size_ = 655495615, __data_ = 0x7fffffffc470 "schema_path"}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = "\000\377\377\377\177\000\000\277\021\022'\000\000\000\000p\304\377\377\377\177\000"}, __r = {__words = {140737488289792, 655495615, 140737488340080}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, changed = false}, format_custom_result_after_delimiter = {value = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 11599872, __size_ = 6098471861847335651, __data_ = 0xbc9d57ed8e24b1a5 <error: Cannot access memory at address 0xbc9d57ed8e24b1a5>}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = "\000\261\000\000\000\000\000\343\" \346\330\037\242T\245\261$\216\355W\235\274"}, __r = {__words = {11599872, 6098471861847335651, 13591115928277660069}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, changed = false}, format_regexp = {value = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 140737488289792, __size_ = 656479155, __data_ = 0x1c00000000007fff <error: Cannot access memory at address 0x1c00000000007fff>}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = "\000\377\377\377\177\000\000\263\023!'\000\000\000\000\377\177\000\000\000\000\000\034"}, __r = {__words = {140737488289792, 656479155, 2017612633062014975}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, changed = false}, format_regexp_escaping_rule = {value = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 7234311940023207182, __size_ = 140737488347136, __data_ = 0x7fffffffc4b0 "\340\001\334F"}, __s = {{__size_ = 14 '\016', __lx = 14 '\016'}, __data_ = "Escaped\000\340\377\377\377\177\000\000\260\304\377\377\377\177\000"}, __r = {__words = {7234311940023207182, 140737488347136, 140737488340144}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, changed = false}, format_regexp_skip_unmatched = {value = false, changed = false}, output_format_enable_streaming = {value = false, changed = false}, output_format_write_statistics = {value = true, changed = false}, allow_non_metadata_alters = {value = true, changed = false}}, custom_settings_map = {__table_ = {__bucket_list_ = {__ptr_ = {<std::__1::__compressed_pair_elem<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::pair<std::__1::shared_ptr<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const>, DB::SettingFieldCustom> >, void*>*>**, 0, false>> = {__value_ = 0x0}, <std::__1::__compressed_pair_elem<std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::pair<std::__1::shared_ptr<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const>, DB::SettingFieldCustom> >, void*>*>*> >, 1, false>> = {__value_ = {__data_ = {<std::__1::__compressed_pair_elem<unsigned long, 0, false>> = {__value_ = 0}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::pair<std::__1::shared_ptr<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const>, DB::SettingFieldCustom> >, void*>*>*>, 1, true>> = {<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::pair<std::__1::shared_ptr<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const>, DB::SettingFieldCustom> >, void*>*>*>> = {<No data fields>}, <No data fields>}, <No data fields>}}}, <No data fields>}}, __p1_ = {<std::__1::__compressed_pair_elem<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::pair<std::__1::shared_ptr<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const>, DB::SettingFieldCustom> >, void*>*>, 0, false>> = {__value_ = {__next_ = 0x0}}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::pair<std::__1::shared_ptr<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const>, DB::SettingFieldCustom> >, void*> >, 1, true>> = {<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::pair<std::__1::shared_ptr<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const>, DB::SettingFieldCustom> >, void*> >> = {<No data fields>}, <No data fields>}, <No data fields>}, __p2_ = {<std::__1::__compressed_pair_elem<unsigned long, 0, false>> = {__value_ = 0}, <std::__1::__compressed_pair_elem<std::__1::__unordered_map_hasher<std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::__hash_value_type<std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::pair<std::__1::shared_ptr<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const>, DB::SettingFieldCustom> >, std::__1::hash<std::__1::basic_string_view<char, std::__1::char_traits<char> > >, true>, 1, true>> = {<std::__1::__unordered_map_hasher<std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::__hash_value_type<std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::pair<std::__1::shared_ptr<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const>, DB::SettingFieldCustom> >, std::__1::hash<std::__1::basic_string_view<char, std::__1::char_traits<char> > >, true>> = {<std::__1::hash<std::__1::basic_string_view<char, std::__1::char_traits<char> > >> = {<std::__1::unary_function<std::__1::basic_string_view<char, std::__1::char_traits<char> >, unsigned long>> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, __p3_ = {<std::__1::__compressed_pair_elem<float, 0, false>> = {__value_ = 1}, <std::__1::__compressed_pair_elem<std::__1::__unordered_map_equal<std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::__hash_value_type<std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::pair<std::__1::shared_ptr<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const>, DB::SettingFieldCustom> >, std::__1::equal_to<std::__1::basic_string_view<char, std::__1::char_traits<char> > >, true>, 1, true>> = {<std::__1::__unordered_map_equal<std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::__hash_value_type<std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::pair<std::__1::shared_ptr<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const>, DB::SettingFieldCustom> >, std::__1::equal_to<std::__1::basic_string_view<char, std::__1::char_traits<char> > >, true>> = {<std::__1::equal_to<std::__1::basic_string_view<char, std::__1::char_traits<char> > >> = {<std::__1::binary_function<std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::basic_string_view<char, std::__1::char_traits<char> >, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}}}}, <No data fields>}, progress_callback = {<std::__1::__function::__maybe_derive_from_unary_function<void (const DB::Progress &)>> = {<std::__1::unary_function<DB::Progress const&, void>> = {<No data fields>}, <No data fields>}, <std::__1::__function::__maybe_derive_from_binary_function<void (const DB::Progress &)>> = {<No data fields>}, __f_ = {__buf_ = {__lx = "\001\000\000\000\000\000\000\000\004\000\000\000\061", '\000' <repeats 18 times>}, __f_ = 0x0}}, process_list_elem = 0x0, insertion_table = {database_name = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 0, __size_ = 0, __data_ = 0x0}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = '\000' <repeats 22 times>}, __r = {__words = {0, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, table_name = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 0, __size_ = 0, __data_ = 0x0}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = '\000' <repeats 22 times>}, __r = {__words = {0, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, uuid = {t = {low = 0, high = 0}}}, default_format = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 0, __size_ = 0, __data_ = 0x0}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = '\000' <repeats 22 times>}, __r = {__words = {0, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, external_tables_mapping = {__tree_ = {__begin_node_ = 0x7fffffffdc08, __pair1_ = {<std::__1::__compressed_pair_elem<std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>, 0, false>> = {__value_ = {__left_ = 0x0}}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::TemporaryTableHolder> >, void*> >, 1, true>> = {<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::TemporaryTableHolder> >, void*> >> = {<No data fields>}, <No data fields>}, <No data fields>}, __pair3_ = {<std::__1::__compressed_pair_elem<unsigned long, 0, false>> = {__value_ = 0}, <std::__1::__compressed_pair_elem<std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::TemporaryTableHolder> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, 1, true>> = {<std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::TemporaryTableHolder> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>> = {<std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >> = {<std::__1::binary_function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}}}, scalars = {__tree_ = {__begin_node_ = 0x7fffffffdc20, __pair1_ = {<std::__1::__compressed_pair_elem<std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>, 0, false>> = {__value_ = {__left_ = 0x0}}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, DB::Block>, void*> >, 1, true>> = {<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, DB::Block>, void*> >> = {<No data fields>}, <No data fields>}, <No data fields>}, __pair3_ = {<std::__1::__compressed_pair_elem<unsigned long, 0, false>> = {__value_ = 0}, <std::__1::__compressed_pair_elem<std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, DB::Block>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, 1, true>> = {<std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, DB::Block>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>> = {<std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >> = {<std::__1::binary_function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}}}, view_source = {__ptr_ = 0x0, __cntrl_ = 0x0}, table_function_results = {__tree_ = {__begin_node_ = 0x7fffffffdc48, __pair1_ = {<std::__1::__compressed_pair_elem<std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>, 0, false>> = {__value_ = {__left_ = 0x0}}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IStorage> >, void*> >, 1, true>> = {<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IStorage> >, void*> >> = {<No data fields>}, <No data fields>}, <No data fields>}, __pair3_ = {<std::__1::__compressed_pair_elem<unsigned long, 0, false>> = {__value_ = 0}, <std::__1::__compressed_pair_elem<std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IStorage> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, 1, true>> = {<std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IStorage> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>> = {<std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >> = {<std::__1::binary_function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}}}, query_context = 0x0, session_context = 0x0, global_context = 0x7fffffffc950, sample_block_cache = {__table_ = {__bucket_list_ = {__ptr_ = {<std::__1::__compressed_pair_elem<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, DB::Block>, void*>*>**, 0, false>> = {__value_ = 0x0}, <std::__1::__compressed_pair_elem<std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, DB::Block>, void*>*>*> >, 1, false>> = {__value_ = {__data_ = {<std::__1::__compressed_pair_elem<unsigned long, 0, false>> = {__value_ = 0}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, DB::Block>, void*>*>*>, 1, true>> = {<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, DB::Block>, void*>*>*>> = {<No data fields>}, <No data fields>}, <No data fields>}}}, <No data fields>}}, __p1_ = {<std::__1::__compressed_pair_elem<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, DB::Block>, void*>*>, 0, false>> = {__value_ = {__next_ = 0x0}}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, DB::Block>, void*> >, 1, true>> = {<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, DB::Block>, void*> >> = {<No data fields>}, <No data fields>}, <No data fields>}, __p2_ = {<std::__1::__compressed_pair_elem<unsigned long, 0, false>> = {__value_ = 0}, <std::__1::__compressed_pair_elem<std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, DB::Block>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, 1, true>> = {<std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, DB::Block>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>> = {<std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >> = {<std::__1::unary_function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, __p3_ = {<std::__1::__compressed_pair_elem<float, 0, false>> = {__value_ = 1}, <std::__1::__compressed_pair_elem<std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, DB::Block>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, 1, true>> = {<std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, DB::Block>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>> = {<std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >> = {<std::__1::binary_function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}}}, query_parameters = {__table_ = {__bucket_list_ = {__ptr_ = {<std::__1::__compressed_pair_elem<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*>*>**, 0, false>> = {__value_ = 0x0}, <std::__1::__compressed_pair_elem<std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*>*>*> >, 1, false>> = {__value_ = {__data_ = {<std::__1::__compressed_pair_elem<unsigned long, 0, false>> = {__value_ = 0}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*>*>*>, 1, true>> = {<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*>*>*>> = {<No data fields>}, <No data fields>}, <No data fields>}}}, <No data fields>}}, __p1_ = {<std::__1::__compressed_pair_elem<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*>*>, 0, false>> = {__value_ = {__next_ = 0x0}}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*> >, 1, true>> = {<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*> >> = {<No data fields>}, <No data fields>}, <No data fields>}, __p2_ = {<std::__1::__compressed_pair_elem<unsigned long, 0, false>> = {__value_ = 0}, <std::__1::__compressed_pair_elem<std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, 1, true>> = {<std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>> = {<std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >> = {<std::__1::unary_function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, __p3_ = {<std::__1::__compressed_pair_elem<float, 0, false>> = {__value_ = 1}, <std::__1::__compressed_pair_elem<std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, 1, true>> = {<std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>> = {<std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >> = {<std::__1::binary_function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}}}, host_context = {__ptr_ = 0x0, __cntrl_ = 0x0}, mysql = {sequence_id = 0 '\000', client_capabilities = 0, max_packet_size = 0}}, std_in = <incomplete type>, std_out = <incomplete type>, pager_cmd = {__ptr_ = {<std::__1::__compressed_pair_elem<DB::ShellCommand*, 0, false>> = {__value_ = 0x0}, <std::__1::__compressed_pair_elem<std::__1::default_delete<DB::ShellCommand>, 1, true>> = {<std::__1::default_delete<DB::ShellCommand>> = {<No data fields>}, <No data fields>}, <No data fields>}}, out_file_buf = {<std::__1::__optional_move_assign_base<DB::WriteBufferFromFile, false>> = {<std::__1::__optional_copy_assign_base<DB::WriteBufferFromFile, false>> = {<std::__1::__optional_move_base<DB::WriteBufferFromFile, false>> = {<std::__1::__optional_copy_base<DB::WriteBufferFromFile, false>> = {<std::__1::__optional_storage_base<DB::WriteBufferFromFile, false>> = {<std::__1::__optional_destruct_base<DB::WriteBufferFromFile, false>> = {{__null_state_ = 0 '\000', __val_ = <incomplete type>}, __engaged_ = false}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <std::__1::__sfinae_ctor_base<false, false>> = {<No data fields>}, <std::__1::__sfinae_assign_base<false, false>> = {<No data fields>}, <No data fields>}, block_out_stream = {__ptr_ = 0x0, __cntrl_ = 0x0}, out_logs_buf = {__ptr_ = {<std::__1::__compressed_pair_elem<DB::WriteBuffer*, 0, false>> = {__value_ = 0x0}, <std::__1::__compressed_pair_elem<std::__1::default_delete<DB::WriteBuffer>, 1, true>> = {<std::__1::default_delete<DB::WriteBuffer>> = {<No data fields>}, <No data fields>}, <No data fields>}}, server_logs_file = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 0, __size_ = 0, __data_ = 0x0}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = '\000' <repeats 22 times>}, __r = {__words = {0, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, logs_out_stream = {__ptr_ = 0x0, __cntrl_ = 0x0}, home_path = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 8155848970886197014, __size_ = 1634166127, __data_ = 0x0}, __s = {{__size_ = 22 '\026', __lx = 22 '\026'}, __data_ = "/home/qoega", '\000' <repeats 11 times>}, __r = {__words = {8155848970886197014, 1634166127, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, current_profile = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 0, __size_ = 0, __data_ = 0x0}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = '\000' <repeats 22 times>}, __r = {__words = {0, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, prompt_by_server_display_name = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 49, __size_ = 33, __data_ = 0x46e42720 "qoega-qyp.sas.yp-c.yandex.net :) "}, __s = {{__size_ = 49 '1', __lx = 49 '1'}, __data_ = "\000\000\000\000\000\000\000!\000\000\000\000\000\000\000 '\344F\000\000\000"}, __r = {__words = {49, 33, 1189357344}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, history_file = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 0, __size_ = 0, __data_ = 0x0}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = '\000' <repeats 22 times>}, __r = {__words = {0, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, processed_rows = 1, parsed_query = {__ptr_ = 0x46e4d958, __cntrl_ = 0x46e4d940}, last_exception_received_from_server = {__ptr_ = {<std::__1::__compressed_pair_elem<DB::Exception*, 0, false>> = {__value_ = 0x0}, <std::__1::__compressed_pair_elem<std::__1::default_delete<DB::Exception>, 1, true>> = {<std::__1::default_delete<DB::Exception>> = {<No data fields>}, <No data fields>}, <No data fields>}}, received_exception_from_server = false, expected_server_error = 0, expected_client_error = 0, actual_server_error = 62, actual_client_error = 0, server_revision = 54438, server_version = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 13843092686778892, __size_ = 0, __data_ = 0x46d3c940 "X\206\034$"}, __s = {{__size_ = 12 '\f', __lx = 12 '\f'}, __data_ = "20.8.1\000\000\000\000\000\000\000\000\000@\311\323F\000\000\000"}, __r = {__words = {13843092686778892, 0, 1188284736}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, server_display_name = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 49, __size_ = 29, __data_ = 0x46e421f0 "qoega-qyp.sas.yp-c.yandex.net"}, __s = {{__size_ = 49 '1', __lx = 49 '1'}, __data_ = "\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\360!\344F\000\000\000"}, __r = {__words = {49, 29, 1189356016}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, watch = {start_ns = 9596518518148722, stop_ns = 0, clock_type = 1, is_running = true}, progress = {read_rows = {<std::__1::__atomic_base<unsigned long, true>> = {<std::__1::__atomic_base<unsigned long, false>> = {__a_ = {<std::__1::__cxx_atomic_base_impl<unsigned long>> = {__a_value = 1}, <No data fields>}, static is_always_lock_free = <optimized out>}, <No data fields>}, <No data fields>}, read_bytes = {<std::__1::__atomic_base<unsigned long, true>> = {<std::__1::__atomic_base<unsigned long, false>> = {__a_ = {<std::__1::__cxx_atomic_base_impl<unsigned long>> = {__a_value = 1}, <No data fields>}, static is_always_lock_free = <optimized out>}, <No data fields>}, <No data fields>}, total_rows_to_read = {<std::__1::__atomic_base<unsigned long, true>> = {<std::__1::__atomic_base<unsigned long, false>> = {__a_ = {<std::__1::__cxx_atomic_base_impl<unsigned long>> = {__a_value = 0}, <No data fields>}, static is_always_lock_free = <optimized out>}, <No data fields>}, <No data fields>}, written_rows = {<std::__1::__atomic_base<unsigned long, true>> = {<std::__1::__atomic_base<unsigned long, false>> = {__a_ = {<std::__1::__cxx_atomic_base_impl<unsigned long>> = {__a_value = 0}, <No data fields>}, static is_always_lock_free = <optimized out>}, <No data fields>}, <No data fields>}, written_bytes = {<std::__1::__atomic_base<unsigned long, true>> = {<std::__1::__atomic_base<unsigned long, false>> = {__a_ = {<std::__1::__cxx_atomic_base_impl<unsigned long>> = {__a_value = 0}, <No data fields>}, static is_always_lock_free = <optimized out>}, <No data fields>}, <No data fields>}}, show_progress_bar = false, written_progress_chars = 0, written_first_block = true, external_tables = {<std::__1::__list_imp<DB::ExternalTable, std::__1::allocator<DB::ExternalTable> >> = {__end_ = {__prev_ = 0x7fffffffe000, __next_ = 0x7fffffffe000}, __size_alloc_ = {<std::__1::__compressed_pair_elem<unsigned long, 0, false>> = {__value_ = 0}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::__list_node<DB::ExternalTable, void*> >, 1, true>> = {<std::__1::allocator<std::__1::__list_node<DB::ExternalTable, void*> >> = {<No data fields>}, <No data fields>}, <No data fields>}}, <No data fields>}, query_parameters = {__table_ = {__bucket_list_ = {__ptr_ = {<std::__1::__compressed_pair_elem<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*>*>**, 0, false>> = {__value_ = 0x0}, <std::__1::__compressed_pair_elem<std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*>*>*> >, 1, false>> = {__value_ = {__data_ = {<std::__1::__compressed_pair_elem<unsigned long, 0, false>> = {__value_ = 0}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*>*>*>, 1, true>> = {<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*>*>*>> = {<No data fields>}, <No data fields>}, <No data fields>}}}, <No data fields>}}, __p1_ = {<std::__1::__compressed_pair_elem<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*>*>, 0, false>> = {__value_ = {__next_ = 0x0}}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*> >, 1, true>> = {<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*> >> = {<No data fields>}, <No data fields>}, <No data fields>}, __p2_ = {<std::__1::__compressed_pair_elem<unsigned long, 0, false>> = {__value_ = 0}, <std::__1::__compressed_pair_elem<std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, 1, true>> = {<std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>> = {<std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >> = {<std::__1::unary_function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, __p3_ = {<std::__1::__compressed_pair_elem<float, 0, false>> = {__value_ = 1}, <std::__1::__compressed_pair_elem<std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, 1, true>> = {<std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>> = {<std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >> = {<std::__1::binary_function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}}}, connection_parameters = {host = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 8027785501323783186, __size_ = 1174434931, __data_ = 0x5d <error: Cannot access memory at address 0x5d>}, __s = {{__size_ = 18 '\022', __lx = 18 '\022'}, __data_ = "localhost\000F\000\000\000\000]\000\000\000\000\000\000"}, __r = {__words = {8027785501323783186, 1174434931, 93}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, port = 9000, default_database = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 8027785501323755520, __size_ = 1174434931, __data_ = 0x5d <error: Cannot access memory at address 0x5d>}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = "\000ocalhost\000F\000\000\000\000]\000\000\000\000\000\000"}, __r = {__words = {8027785501323755520, 1174434931, 93}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, user = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 8389209267074589710, __size_ = 1174434816, __data_ = 0x5d <error: Cannot access memory at address 0x5d>}, __s = {{__size_ = 14 '\016', __lx = 14 '\016'}, __data_ = "default\000t\000F\000\000\000\000]\000\000\000\000\000\000"}, __r = {__words = {8389209267074589710, 1174434816, 93}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, password = {<std::__1::__basic_string_common<true>> = {<No data fields>}, static __short_mask = 1, static __long_mask = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__cap_ = 8389209267074564096, __size_ = 1174434816, __data_ = 0x5d <error: Cannot access memory at address 0x5d>}, __s = {{__size_ = 0 '\000', __lx = 0 '\000'}, __data_ = "\000efault\000t\000F\000\000\000\000]\000\000\000\000\000\000"}, __r = {__words = {8389209267074564096, 1174434816, 93}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, security = DB::Protocol::Secure::Disable, compression = DB::Protocol::Compression::Enable, timeouts = {connection_timeout = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 10000000}, send_timeout = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 300000000}, receive_timeout = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 300000000}, tcp_keep_alive_timeout = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 0}, http_keep_alive_timeout = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 0}, secure_connection_timeout = {static MILLISECONDS = 1000, static SECONDS = 1000000, static MINUTES = 60000000, static HOURS = 3600000000, static DAYS = 86400000000, _span = 10000000}}}, fuzzer = {fuzz_rand = {<pcg_detail::xsl_rr_mixin<unsigned long, unsigned __int128>> = {<No data fields>}, <pcg_detail::specific_stream<unsigned __int128>> = {static is_mcg = false, inc_ = 117397592171526113268558934119004209487, static can_specify_stream = true}, <pcg_detail::default_multiplier<unsigned __int128>> = {<No data fields>}, state_ = 62010211812682719497860984956251269580}, aliases_set = {__table_ = {__bucket_list_ = {__ptr_ = {<std::__1::__compressed_pair_elem<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*>**, 0, false>> = {__value_ = 0x46df0130}, <std::__1::__compressed_pair_elem<std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*>*> >, 1, false>> = {__value_ = {__data_ = {<std::__1::__compressed_pair_elem<unsigned long, 0, false>> = {__value_ = 5}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*>*>, 1, true>> = {<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*>*>> = {<No data fields>}, <No data fields>}, <No data fields>}}}, <No data fields>}}, __p1_ = {<std::__1::__compressed_pair_elem<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*>, 0, false>> = {__value_ = {__next_ = 0x46df0160}}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*> >, 1, true>> = {<std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*> >> = {<No data fields>}, <No data fields>}, <No data fields>}, __p2_ = {<std::__1::__compressed_pair_elem<unsigned long, 0, false>> = {__value_ = 3}, <std::__1::__compressed_pair_elem<std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, 1, true>> = {<std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >> = {<std::__1::unary_function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, __p3_ = {<std::__1::__compressed_pair_elem<float, 0, false>> = {__value_ = 1}, <std::__1::__compressed_pair_elem<std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, 1, true>> = {<std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >> = {<std::__1::binary_function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}}}, aliases = {<std::__1::__vector_base<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >> = {<std::__1::__vector_base_common<true>> = {<No data fields>}, __begin_ = 0x46deaeb0, __end_ = 0x46deaef8, __end_cap_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, 0, false>> = {__value_ = 0x46deaf10}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, 1, true>> = {<std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >> = {<No data fields>}, <No data fields>}, <No data fields>}}, <No data fields>}, column_like_map = {__table_ = {__bucket_list_ = {__ptr_ = {<std::__1::__compressed_pair_elem<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IAST> >, void*>*>**, 0, false>> = {__value_ = 0x46e0efa0}, <std::__1::__compressed_pair_elem<std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IAST> >, void*>*>*> >, 1, false>> = {__value_ = {__data_ = {<std::__1::__compressed_pair_elem<unsigned long, 0, false>> = {__value_ = 197}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IAST> >, void*>*>*>, 1, true>> = {<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IAST> >, void*>*>*>> = {<No data fields>}, <No data fields>}, <No data fields>}}}, <No data fields>}}, __p1_ = {<std::__1::__compressed_pair_elem<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IAST> >, void*>*>, 0, false>> = {__value_ = {__next_ = 0x46e2b170}}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IAST> >, void*> >, 1, true>> = {<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IAST> >, void*> >> = {<No data fields>}, <No data fields>}, <No data fields>}, __p2_ = {<std::__1::__compressed_pair_elem<unsigned long, 0, false>> = {__value_ = 134}, <std::__1::__compressed_pair_elem<std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IAST> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, 1, true>> = {<std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IAST> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>> = {<std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >> = {<std::__1::unary_function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, __p3_ = {<std::__1::__compressed_pair_elem<float, 0, false>> = {__value_ = 1}, <std::__1::__compressed_pair_elem<std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IAST> >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, 1, true>> = {<std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IAST> >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>> = {<std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >> = {<std::__1::binary_function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}}}, column_like = {<std::__1::__vector_base<std::__1::shared_ptr<DB::IAST>, std::__1::allocator<std::__1::shared_ptr<DB::IAST> > >> = {<std::__1::__vector_base_common<true>> = {<No data fields>}, __begin_ = 0x46e2bc20, __end_ = 0x46e2c480, __end_cap_ = {<std::__1::__compressed_pair_elem<std::__1::shared_ptr<DB::IAST>*, 0, false>> = {__value_ = 0x46e2cc20}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::shared_ptr<DB::IAST> >, 1, true>> = {<std::__1::allocator<std::__1::shared_ptr<DB::IAST> >> = {<No data fields>}, <No data fields>}, <No data fields>}}, <No data fields>}, table_like_map = {__table_ = {__bucket_list_ = {__ptr_ = {<std::__1::__compressed_pair_elem<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IAST> >, void*>*>**, 0, false>> = {__value_ = 0x0}, <std::__1::__compressed_pair_elem<std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IAST> >, void*>*>*> >, 1, false>> = {__value_ = {__data_ = {<std::__1::__compressed_pair_elem<unsigned long, 0, false>> = {__value_ = 0}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IAST> >, void*>*>*>, 1, true>> = {<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IAST> >, void*>*>*>> = {<No data fields>}, <No data fields>}, <No data fields>}}}, <No data fields>}}, __p1_ = {<std::__1::__compressed_pair_elem<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IAST> >, void*>*>, 0, false>> = {__value_ = {__next_ = 0x0}}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IAST> >, void*> >, 1, true>> = {<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IAST> >, void*> >> = {<No data fields>}, <No data fields>}, <No data fields>}, __p2_ = {<std::__1::__compressed_pair_elem<unsigned long, 0, false>> = {__value_ = 0}, <std::__1::__compressed_pair_elem<std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IAST> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, 1, true>> = {<std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IAST> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>> = {<std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >> = {<std::__1::unary_function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, __p3_ = {<std::__1::__compressed_pair_elem<float, 0, false>> = {__value_ = 1}, <std::__1::__compressed_pair_elem<std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IAST> >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, 1, true>> = {<std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IAST> >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>> = {<std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >> = {<std::__1::binary_function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}}}, table_like = {<std::__1::__vector_base<std::__1::shared_ptr<DB::IAST>, std::__1::allocator<std::__1::shared_ptr<DB::IAST> > >> = {<std::__1::__vector_base_common<true>> = {<No data fields>}, __begin_ = 0x0, __end_ = 0x0, __end_cap_ = {<std::__1::__compressed_pair_elem<std::__1::shared_ptr<DB::IAST>*, 0, false>> = {__value_ = 0x0}, <std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::shared_ptr<DB::IAST> >, 1, true>> = {<std::__1::allocator<std::__1::shared_ptr<DB::IAST> >> = {<No data fields>}, <No data fields>}, <No data fields>}}, <No data fields>}}, query_fuzzer_runs = 10000}
        e = <optimized out>
        e = <optimized out>
#27 0x00000000270b0a9b in main (argc_=<optimized out>, argv_=<optimized out>) at ../programs/main.cpp:338
        argv = {<std::__1::__vector_base<char*, std::__1::allocator<char*> >> = {<std::__1::__vector_base_common<true>> = {<No data fields>}, __begin_ = 0x46d3bd00, __end_ = 0x46d3bd10, __end_cap_ = {<std::__1::__compressed_pair_elem<char**, 0, false>> = {__value_ = 0x46d3bd10}, <std::__1::__compressed_pair_elem<std::__1::allocator<char*>, 1, true>> = {<std::__1::allocator<char*>> = {<No data fields>}, <No data fields>}, <No data fields>}}, <No data fields>}
        main_func = 0x272050c0 <mainEntryClickHouseClient(int, char**)>
        scope_exit313 = <optimized out>
```