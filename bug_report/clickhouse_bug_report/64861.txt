ID: 64861
Title: Limits for a table name length
Description:
When user creates a table with name length 250, clickhouse fails.

firstly `DROP TABLE` has failed.
```
{<query_id} <Error> executeQuery: std::exception. Code: 1001, type: std::__1::__fs::filesystem::filesystem_error, e.what() = filesystem error: in rename: File name too long ["/var/lib/clickhouse/store/4e2/<database_uid>/<long_table_name>.sql"] ["/var/lib/clickhouse/metadata_dropped/default.<long_table_name>.<table_uuid>.sql"]
 Cannot print extra info for Poco::Exception (version 24.2.2.16288 (official build)) (from 0.0.0.0:0) (in query: /* ddl_entry=query-0000010938 */ DROP TABLE default.<long_table_name>), Stack trace (when copying this message, always include the lines below):  0. std::system_error::system_error(std::error_code, String const&) @ 0x00000000174a06f5 1. std::__fs::filesystem::filesystem_error::filesystem_error[abi:v15000](String const&, std::__fs::filesystem::path const&, std::__fs::filesystem::path const&, std::error_code) @ 0x0000000017457684 2. void std::__fs::filesystem::__throw_filesystem_error[abi:v15000]<String&, std::__fs::filesystem::path const&, std::__fs::filesystem::path const&, std::error_code const&>(String&, std::__fs::filesystem::path const&, std::__fs::filesystem::path const&, std::error_code const&) @ 0x000000001745745d 3. std::__fs::filesystem::detail::(anonymous namespace)::ErrorHandler<void>::report(std::error_code const&) const (.llvm.1044553589876245905) @ 0x00000000174596d0 4. std::__fs::filesystem::__rename(std::__fs::filesystem::path const&, std::__fs::filesystem::path const&, std::error_code*) @ 0x000000001745d93d 5. DB::DatabaseAtomic::dropTableImpl(std::shared_ptr<DB::Context const>, String const&, bool) @ 0x000000001027ad56 6. DB::DatabaseReplicated::dropTable(std::shared_ptr<DB::Context const>, String const&, bool) @ 0x00000000102c2ba3 7. DB::InterpreterDropQuery::executeToTableImpl(std::shared_ptr<DB::Context const>, DB::ASTDropQuery&, std::shared_ptr<DB::IDatabase>&, StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>&) @ 0x0000000010d2188b 8. DB::InterpreterDropQuery::execute() @ 0x0000000010d1b9d2 9. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000001140dca9 10. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&)>) @ 0x0000000011413172 11. DB::DDLWorker::tryExecuteQuery(DB::DDLTaskBase&, std::shared_ptr<zkutil::ZooKeeper> const&) @ 0x00000000106c1759 12. DB::DDLWorker::processTask(DB::DDLTaskBase&, std::shared_ptr<zkutil::ZooKeeper> const&) @ 0x00000000106bf9f5 13. DB::DatabaseReplicatedDDLWorker::tryEnqueueAndExecuteEntry(DB::DDLLogEntry&, std::shared_ptr<DB::Context const>) @ 0x00000000102db442 14. DB::DatabaseReplicated::tryEnqueueReplicatedDDL(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, DB::QueryFlags) @ 0x00000000102ac5bb 15. DB::InterpreterDropQuery::executeToTableImpl(std::shared_ptr<DB::Context const>, DB::ASTDropQuery&, std::shared_ptr<DB::IDatabase>&, StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>&) @ 0x0000000010d215d2 16. DB::InterpreterDropQuery::execute() @ 0x0000000010d1b9d2 17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000001140dca9 18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&)>) @ 0x0000000011413172 19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000126a80b5 20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000126acb74 21. DB::HTTPServerConnection::run() @ 0x000000001272c2fa 22. DB::TCPProtocolStackHandler::run() @ 0x000000000ce3f711 23. Poco::Net::TCPServerConnection::start() @ 0x000000001505a3f2 24. Poco::Net::TCPServerDispatcher::run() @ 0x000000001505b239 25. Poco::PooledThread::run() @ 0x00000000151539e1 26. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015151f7d 27. ? @ 0x00007f54a7681ac3 28. ? @ 0x00007f54a7713850
```

After, Clickhouse was not able to start
```
2024.06.05 17:40:59.128246 [ 79 ] {} <Error> Application: std::exception. Code: 1001, type: std::__1::__fs::filesystem::filesystem_error, e.what() = filesystem error: in posix_stat: failed to determine attributes for the specified path: File name too long ["/var/lib/clickhouse/store/15b/15b93fde-bd51-4d3e-9d9d-1cf95ebb2d55/<long_table_name>.sql.detached"], Stack trace (when copying this message, always include the lines below):

0. std::system_error::system_error(std::error_code, String const&) @ 0x00000000174a06f5
1. std::__fs::filesystem::filesystem_error::filesystem_error[abi:v15000](String const&, std::__fs::filesystem::path const&, std::error_code) @ 0x000000000cca2fe1
2. void std::__fs::filesystem::__throw_filesystem_error[abi:v15000]<String&, std::__fs::filesystem::path const&, std::error_code const&>(String&, std::__fs::filesystem::path const&, std::error_code const&) @ 0x00000000174573da
3. std::__fs::filesystem::detail::(anonymous namespace)::ErrorHandler<void>::report(std::error_code const&, char const*, ...) const (.llvm.1044553589876245905) @ 0x0000000017460852
4. std::__fs::filesystem::detail::(anonymous namespace)::create_file_status(std::error_code&, std::__fs::filesystem::path const&, stat const&, std::error_code*) (.llvm.1044553589876245905) @ 0x000000001746066d
5. std::__fs::filesystem::__status(std::__fs::filesystem::path const&, std::error_code*) @ 0x000000001745dbaa
6. void std::__function::__policy_invoker<void (String const&)>::__call_impl<std::__function::__default_alloc_func<DB::DatabaseOrdinary::loadTablesMetadata(std::shared_ptr<DB::Context const>, DB::ParsedTablesMetadata&, bool)::$_0, void (String const&)>>(std::__function::__policy_storage const*, String const&) @ 0x00000000102942b3
7. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>) @ 0x000000000ccff939
8. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000cd0333a
9. void* std::__thread_proxy[abi:v15000]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000cd0214d
10. ? @ 0x00007f19b6c32ac3
11. ? @ 0x00007f19b6cc4850
```

We should revise our limits or introduce them. 