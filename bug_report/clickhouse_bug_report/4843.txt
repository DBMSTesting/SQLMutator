ID: 4843
Title: Segment Fault of arrayIntersect
Description:
Hi. I found a bug causing segment fault when I use function arrayIntersect. It can be reproduced as follows.

1. create a table:
create table array_intersect (date Date, arr Array(UInt8)) engine=MergeTree partition by date order by date
![image](https://user-images.githubusercontent.com/6196299/55214939-10ca1680-5233-11e9-8f54-c344a6e62745.png)

2 insert several values:
insert into array_intersect values ('2019-01-01', [1,2,3])
insert into array_intersect values ('2019-01-01', [1,2])
insert into array_intersect values ('2019-01-01', [1])
insert into array_intersect values ('2019-01-01', [])

3 optimize table:
optimize table array_intersect

4 select from table 
select arrayIntersect(arr,[1,2]) from array_intersect

Then you will see a segment fault:
--------------------------------------------------------------------------------------------
2019.03.29 17:00:29.441772 [ 2 ] {} <Error> BaseDaemon: ########################################
2019.03.29 17:00:29.442078 [ 2 ] {} <Error> BaseDaemon: (from thread 214) Received signal Segmentation fault (11).
2019.03.29 17:00:29.442168 [ 2 ] {} <Error> BaseDaemon: Address: 0x7f9a5e600000
2019.03.29 17:00:29.442209 [ 2 ] {} <Error> BaseDaemon: Access: read.
2019.03.29 17:00:29.442251 [ 2 ] {} <Error> BaseDaemon: Address not mapped to object.
2019.03.29 17:00:29.502066 [ 2 ] {} <Error> BaseDaemon: 0. ./clickhouse(COWPtr<DB::IColumn>::immutable_ptr<DB::IColumn> DB::FunctionArrayIntersect::execute<ClearableHashMap<unsigned char, unsigned long, DefaultHash<unsigned char>, HashTableGrower<9ul>, AllocatorWithStackMemory<Allocator<true>, 512ul> >, DB::ColumnVector<unsigned char>, true>(DB::FunctionArrayIntersect::UnpackedArrays const&, COWPtr<DB::IColumn>::mutable_ptr<DB::IColumn>)+0x5e6) [0xcaa87d0]
2019.03.29 17:00:29.502180 [ 2 ] {} <Error> BaseDaemon: 1. ./clickhouse(void DB::FunctionArrayIntersect::NumberExecutor::operator()<unsigned char, 0ul>()+0x8b) [0xcaa5037]
2019.03.29 17:00:29.502293 [ 2 ] {} <Error> BaseDaemon: 2. ./clickhouse(DB::FunctionArrayIntersect::executeImpl(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long)+0x4eb) [0xca9fe57]
2019.03.29 17:00:29.502352 [ 2 ] {} <Error> BaseDaemon: 3. ./clickhouse(DB::DefaultExecutable::executeImpl(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long)+0x4f) [0xc1e0415]
2019.03.29 17:00:29.502468 [ 2 ] {} <Error> BaseDaemon: 4. ./clickhouse(DB::PreparedFunctionImpl::executeWithoutLowCardinalityColumns(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long)+0x86) [0x13e80f1a]
2019.03.29 17:00:29.502546 [ 2 ] {} <Error> BaseDaemon: 5. ./clickhouse(DB::PreparedFunctionImpl::execute(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long)+0x8dd) [0x13e82017]
2019.03.29 17:00:29.502626 [ 2 ] {} <Error> BaseDaemon: 6. ./clickhouse(DB::ExpressionAction::execute(DB::Block&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> > >&) const+0x55d) [0x140e7db7]
2019.03.29 17:00:29.502704 [ 2 ] {} <Error> BaseDaemon: 7. ./clickhouse(DB::ExpressionActions::execute(DB::Block&) const+0x10f) [0x140eb4d9]
2019.03.29 17:00:29.502759 [ 2 ] {} <Error> BaseDaemon: 8. ./clickhouse(DB::ExpressionBlockInputStream::readImpl()+0x73) [0x13eca43d]
2019.03.29 17:00:29.502814 [ 2 ] {} <Error> BaseDaemon: 9. ./clickhouse(DB::IProfilingBlockInputStream::read()+0x13a) [0x125efb30]
2019.03.29 17:00:29.502867 [ 2 ] {} <Error> BaseDaemon: 10. ./clickhouse(DB::ExpressionBlockInputStream::readImpl()+0x3f) [0x13eca409]
2019.03.29 17:00:29.502920 [ 2 ] {} <Error> BaseDaemon: 11. ./clickhouse(DB::IProfilingBlockInputStream::read()+0x13a) [0x125efb30]
2019.03.29 17:00:29.502974 [ 2 ] {} <Error> BaseDaemon: 12. ./clickhouse(DB::AsynchronousBlockInputStream::calculate()+0x7b) [0x125ed82f]
2019.03.29 17:00:29.503025 [ 2 ] {} <Error> BaseDaemon: 13. ./clickhouse() [0x125ed645]
2019.03.29 17:00:29.503071 [ 2 ] {} <Error> BaseDaemon: 14. ./clickhouse() [0x125ed9af]
2019.03.29 17:00:29.503119 [ 2 ] {} <Error> BaseDaemon: 15. ./clickhouse(std::function<void ()>::operator()() const+0x32) [0xbf0c568]
2019.03.29 17:00:29.503173 [ 2 ] {} <Error> BaseDaemon: 16. ./clickhouse(ThreadPool::worker()+0xef) [0x16a7b05d]
2019.03.29 17:00:29.503219 [ 2 ] {} <Error> BaseDaemon: 17. ./clickhouse() [0x16a7a9f9]
2019.03.29 17:00:29.503264 [ 2 ] {} <Error> BaseDaemon: 18. ./clickhouse() [0x16a7b820]
2019.03.29 17:00:29.503309 [ 2 ] {} <Error> BaseDaemon: 19. ./clickhouse() [0x16a7b65d]
2019.03.29 17:00:29.503361 [ 2 ] {} <Error> BaseDaemon: 20. ./clickhouse() [0x16a7ba86]
2019.03.29 17:00:29.503404 [ 2 ] {} <Error> BaseDaemon: 21. ./clickhouse() [0x16a7ba57]
2019.03.29 17:00:29.503449 [ 2 ] {} <Error> BaseDaemon: 22. ./clickhouse() [0x16a7ba36]


