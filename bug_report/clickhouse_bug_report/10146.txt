ID: 10146
Title: Segfault when creating database with MySQL engine
Description:
```
2020.04.09 11:49:57.495525 [ 17314 ] {9321e318-c86a-4b40-8d15-0516b362f958} <Debug> executeQuery: (from 127.0.0.1:48220) CREATE DATABASE logs_mysql ENGINE = MySQL(`HOSTNAME`, logs, 'clickhouse', 'PASSWORD')
2020.04.09 11:49:57.495632 [ 17314 ] {9321e318-c86a-4b40-8d15-0516b362f958} <Trace> AccessRightsContext (default): Access granted: CREATE DATABASE ON logs_mysql.*
2020.04.09 11:49:57.496440 [ 17359 ] {} <Fatal> BaseDaemon: ########################################
2020.04.09 11:49:57.496488 [ 17359 ] {} <Fatal> BaseDaemon: (version 20.3.5.21 (official build)) (from thread 17314) (query_id: 9321e318-c86a-4b40-8d15-0516b362f958) Received signal Segmentation fault (11).
2020.04.09 11:49:57.496515 [ 17359 ] {} <Fatal> BaseDaemon: Address: 0x80 Access: read. Address not mapped to object.
2020.04.09 11:49:57.496530 [ 17359 ] {} <Fatal> BaseDaemon: Stack trace: 0xd034ae7 0xd03554e 0xd02c055 0xd02cadf 0xd535848 0xd538471 0x9015119 0x9016100 0xe3867bb 0xe386c3d 0x1059d237 0x1059903c 0x1059a9dd 0x7f65c981f2de 0x7f65ca0be133
2020.04.09 11:49:57.536591 [ 17359 ] {} <Fatal> BaseDaemon: 3. DB::DatabaseFactory::getImpl(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::ASTStorage const*, DB::Context&) @ 0xd034ae7 in /usr/bin/clickhouse
2020.04.09 11:49:57.536670 [ 17359 ] {} <Fatal> BaseDaemon: 4. DB::DatabaseFactory::get(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::ASTStorage const*, DB::Context&) @ 0xd03554e in /usr/bin/clickhouse
2020.04.09 11:49:57.536699 [ 17359 ] {} <Fatal> BaseDaemon: 5. DB::InterpreterCreateQuery::createDatabase(DB::ASTCreateQuery&) @ 0xd02c055 in /usr/bin/clickhouse
2020.04.09 11:49:57.536715 [ 17359 ] {} <Fatal> BaseDaemon: 6. DB::InterpreterCreateQuery::execute() @ 0xd02cadf in /usr/bin/clickhouse
2020.04.09 11:49:57.536726 [ 17359 ] {} <Fatal> BaseDaemon: 7. ? @ 0xd535848 in /usr/bin/clickhouse
2020.04.09 11:49:57.536740 [ 17359 ] {} <Fatal> BaseDaemon: 8. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, bool) @ 0xd538471 in /usr/bin/clickhouse
2020.04.09 11:49:57.536758 [ 17359 ] {} <Fatal> BaseDaemon: 9. DB::TCPHandler::runImpl() @ 0x9015119 in /usr/bin/clickhouse
2020.04.09 11:49:57.536772 [ 17359 ] {} <Fatal> BaseDaemon: 10. DB::TCPHandler::run() @ 0x9016100 in /usr/bin/clickhouse
2020.04.09 11:49:57.536785 [ 17359 ] {} <Fatal> BaseDaemon: 11. Poco::Net::TCPServerConnection::start() @ 0xe3867bb in /usr/bin/clickhouse
2020.04.09 11:49:57.536796 [ 17359 ] {} <Fatal> BaseDaemon: 12. Poco::Net::TCPServerDispatcher::run() @ 0xe386c3d in /usr/bin/clickhouse
2020.04.09 11:49:57.536808 [ 17359 ] {} <Fatal> BaseDaemon: 13. Poco::PooledThread::run() @ 0x1059d237 in /usr/bin/clickhouse
2020.04.09 11:49:57.536828 [ 17359 ] {} <Fatal> BaseDaemon: 14. Poco::ThreadImpl::runnableEntry(void*) @ 0x1059903c in /usr/bin/clickhouse
2020.04.09 11:49:57.536838 [ 17359 ] {} <Fatal> BaseDaemon: 15. ? @ 0x1059a9dd in /usr/bin/clickhouse
2020.04.09 11:49:57.536854 [ 17359 ] {} <Fatal> BaseDaemon: 16. start_thread @ 0x82de in /usr/lib64/libpthread-2.28.so
2020.04.09 11:49:57.536876 [ 17359 ] {} <Fatal> BaseDaemon: 17. __GI___clone @ 0xfc133 in /usr/lib64/libc-2.28.so
```

* Which ClickHouse server version to use
│ 20.3.5.21 │
* Which interface to use, if matters
command line
* Non-default settings, if any
everything is default from the package
