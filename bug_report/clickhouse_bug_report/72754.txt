ID: 72754
Title: PostreSQL array logical error
Description:
**Describe the bug**
Attempting to insert into a PostgreSQL `BOOLEAN[]` gives a logical error.

**How to reproduce**
On PostgreSQL run:

```sql
CREATE TABLE t0(c0 BOOLEAN[]);
```
Then in ClickHouse run:
```sql
INSERT INTO TABLE FUNCTION postgresql('<host:port>', '<database>', 't0', '<user>', '<password>', '<schema>') SELECT [FALSE];
```
Stack trace:
```
<Fatal> : Logical error: 'Bad cast from type DB::ColumnVector<unsigned short> to DB::ColumnVector<char8_t>'.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. std::exception::exception[abi:v15007]() @ 0x00000000194f0b54
1. base/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(String const&, int) @ 0x0000000039221f00
2. src/Common/Exception.cpp:109: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000002628a2cb
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000001938e7b6
4. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000019390e4f
5. DB::ColumnVector<char8_t> const& assert_cast<DB::ColumnVector<char8_t> const&, DB::IColumn const&>(DB::IColumn const&) @ 0x000000001951121d
6. src/DataTypes/Serializations/SerializationNumber.cpp:21: DB::SerializationNumber<char8_t>::serializeText(DB::IColumn const&, unsigned long, DB::WriteBuffer&, DB::FormatSettings const&) const @ 0x00000000313a9b3c
7. src/Storages/StoragePostgreSQL.cpp:366: DB::PostgreSQLSink::parseArrayContent(DB::Array const&, std::shared_ptr<DB::IDataType const> const&, DB::WriteBuffer&) @ 0x00000000349abaaa
8. src/Storages/StoragePostgreSQL.cpp:282: DB::PostgreSQLSink::consume(DB::Chunk&) @ 0x00000000349a55c2
9. src/Processors/Sinks/SinkToStorage.cpp:18: DB::SinkToStorage::onConsume(DB::Chunk) @ 0x000000003629804d
10. src/Processors/Transforms/ExceptionKeepingTransform.cpp:150: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::ExceptionKeepingTransform::work()::$_1, void ()>>(std::__function::__policy_storage const*) @ 0x00000000361089eb
11. contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x00000000361085db
12. src/Processors/Transforms/ExceptionKeepingTransform.cpp:150: DB::ExceptionKeepingTransform::work() @ 0x0000000036107721
13. src/Processors/Executors/ExecutionThreadContext.cpp:49: DB::ExecutionThreadContext::executeTask() @ 0x0000000035b87a56
14. src/Processors/Executors/PipelineExecutor.cpp:289: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000035b73e5c
15. src/Processors/Executors/PipelineExecutor.cpp:255: DB::PipelineExecutor::executeImpl(unsigned long, bool) @ 0x0000000035b72fc5
16. src/Processors/Executors/PipelineExecutor.cpp:126: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x0000000035b72c0a
17. src/Processors/Executors/CompletedPipelineExecutor.cpp:49: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::CompletedPipelineExecutor::execute()::$_0>(DB::CompletedPipelineExecutor::execute()::$_0&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000035b7175b
18. contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x00000000263a9bc1
19. contrib/llvm-project/libcxx/include/__functional/invoke.h:359: ? @ 0x00000000263b0b6a
20. ? @ 0x00007ffff7ca1e2e
21. ? @ 0x00007ffff7d33a4c
```
