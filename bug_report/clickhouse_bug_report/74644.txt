ID: 74644
Title: NOT_FOUND_COLUMN_IN_BLOCK regression on join condition
Description:
### Describe the bug

Very easy to reproduce, use a multiple join condition on a self-join query.

### How to reproduce

Run Fiddle: https://fiddle.clickhouse.com/3e7b7779-ba9b-493d-ad34-4278518c2893

This is a regression from v24.11: https://fiddle.clickhouse.com/92a9b7a8-656c-4ba8-93ec-107ad910fec9

### Error message and/or stacktrace

Stack trace:
```
<Error> TCPHandler: Code: 10. DB::Exception: Not found column __table2.c0 in block __table1.c0 Int32 Int32(size = 0). (NOT_FOUND_COLUMN_IN_BLOCK), Stack trace (when copying this message, always include the lines below):

0. src/Common/Exception.cpp:107: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dce4d3b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000008b7efcc
2. DB::Exception::Exception<String const&, String>(int, FormatStringHelperImpl<std::type_identity<String const&>::type, std::type_identity<String>::type>, String const&, String&&) @ 0x00000000091ef74b
3. src/Interpreters/ActionsDAG.cpp:1212: DB::ActionsDAG::appendInputsForUnusedColumns(DB::Block const&) @ 0x0000000011e26d6d
4. src/Planner/PlannerJoinTree.cpp:1524: DB::(anonymous namespace)::buildJoinQueryPlan(DB::QueryPlan, DB::QueryPlan, std::shared_ptr<DB::TableJoin>&, DB::JoinClausesAndActions&, std::unordered_set<std::shared_ptr<DB::FutureSet>, std::hash<std::shared_ptr<DB::FutureSet>>, std::equal_to<std::shared_ptr<DB::FutureSet>>, std::allocator<std::shared_ptr<DB::FutureSet>>>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::unordered_set<String, std::hash<String>, std::equal_to<String>, std::allocator<String>> const&, std::shared_ptr<DB::PlannerContext>&, DB::SelectQueryInfo const&) @ 0x00000000127e1a45
5. src/Planner/PlannerJoinTree.cpp:1947: DB::buildJoinTreeQueryPlan(std::shared_ptr<DB::IQueryTreeNode> const&, DB::SelectQueryInfo const&, DB::SelectQueryOptions&, std::unordered_set<String, std::hash<String>, std::equal_to<String>, std::allocator<String>> const&, std::shared_ptr<DB::PlannerContext>&) @ 0x00000000127c68ba
6. src/Planner/Planner.cpp:1546: DB::Planner::buildPlanForQueryNode() @ 0x00000000127ad706
7. src/Planner/Planner.cpp:1300: DB::Planner::buildQueryPlanIfNeeded() @ 0x00000000127a895e
8. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:241: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x0000000012b225bd
9. src/Interpreters/executeQuery.cpp:1608: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x0000000012b1d97c
10. src/Server/TCPHandler.cpp:658: DB::TCPHandler::runImpl() @ 0x0000000013dee72c
11. src/Server/TCPHandler.cpp:2625: DB::TCPHandler::run() @ 0x0000000013e0c019
12. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x0000000017394aa7
13. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x0000000017394ef9
14. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x000000001736145b
15. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001735f93d
16. ? @ 0x00007a00898a1e2e
17. ? @ 0x00007a0089933a4c
```