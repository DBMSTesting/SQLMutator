ID: 62517
Title: DB::Exception: Too large size error while executing CreatingSetsTransform. 
Description:
**Describe what's wrong**
We have a 2-node (2 replicas, 1 shard) cluster with version 24.1.8.22 (on kubernets - GKE). It has been running smoothly for the last few months, and we increased the data ingestion load yesterday. Now, both servers are down, with the error below. We can't start them. They print the error below as soon as they start and return to the Error state. Is there a way that we can bring them up? Thanks.

```
2024.04.10 21:27:50.933445 [ 631 ] {} <Error> 1d1bce77-efb5-46c9-b036-623bbb862a2d::all_0_0_0_1 (MutateFromLogEntryTask): virtual bool DB::ReplicatedMergeMutateTaskBase::executeStep(): Code: 49. DB::Exception: Too large size (18446743629458559734) passed to allocator. It indicates an error.: While executing CreatingSetsTransform. (LOGICAL_ERROR), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000c804c9b in /usr/bin/clickhouse
1. DB::Exception::Exception<unsigned long&>(int, FormatStringHelperImpl<std::type_identity<unsigned long&>::type>, unsigned long&) @ 0x0000000007300270 in /usr/bin/clickhouse
2. Allocator<false, false>::realloc(void*, unsigned long, unsigned long, unsigned long) @ 0x000000000c7d9ce6 in /usr/bin/clickhouse
3. void DB::PODArrayBase<1ul, 4096ul, Allocator<false, false>, 63ul, 64ul>::resize<>(unsigned long) @ 0x0000000007224fc7 in /usr/bin/clickhouse
4. DB::ColumnString::insertRangeFrom(DB::IColumn const&, unsigned long, unsigned long) @ 0x0000000011b03402 in /usr/bin/clickhouse
5. DB::ColumnTuple::insertRangeFrom(DB::IColumn const&, unsigned long, unsigned long) @ 0x0000000011b2ae10 in /usr/bin/clickhouse
6. DB::Set::appendSetElements(DB::SetKeyColumns&) @ 0x00000000116deb99 in /usr/bin/clickhouse
7. DB::Set::insertFromColumns(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&) @ 0x00000000116de1c3 in /usr/bin/clickhouse
8. DB::Set::insertFromBlock(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) @ 0x00000000116ddfb3 in /usr/bin/clickhouse
9. DB::CreatingSetsTransform::consume(DB::Chunk) @ 0x0000000012c0d2b7 in /usr/bin/clickhouse
10. DB::IAccumulatingTransform::work() @ 0x00000000129945fd in /usr/bin/clickhouse
11. DB::CreatingSetsTransform::work() @ 0x0000000012c0cb51 in /usr/bin/clickhouse
12. DB::ExecutionThreadContext::executeTask() @ 0x00000000129b26fa in /usr/bin/clickhouse
13. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000129a9130 in /usr/bin/clickhouse
14. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x00000000129aa238 in /usr/bin/clickhouse
15. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>) @ 0x000000000c8eee41 in /usr/bin/clickhouse
16. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000c8f267a in /usr/bin/clickhouse
17. void* std::__thread_proxy[abi:v15000]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000c8f147e in /usr/bin/clickhouse
18. ? @ 0x00007b52c3166609
19. ? @ 0x00007b52c308b353
 (version 24.1.8.22 (official build))
2024.04.10 21:27:50.933596 [ 631 ] {} <Error> MergeTreeBackgroundExecutor: Exception while executing background task {1d1bce77-efb5-46c9-b036-623bbb862a2d::all_0_0_0_1}: Code: 49. DB::Exception: Too large size (18446743629458559734) passed to allocator. It indicates an error.: While executing CreatingSetsTransform. (LOGICAL_ERROR), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000c804c9b in /usr/bin/clickhouse
1. DB::Exception::Exception<unsigned long&>(int, FormatStringHelperImpl<std::type_identity<unsigned long&>::type>, unsigned long&) @ 0x0000000007300270 in /usr/bin/clickhouse
2. Allocator<false, false>::realloc(void*, unsigned long, unsigned long, unsigned long) @ 0x000000000c7d9ce6 in /usr/bin/clickhouse
3. void DB::PODArrayBase<1ul, 4096ul, Allocator<false, false>, 63ul, 64ul>::resize<>(unsigned long) @ 0x0000000007224fc7 in /usr/bin/clickhouse
4. DB::ColumnString::insertRangeFrom(DB::IColumn const&, unsigned long, unsigned long) @ 0x0000000011b03402 in /usr/bin/clickhouse
5. DB::ColumnTuple::insertRangeFrom(DB::IColumn const&, unsigned long, unsigned long) @ 0x0000000011b2ae10 in /usr/bin/clickhouse
6. DB::Set::appendSetElements(DB::SetKeyColumns&) @ 0x00000000116deb99 in /usr/bin/clickhouse
7. DB::Set::insertFromColumns(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&) @ 0x00000000116de1c3 in /usr/bin/clickhouse
8. DB::Set::insertFromBlock(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) @ 0x00000000116ddfb3 in /usr/bin/clickhouse
9. DB::CreatingSetsTransform::consume(DB::Chunk) @ 0x0000000012c0d2b7 in /usr/bin/clickhouse
10. DB::IAccumulatingTransform::work() @ 0x00000000129945fd in /usr/bin/clickhouse
11. DB::CreatingSetsTransform::work() @ 0x0000000012c0cb51 in /usr/bin/clickhouse
12. DB::ExecutionThreadContext::executeTask() @ 0x00000000129b26fa in /usr/bin/clickhouse
13. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000129a9130 in /usr/bin/clickhouse
14. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x00000000129aa238 in /usr/bin/clickhouse
15. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>) @ 0x000000000c8eee41 in /usr/bin/clickhouse
16. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000c8f267a in /usr/bin/clickhouse
17. void* std::__thread_proxy[abi:v15000]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000c8f147e in /usr/bin/clickhouse
18. ? @ 0x00007b52c3166609
19. ? @ 0x00007b52c308b353
 (version 24.1.8.22 (official build))
2024.04.10 21:27:50.964885 [ 770 ] {} <Fatal> BaseDaemon: ########## Short fault info ############
2024.04.10 21:27:50.964938 [ 770 ] {} <Fatal> BaseDaemon: (version 24.1.8.22 (official build), build id: E7D70C34BD5A8A71905F967C3B5390736B3AC27C, git hash: 7fb8f96d3da26cbcd42aa967a9f06b8a780de351) (from thread 703) Received signal 11
2024.04.10 21:27:50.964970 [ 770 ] {} <Fatal> BaseDaemon: Signal description: Segmentation fault
2024.04.10 21:27:50.964987 [ 770 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Unknown si_code.
2024.04.10 21:27:50.965014 [ 770 ] {} <Fatal> BaseDaemon: Stack trace: 0x0000000007218756 0x0000000011b0341a 0x0000000011b2ae10 0x00000000116deb99 0x00000000116de1c3 0x00000000116ddfb3 0x0000000012c0d2b7 0x00000000129945fd 0x0000000012c0cb51 0x00000000129b26fa 0x00000000129a9130 0x00000000129aa238 0x000000000c8eee41 0x000000000c8f267a 0x000000000c8f147e 0x00007b52c3166609 0x00007b52c308b353
2024.04.10 21:27:50.965125 [ 770 ] {} <Fatal> BaseDaemon: ########################################
2024.04.10 21:27:50.965135 [ 770 ] {} <Fatal> BaseDaemon: (version 24.1.8.22 (official build), build id: E7D70C34BD5A8A71905F967C3B5390736B3AC27C, git hash: 7fb8f96d3da26cbcd42aa967a9f06b8a780de351) (from thread 703) (query_id: 1d1bce77-efb5-46c9-b036-623bbb862a2d::all_0_0_0_1) (query: ) Received signal Segmentation fault (11)
2024.04.10 21:27:50.965142 [ 770 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Unknown si_code.
2024.04.10 21:27:50.965148 [ 770 ] {} <Fatal> BaseDaemon: Stack trace: 0x0000000007218756 0x0000000011b0341a 0x0000000011b2ae10 0x00000000116deb99 0x00000000116de1c3 0x00000000116ddfb3 0x0000000012c0d2b7 0x00000000129945fd 0x0000000012c0cb51 0x00000000129b26fa 0x00000000129a9130 0x00000000129aa238 0x000000000c8eee41 0x000000000c8f267a 0x000000000c8f147e 0x00007b52c3166609 0x00007b52c308b353
2024.04.10 21:27:50.965185 [ 770 ] {} <Fatal> BaseDaemon: 2. memcpy @ 0x0000000007218756 in /usr/bin/clickhouse
2024.04.10 21:27:50.965221 [ 770 ] {} <Fatal> BaseDaemon: 3. DB::ColumnString::insertRangeFrom(DB::IColumn const&, unsigned long, unsigned long) @ 0x0000000011b0341a in /usr/bin/clickhouse
2024.04.10 21:27:50.965240 [ 770 ] {} <Fatal> BaseDaemon: 4. DB::ColumnTuple::insertRangeFrom(DB::IColumn const&, unsigned long, unsigned long) @ 0x0000000011b2ae10 in /usr/bin/clickhouse
2024.04.10 21:27:50.965261 [ 770 ] {} <Fatal> BaseDaemon: 5. DB::Set::appendSetElements(DB::SetKeyColumns&) @ 0x00000000116deb99 in /usr/bin/clickhouse
2024.04.10 21:27:50.965291 [ 770 ] {} <Fatal> BaseDaemon: 6. DB::Set::insertFromColumns(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&) @ 0x00000000116de1c3 in /usr/bin/clickhouse
2024.04.10 21:27:50.965310 [ 770 ] {} <Fatal> BaseDaemon: 7. DB::Set::insertFromBlock(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) @ 0x00000000116ddfb3 in /usr/bin/clickhouse
2024.04.10 21:27:50.965322 [ 770 ] {} <Fatal> BaseDaemon: 8. DB::CreatingSetsTransform::consume(DB::Chunk) @ 0x0000000012c0d2b7 in /usr/bin/clickhouse
2024.04.10 21:27:50.965337 [ 770 ] {} <Fatal> BaseDaemon: 9. DB::IAccumulatingTransform::work() @ 0x00000000129945fd in /usr/bin/clickhouse
2024.04.10 21:27:50.965357 [ 770 ] {} <Fatal> BaseDaemon: 10. DB::CreatingSetsTransform::work() @ 0x0000000012c0cb51 in /usr/bin/clickhouse
2024.04.10 21:27:50.965379 [ 770 ] {} <Fatal> BaseDaemon: 11. DB::ExecutionThreadContext::executeTask() @ 0x00000000129b26fa in /usr/bin/clickhouse
2024.04.10 21:27:50.965403 [ 770 ] {} <Fatal> BaseDaemon: 12. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000129a9130 in /usr/bin/clickhouse
2024.04.10 21:27:50.965429 [ 770 ] {} <Fatal> BaseDaemon: 13. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x00000000129aa238 in /usr/bin/clickhouse
2024.04.10 21:27:50.965459 [ 770 ] {} <Fatal> BaseDaemon: 14. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>) @ 0x000000000c8eee41 in /usr/bin/clickhouse
2024.04.10 21:27:50.965507 [ 770 ] {} <Fatal> BaseDaemon: 15. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000c8f267a in /usr/bin/clickhouse
2024.04.10 21:27:50.965543 [ 770 ] {} <Fatal> BaseDaemon: 16. void* std::__thread_proxy[abi:v15000]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000c8f147e in /usr/bin/clickhouse
2024.04.10 21:27:50.965560 [ 770 ] {} <Fatal> BaseDaemon: 17. ? @ 0x00007b52c3166609
2024.04.10 21:27:50.965570 [ 770 ] {} <Fatal> BaseDaemon: 18. ? @ 0x00007b52c308b353
2024.04.10 21:27:51.085559 [ 770 ] {} <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 720BF31D584403E9F5401D48F9D81CE8)
2024.04.10 21:27:51.137786 [ 770 ] {} <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues
2024.04.10 21:27:51.137920 [ 770 ] {} <Fatal> BaseDaemon: Changed settings: connect_timeout_with_failover_ms = 1000, load_balancing = 'nearest_hostname', distributed_aggregation_memory_efficient = true, do_not_merge_across_partitions_select_final = true, os_thread_priority = 2, log_queries = true, parallel_view_processing = true, postgresql_connection_pool_size = 300, allow_experimental_database_materialized_postgresql = true
```

**Does it reproduce on the most recent release?**

I can't upgrade to `24.3` at the moment. I'll try to replicate this with another cluster with version `24.3`

**Enable crash reporting**

I enabled the crash reporting from the config. I am not sure if you received it.

**Additional context**

We're discussing the issue on Slack - https://clickhousedb.slack.com/archives/CU478UEQZ/p1712778457487709
