ID: 70155
Title: Clickhouse client std::out_of_range
Description:
**Describe the bug**
Dumping and reading back an empty table with `Variant` column gives std::out_of_range

**How to reproduce**
Run:

```sql
SET enable_variant_type = 1;
CREATE TABLE t0 (c0 Variant(Int,Int)) ENGINE = Memory();
INSERT INTO TABLE FUNCTION file('</path/to/file>', 'RowBinary', 'c0 Variant(Int,Int)') SELECT c0 FROM t0;
INSERT INTO TABLE t0 (c0) FROM INFILE '</path/to/file>' FORMAT RowBinary;
```
Stack trace:
```
Logical error: 'std::exception. Code: 1001, type: std::out_of_range, e.what() = vector (version 24.10.1.1), Stack trace:

0. contrib/llvm-project/libcxx/include/exception:141: std::logic_error::logic_error(char const*) @ 0x000000003c8cb56e
1. contrib/llvm-project/libcxx/include/stdexcept:166: std::out_of_range::out_of_range[abi:v15007](char const*) @ 0x000000000e637fae
2. contrib/llvm-project/libcxx/include/stdexcept:268: std::__throw_out_of_range[abi:v15007](char const*) @ 0x000000000e637f42
3. contrib/llvm-project/libcxx/include/vector:867: ? @ 0x000000000f180235
4. contrib/llvm-project/libcxx/include/vector:1510: DB::SerializationVariant::deserializeBinary(DB::IColumn&, DB::ReadBuffer&, DB::FormatSettings const&) const @ 0x000000002a9d7dd3
5. src/Processors/Formats/Impl/BinaryRowInputFormat.cpp:93: DB::BinaryFormatReader<false>::readField(DB::IColumn&, std::shared_ptr<DB::IDataType const> const&, std::shared_ptr<DB::ISerialization const> const&, bool, String const&) @ 0x000000002f9d51e3
6. src/Processors/Formats/RowInputFormatWithNamesAndTypes.cpp:262: DB::RowInputFormatWithNamesAndTypes<DB::BinaryFormatReader<false>>::readRow(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>&, DB::RowReadExtension&) @ 0x000000002fa05673
7. src/Processors/Formats/IRowInputFormat.cpp:134: DB::IRowInputFormat::read() @ 0x000000002f991ddb
8. src/Processors/Formats/IInputFormat.cpp:19: DB::IInputFormat::generate() @ 0x000000002f8ae2a6
9. src/Processors/ISource.cpp:139: DB::ISource::tryGenerate() @ 0x000000002f85a55a
10. src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x000000002f859b63
11. src/Processors/Executors/ExecutionThreadContext.cpp:47: DB::ExecutionThreadContext::executeTask() @ 0x000000002f897c0e
12. src/Processors/Executors/PipelineExecutor.cpp:288: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x000000002f87c3b0
13. src/Processors/Executors/PipelineExecutor.cpp:162: DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x000000002f87b559
14. src/Processors/Executors/PullingPipelineExecutor.cpp:54: DB::PullingPipelineExecutor::pull(DB::Chunk&) @ 0x000000002f8a2059
15. src/Storages/StorageFile.cpp:1473: DB::StorageFileSource::generate() @ 0x000000002df66d1e
16. src/Processors/ISource.cpp:139: DB::ISource::tryGenerate() @ 0x000000002f85a55a
17. src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x000000002f859b63
18. src/Processors/Executors/ExecutionThreadContext.cpp:47: DB::ExecutionThreadContext::executeTask() @ 0x000000002f897c0e
19. src/Processors/Executors/PipelineExecutor.cpp:288: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x000000002f87c3b0
20. src/Processors/Executors/PipelineExecutor.cpp:254: DB::PipelineExecutor::executeSingleThread(unsigned long) @ 0x000000002f87cdea
21. src/Processors/Executors/PipelineExecutor.cpp:429: DB::PipelineExecutor::executeImpl(unsigned long, bool) @ 0x000000002f879e9b
22. src/Processors/Executors/PipelineExecutor.cpp:125: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x000000002f879257
23. src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:83: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000002f89fb5d
24. contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x000000001e6d4d5e
25. src/Common/ThreadPool.cpp:252: void* std::__thread_proxy[abi:v15007]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000001e6dfaed
26. asan_thread_start(void*) @ 0x000000000e5fcbcd
27. ? @ 0x000078990cc9ca94
28. ? @ 0x000078990cd29c3c
```