ID: 25622
Title: External dictionaries from Postgres: alias with $ is wrapped with wrong quotes
Description:
**Describe the bug**

Postgres table is used as a source for CH external dictionary. The table contains field with $ in the name (r$code).
During dictionary creation this field is intended to have an alias, for example 'up'

DDL for dictionary creation looks like this:

```sql
CREATE DICTIONARY unit (
    n UInt64,up UInt64 EXPRESSION r$code HIERARCHICAL,name String EXPRESSION unit_name DEFAULT 'N/A')
    PRIMARY KEY code
        SOURCE(POSTGRESQL(
        port XXX
        host 'XXX'
        user 'XXX'
        password 'XXX'
        db 'XXX'
        table 'XXX'
    ))
    LAYOUT(HASHED())
    LIFETIME(MIN 300 MAX 360);
```

Dictionary creates without any error messages.
When ClickHouse is trying to load data into dictionary, an exception raises from Postgres side.

```
[2021-06-23 12:43:56] Code: 156, e.displayText() = DB::Exception: Failed to load dictionary 'xxx.unit': std::exception. Code: 1001, type: pqxx::undefined_function, e.what() = ERROR:  operator does not exist: ` integer
[2021-06-23 12:43:56]   LINE 1: COPY (SELECT "n", (`r$code`) AS "up", (unit_name) AS ...
[2021-06-23 12:43:56]                                 ^
[2021-06-23 12:43:56]   HINT:  No operator matches the given name and argument type. You might need to add an explicit type cast.
[2021-06-23 12:43:56]   , (version 21.6.3.14 (official build))
```

If I create same dictionary via XML, it works.
If I remove `EXPRESSION` and use `r$code` as attribute name, it works.

Seems like ClickHouse uses wrong masking algorithm for Postgres.

**Does it reproduce on recent release?**

Yes

**Enable crash reporting**

No crashes

**How to reproduce**

Try to export data from PG table with field names containing $ symbol. Use these fields as 'expressions' in dictionaries.

* Which ClickHouse server version to use

21.6.3.14

**Expected behavior**

Select to Postgres should be like this

```
COPY (SELECT "n", ("r$code") AS "up", (unit_name) AS ...
```
