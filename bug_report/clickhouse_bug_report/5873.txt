ID: 5873
Title: Regression (DB::Exception: Missing columns) with Nested structures in 19.x
Description:
Nested structure labels cannot be referenced without an alias in 19.x, while this is something that worked at least in 18.16.1.

**How to reproduce**
The following works in 18.16.1 but fails in 19.5.4.22, 19.7.5.27, and the latest stable as of this time (19.9.2.4):

CREATE TABLE LOG_T (
	fingerprint UInt64,
	fields Nested (name LowCardinality(String), value String)
)
ENGINE = MergeTree ORDER BY fingerprint;

SELECT fields.name, fields.value
FROM (SELECT fields.name, fields.value FROM LOG_T)
WHERE has(['node'], fields.value[indexOf(fields.name, 'ProcessName')]);

**NOTE:**  Example may look a bit trivial because I removed all non-essential parts of the query, to minimize the test case.

**Expected behavior**
I expect it to return an empty result in two columns (fields.name, fields.value) as in 18.16.1.

**Error message and/or stacktrace**
Error message taken from 19.9.2.4 (but similar in 19.5.4.22 and 19.7.5.27) is:

Code: 47, e.displayText() = DB::Exception: Missing columns: 'name' 'value' while processing query: 'SELECT fields.name, fields.value FROM LOG_T  WHERE has(['node'], value[indexOf(name, 'ProcessName')])', required columns: 'fields.value' 'fields.name' 'name' 'value', source columns: 'fingerprint' 'fields.value' 'fields.name' (version 19.9.2.4 (official build))

**Additional context**
1)  It works if I alias the two columns:

SELECT fields.name AS fn, fields.value AS fv
FROM (SELECT fields.name, fields.value FROM LOG_T)
WHERE has(['node'], fv[indexOf(fn, 'ProcessName')]);

2)  It works if there is no WHERE clause:

SELECT fields.name, fields.value
FROM (SELECT fields.name, fields.value FROM LOG_T);