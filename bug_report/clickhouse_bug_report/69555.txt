ID: 69555
Title: Crash with ldap on 24.8.4.13 (current latest)
Description:
Trace:
```
2024.09.12 12:31:23.295053 [ 14406 ] {b60cfd44-8c83-497e-ba38-1c479869cd82} <Fatal> GWPAsan: *** GWP-ASan detected a memory error ***
2024.09.12 12:31:23.295358 [ 14406 ] {b60cfd44-8c83-497e-ba38-1c479869cd82} <Fatal> GWPAsan: Use After Free (warning: buffer overflow/underflow detected on a free()'d allocation. This either means you have a buffer-overflow and a use-after-free at the same time, or you have a long-lived use-after-free bug where the allocation/deallocation metadata below has already been overwritten and is likely bogus) at 0x281473304510535 (71 bytes to the right of a 72-byte allocation at 0x281473304510464) by thread 14406 here:
2024.09.12 12:31:23.295626 [ 14406 ] {b60cfd44-8c83-497e-ba38-1c479869cd82} <Fatal> GWPAsan: 0x281473304510535 was deallocated by thread 14406 here:
2024.09.12 12:31:23.295815 [ 14406 ] {b60cfd44-8c83-497e-ba38-1c479869cd82} <Fatal> GWPAsan: <Empty trace>
2024.09.12 12:31:23.295988 [ 14406 ] {b60cfd44-8c83-497e-ba38-1c479869cd82} <Fatal> GWPAsan: 0x281473304510535 was allocated by thread 14406 here:
2024.09.12 12:31:23.296159 [ 14406 ] {b60cfd44-8c83-497e-ba38-1c479869cd82} <Fatal> GWPAsan: <Empty trace>
2024.09.12 12:31:23.296370 [ 14406 ] {b60cfd44-8c83-497e-ba38-1c479869cd82} <Fatal> GWPAsan: *** End GWP-ASan report ***
2024.09.12 12:31:23.297268 [ 15136 ] {} <Fatal> BaseDaemon: ########## Short fault info ############
2024.09.12 12:31:23.297588 [ 15136 ] {} <Fatal> BaseDaemon: (version 24.8.4.13 (official build), build id: 7A2B16FBACA77EB7D47F452AE6FCC7216C28FDE1, git hash: 53195bc189b587afaabc52c4ca765aa54beea84f) (from thread 14406) Received signal 11
2024.09.12 12:31:23.297904 [ 15136 ] {} <Fatal> BaseDaemon: Signal description: Segmentation fault
2024.09.12 12:31:23.298128 [ 15136 ] {} <Fatal> BaseDaemon: Address: 0xffff9c544047. Access: . Attempted access has violated the permissions assigned to the memory area.
2024.09.12 12:31:23.298311 [ 15136 ] {} <Fatal> BaseDaemon: Stack trace: 0x000000000c558228 0x0000ffff9dffb7dc 0x000000000ee226a1 0x000000000ee1dbac 0x000000000ee21b78 0x000000000eda3fa8 0x000000000ed95bc4 0x000000000edff1e4 0x000000000ff172c8 0x000000000ff16c98 0x000000000fd8a6a0 0x000000000fd86a08 0x0000000010caef0c 0x0000000010cc5588 0x000000001344be98 0x000000001344c374 0x00000000134173b4 0x00000000134157f0 0x0000ffff9df89624 0x0000ffff9dee062c
2024.09.12 12:31:23.298477 [ 15136 ] {} <Fatal> BaseDaemon: ########################################
2024.09.12 12:31:23.298812 [ 15136 ] {} <Fatal> BaseDaemon: (version 24.8.4.13 (official build), build id: 7A2B16FBACA77EB7D47F452AE6FCC7216C28FDE1, git hash: 53195bc189b587afaabc52c4ca765aa54beea84f) (from thread 14406) (query_id: b60cfd44-8c83-497e-ba38-1c479869cd82) (query: DROP ROLE IF EXISTS role_c09ae1cc_70e9_11ef_88aa_6975d6534d58_unknown
) Received signal Segmentation fault (11)
2024.09.12 12:31:23.299220 [ 15136 ] {} <Fatal> BaseDaemon: Address: 0xffff9c544047. Access: . Attempted access has violated the permissions assigned to the memory area.
2024.09.12 12:31:23.299504 [ 15136 ] {} <Fatal> BaseDaemon: Stack trace: 0x000000000c558228 0x0000ffff9dffb7dc 0x000000000ee226a1 0x000000000ee1dbac 0x000000000ee21b78 0x000000000eda3fa8 0x000000000ed95bc4 0x000000000edff1e4 0x000000000ff172c8 0x000000000ff16c98 0x000000000fd8a6a0 0x000000000fd86a08 0x0000000010caef0c 0x0000000010cc5588 0x000000001344be98 0x000000001344c374 0x00000000134173b4 0x00000000134157f0 0x0000ffff9df89624 0x0000ffff9dee062c
2024.09.12 12:31:23.300171 [ 15136 ] {} <Fatal> BaseDaemon: 0. signalHandler(int, siginfo_t*, void*) @ 0x000000000c558228
2024.09.12 12:31:23.300411 [ 15136 ] {} <Fatal> BaseDaemon: 1. ? @ 0x0000ffff9dffb7dc
2024.09.12 12:31:23.300696 [ 15136 ] {} <Fatal> BaseDaemon: 2. std::__tree_iterator<std::__value_type<String, StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::__tree_node<std::__value_type<String, StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, void*>*, long> std::__tree<std::__value_type<String, StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::__map_value_compare<String, std::__value_type<String, StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::less<String>, true>, std::allocator<std::__value_type<String, StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>>>::find<String>(String const&) @ 0x000000000ee226a1
2024.09.12 12:31:23.301036 [ 15136 ] {} <Fatal> BaseDaemon: 3. DB::LDAPAccessStorage::applyRoleChangeNoLock(bool, StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag> const&, String const&) @ 0x000000000ee1dbac
2024.09.12 12:31:23.301585 [ 15136 ] {} <Fatal> BaseDaemon: 4. void std::__function::__policy_invoker<void (StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag> const&, std::shared_ptr<DB::IAccessEntity const> const&)>::__call_impl<std::__function::__default_alloc_func<DB::LDAPAccessStorage::setConfiguration(Poco::Util::AbstractConfiguration const&, String const&)::$_0, void (StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag> const&, std::shared_ptr<DB::IAccessEntity const> const&)>>(std::__function::__policy_storage const*, StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag> const&, std::shared_ptr<DB::IAccessEntity const> const&) @ 0x000000000ee21b78
2024.09.12 12:31:23.301863 [ 15136 ] {} <Fatal> BaseDaemon: 5. DB::AccessChangesNotifier::sendNotifications() @ 0x000000000eda3fa8
2024.09.12 12:31:23.302085 [ 15136 ] {} <Fatal> BaseDaemon: 6. DB::AccessControl::removeImpl(StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag> const&, bool) @ 0x000000000ed95bc4
2024.09.12 12:31:23.302361 [ 15136 ] {} <Fatal> BaseDaemon: 7. DB::IAccessStorage::remove(std::vector<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::allocator<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>> const&, bool) @ 0x000000000edff1e4
2024.09.12 12:31:23.302665 [ 15136 ] {} <Fatal> BaseDaemon: 8. DB::InterpreterDropAccessEntityQuery::execute()::$_0::operator()(std::vector<String, std::allocator<String>> const&, String const&) const @ 0x000000000ff172c8
2024.09.12 12:31:23.303040 [ 15136 ] {} <Fatal> BaseDaemon: 9. DB::InterpreterDropAccessEntityQuery::execute() @ 0x000000000ff16c98
2024.09.12 12:31:23.303357 [ 15136 ] {} <Fatal> BaseDaemon: 10. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000000fd8a6a0
2024.09.12 12:31:23.303652 [ 15136 ] {} <Fatal> BaseDaemon: 11. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000000fd86a08
2024.09.12 12:31:23.304005 [ 15136 ] {} <Fatal> BaseDaemon: 12. DB::TCPHandler::runImpl() @ 0x0000000010caef0c
2024.09.12 12:31:23.304282 [ 15136 ] {} <Fatal> BaseDaemon: 13. DB::TCPHandler::run() @ 0x0000000010cc5588
2024.09.12 12:31:23.304535 [ 15136 ] {} <Fatal> BaseDaemon: 14. Poco::Net::TCPServerConnection::start() @ 0x000000001344be98
2024.09.12 12:31:23.304793 [ 15136 ] {} <Fatal> BaseDaemon: 15. Poco::Net::TCPServerDispatcher::run() @ 0x000000001344c374
2024.09.12 12:31:23.304974 [ 15136 ] {} <Fatal> BaseDaemon: 16. Poco::PooledThread::run() @ 0x00000000134173b4
2024.09.12 12:31:23.305156 [ 15136 ] {} <Fatal> BaseDaemon: 17. Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000134157f0
2024.09.12 12:31:23.305486 [ 15136 ] {} <Fatal> BaseDaemon: 18. start_thread @ 0x0000000000007624
2024.09.12 12:31:23.305919 [ 15136 ] {} <Fatal> BaseDaemon: 19. ? @ 0x00000000000d162c
2024.09.12 12:31:23.306105 [ 15136 ] {} <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read.
2024.09.12 12:31:23.306652 [ 15136 ] {} <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues
2024.09.12 12:31:23.307002 [ 15136 ] {} <Fatal> BaseDaemon: Changed settings: use_uncompressed_cache = false, load_balancing = 'random', max_memory_usage = 10000000000
```