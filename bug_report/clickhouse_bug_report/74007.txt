ID: 74007
Title: LogicalExpressionOptimizer pass logical error with Dynamic type
Description:
**Describe the bug**
From this run: https://s3.amazonaws.com/clickhouse-test-reports/71085/e87f504fe073ff0c7f8d09f87ef43256e76689d0/buzzhouse__asan_.html

**How to reproduce**
Run:
```sql
SELECT sum((NOT CAST(1 AS Dynamic)) = TRUE) SETTINGS enable_dynamic_type = 1;
```
I cannot reproduce this with Fiddle, maybe ASAN is required?

Stack trace:
```
<Fatal> : Logical error: 'Function sum(NOT _CAST(1, 'Dynamic')) expects argument 1 to have Nullable(UInt8) type but receives Dynamic after running LogicalExpressionOptimizer pass'.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. llvm-project/libcxx/include/__exception/exception.h:106: Poco::Exception::Exception(String const&, int) @ 0x0000000038f22ad1
1. build_docker/src/Common/Exception.cpp:105: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000001c138922
2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000b4c7b4e
3. src/Common/Exception.h:123: DB::Exception::Exception<String, unsigned long, String, String, String const&>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<unsigned long>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String const&>::type>, String&&, unsigned long&&, String&&, String&&, String const&) @ 0x000000002bdcba59
4. build_docker/src/Analyzer/QueryTreePassManager.cpp:148: DB::InDepthQueryTreeVisitor<DB::(anonymous namespace)::ValidationChecker, false>::visit(std::shared_ptr<DB::IQueryTreeNode>&) @ 0x000000002bdc7cdd
5. src/Analyzer/InDepthQueryTreeVisitor.h:90: DB::InDepthQueryTreeVisitor<DB::(anonymous namespace)::ValidationChecker, false>::visit(std::shared_ptr<DB::IQueryTreeNode>&) @ 0x000000002bdc7538
6. src/Analyzer/InDepthQueryTreeVisitor.h:90: DB::InDepthQueryTreeVisitor<DB::(anonymous namespace)::ValidationChecker, false>::visit(std::shared_ptr<DB::IQueryTreeNode>&) @ 0x000000002bdc7538
7. build_docker/src/Analyzer/QueryTreePassManager.cpp:186: DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000002bdc67f6
8. build_docker/src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:149: DB::(anonymous namespace)::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000002c64b972
9. build_docker/src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:167: DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000002c64744f
10. llvm-project/libcxx/include/__memory/unique_ptr.h:597: std::__unique_if<DB::InterpreterSelectQueryAnalyzer>::__unique_single std::make_unique[abi:ne180100]<DB::InterpreterSelectQueryAnalyzer, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&>(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&) @ 0x000000002c64f43e
11. llvm-project/libcxx/include/__functional/function.h:714: ? @ 0x000000002c56ea9b
12. build_docker/src/Interpreters/executeQuery.cpp:1372: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000002cdc9474
13. build_docker/src/Interpreters/executeQuery.cpp:1602: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000002cdc29c4
14. build_docker/src/Server/TCPHandler.cpp:658: DB::TCPHandler::runImpl() @ 0x0000000030e7a1a0
15. build_docker/src/Server/TCPHandler.cpp:2625: DB::TCPHandler::run() @ 0x0000000030eaa656
16. build_docker/base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x0000000039105d2f
17. build_docker/base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x00000000391068de
18. build_docker/base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x0000000039018d0b
19. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000390130a8
20. asan_thread_start(void*) @ 0x000000000b476e77
21. ? @ 0x00007ffff7ca1e2e
22. ? @ 0x00007ffff7d33a4c
```