ID: 8919
Title: joinGet() with nullable join_key is failed / segfault
Description:
**Description**
joinGet() where *join_key* has nullable type leads to an error on query execution and to segfault when use *input*-table function. 
ClickHouse version 19.17.5.18 (official build)

**Steps to reproduce case 1**
1. dataset preparation
```sql
create table test.test_joinGet(
  id Int32,
  user_id Nullable(Int32)
) Engine = Memory();

create table test.test_join_joinGet(
  user_id Int32,
  name String
) Engine = Join(any, left, user_id);

insert into test.test_join_joinGet 
values (2, 'a'), (6, 'b'), (10, 'c');
```
2. error appears
```sql
insert into test.test_joinGet
select id, user_id 
from (
  select 1 id, toNullable(null) user_id
  union all
  select 2 id, toNullable(6) user_id
) where joinGet('test.test_join_joinGet', 'name', user_id) != '';
```
**Stacktrace**
```
2020.01.30 23:50:21.825538 [ 141 ] {09d33e0c-c08c-411e-bde5-7a2dc5485d29} <Error> executeQuery: Code: 241, e.displayText() = DB::Exception: Memory limit (for query) exceeded: would use 128.00 TiB (attempt to allocate chunk of 140737490596318 bytes), maximum: 9.31 GiB (version 19.17.5.18 (official build)) (from [::ffff:127.0.0.1]:59612) (in query: INSERT INTO test.test_joinGet SELECT id, user_id FROM (SELECT 1 AS id, toNullable(NULL) AS user_id UNION ALL SELECT 2 AS id, toNullable(6) AS user_id) WHERE joinGet('test.test_join_joinGet', 'name', user_id) != ''), Stack trace:

0. 0x55d351e7a690 StackTrace::StackTrace() /usr/bin/clickhouse
1. 0x55d351e7a465 DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) /usr/bin/clickhouse
2. 0x55d3519bb383 ? /usr/bin/clickhouse
3. 0x55d351e792ec MemoryTracker::alloc(long) /usr/bin/clickhouse
4. 0x55d354fc56d8 DB::ColumnString::insert(DB::Field const&) /usr/bin/clickhouse
5. 0x55d35519ee3d DB::IDataType::createColumnConst(unsigned long, DB::Field const&) const /usr/bin/clickhouse
6. 0x55d35502ef0a DB::PreparedFunctionImpl::defaultImplementationForNulls(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) /usr/bin/clickhouse
7. 0x55d35502ec41 DB::PreparedFunctionImpl::executeWithoutLowCardinalityColumns(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) /usr/bin/clickhouse
8. 0x55d35502f874 DB::PreparedFunctionImpl::execute(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) /usr/bin/clickhouse
9. 0x55d35599dc04 DB::ExpressionAction::prepare(DB::Block&, DB::Settings const&, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&) /usr/bin/clickhouse
10. 0x55d35599debc DB::ExpressionActions::addImpl(DB::ExpressionAction, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&) /usr/bin/clickhouse
11. 0x55d35599e2f3 DB::ExpressionActions::add(DB::ExpressionAction const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&) /usr/bin/clickhouse
12. 0x55d355af4742 DB::ScopeStack::addAction(DB::ExpressionAction const&) /usr/bin/clickhouse
13. 0x55d355afa2ea DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) /usr/bin/clickhouse
14. 0x55d355af90b4 DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) /usr/bin/clickhouse
15. 0x55d3559b2a60 DB::InDepthNodeVisitor<DB::ActionsMatcher, true, std::shared_ptr<DB::IAST> const>::visit(std::shared_ptr<DB::IAST> const&) /usr/bin/clickhouse
16. 0x55d3559ab2c1 ? /usr/bin/clickhouse
17. 0x55d3559b2699 DB::SelectQueryExpressionAnalyzer::appendWhere(DB::ExpressionActionsChain&, bool) /usr/bin/clickhouse
18. 0x55d3552380ae DB::InterpreterSelectQuery::analyzeExpressions(DB::ASTSelectQuery const&, DB::SelectQueryExpressionAnalyzer&, DB::QueryProcessingStage::Enum, DB::QueryProcessingStage::Enum, DB::Context const&, std::shared_ptr<DB::IStorage> const&, bool, std::shared_ptr<DB::FilterInfo> const&, DB::Block const&) /usr/bin/clickhouse
19. 0x55d355238fc1 DB::InterpreterSelectQuery::getSampleBlockImpl() /usr/bin/clickhouse
20. 0x55d35523ea07 ? /usr/bin/clickhouse
21. 0x55d35523f4d4 DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, std::shared_ptr<DB::IBlockInputStream> const&, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&) /usr/bin/clickhouse
22. 0x55d35523fee7 DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&) /usr/bin/clickhouse
23. 0x55d3552640db DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&) /usr/bin/clickhouse
24. 0x55d355264acc DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, DB::Context const&) /usr/bin/clickhouse
25. 0x55d3559844fe DB::getNamesAndTypeListFromTableExpression(DB::ASTTableExpression const&, DB::Context const&) /usr/bin/clickhouse
26. 0x55d35599007b DB::getDatabaseAndTablesWithColumnNames[abi:cxx11](DB::ASTSelectQuery const&, DB::Context const&) /usr/bin/clickhouse
27. 0x55d355a05eaf DB::PredicateExpressionsOptimizer::optimizeImpl(std::shared_ptr<DB::IAST> const&, std::map<DB::ASTSelectQuery*, std::vector<std::pair<std::shared_ptr<DB::IAST>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::shared_ptr<DB::IAST>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::less<DB::ASTSelectQuery*>, std::allocator<std::pair<DB::ASTSelectQuery* const, std::vector<std::pair<std::shared_ptr<DB::IAST>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::shared_ptr<DB::IAST>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > > const&, DB::PredicateExpressionsOptimizer::OptimizeKind) /usr/bin/clickhouse
28. 0x55d355a0a77e DB::PredicateExpressionsOptimizer::optimize() /usr/bin/clickhouse
29. 0x55d35533b4cd DB::SyntaxAnalyzer::analyze(std::shared_ptr<DB::IAST>&, DB::NamesAndTypesList const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::shared_ptr<DB::IStorage>, DB::NamesAndTypesList const&) const /usr/bin/clickhouse
30. 0x55d35523e47b ? /usr/bin/clickhouse
31. 0x55d35523f4d4 DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, std::shared_ptr<DB::IBlockInputStream> const&, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&) /usr/bin/clickhouse
```

**Steps to reproduce case 2**
```bash
echo '1,1' | clickhouse-client --query "insert into test.test_joinGet select id, user_id from input('id Int32, user_id Nullable(Int32)') where joinGet('test.test_join_joinGet', 'name', user_id) != '' format CSV"
```

**Stacktrace**
```
2020.01.30 23:54:57.861244 [ 145 ] {} <Fatal> BaseDaemon: ########################################
2020.01.30 23:54:57.861295 [ 145 ] {} <Fatal> BaseDaemon: (version 19.17.5.18 (official build)) (from thread 129) Received signal Segmentation fault (11).
2020.01.30 23:54:57.861326 [ 145 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Unknown si_code.
2020.01.30 23:54:57.861343 [ 145 ] {} <Fatal> BaseDaemon: Stack trace: 0x55d3553b9ab0 0x55d35358c93c 0x55d35358cd85 0x55d3536ce3ae 0x55d35502f874 0x55d35599b4a1 0x55d35599cbb5 0x55d35582523e 0x55d3550d35ca 0x55d35581d89b 0x55d3550d35ca 0x55d35581d89b 0x55d3550d35ca 0x55d3557ff8e8 0x55d3550d35ca 0x55d3550f1abb 0x55d355221075 0x55d3550d35ca 0x55d351f0362d 0x55d351f039fb 0x55d355e046f0 0x55d355e04e0d 0x55d3574daf81 0x55d3574d8d2c 0x55d357c4eec0 0x7f09f8cc66db 0x7f09f85e388f
2020.01.30 23:54:57.861407 [ 145 ] {} <Fatal> BaseDaemon: 3. 0x55d3553b9ab0 DB::ColumnNullable::compareAt(unsigned long, unsigned long, DB::IColumn const&, int) const /usr/bin/clickhouse
2020.01.30 23:54:57.861460 [ 145 ] {} <Fatal> BaseDaemon: 4. 0x55d35358c93c DB::GenericComparisonImpl<DB::NotEqualsOp<int, int> >::vector_constant(DB::IColumn const&, DB::IColumn const&, DB::PODArray<unsigned char, 4096ul, Allocator<false, false>, 15ul, 16ul>&) /usr/bin/clickhouse
2020.01.30 23:54:57.861485 [ 145 ] {} <Fatal> BaseDaemon: 5. 0x55d35358cd85 DB::FunctionComparison<DB::NotEqualsOp, DB::NameNotEquals>::executeGenericIdenticalTypes(DB::Block&, unsigned long, DB::IColumn const*, DB::IColumn const*) /usr/bin/clickhouse
2020.01.30 23:54:57.861504 [ 145 ] {} <Fatal> BaseDaemon: 6. 0x55d3536ce3ae DB::FunctionComparison<DB::NotEqualsOp, DB::NameNotEquals>::executeImpl(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long) /usr/bin/clickhouse
2020.01.30 23:54:57.861519 [ 145 ] {} <Fatal> BaseDaemon: 7. 0x55d35502f874 DB::PreparedFunctionImpl::execute(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) /usr/bin/clickhouse
2020.01.30 23:54:57.861533 [ 145 ] {} <Fatal> BaseDaemon: 8. 0x55d35599b4a1 DB::ExpressionAction::execute(DB::Block&, bool) const /usr/bin/clickhouse
2020.01.30 23:54:57.861545 [ 145 ] {} <Fatal> BaseDaemon: 9. 0x55d35599cbb5 DB::ExpressionActions::execute(DB::Block&, bool) const /usr/bin/clickhouse
2020.01.30 23:54:57.861557 [ 145 ] {} <Fatal> BaseDaemon: 10. 0x55d35582523e DB::FilterBlockInputStream::readImpl() /usr/bin/clickhouse
2020.01.30 23:54:57.861570 [ 145 ] {} <Fatal> BaseDaemon: 11. 0x55d3550d35ca DB::IBlockInputStream::read() /usr/bin/clickhouse
2020.01.30 23:54:57.861586 [ 145 ] {} <Fatal> BaseDaemon: 12. 0x55d35581d89b DB::ExpressionBlockInputStream::readImpl() /usr/bin/clickhouse
2020.01.30 23:54:57.861597 [ 145 ] {} <Fatal> BaseDaemon: 13. 0x55d3550d35ca DB::IBlockInputStream::read() /usr/bin/clickhouse
2020.01.30 23:54:57.861607 [ 145 ] {} <Fatal> BaseDaemon: 14. 0x55d35581d89b DB::ExpressionBlockInputStream::readImpl() /usr/bin/clickhouse
2020.01.30 23:54:57.861617 [ 145 ] {} <Fatal> BaseDaemon: 15. 0x55d3550d35ca DB::IBlockInputStream::read() /usr/bin/clickhouse
2020.01.30 23:54:57.861628 [ 145 ] {} <Fatal> BaseDaemon: 16. 0x55d3557ff8e8 DB::ConvertingBlockInputStream::readImpl() /usr/bin/clickhouse
2020.01.30 23:54:57.861638 [ 145 ] {} <Fatal> BaseDaemon: 17. 0x55d3550d35ca DB::IBlockInputStream::read() /usr/bin/clickhouse
2020.01.30 23:54:57.861655 [ 145 ] {} <Fatal> BaseDaemon: 18. 0x55d3550f1abb DB::copyData(DB::IBlockInputStream&, DB::IBlockOutputStream&, std::atomic<bool>*) /usr/bin/clickhouse
2020.01.30 23:54:57.861667 [ 145 ] {} <Fatal> BaseDaemon: 19. 0x55d355221075 DB::NullAndDoCopyBlockInputStream::readImpl() /usr/bin/clickhouse
2020.01.30 23:54:57.861678 [ 145 ] {} <Fatal> BaseDaemon: 20. 0x55d3550d35ca DB::IBlockInputStream::read() /usr/bin/clickhouse
2020.01.30 23:54:57.861689 [ 145 ] {} <Fatal> BaseDaemon: 21. 0x55d351f0362d DB::TCPHandler::runImpl() /usr/bin/clickhouse
2020.01.30 23:54:57.861710 [ 145 ] {} <Fatal> BaseDaemon: 22. 0x55d351f039fb DB::TCPHandler::run() /usr/bin/clickhouse
2020.01.30 23:54:57.868329 [ 145 ] {} <Fatal> BaseDaemon: 23. 0x55d355e046f0 Poco::Net::TCPServerConnection::start() /usr/bin/clickhouse
2020.01.30 23:54:57.868363 [ 145 ] {} <Fatal> BaseDaemon: 24. 0x55d355e04e0d Poco::Net::TCPServerDispatcher::run() /usr/bin/clickhouse
2020.01.30 23:54:57.874405 [ 145 ] {} <Fatal> BaseDaemon: 25. 0x55d3574daf81 Poco::PooledThread::run() /usr/bin/clickhouse
2020.01.30 23:54:57.874435 [ 145 ] {} <Fatal> BaseDaemon: 26. 0x55d3574d8d2c Poco::ThreadImpl::runnableEntry(void*) /usr/bin/clickhouse
2020.01.30 23:54:57.874448 [ 145 ] {} <Fatal> BaseDaemon: 27. 0x55d357c4eec0 ? /usr/bin/clickhouse
2020.01.30 23:54:57.874466 [ 145 ] {} <Fatal> BaseDaemon: 28. 0x7f09f8cc66db start_thread /lib/x86_64-linux-gnu/libpthread-2.27.so
2020.01.30 23:54:57.874484 [ 145 ] {} <Fatal> BaseDaemon: 29. 0x7f09f85e388f clone /lib/x86_64-linux-gnu/libc-2.27.so
```