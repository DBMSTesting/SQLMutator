ID: 6473
Title: HTTP 200 & 400 simultaneously
Description:
v 19.13.1.11 (official build) centOS 7

**How to reproduce**
 ```sql
CREATE TABLE default.NodeLog ( ts  DateTime DEFAULT now(),
          msec  UInt32,
          node  String,
          level  Enum8('NOTSET' = 0, 'DEBUG' = 10, 'INFO' = 20, 'WARNING' = 30, 'ERROR' = 40, 'CRITICAL' = 50),
          pid  UInt32,
          file  String,
          logger  String,
          body  String,
          env  Enum8('NA' = 0, 'STAGE' = 3, 'DEBUG' = 6, 'DEV' = 9, 'DEV1' = 11, 'DEV2' = 12, 'DEV3' = 13, 'DEV4' = 14, 'DEV5' = 15
       )) ENGINE = MergeTree() PARTITION BY (toMonday(ts), node) ORDER BY (ts, node) SETTINGS index_granularity = 8192

CREATE TABLE default.NodeLog_buffer ( ts  DateTime DEFAULT now(),
          msec  UInt32,
          node  String,
          level  Enum8('NOTSET' = 0, 'DEBUG' = 10, 'INFO' = 20, 'WARNING' = 30, 'ERROR' = 40, 'CRITICAL' = 50),
          pid  UInt32,
          file  String,
          logger  String,
          body  String,
          env  Enum8('NA' = 0, 'PROD' = 1, 'STAGE' = 3, 'DEBUG' = 6, 'DEV' = 9, 'DEV1' = 11, 'DEV2' = 12, 'DEV3' = 13, 'DEV4' = 14, 'DEV5' = 15))
         ENGINE = Buffer(default, NodeLog, 16, 10, 120, 10000, 100000, 1000000, 1000000)


Trying to insert via HTTP API:


POST /?query=Insert+into+NodeLog_buffer+FORMAT+JSONEachRow&input_format_skip_unknown_fields=1 HTTP/1.1
Host: 10.0.0.108
Content-Length: 174
Content-Encoding: gzip
Connection: keep-alive
Content-Type: application/json
’çA
ÔøΩ0EÔøΩÔøΩÔøΩÔøΩ:)IZ[ÔøΩÔøΩ
ÔøΩÔøΩÔøΩ`KUÔøΩÔøΩZÔøΩÔøΩÔøΩ<oÔøΩÔøΩÔøΩÔøΩMC=sMÔøΩ\tÔøΩÔøΩÔøΩdjÔøΩUtOÔøΩÔøΩ7HÔøΩÔøΩÔøΩ"ÔøΩ]pÔøΩÔøΩÔøΩ\ÔøΩP;1ÔøΩ+ÔøΩ{ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ ÔøΩ&ÔøΩÔøΩ€®ÔøΩÔøΩIÔøΩ"a
ÔøΩÔøΩ~ÔøΩjÔøΩo
------------------------------------------------------------

Python representation:
 
b'POST /?query=Insert+into+NodeLog_buffer+FORMAT+JSONEachRow&input_format_skip_unknown_fields=1 HTTP/1.1\r\nHost: 10.0.0.108\r\nContent-Length: 174\r\nContent-Encoding: gzip\r\nConnection: keep-alive\r\nContent-Type: application/json\r\n\r\n\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x13\xd5\x8dA\n\xc20\x10E\xf7\x9e\xa2\xcc:)IZ[\xcd\xda\nnt!\xbar\xa53-\xc1\xd8\x946-\x14\xf1\xeeN\xf1\x14\xc2\xf0\xf9\x8f\xf7a\xde\x10\x07\xb0`\x94\xdeJ\xb5\x91:Kta\r\x9f\x06\x01\xaf\x81\x1e`KU\xe6\xd9Z\x80\xa7\x89<o\x0f\xc7\xfd\x89\xa5\x0fMC=sM\x84\\\x04t\x0e\xc1\x9a\xdcd\x02j\xe7\x89UtO\x87\xe17H\xbb\xd9\xea"\xe7]\x1bp\x91\x97\xb3\\\x9eP;1\xec\xaa+\xf7{\xc0\x99\xa1\xa1\x18\xa9\xb7\xe3 \x91&\xab\x93\xdb\xa8\x14\x15\xff\x9bI\xd5"a\n\x9f\xd5\x17~\xfdj\xfbo\x01\x00\x00\r\n'
------------------------------------------------------------

The data, uncompressed:

{"ts":"2019-08-13 16:26:21","msec":707435,"level":"INFO","logger":"feeder","pid":2423,"file":"tikidofeeder.py:164","node":"US-1","env":"DEV","body":"getter:us-dev:1 \u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6\u00e6 Ended."}
------------------------------------------------------------

Response:

HTTP/1.1 200 OK
Date: Tue, 13 Aug 2019 16:27:30 GMT
Connection: Keep-Alive
Content-Type: text/tab-separated-values; charset=UTF-8
X-ClickHouse-Server-Display-Name: CentOS7.ViLLi.1
Transfer-Encoding: chunked
X-ClickHouse-Query-Id: ac799c4b-53c3-4b27-a1ed-748213e120bb
Keep-Alive: timeout=3
X-ClickHouse-Summary: {"read_rows":"0","read_bytes":"0","written_rows":"0","written_bytes":"0","total_rows_to_read":"0"}
0
HTTP/1.1 400 Bad Request
Connection: Close
------------------------------------------------------------


2019.08.13 19:39:45.087006 [ 50 ] {e71c6730-0483-4d1c-9265-81eef6cee735} <Error> HTTPHandler: Code: 27, e.displayText() = DB::Exception: Cannot parse input: expected { before: "{\\"ts\\":\\"2019-08-13 16:26:21\\",\\"msec\\":707435,\\"level\\":\\"INFO\\",\\"logger\\":\\"feeder\\",\\"pid\\":2423,\\"file\\":\\"tikidofeeder.py:164\\",\\"node\\":\\"US-1\\",\\"env\\: (at row 1)
, Stack trace:

0. /usr/bin/clickhouse-server(StackTrace::StackTrace()+0x30) [0x7f58f30]
1. /usr/bin/clickhouse-server(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x25) [0x3c427b5]
2. /usr/bin/clickhouse-server() [0x37b4139]
3. /usr/bin/clickhouse-server(DB::JSONEachRowRowInputStream::readJSONObject(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&)+0xd81) [0x7141721]
4. /usr/bin/clickhouse-server(DB::JSONEachRowRowInputStream::read(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, DB::RowReadExtension&)+0x10a) [0x7141bea]
5. /usr/bin/clickhouse-server(DB::BlockInputStreamFromRowInputStream::readImpl()+0x170) [0x757d1c0]
6. /usr/bin/clickhouse-server(DB::IBlockInputStream::read()+0x187) [0x6c04667]
7. /usr/bin/clickhouse-server(DB::AddingDefaultsBlockInputStream::readImpl()+0x36) [0x6bfb4e6]
8. /usr/bin/clickhouse-server(DB::IBlockInputStream::read()+0x187) [0x6c04667]
9. /usr/bin/clickhouse-server(DB::InputStreamFromASTInsertQuery::readImpl()+0x28) [0x6e899f8]
10. /usr/bin/clickhouse-server(DB::IBlockInputStream::read()+0x187) [0x6c04667]
11. /usr/bin/clickhouse-server(DB::copyData(DB::IBlockInputStream&, DB::IBlockOutputStream&, std::atomic<bool>*)+0x6b) [0x6c1c9db]
12. /usr/bin/clickhouse-server(DB::NullAndDoCopyBlockInputStream::readImpl()+0x25) [0x6d437c5]
13. /usr/bin/clickhouse-server(DB::IBlockInputStream::read()+0x187) [0x6c04667]
14. /usr/bin/clickhouse-server(DB::copyData(DB::IBlockInputStream&, DB::IBlockOutputStream&, std::atomic<bool>*)+0x6b) [0x6c1c9db]
15. /usr/bin/clickhouse-server(DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>)+0x6a7) [0x6e88dd7]
16. /usr/bin/clickhouse-server(DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&)+0x1a5e) [0x3c8fc3e]
17. /usr/bin/clickhouse-server(DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&)+0x45a) [0x3c91fba]
18. /usr/bin/clickhouse-server(Poco::Net::HTTPServerConnection::run()+0x2a9) [0x7932009]
19. /usr/bin/clickhouse-server(Poco::Net::TCPServerConnection::start()+0x10) [0x792cde0]
20. /usr/bin/clickhouse-server(Poco::Net::TCPServerDispatcher::run()+0xed) [0x792d4fd]
21. /usr/bin/clickhouse-server(Poco::PooledThread::run()+0x81) [0x8057e21]
22. /usr/bin/clickhouse-server(Poco::ThreadImpl::runnableEntry(void*)+0x3c) [0x8055bcc]
23. /usr/bin/clickhouse-server() [0xba2baa0]
24. /lib64/libpthread.so.0(+0x7dd5) [0x7f551db33dd5]
25. /lib64/libc.so.6(clone+0x6d) [0x7f551d35702d]
```

**Expected behavior**
HTTP 200 and inserted data
