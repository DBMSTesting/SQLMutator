ID: 4534
Title: jdbc tableFunction doesn't add quotes when inferring table metadata
Description:
**Describe the bug**
jdbc table function doesn't add quotes for identifiers when inferring table metadata, but does when quering the data

**How to reproduce**
* ClickHouse server version 18.14.17 revision 54409
* clickhouse-jdbc-bridge
* PostgreSQL 10
* Create table in PostgreSQL with quoted identifier
```
CREATE TABLE "Channels" (
	"Id" serial NOT NULL,
	"Name" varchar(64) NOT NULL,
	"IsActive" bool NOT NULL
);
```
* Query to run in Clickhouse that lead to unexpected result
```
select * from jdbc('jdbc:postgresql://pghost:5432/testdb','', 'Channels')
```
**Expected behavior**
Query is executed without error.
Postgres receives the following queries
```
SELECT * FROM "Channels" WHERE 1 = 0
```
```
 SELECT "Id", "Name", "IsActive" FROM "Channels"
```

**Error message and/or stacktrace**
log of clickhouse-jdbc-bridge

> 2019-02-28 14:26:21,985 [ HTTP Handler-42 ] {RequestLogger} <INFO> - GET request to /ping
> 2019-02-28 14:26:22,013 [ HTTP Handler-26 ] {RequestLogger} <INFO> - POST request to /columns_info
> 2019-02-28 14:26:22,208 [ HTTP Handler-26 ] {ColumnsInfoServlet} <INFO> - Inferring schema by query **SELECT * FROM Channels WHERE 1 = 0**
> 2019-02-28 14:26:22,215 [ HTTP Handler-26 ] {ColumnsInfoServlet} <ERROR> - ОШИБКА: отношение "channels" не существует
>   Position: 15
> org.postgresql.util.PSQLException: ОШИБКА: отношение "channels" не существует
>   Position: 15
>         at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2440)
>         at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2183)
>         at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:308)
>         at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:441)
>         at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:365)
>         at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:307)
>         at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:293)
>         at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:270)
>         at org.postgresql.jdbc.PgStatement.executeQuery(PgStatement.java:224)
>         at ru.yandex.clickhouse.jdbcbridge.servlet.ColumnsInfoServlet.doPost(ColumnsInfoServlet.java:46)
>         at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
>         at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
>         at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:865)
>         at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1655)
>         at ru.yandex.clickhouse.jdbcbridge.servlet.RequestLogger.doFilter(RequestLogger.java:32)
>         at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)
>         at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)
>         at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:205)
>         at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)
>         at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
>         at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
>         at org.eclipse.jetty.server.Server.handle(Server.java:503)
>         at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:364)
>         at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260)
>         at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
>         at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
>         at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)
>         at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
>         at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
>         at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
>         at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.produce(EatWhatYouKill.java:132)
>         at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:765)
>         at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:683)
>         at java.lang.Thread.run(Thread.java:748)


**Additional context**
The expected result is correct only in "always add quotes" condition. Meanwhile PostgreSQL can use quotes for identifiers or not for different objects at the same time.
