ID: 11169
Title: "There is no physical column _topic in table" error when reading from Kafka table
Description:
**Describe the issue**

After upgrading to 20.4.3.16, reading from a Kafka engine table produces this error:

```
:) select * from flows limit 1;

SELECT *
FROM flows
LIMIT 1

Received exception from server (version 20.4.3):
Code: 16. DB::Exception: Received from localhost:9000. DB::Exception: There is no physical column _topic in table.. 

0 rows in set. Elapsed: 0.001 sec. 
```

Stacktrace in log:

```
2020.05.24 20:10:38.894997 [ 71 ] {cfd0b9b4-d10d-46a2-af15-9bf774bc0272} <Error> executeQuery: Code: 16, e.displayText() = DB::Exception: There is no physical column _topic in table. (version 20.4.3.16 (official build)) (from [::1]:46736) (in query: SELECT * FROM flows LIMIT 1), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x10418760 in /usr/bin/clickhouse
1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x8fff8ad in /usr/bin/clickhouse
2. ? @ 0xd643ee2 in /usr/bin/clickhouse
3. DB::IStorage::getSampleBlockForColumns(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) const @ 0xd64f563 in /usr/bin/clickhouse
4. DB::KafkaBlockInputStream::KafkaBlockInputStream(DB::StorageKafka&, DB::Context const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, unsigned long, bool) @ 0xd7fd6c1 in /usr/bin/clickhouse
5. DB::StorageKafka::read(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, DB::SelectQueryInfo const&, DB::Context const&, DB::QueryProcessingStage::Enum, unsigned long, unsigned int) @ 0xd7f288d in /usr/bin/clickhouse
6. void DB::InterpreterSelectQuery::executeFetchColumns<DB::QueryPipeline>(DB::QueryProcessingStage::Enum, DB::QueryPipeline&, std::__1::shared_ptr<DB::PrewhereInfo> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, DB::QueryPipeline&) @ 0xd26fd9a in /usr/bin/clickhouse
7. void DB::InterpreterSelectQuery::executeImpl<DB::QueryPipeline>(DB::QueryPipeline&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, DB::QueryPipeline&) @ 0xd273582 in /usr/bin/clickhouse
8. DB::InterpreterSelectQuery::executeWithProcessors() @ 0xd23902d in /usr/bin/clickhouse
9. DB::InterpreterSelectWithUnionQuery::executeWithProcessors() @ 0xd409dc5 in /usr/bin/clickhouse
10. ? @ 0xd54973c in /usr/bin/clickhouse
11. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, bool) @ 0xd54d025 in /usr/bin/clickhouse
12. DB::TCPHandler::runImpl() @ 0x9106678 in /usr/bin/clickhouse
13. DB::TCPHandler::run() @ 0x9107650 in /usr/bin/clickhouse
14. Poco::Net::TCPServerConnection::start() @ 0x103044db in /usr/bin/clickhouse
15. Poco::Net::TCPServerDispatcher::run() @ 0x1030496b in /usr/bin/clickhouse
16. Poco::PooledThread::run() @ 0x104b2536 in /usr/bin/clickhouse
17. Poco::ThreadImpl::runnableEntry(void*) @ 0x104ad7f0 in /usr/bin/clickhouse
18. start_thread @ 0x76db in /lib/x86_64-linux-gnu/libpthread-2.27.so
19. __clone @ 0x12188f in /lib/x86_64-linux-gnu/libc-2.27.so
```

**How to reproduce**

```
CREATE TABLE IF NOT EXISTS flows
(
    FlowType   UInt64
) ENGINE = Kafka()
      SETTINGS
          kafka_broker_list = 'kafka-bootstrap:9092',
          kafka_topic_list = 'example-topic',
          kafka_group_name = 'clickhouse',
          kafka_format = 'JSONEachRow';

SELECT * FROM flows LIMIT 1;
```

Worked in 20.3.10.75. Stock settings as deployed by https://github.com/Altinity/clickhouse-operator.
