ID: 62650
Title: ClickHouse crashes if MODIFY DEFINER command executed ON CLUSTER
Description:
**Describe what's wrong**

ClickHouse crashes on all nodes in cluster after executing command `ON CLUSTER`:
```sql
ALTER TABLE some_table ON CLUSTER '{cluster}' MODIFY DEFINER = some_user
```
but SQL command runs successfully if executed locally:
```sql
ALTER TABLE some_table MODIFY DEFINER = some_user
```

This issue persists after restart every node (stucked in task_queue and crashes node on every startup).
This is possible similar to #61245.

**Does it reproduce on the most recent release?**

This is reproduced on the version `24.3.2.23`.

**Crash report**

Crash report in log file:
```
2024.04.15 13:27:05.635365 [ 746 ] {} <Fatal> BaseDaemon: ########## Short fault info ############
2024.04.15 13:27:05.635381 [ 746 ] {} <Fatal> BaseDaemon: (version 24.3.2.23 (official build), build id: DA47C8C3B6BA55C4A326D4DD33ACED2DFEA5DA96, git hash: 8b7d910960cc2c6a0db07991fe2576a67fe98146) (from thread 722) Received signal 6
2024.04.15 13:27:05.635397 [ 746 ] {} <Fatal> BaseDaemon: Signal description: Aborted
2024.04.15 13:27:05.635401 [ 746 ] {} <Fatal> BaseDaemon: 
2024.04.15 13:27:05.635408 [ 746 ] {} <Fatal> BaseDaemon: Stack trace: 0x00007d86397bd00b 0x00007d863979c859 0x00000000170e7c44 0x000000001710512d 0x000000000cd0b4c8 0x0000000012af6b1e 0x0000000012b195f5 0x0000000012af8841 0x0000000012b357b8 0x0000000012c03f94 0x00000000105225ed 0x00000000105335bf 0x00000000105373fd 0x000000001053078e 0x000000001054b8b4 0x000000000cc7d9ed 0x00007d8639974609 0x00007d8639899353
2024.04.15 13:27:05.635413 [ 746 ] {} <Fatal> BaseDaemon: ########################################
2024.04.15 13:27:05.635418 [ 746 ] {} <Fatal> BaseDaemon: (version 24.3.2.23 (official build), build id: DA47C8C3B6BA55C4A326D4DD33ACED2DFEA5DA96, git hash: 8b7d910960cc2c6a0db07991fe2576a67fe98146) (from thread 722) (no query) Received signal Aborted (6)
2024.04.15 13:27:05.635421 [ 746 ] {} <Fatal> BaseDaemon: 
2024.04.15 13:27:05.635425 [ 746 ] {} <Fatal> BaseDaemon: Stack trace: 0x00007d86397bd00b 0x00007d863979c859 0x00000000170e7c44 0x000000001710512d 0x000000000cd0b4c8 0x0000000012af6b1e 0x0000000012b195f5 0x0000000012af8841 0x0000000012b357b8 0x0000000012c03f94 0x00000000105225ed 0x00000000105335bf 0x00000000105373fd 0x000000001053078e 0x000000001054b8b4 0x000000000cc7d9ed 0x00007d8639974609 0x00007d8639899353
2024.04.15 13:27:05.635433 [ 746 ] {} <Fatal> BaseDaemon: 2. ? @ 0x00007d86397bd00b
2024.04.15 13:27:05.635437 [ 746 ] {} <Fatal> BaseDaemon: 3. ? @ 0x00007d863979c859
2024.04.15 13:27:05.635457 [ 746 ] {} <Fatal> BaseDaemon: 4. ? @ 0x00000000170e7c44
2024.04.15 13:27:05.635464 [ 746 ] {} <Fatal> BaseDaemon: 5. ? @ 0x000000001710512d
2024.04.15 13:27:05.635690 [ 746 ] {} <Fatal> BaseDaemon: 6. DB::IAST::formatImpl(DB::IAST::FormatSettings const&, DB::IAST::FormatState&, DB::IAST::FormatStateStacked) const @ 0x000000000cd0b4c8
2024.04.15 13:27:05.635700 [ 746 ] {} <Fatal> BaseDaemon: 7. DB::ASTAlterCommand::formatImpl(DB::IAST::FormatSettings const&, DB::IAST::FormatState&, DB::IAST::FormatStateStacked) const @ 0x0000000012af6b1e
2024.04.15 13:27:05.635710 [ 746 ] {} <Fatal> BaseDaemon: 8. DB::ASTExpressionList::formatImpl(DB::IAST::FormatSettings const&, DB::IAST::FormatState&, DB::IAST::FormatStateStacked) const @ 0x0000000012b195f5
2024.04.15 13:27:05.635717 [ 746 ] {} <Fatal> BaseDaemon: 9. DB::ASTAlterQuery::formatQueryImpl(DB::IAST::FormatSettings const&, DB::IAST::FormatState&, DB::IAST::FormatStateStacked) const @ 0x0000000012af8841
2024.04.15 13:27:05.635725 [ 746 ] {} <Fatal> BaseDaemon: 10. DB::ASTQueryWithOutput::formatImpl(DB::IAST::FormatSettings const&, DB::IAST::FormatState&, DB::IAST::FormatStateStacked) const @ 0x0000000012b357b8
2024.04.15 13:27:05.635974 [ 746 ] {} <Fatal> BaseDaemon: 11. DB::serializeAST(DB::IAST const&) @ 0x0000000012c03f94
2024.04.15 13:27:05.635993 [ 746 ] {} <Fatal> BaseDaemon: 12. DB::DDLTaskBase::formatRewrittenQuery(std::shared_ptr<DB::Context const>) @ 0x00000000105225ed
2024.04.15 13:27:05.636229 [ 746 ] {} <Fatal> BaseDaemon: 13. DB::DDLWorker::initAndCheckTask(String const&, String&, std::shared_ptr<zkutil::ZooKeeper> const&) @ 0x00000000105335bf
2024.04.15 13:27:05.636241 [ 746 ] {} <Fatal> BaseDaemon: 14. DB::DDLWorker::scheduleTasks(bool) @ 0x00000000105373fd
2024.04.15 13:27:05.636247 [ 746 ] {} <Fatal> BaseDaemon: 15. DB::DDLWorker::runMainThread() @ 0x000000001053078e
2024.04.15 13:27:05.636262 [ 746 ] {} <Fatal> BaseDaemon: 16. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<void (DB::DDLWorker::*)(), DB::DDLWorker*>(void (DB::DDLWorker::*&&)(), DB::DDLWorker*&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000001054b8b4
2024.04.15 13:27:05.636274 [ 746 ] {} <Fatal> BaseDaemon: 17. void* std::__thread_proxy[abi:v15000]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000cc7d9ed
2024.04.15 13:27:05.636282 [ 746 ] {} <Fatal> BaseDaemon: 18. ? @ 0x00007d8639974609
2024.04.15 13:27:05.636285 [ 746 ] {} <Fatal> BaseDaemon: 19. ? @ 0x00007d8639899353
2024.04.15 13:27:05.769947 [ 746 ] {} <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 3D80E1F632C131451BEFC024AB379208)
2024.04.15 13:27:05.769984 [ 746 ] {} <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues
2024.04.15 13:27:09.635891 [ 747 ] {} <Fatal> BaseDaemon: ########## Short fault info ############
2024.04.15 13:27:09.635941 [ 747 ] {} <Fatal> BaseDaemon: (version 24.3.2.23 (official build), build id: DA47C8C3B6BA55C4A326D4DD33ACED2DFEA5DA96, git hash: 8b7d910960cc2c6a0db07991fe2576a67fe98146) (from thread 722) Received signal 11
2024.04.15 13:27:09.635964 [ 747 ] {} <Fatal> BaseDaemon: Signal description: Segmentation fault
2024.04.15 13:27:09.635978 [ 747 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Unknown si_code.
2024.04.15 13:27:09.635992 [ 747 ] {} <Fatal> BaseDaemon: Stack trace: 0x00007d863979c941 0x00000000170e7c44 0x000000001710512d 0x000000000cd0b4c8 0x0000000012af6b1e 0x0000000012b195f5 0x0000000012af8841 0x0000000012b357b8 0x0000000012c03f94 0x00000000105225ed 0x00000000105335bf 0x00000000105373fd 0x000000001053078e 0x000000001054b8b4 0x000000000cc7d9ed 0x00007d8639974609 0x00007d8639899353
2024.04.15 13:27:09.636022 [ 747 ] {} <Fatal> BaseDaemon: ########################################
2024.04.15 13:27:09.636036 [ 747 ] {} <Fatal> BaseDaemon: (version 24.3.2.23 (official build), build id: DA47C8C3B6BA55C4A326D4DD33ACED2DFEA5DA96, git hash: 8b7d910960cc2c6a0db07991fe2576a67fe98146) (from thread 722) (no query) Received signal Segmentation fault (11)
2024.04.15 13:27:09.636050 [ 747 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Unknown si_code.
2024.04.15 13:27:09.636060 [ 747 ] {} <Fatal> BaseDaemon: Stack trace: 0x00007d863979c941 0x00000000170e7c44 0x000000001710512d 0x000000000cd0b4c8 0x0000000012af6b1e 0x0000000012b195f5 0x0000000012af8841 0x0000000012b357b8 0x0000000012c03f94 0x00000000105225ed 0x00000000105335bf 0x00000000105373fd 0x000000001053078e 0x000000001054b8b4 0x000000000cc7d9ed 0x00007d8639974609 0x00007d8639899353
2024.04.15 13:27:09.636083 [ 747 ] {} <Fatal> BaseDaemon: 2. ? @ 0x00007d863979c941
2024.04.15 13:27:09.636139 [ 747 ] {} <Fatal> BaseDaemon: 3. ? @ 0x00000000170e7c44
2024.04.15 13:27:09.636155 [ 747 ] {} <Fatal> BaseDaemon: 4. ? @ 0x000000001710512d
2024.04.15 13:27:09.636225 [ 747 ] {} <Fatal> BaseDaemon: 5. DB::IAST::formatImpl(DB::IAST::FormatSettings const&, DB::IAST::FormatState&, DB::IAST::FormatStateStacked) const @ 0x000000000cd0b4c8
2024.04.15 13:27:09.636252 [ 747 ] {} <Fatal> BaseDaemon: 6. DB::ASTAlterCommand::formatImpl(DB::IAST::FormatSettings const&, DB::IAST::FormatState&, DB::IAST::FormatStateStacked) const @ 0x0000000012af6b1e
2024.04.15 13:27:09.636272 [ 747 ] {} <Fatal> BaseDaemon: 7. DB::ASTExpressionList::formatImpl(DB::IAST::FormatSettings const&, DB::IAST::FormatState&, DB::IAST::FormatStateStacked) const @ 0x0000000012b195f5
2024.04.15 13:27:09.636291 [ 747 ] {} <Fatal> BaseDaemon: 8. DB::ASTAlterQuery::formatQueryImpl(DB::IAST::FormatSettings const&, DB::IAST::FormatState&, DB::IAST::FormatStateStacked) const @ 0x0000000012af8841
2024.04.15 13:27:09.636310 [ 747 ] {} <Fatal> BaseDaemon: 9. DB::ASTQueryWithOutput::formatImpl(DB::IAST::FormatSettings const&, DB::IAST::FormatState&, DB::IAST::FormatStateStacked) const @ 0x0000000012b357b8
2024.04.15 13:27:09.636330 [ 747 ] {} <Fatal> BaseDaemon: 10. DB::serializeAST(DB::IAST const&) @ 0x0000000012c03f94
2024.04.15 13:27:09.636355 [ 747 ] {} <Fatal> BaseDaemon: 11. DB::DDLTaskBase::formatRewrittenQuery(std::shared_ptr<DB::Context const>) @ 0x00000000105225ed
2024.04.15 13:27:09.636380 [ 747 ] {} <Fatal> BaseDaemon: 12. DB::DDLWorker::initAndCheckTask(String const&, String&, std::shared_ptr<zkutil::ZooKeeper> const&) @ 0x00000000105335bf
2024.04.15 13:27:09.636397 [ 747 ] {} <Fatal> BaseDaemon: 13. DB::DDLWorker::scheduleTasks(bool) @ 0x00000000105373fd
2024.04.15 13:27:09.636414 [ 747 ] {} <Fatal> BaseDaemon: 14. DB::DDLWorker::runMainThread() @ 0x000000001053078e
2024.04.15 13:27:09.636454 [ 747 ] {} <Fatal> BaseDaemon: 15. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<void (DB::DDLWorker::*)(), DB::DDLWorker*>(void (DB::DDLWorker::*&&)(), DB::DDLWorker*&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000001054b8b4
2024.04.15 13:27:09.636486 [ 747 ] {} <Fatal> BaseDaemon: 16. void* std::__thread_proxy[abi:v15000]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000cc7d9ed
2024.04.15 13:27:09.636498 [ 747 ] {} <Fatal> BaseDaemon: 17. ? @ 0x00007d8639974609
2024.04.15 13:27:09.636508 [ 747 ] {} <Fatal> BaseDaemon: 18. ? @ 0x00007d8639899353
2024.04.15 13:27:09.776006 [ 747 ] {} <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 3D80E1F632C131451BEFC024AB379208)
2024.04.15 13:27:09.776042 [ 747 ] {} <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues
```
in docker container logs only one message on every node:
```
libc++abi: Pure virtual function called!
```

**How to reproduce**

* I used Docker image `clickhouse/clickhouse-server:24.3.2.23` from latest release.
docker-compose.yml:
```yaml
version: "3.3"

services:
  clickhouse01:
    image: clickhouse/clickhouse-server:24.3.2.23
    container_name: clickhouse01
    hostname: clickhouse01
    stop_grace_period: 15m
    ports:
      - target: 8123
        published: 18123
        protocol: tcp
        mode: host
      - target: 9000
        published: 9001
        mode: host
      - target: 9181
        published: 19181
        mode: host
    environment:
      TZ: "Europe/Moscow"
      LAYER: 1
      SHARD: 1
      REPLICA: clickhouse01
      CLUSTER: test_click
    volumes:
      - ./node-1/config.xml:/etc/clickhouse-server/config.xml
      - ./node-1/users.xml:/etc/clickhouse-server/users.xml
      - ./node-1/config.d:/etc/clickhouse-server/config.d
      - ./node-1/data:/var/lib/clickhouse

  clickhouse02:
    image: clickhouse/clickhouse-server:24.3.2.23
    container_name: clickhouse02
    hostname: clickhouse02
    ports:
      - target: 8123
        published: 28123
        protocol: tcp
        mode: host
      - target: 9000
        published: 9002
        mode: host
      - target: 9181
        published: 29181
        mode: host
      - target: 9363
        published: 9363
        mode: host
    environment:
      TZ: "Europe/Moscow"
      LAYER: 1
      SHARD: 1
      REPLICA: clickhouse02
      CLUSTER: test_click
    volumes:
      - ./node-2/config.xml:/etc/clickhouse-server/config.xml
      - ./node-2/users.xml:/etc/clickhouse-server/users.xml
      - ./node-2/config.d:/etc/clickhouse-server/config.d
      - ./node-2/data:/var/lib/clickhouse
```
* Command executed via native clichouse-client in cli
* Settings are pure default for simple cluster with two replicas in one shard.

**Expected behavior**

It seems to me that this is unexpected behavior. In [documentation](https://clickhouse.com/docs/en/sql-reference/statements/create/view#sql_security) not mentioned that `ON CLUSTER` option is supported, but in this case maybe it must be the syntax check error instead of unhandled exception and server crash.
