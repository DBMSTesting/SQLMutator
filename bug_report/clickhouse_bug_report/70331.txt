ID: 70331
Title: Server segfault when using WITH FILL 'YYYY-MM-DD'
Description:
**Describe what's wrong**

In latest (24.9.2.42), using `with fill` with a string instead of a datetime causes the server to segfault.

https://fiddle.clickhouse.com/72178977-0448-4b9b-8ce8-ef9fb2b207ad

```
CREATE TABLE users (date DateTime, name String, age Int16) ENGINE=Memory;

INSERT INTO users VALUES ('2024-01-01', 'John', 33);
INSERT INTO users VALUES ('2024-02-01', 'Ksenia', 48);
INSERT INTO users VALUES ('2024-02-15', 'Alice', 50);

SELECT * FROM users order by date with fill to '2024-02-17' STEP toIntervalHour(1)
```

```
[4518f0cbaadf] 2024.10.03 15:36:22.153780 [ 744 ] <Fatal> BaseDaemon: ########################################
[4518f0cbaadf] 2024.10.03 15:36:22.153836 [ 744 ] <Fatal> BaseDaemon: (version 24.9.2.42 (official build), build id: 5B9D439755D898BE820CFDC35F4F8B5383F2DEF6, git hash: de7c791a2eadce4093409574d6560d2332b0dd18) (from thread 68) (query_id: 4d4fce33-e471-49b7-bb60-764f54205aca) (query: SELECT * FROM users order by date with fill to '2024-02-17' STEP toIntervalHour(1)


) Received signal Segmentation fault (11)
[4518f0cbaadf] 2024.10.03 15:36:22.153875 [ 744 ] <Fatal> BaseDaemon: Address: 0x68. Access: read. Address not mapped to object.
[4518f0cbaadf] 2024.10.03 15:36:22.153902 [ 744 ] <Fatal> BaseDaemon: Stack trace: 0x000000000d963af5 0x000071e447b92420 0x00000000111df9c5 0x0000000011291bcc 0x000000001125a6f8 0x000000001125758c 0x0000000011256e45 0x000000001193b2b6 0x0000000011b87e3d 0x0000000011b85dfc 0x0000000011b89b42 0x0000000011b1abec 0x0000000011ed0734 0x0000000011ecce7a 0x00000000130a7d74 0x00000000130c31f8 0x0000000015ef4227 0x0000000015ef46b9 0x0000000015ec12a1 0x0000000015ebf85d 0x000071e447b86609 0x000071e447aab353
[4518f0cbaadf] 2024.10.03 15:36:22.155079 [ 744 ] <Fatal> BaseDaemon: 0. signalHandler(int, siginfo_t*, void*) @ 0x000000000d963af5
[4518f0cbaadf] 2024.10.03 15:36:22.155134 [ 744 ] <Fatal> BaseDaemon: 1. ? @ 0x000071e447b92420
[4518f0cbaadf] 2024.10.03 15:36:22.156224 [ 744 ] <Fatal> BaseDaemon: 2. DB::IQueryTreeNode::formatASTForErrorMessage() const @ 0x00000000111df9c5
[4518f0cbaadf] 2024.10.03 15:36:22.157127 [ 744 ] <Fatal> BaseDaemon: 3. DB::QueryAnalyzer::resolveSortNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000011291bcc
[4518f0cbaadf] 2024.10.03 15:36:22.157201 [ 744 ] <Fatal> BaseDaemon: 4. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001125a6f8
[4518f0cbaadf] 2024.10.03 15:36:22.158385 [ 744 ] <Fatal> BaseDaemon: 5. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000001125758c
[4518f0cbaadf] 2024.10.03 15:36:22.158467 [ 744 ] <Fatal> BaseDaemon: 6. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000011256e45
[4518f0cbaadf] 2024.10.03 15:36:22.159465 [ 744 ] <Fatal> BaseDaemon: 7. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000001193b2b6
[4518f0cbaadf] 2024.10.03 15:36:22.160356 [ 744 ] <Fatal> BaseDaemon: 8. DB::(anonymous namespace)::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.6373583906349729418) @ 0x0000000011b87e3d
[4518f0cbaadf] 2024.10.03 15:36:22.161290 [ 744 ] <Fatal> BaseDaemon: 9. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000011b85dfc
[4518f0cbaadf] 2024.10.03 15:36:22.161371 [ 744 ] <Fatal> BaseDaemon: 10. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.6373583906349729418) @ 0x0000000011b89b42
[4518f0cbaadf] 2024.10.03 15:36:22.162560 [ 744 ] <Fatal> BaseDaemon: 11. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x0000000011b1abec
[4518f0cbaadf] 2024.10.03 15:36:22.163411 [ 744 ] <Fatal> BaseDaemon: 12. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x0000000011ed0734
[4518f0cbaadf] 2024.10.03 15:36:22.164396 [ 744 ] <Fatal> BaseDaemon: 13. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x0000000011ecce7a
[4518f0cbaadf] 2024.10.03 15:36:22.165683 [ 744 ] <Fatal> BaseDaemon: 14. DB::TCPHandler::runImpl() @ 0x00000000130a7d74
[4518f0cbaadf] 2024.10.03 15:36:22.167019 [ 744 ] <Fatal> BaseDaemon: 15. DB::TCPHandler::run() @ 0x00000000130c31f8
[4518f0cbaadf] 2024.10.03 15:36:22.168048 [ 744 ] <Fatal> BaseDaemon: 16. Poco::Net::TCPServerConnection::start() @ 0x0000000015ef4227
[4518f0cbaadf] 2024.10.03 15:36:22.168107 [ 744 ] <Fatal> BaseDaemon: 17. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015ef46b9
[4518f0cbaadf] 2024.10.03 15:36:22.168167 [ 744 ] <Fatal> BaseDaemon: 18. Poco::PooledThread::run() @ 0x0000000015ec12a1
[4518f0cbaadf] 2024.10.03 15:36:22.168215 [ 744 ] <Fatal> BaseDaemon: 19. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015ebf85d
[4518f0cbaadf] 2024.10.03 15:36:22.168262 [ 744 ] <Fatal> BaseDaemon: 20. ? @ 0x000071e447b86609
[4518f0cbaadf] 2024.10.03 15:36:22.168349 [ 744 ] <Fatal> BaseDaemon: 21. ? @ 0x000071e447aab353
[4518f0cbaadf] 2024.10.03 15:36:22.291554 [ 744 ] <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 3F7974745B13E7E0E2C85EE5BBB6FA02)
[4518f0cbaadf] 2024.10.03 15:36:22.291870 [ 744 ] <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues
[4518f0cbaadf] 2024.10.03 15:36:22.292021 [ 744 ] <Fatal> BaseDaemon: Changed settings: output_format_pretty_color = 0, output_format_pretty_grid_charset = 'ASCII'
```