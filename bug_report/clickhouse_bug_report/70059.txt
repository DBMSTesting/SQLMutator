ID: 70059
Title: ProtobufList format assertion error
Description:
**Describe the bug**

The `ProtobufList` list format seems to have an issue  when reading a second time from a file, hitting an assertion on the client.

**How to reproduce**
Run:
```sql
CREATE TABLE t0 (c0 Int) ENGINE = Memory();
INSERT INTO TABLE FUNCTION file('</path/to/file>', 'ProtobufList', 'c0 Int') SELECT c0 FROM t0;
INSERT INTO TABLE t0 (c0) FROM INFILE '</path/to/file>' FORMAT ProtobufList;
INSERT INTO TABLE FUNCTION file('</path/to/file>', 'ProtobufList', 'c0 Int') SELECT c0 FROM t0;
INSERT INTO TABLE t0 (c0) FROM INFILE '</path/to/file>' FORMAT ProtobufList;
```
Stack trace:
```
src/Formats/ProtobufSerializer.cpp:2757: virtual void DB::(anonymous namespace)::ProtobufSerializerEnvelope::readRow(size_t): Assertion `ret' failed

#0  __pthread_kill_implementation (no_tid=0, signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:44
#1  __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78
#2  __GI___pthread_kill (threadid=<optimized out>, signo=signo@entry=6) at ./nptl/pthread_kill.c:89
#3  0x00007ffff7c4526e in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26
#4  0x00007ffff7c288ff in __GI_abort () at ./stdlib/abort.c:79
#5  0x00007ffff7c2881b in __assert_fail_base (fmt=0x7ffff7dd01e8 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=assertion@entry=0x55555c570560 <str> "ret", 
    file=file@entry=0x55555c541180 <str> "src/Formats/ProtobufSerializer.cpp", line=line@entry=2757, 
    function=function@entry=0x55555c570580 <__PRETTY_FUNCTION__._ZN2DB12_GLOBAL__N_126ProtobufSerializerEnvelope7readRowEm> "virtual void DB::(anonymous namespace)::ProtobufSerializerEnvelope::readRow(size_t)") at ./assert/assert.c:94
#6  0x00007ffff7c3b507 in __assert_fail (assertion=0x55555c570560 <str> "ret", file=0x55555c541180 <str> "src/Formats/ProtobufSerializer.cpp", line=2757, 
    function=0x55555c570580 <__PRETTY_FUNCTION__._ZN2DB12_GLOBAL__N_126ProtobufSerializerEnvelope7readRowEm> "virtual void DB::(anonymous namespace)::ProtobufSerializerEnvelope::readRow(size_t)") at ./assert/assert.c:103
#7  0x00005555852d0677 in DB::(anonymous namespace)::ProtobufSerializerEnvelope::readRow (this=0x5040001e0e90, row_num=<optimized out>) at src/Formats/ProtobufSerializer.cpp:2757
#8  0x00005555851efff0 in DB::ProtobufListInputFormat::readRow (this=0x517000020318, columns=..., row_read_extension=...) at src/Processors/Formats/Impl/ProtobufListInputFormat.cpp:53
#9  0x0000555584ee271b in DB::IRowInputFormat::read (this=<optimized out>) at src/Processors/Formats/IRowInputFormat.cpp:134
#10 0x0000555584dfebe6 in DB::IInputFormat::generate (this=0x517000020318) at src/Processors/Formats/IInputFormat.cpp:19
#11 0x0000555584daae9a in DB::ISource::tryGenerate (this=<optimized out>) at src/Processors/ISource.cpp:139
#12 0x0000555584daa4a3 in DB::ISource::work (this=0x517000020318) at src/Processors/ISource.cpp:108
#13 0x0000555584de854e in DB::executeJob (node=0x511000101e80, read_progress_callback=0x50b00001c970) at src/Processors/Executors/ExecutionThreadContext.cpp:47
#14 DB::ExecutionThreadContext::executeTask (this=0x5110001024c0) at src/Processors/Executors/ExecutionThreadContext.cpp:96
#15 0x0000555584dcccf0 in DB::PipelineExecutor::executeStepImpl (this=<optimized out>, thread_num=<optimized out>, yield_flag=<optimized out>)
    at src/Processors/Executors/PipelineExecutor.cpp:288
#16 0x0000555584dcbe99 in DB::PipelineExecutor::executeStep (this=0x514000021858, yield_flag=<optimized out>) at src/Processors/Executors/PipelineExecutor.cpp:162
#17 0x0000555584df2999 in DB::PullingPipelineExecutor::pull (this=0x5040001e1310, chunk=...) at src/Processors/Executors/PullingPipelineExecutor.cpp:54
#18 0x00005555834b76de in DB::StorageFileSource::generate (this=0x51a000002498) at src/Storages/StorageFile.cpp:1473
#19 0x0000555584daae9a in DB::ISource::tryGenerate (this=<optimized out>) at src/Processors/ISource.cpp:139
#20 0x0000555584daa4a3 in DB::ISource::work (this=0x51a000002498) at src/Processors/ISource.cpp:108
#21 0x0000555584de854e in DB::executeJob (node=0x51100010ff80, read_progress_callback=0x50b000021300) at src/Processors/Executors/ExecutionThreadContext.cpp:47
#22 DB::ExecutionThreadContext::executeTask (this=0x511000101ac0) at src/Processors/Executors/ExecutionThreadContext.cpp:96
#23 0x0000555584dcccf0 in DB::PipelineExecutor::executeStepImpl (this=<optimized out>, thread_num=<optimized out>, yield_flag=<optimized out>)
    at src/Processors/Executors/PipelineExecutor.cpp:288
#24 0x0000555584dcd72a in DB::PipelineExecutor::executeSingleThread (this=0x514000036258, thread_num=0) at src/Processors/Executors/PipelineExecutor.cpp:254
#25 0x0000555584dca7db in DB::PipelineExecutor::executeImpl (this=0x514000036258, num_threads=1, concurrency_control=<optimized out>) at src/Processors/Executors/PipelineExecutor.cpp:429
#26 0x0000555584dc9b97 in DB::PipelineExecutor::execute (this=0x514000036258, num_threads=<optimized out>, concurrency_control=<optimized out>)
    at src/Processors/Executors/PipelineExecutor.cpp:125
#27 0x0000555584df049d in DB::threadFunction (data=..., thread_group=..., num_threads=0, concurrency_control=<optimized out>) at src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:83
#28 DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0::operator()() const (this=0x7ffff1df4460) at src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:109
#29 std::__1::__invoke[abi:v15007]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&) (__f=...)
    at contrib/llvm-project/libcxx/include/__functional/invoke.h:394
#30 _ZNSt3__118__apply_tuple_implB6v15007IRZN2DB28PullingAsyncPipelineExecutor4pullERNS1_5ChunkEmE3$_0RNS_5tupleIJEEETpTnmJEEEDcOT_OT0_NS_15__tuple_indicesIJXspT1_EEEE (__f=..., __t=...)
    at contrib/llvm-project/libcxx/include/tuple:1789
#31 std::__1::apply[abi:v15007]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&) (__f=..., __t=...)
    at contrib/llvm-project/libcxx/include/tuple:1798
#32 ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::{lambda()#1}::operator()() (this=<optimized out>) at src/Common/ThreadPool.h:251
#33 std::__1::__invoke[abi:v15007]<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::{lambda()#1}&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&) (__f=...) at contrib/llvm-project/libcxx/include/__functional/invoke.h:394
#34 std::__1::__invoke_void_return_wrapper<void, true>::__call<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::{lambda()#1}&>(ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::{lambda()#1}&) (__args=...) at contrib/llvm-project/libcxx/include/__functional/invoke.h:479
#35 std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::{lambda()#1}, void ()>::operator()[abi:v15007]() (this=<optimized out>) at contrib/llvm-project/libcxx/include/__functional/function.h:235
#36 std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::{lambda()#1}, void ()> >(std::__1::__function::__policy_storage const*) (__buf=<optimized out>)
--Type <RET> for more, q to quit, c to continue without paging--
    at contrib/llvm-project/libcxx/include/__functional/function.h:716
#37 0x0000555573c25d5e in std::__1::__function::__policy_func<void ()>::operator()[abi:v15007]() const (this=0x7ffff0e090e0) at contrib/llvm-project/libcxx/include/__functional/function.h:848
#38 std::__1::function<void ()>::operator()() const (this=0x7ffff0e090e0) at contrib/llvm-project/libcxx/include/__functional/function.h:1197
#39 ThreadPoolImpl<std::__1::thread>::worker (this=<optimized out>, thread_it=...) at src/Common/ThreadPool.cpp:540
#40 0x0000555573c30aed in ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::{lambda()#2}::operator()() const (this=<optimized out>)
    at src/Common/ThreadPool.cpp:252
#41 std::__1::__invoke[abi:v15007]<ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::{lambda()#2}>(ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::{lambda()#2}&&) (__f=...) at contrib/llvm-project/libcxx/include/__functional/invoke.h:394
#42 _ZNSt3__116__thread_executeB6v15007INS_10unique_ptrINS_15__thread_structENS_14default_deleteIS2_EEEEZN14ThreadPoolImplINS_6threadEE12scheduleImplIvEET_NS_8functionIFvvEEE8PriorityNS_8optionalImEEbEUlvE0_JETpTnmJEEEvRNS_5tupleIJSA_T0_DpT1_EEENS_15__tuple_indicesIJXspT2_EEEE (__t=...) at contrib/llvm-project/libcxx/include/thread:284
#43 std::__1::__thread_proxy[abi:v15007]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::{lambda()#2}> >(void*) (__vp=<optimized out>) at contrib/llvm-project/libcxx/include/thread:295
#44 0x0000555563b4dbcd in asan_thread_start(void*) ()
#45 0x00007ffff7c9ca94 in start_thread (arg=<optimized out>) at ./nptl/pthread_create.c:447
#46 0x00007ffff7d29c3c in clone3 () at ../sysdeps/unix/sysv/linux/x86_64/clone3.S:78
```