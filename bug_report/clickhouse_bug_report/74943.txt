ID: 74943
Title: Logical error: Unexpected state. Back: [5242880, 10485759], result range: [0, 12582911], limit: 0. (s3 storage)
Description:
### Company or project name

_No response_

### Describe what's wrong

Stateful test `00172_hits_joins.sql.j2` with s3 storage configuration
Report https://s3.amazonaws.com/clickhouse-test-reports/74882/0ef7d10ef5b65acd7195d9d2e68a9e09f5d96041/stateless_tests__tsan__s3_storage__[3_3].html

Stacktrace
```
2025.01.22 13:58:17.932209 [ 139001 ] {94e39634-f018-4833-a18d-2ca4e79f57b5} <Fatal> : Logical error: 'Unexpected state. Back: [5242880, 10485759], result range: [0, 12582911], limit: 0'.
2025.01.22 13:58:18.032397 [ 139001 ] {94e39634-f018-4833-a18d-2ca4e79f57b5} <Fatal> : Stack trace (when copying this message, always include the lines below):

0. ./build_docker/./src/Common/StackTrace.cpp:381: StackTrace::tryCapture() @ 0x00000000107b8281
1. ./src/Common/StackTrace.h:48: StackTrace::StackTrace() @ 0x000000001077b989
2. ./build_docker/./src/Common/Exception.cpp:53: DB::abortOnFailedAssertion(String const&) @ 0x0000000010772228
3. ./build_docker/./src/Interpreters/Cache/FileCache.cpp:726: DB::FileCache::getOrSet(DB::FileCacheKey const&, unsigned long, unsigned long, unsigned long, DB::CreateFileSegmentSettings const&, unsigned long, DB::FileCacheUserInfo const&, std::optional<unsigned long>) @ 0x000000001a549e43
4. ./build_docker/./src/Disks/IO/CachedOnDiskReadBufferFromFile.cpp:139: DB::CachedOnDiskReadBufferFromFile::nextFileSegmentsBatch() @ 0x0000000017de4676
5. ./build_docker/./src/Disks/IO/CachedOnDiskReadBufferFromFile.cpp:158: DB::CachedOnDiskReadBufferFromFile::initialize() @ 0x0000000017de4972
6. ./build_docker/./src/Disks/IO/CachedOnDiskReadBufferFromFile.cpp:828: DB::CachedOnDiskReadBufferFromFile::nextImplStep() @ 0x0000000017dee4e5
7. ./build_docker/./src/Disks/IO/CachedOnDiskReadBufferFromFile.cpp:810: DB::CachedOnDiskReadBufferFromFile::nextImpl() @ 0x0000000017dee37b
8. DB::ReadBuffer::next() @ 0x0000000007fc8e5b
9. ./build_docker/./src/Disks/IO/ReadBufferFromRemoteFSGather.cpp:147: DB::ReadBufferFromRemoteFSGather::readImpl() @ 0x0000000018f40ff7
10. ./build_docker/./src/Disks/IO/ReadBufferFromRemoteFSGather.cpp:119: DB::ReadBufferFromRemoteFSGather::nextImpl() @ 0x0000000018f40f4a
11. DB::ReadBuffer::next() @ 0x0000000007fc8e5b
12. ./src/IO/ReadBuffer.h:103: DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool) @ 0x000000001e394da3
13. ./build_docker/./src/Compression/CompressedReadBufferFromFile.cpp:22: DB::CompressedReadBufferFromFile::nextImpl() @ 0x000000001e397045
14. ./build_docker/./src/Compression/CompressedReadBufferFromFile.cpp:0: non-virtual thunk to DB::CompressedReadBufferFromFile::nextImpl() @ 0x000000001e3972be
15. DB::ReadBuffer::next() @ 0x0000000007fc8e5b
16. ./src/IO/ReadBuffer.h:103: void DB::deserializeBinarySSE2<1>(DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 63ul, 64ul>&, DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 63ul, 64ul>&, DB::ReadBuffer&, unsigned long) @ 0x0000000018c987a4
17. ./build_docker/./src/DataTypes/Serializations/SerializationString.cpp:258: DB::SerializationString::deserializeBinaryBulk(DB::IColumn&, DB::ReadBuffer&, unsigned long, double) const @ 0x0000000018c95aef
18. ./build_docker/./src/DataTypes/Serializations/ISerialization.cpp:147: DB::ISerialization::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::unordered_map<String, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*) const @ 0x0000000018baa8c9
19. ./build_docker/./src/Storages/MergeTree/MergeTreeReaderWide.cpp:410: DB::MergeTreeReaderWide::readData(DB::NameAndTypePair const&, std::shared_ptr<DB::ISerialization const> const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, bool, unsigned long, unsigned long, std::unordered_map<String, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::unordered_map<String, std::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, std::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>>>>&, bool) @ 0x000000001cc048ca
20. ./build_docker/./src/Storages/MergeTree/MergeTreeReaderWide.cpp:158: DB::MergeTreeReaderWide::readRows(unsigned long, unsigned long, bool, unsigned long, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&) @ 0x000000001cc03e8e
21. ./build_docker/./src/Storages/MergeTree/MergeTreeRangeReader.cpp:116: DB::MergeTreeRangeReader::DelayedStream::finalize(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&) @ 0x000000001cbe7f90
22. ./build_docker/./src/Storages/MergeTree/MergeTreeRangeReader.cpp:298: DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&) @ 0x000000001cbf5f16
23. ./build_docker/./src/Storages/MergeTree/MergeTreeRangeReader.cpp:1045: DB::MergeTreeRangeReader::read(unsigned long, DB::MarkRanges&) @ 0x000000001cbf3360
24. ./build_docker/./src/Storages/MergeTree/MergeTreeReadTask.cpp:165: DB::MergeTreeReadTask::read() @ 0x000000001cc1d692
25. ./src/Storages/MergeTree/MergeTreeSelectAlgorithms.h:38: DB::MergeTreeThreadSelectAlgorithm::readFromTask(DB::MergeTreeReadTask&) @ 0x000000001da88521
26. ./build_docker/./src/Storages/MergeTree/MergeTreeSelectProcessor.cpp:194: DB::MergeTreeSelectProcessor::read() @ 0x000000001cc187d0
27. ./build_docker/./src/Storages/MergeTree/MergeTreeSource.cpp:225: DB::MergeTreeSource::tryGenerate() @ 0x000000001da954d9
28. ./build_docker/./src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x000000001d372f8b
29. ./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:49: DB::ExecutionThreadContext::executeTask() @ 0x000000001d39b6e7
30. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:290: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x000000001d38a57b
31. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:256: DB::PipelineExecutor::executeImpl(unsigned long, bool) @ 0x000000001d3898e0
32. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:127: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x000000001d3895aa
33. ./build_docker/./src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:83: void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne180100]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000001d3a019b
34. ./contrib/llvm-project/libcxx/include/__functional/function.h:714: ? @ 0x000000001088554e
35. ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:312: void* std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000001088d6dc
36. __tsan_thread_start_func @ 0x0000000007df3428
37. ? @ 0x00007f53b64feac3
38. ? @ 0x00007f53b6590850

2025.01.22 14:00:53.239557 [ 159561 ] {} <Fatal> BaseDaemon: ########## Short fault info ############
2025.01.22 14:00:53.239778 [ 159561 ] {} <Fatal> BaseDaemon: (version 25.1.1.3786 (official build), build id: D7E602CD8DF57736FA7FB28696D72FA7610A6D6C, git hash: 56924a46856ee2d937200fe39300f45adfdd18cb, architecture: x86_64) (from thread 139001) Received signal 6
2025.01.22 14:00:53.240357 [ 159561 ] {} <Fatal> BaseDaemon: Signal description: Aborted
2025.01.22 14:00:53.240464 [ 159561 ] {} <Fatal> BaseDaemon: 
2025.01.22 14:00:53.240599 [ 159561 ] {} <Fatal> BaseDaemon: Stack trace: 0x000055cc111d819d 0x000055cc115e2462 0x000055cc0881b7a6 0x000055cc0881bcfb 0x00007f53b64ac520 0x00007f53b65009fd 0x00007f53b64ac476 0x00007f53b64927f3 0x000055cc0881a267 0x000055cc11191cc7 0x000055cc11192257 0x000055cc1af69e43 0x000055cc18804676 0x000055cc18804972 0x000055cc1880e4e5 0x000055cc1880e37b 0x000055cc089e8e5b 0x000055cc19960ff7 0x000055cc19960f4a 0x000055cc089e8e5b 0x000055cc1edb4da3 0x000055cc1edb7045 0x000055cc1edb72be 0x000055cc089e8e5b 0x000055cc196b87a4 0x000055cc196b5aef 0x000055cc195ca8c9 0x000055cc1d6248ca 0x000055cc1d623e8e 0x000055cc1d607f90 0x000055cc1d615f16 0x000055cc1d613360 0x000055cc1d63d692 0x000055cc1e4a8521 0x000055cc1d6387d0 0x000055cc1e4b54d9 0x000055cc1dd92f8b 0x000055cc1ddbb6e7 0x000055cc1ddaa57b 0x000055cc1dda98e0 0x000055cc1dda95aa 0x000055cc1ddc019b 0x000055cc112a554e 0x000055cc112ad6dc 0x000055cc08813428
2025.01.22 14:00:53.240725 [ 159561 ] {} <Fatal> BaseDaemon: ########################################
2025.01.22 14:00:53.241181 [ 159561 ] {} <Fatal> BaseDaemon: (version 25.1.1.3786 (official build), build id: D7E602CD8DF57736FA7FB28696D72FA7610A6D6C, git hash: 56924a46856ee2d937200fe39300f45adfdd18cb) (from thread 139001) (query_id: 94e39634-f018-4833-a18d-2ca4e79f57b5) (query: SELECT
    domain,
    hits,
    visits
FROM
(
    SELECT
        domain(URL) AS domain,
        count() AS hits
    FROM test.hits
    GROUP BY domain
) ANY LEFT JOIN
(
    SELECT
        domain(StartURL) AS domain,
        sum(Sign) AS visits
    FROM test.visits
    GROUP BY domain
) USING domain
ORDER BY hits DESC
LIMIT 10
SETTINGS joined_subquery_requires_alias = 0;) Received signal Aborted (6)
2025.01.22 14:00:53.241523 [ 159561 ] {} <Fatal> BaseDaemon: 
2025.01.22 14:00:53.241785 [ 159561 ] {} <Fatal> BaseDaemon: Stack trace: 0x000055cc111d819d 0x000055cc115e2462 0x000055cc0881b7a6 0x000055cc0881bcfb 0x00007f53b64ac520 0x00007f53b65009fd 0x00007f53b64ac476 0x00007f53b64927f3 0x000055cc0881a267 0x000055cc11191cc7 0x000055cc11192257 0x000055cc1af69e43 0x000055cc18804676 0x000055cc18804972 0x000055cc1880e4e5 0x000055cc1880e37b 0x000055cc089e8e5b 0x000055cc19960ff7 0x000055cc19960f4a 0x000055cc089e8e5b 0x000055cc1edb4da3 0x000055cc1edb7045 0x000055cc1edb72be 0x000055cc089e8e5b 0x000055cc196b87a4 0x000055cc196b5aef 0x000055cc195ca8c9 0x000055cc1d6248ca 0x000055cc1d623e8e 0x000055cc1d607f90 0x000055cc1d615f16 0x000055cc1d613360 0x000055cc1d63d692 0x000055cc1e4a8521 0x000055cc1d6387d0 0x000055cc1e4b54d9 0x000055cc1dd92f8b 0x000055cc1ddbb6e7 0x000055cc1ddaa57b 0x000055cc1dda98e0 0x000055cc1dda95aa 0x000055cc1ddc019b 0x000055cc112a554e 0x000055cc112ad6dc 0x000055cc08813428
2025.01.22 14:00:53.641520 [ 159561 ] {} <Fatal> BaseDaemon: 1. ./build_docker/./src/Common/SignalHandlers.cpp:103: signalHandler(int, siginfo_t*, void*) @ 0x0000000010bc2462
2025.01.22 14:00:54.440641 [ 159561 ] {} <Fatal> BaseDaemon: 2. __tsan::CallUserSignalHandler(__tsan::ThreadState*, bool, bool, int, __sanitizer::__sanitizer_siginfo*, void*) @ 0x0000000007dfb7a6
2025.01.22 14:00:54.545248 [ 159561 ] {} <Fatal> BaseDaemon: 3. sighandler(int, __sanitizer::__sanitizer_siginfo*, void*) @ 0x0000000007dfbcfb
2025.01.22 14:00:54.593044 [ 159561 ] {} <Fatal> BaseDaemon: 4. ? @ 0x00007f53b64ac520
2025.01.22 14:00:54.593175 [ 159561 ] {} <Fatal> BaseDaemon: 5. ? @ 0x00007f53b65009fd
2025.01.22 14:00:54.593231 [ 159561 ] {} <Fatal> BaseDaemon: 6. ? @ 0x00007f53b64ac476
2025.01.22 14:00:54.593279 [ 159561 ] {} <Fatal> BaseDaemon: 7. ? @ 0x00007f53b64927f3
2025.01.22 14:00:54.703024 [ 159561 ] {} <Fatal> BaseDaemon: 8. __interceptor_abort @ 0x0000000007dfa267
2025.01.22 14:00:54.855442 [ 159561 ] {} <Fatal> BaseDaemon: 9. ./build_docker/./src/Common/Exception.cpp:48: DB::abortOnFailedAssertion(String const&, void* const*, unsigned long, unsigned long) @ 0x0000000010771cc7
2025.01.22 14:00:55.160061 [ 159561 ] {} <Fatal> BaseDaemon: 10. ./build_docker/./src/Common/Exception.cpp:54: DB::abortOnFailedAssertion(String const&) @ 0x0000000010772257
2025.01.22 14:00:55.400586 [ 159561 ] {} <Fatal> BaseDaemon: 11. ./build_docker/./src/Interpreters/Cache/FileCache.cpp:726: DB::FileCache::getOrSet(DB::FileCacheKey const&, unsigned long, unsigned long, unsigned long, DB::CreateFileSegmentSettings const&, unsigned long, DB::FileCacheUserInfo const&, std::optional<unsigned long>) @ 0x000000001a549e43
2025.01.22 14:00:55.505351 [ 159561 ] {} <Fatal> BaseDaemon: 12. ./build_docker/./src/Disks/IO/CachedOnDiskReadBufferFromFile.cpp:139: DB::CachedOnDiskReadBufferFromFile::nextFileSegmentsBatch() @ 0x0000000017de4676
2025.01.22 14:00:55.972180 [ 159561 ] {} <Fatal> BaseDaemon: 13. ./build_docker/./src/Disks/IO/CachedOnDiskReadBufferFromFile.cpp:158: DB::CachedOnDiskReadBufferFromFile::initialize() @ 0x0000000017de4972
2025.01.22 14:00:56.077995 [ 159561 ] {} <Fatal> BaseDaemon: 14. ./build_docker/./src/Disks/IO/CachedOnDiskReadBufferFromFile.cpp:828: DB::CachedOnDiskReadBufferFromFile::nextImplStep() @ 0x0000000017dee4e5
2025.01.22 14:00:57.309545 [ 159561 ] {} <Fatal> BaseDaemon: 15. ./build_docker/./src/Disks/IO/CachedOnDiskReadBufferFromFile.cpp:810: DB::CachedOnDiskReadBufferFromFile::nextImpl() @ 0x0000000017dee37b
2025.01.22 14:00:57.627020 [ 159561 ] {} <Fatal> BaseDaemon: 16. DB::ReadBuffer::next() @ 0x0000000007fc8e5b
2025.01.22 14:00:57.975791 [ 159561 ] {} <Fatal> BaseDaemon: 17. ./build_docker/./src/Disks/IO/ReadBufferFromRemoteFSGather.cpp:147: DB::ReadBufferFromRemoteFSGather::readImpl() @ 0x0000000018f40ff7
2025.01.22 14:00:58.018362 [ 159561 ] {} <Fatal> BaseDaemon: 18. ./build_docker/./src/Disks/IO/ReadBufferFromRemoteFSGather.cpp:119: DB::ReadBufferFromRemoteFSGather::nextImpl() @ 0x0000000018f40f4a
2025.01.22 14:00:58.130661 [ 159561 ] {} <Fatal> BaseDaemon: 19. DB::ReadBuffer::next() @ 0x0000000007fc8e5b
2025.01.22 14:00:58.159732 [ 159561 ] {} <Fatal> BaseDaemon: 20.0. inlined from ./src/IO/ReadBuffer.h:103: DB::ReadBuffer::eof()
2025.01.22 14:00:58.159888 [ 159561 ] {} <Fatal> BaseDaemon: 20. ./build_docker/./src/Compression/CompressedReadBufferBase.cpp:165: DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool) @ 0x000000001e394da3
2025.01.22 14:00:58.180839 [ 159561 ] {} <Fatal> BaseDaemon: 21. ./build_docker/./src/Compression/CompressedReadBufferFromFile.cpp:22: DB::CompressedReadBufferFromFile::nextImpl() @ 0x000000001e397045
2025.01.22 14:00:58.205962 [ 159561 ] {} <Fatal> BaseDaemon: 22. ./build_docker/./src/Compression/CompressedReadBufferFromFile.cpp:0: non-virtual thunk to DB::CompressedReadBufferFromFile::nextImpl() @ 0x000000001e3972be
2025.01.22 14:00:58.306571 [ 159561 ] {} <Fatal> BaseDaemon: 23. DB::ReadBuffer::next() @ 0x0000000007fc8e5b
2025.01.22 14:00:58.839959 [ 159561 ] {} <Fatal> BaseDaemon: 24.0. inlined from ./src/IO/ReadBuffer.h:103: DB::ReadBuffer::eof()
2025.01.22 14:00:58.840098 [ 159561 ] {} <Fatal> BaseDaemon: 24. ./build_docker/./src/DataTypes/Serializations/SerializationString.cpp:159: void DB::deserializeBinarySSE2<1>(DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 63ul, 64ul>&, DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 63ul, 64ul>&, DB::ReadBuffer&, unsigned long) @ 0x0000000018c987a4
2025.01.22 14:00:58.887951 [ 159561 ] {} <Fatal> BaseDaemon: 25. ./build_docker/./src/DataTypes/Serializations/SerializationString.cpp:258: DB::SerializationString::deserializeBinaryBulk(DB::IColumn&, DB::ReadBuffer&, unsigned long, double) const @ 0x0000000018c95aef
2025.01.22 14:00:58.972585 [ 159561 ] {} <Fatal> BaseDaemon: 26. ./build_docker/./src/DataTypes/Serializations/ISerialization.cpp:147: DB::ISerialization::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::unordered_map<String, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*) const @ 0x0000000018baa8c9
2025.01.22 14:00:59.075310 [ 159561 ] {} <Fatal> BaseDaemon: 27. ./build_docker/./src/Storages/MergeTree/MergeTreeReaderWide.cpp:410: DB::MergeTreeReaderWide::readData(DB::NameAndTypePair const&, std::shared_ptr<DB::ISerialization const> const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, bool, unsigned long, unsigned long, std::unordered_map<String, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::unordered_map<String, std::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, std::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>>>>&, bool) @ 0x000000001cc048ca
2025.01.22 14:00:59.171624 [ 159561 ] {} <Fatal> BaseDaemon: 28. ./build_docker/./src/Storages/MergeTree/MergeTreeReaderWide.cpp:158: DB::MergeTreeReaderWide::readRows(unsigned long, unsigned long, bool, unsigned long, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&) @ 0x000000001cc03e8e
2025.01.22 14:00:59.283542 [ 159561 ] {} <Fatal> BaseDaemon: 29.0. inlined from ./build_docker/./src/Storages/MergeTree/MergeTreeRangeReader.cpp:116: DB::MergeTreeRangeReader::DelayedStream::readRows(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&, unsigned long)
2025.01.22 14:00:59.283736 [ 159561 ] {} <Fatal> BaseDaemon: 29. ./build_docker/./src/Storages/MergeTree/MergeTreeRangeReader.cpp:188: DB::MergeTreeRangeReader::DelayedStream::finalize(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&) @ 0x000000001cbe7f90
2025.01.22 14:00:59.423212 [ 159561 ] {} <Fatal> BaseDaemon: 30.0. inlined from ./build_docker/./src/Storages/MergeTree/MergeTreeRangeReader.cpp:298: DB::MergeTreeRangeReader::Stream::finalize(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&)
2025.01.22 14:00:59.423361 [ 159561 ] {} <Fatal> BaseDaemon: 30. ./build_docker/./src/Storages/MergeTree/MergeTreeRangeReader.cpp:1156: DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&) @ 0x000000001cbf5f16
2025.01.22 14:00:59.523156 [ 159561 ] {} <Fatal> BaseDaemon: 31. ./build_docker/./src/Storages/MergeTree/MergeTreeRangeReader.cpp:1045: DB::MergeTreeRangeReader::read(unsigned long, DB::MarkRanges&) @ 0x000000001cbf3360
2025.01.22 14:00:59.766875 [ 159561 ] {} <Fatal> BaseDaemon: 32. ./build_docker/./src/Storages/MergeTree/MergeTreeReadTask.cpp:165: DB::MergeTreeReadTask::read() @ 0x000000001cc1d692
2025.01.22 14:01:00.488843 [ 159561 ] {} <Fatal> BaseDaemon: 33. ./src/Storages/MergeTree/MergeTreeSelectAlgorithms.h:38: DB::MergeTreeThreadSelectAlgorithm::readFromTask(DB::MergeTreeReadTask&) @ 0x000000001da88521
2025.01.22 14:01:00.607992 [ 159561 ] {} <Fatal> BaseDaemon: 34. ./build_docker/./src/Storages/MergeTree/MergeTreeSelectProcessor.cpp:194: DB::MergeTreeSelectProcessor::read() @ 0x000000001cc187d0
2025.01.22 14:01:00.682974 [ 159561 ] {} <Fatal> BaseDaemon: 35. ./build_docker/./src/Storages/MergeTree/MergeTreeSource.cpp:225: DB::MergeTreeSource::tryGenerate() @ 0x000000001da954d9
2025.01.22 14:01:00.742920 [ 159561 ] {} <Fatal> BaseDaemon: 36. ./build_docker/./src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x000000001d372f8b
2025.01.22 14:01:00.772523 [ 159561 ] {} <Fatal> BaseDaemon: 37.0. inlined from ./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:49: DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*)
2025.01.22 14:01:00.772685 [ 159561 ] {} <Fatal> BaseDaemon: 37. ./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:98: DB::ExecutionThreadContext::executeTask() @ 0x000000001d39b6e7
2025.01.22 14:01:00.856927 [ 159561 ] {} <Fatal> BaseDaemon: 38. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:290: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x000000001d38a57b
2025.01.22 14:01:00.930558 [ 159561 ] {} <Fatal> BaseDaemon: 39.0. inlined from ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:256: DB::PipelineExecutor::executeSingleThread(unsigned long)
2025.01.22 14:01:00.930726 [ 159561 ] {} <Fatal> BaseDaemon: 39. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:455: DB::PipelineExecutor::executeImpl(unsigned long, bool) @ 0x000000001d3898e0
2025.01.22 14:01:01.010006 [ 159561 ] {} <Fatal> BaseDaemon: 40. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:127: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x000000001d3895aa
2025.01.22 14:01:01.078597 [ 159561 ] {} <Fatal> BaseDaemon: 41.0. inlined from ./build_docker/./src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:83: DB::threadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::shared_ptr<DB::ThreadGroup>, unsigned long, bool)
2025.01.22 14:01:01.079984 [ 159561 ] {} <Fatal> BaseDaemon: 41.1. inlined from ./build_docker/./src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:109: operator()
2025.01.22 14:01:01.080113 [ 159561 ] {} <Fatal> BaseDaemon: 41.2. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:344: decltype(std::declval<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>()()) std::__invoke[abi:ne180100]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&)
2025.01.22 14:01:01.080298 [ 159561 ] {} <Fatal> BaseDaemon: 41.3. inlined from ./contrib/llvm-project/libcxx/include/tuple:1424: decltype(auto) std::__apply_tuple_impl[abi:ne180100]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&, std::__tuple_indices<...>)
2025.01.22 14:01:01.080442 [ 159561 ] {} <Fatal> BaseDaemon: 41.4. inlined from ./contrib/llvm-project/libcxx/include/tuple:1428: decltype(auto) std::apply[abi:ne180100]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&)
2025.01.22 14:01:01.080536 [ 159561 ] {} <Fatal> BaseDaemon: 41.5. inlined from ./src/Common/ThreadPool.h:311: operator()
2025.01.22 14:01:01.080654 [ 159561 ] {} <Fatal> BaseDaemon: 41.6. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:344: decltype(std::declval<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>()()) std::__invoke[abi:ne180100]<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)
2025.01.22 14:01:01.080764 [ 159561 ] {} <Fatal> BaseDaemon: 41.7. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:419: void std::__invoke_void_return_wrapper<void, true>::__call[abi:ne180100]<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&)
2025.01.22 14:01:01.080850 [ 159561 ] {} <Fatal> BaseDaemon: 41.8. inlined from ./contrib/llvm-project/libcxx/include/__functional/function.h:208: ?
2025.01.22 14:01:01.080916 [ 159561 ] {} <Fatal> BaseDaemon: 41. ./contrib/llvm-project/libcxx/include/__functional/function.h:608: ? @ 0x000000001d3a019b
2025.01.22 14:01:01.154660 [ 159561 ] {} <Fatal> BaseDaemon: 42.0. inlined from ./contrib/llvm-project/libcxx/include/__functional/function.h:714: ?
2025.01.22 14:01:01.154801 [ 159561 ] {} <Fatal> BaseDaemon: 42.1. inlined from ./contrib/llvm-project/libcxx/include/__functional/function.h:981: ?
2025.01.22 14:01:01.154899 [ 159561 ] {} <Fatal> BaseDaemon: 42. ./build_docker/./src/Common/ThreadPool.cpp:785: ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000001088554e
2025.01.22 14:01:01.306058 [ 159561 ] {} <Fatal> BaseDaemon: 43.0. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:312: decltype(*std::declval<ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>().*std::declval<void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)()>()()) std::__invoke[abi:ne180100]<void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*, void>(void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*&&)
2025.01.22 14:01:01.306256 [ 159561 ] {} <Fatal> BaseDaemon: 43.1. inlined from ./contrib/llvm-project/libcxx/include/__thread/thread.h:193: void std::__thread_execute[abi:ne180100]<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*, 2ul>(std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>&, std::__tuple_indices<2ul>)
2025.01.22 14:01:01.306358 [ 159561 ] {} <Fatal> BaseDaemon: 43. ./contrib/llvm-project/libcxx/include/__thread/thread.h:202: void* std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000001088d6dc
2025.01.22 14:01:01.428502 [ 159561 ] {} <Fatal> BaseDaemon: 44. __tsan_thread_start_func @ 0x0000000007df3428
2025.01.22 14:01:03.245162 [ 159561 ] {} <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 34BFF280C0A2604196BE7C62AAD1B009)
2025.01.22 14:01:07.627923 [ 159561 ] {} <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues
2025.01.22 14:01:07.629072 [ 159561 ] {} <Fatal> BaseDaemon: Changed settings: min_compress_block_size = 1739255, max_compress_block_size = 1014280, max_block_size = 9202, min_external_table_block_size_bytes = 100000000, max_joined_block_size_rows = 63830, max_insert_threads = 2, max_threads = 1, max_read_buffer_size = 847867, connect_timeout_with_failover_ms = 2000, connect_timeout_with_failover_secure_ms = 3000, idle_connection_timeout = 36000, s3_max_get_rps = 1000000, s3_max_get_burst = 2000000, s3_max_put_rps = 1000000, s3_max_put_burst = 2000000, s3_check_objects_after_upload = true, use_uncompressed_cache = true, max_remote_read_network_bandwidth = 1000000000000, max_remote_write_network_bandwidth = 1000000000000, max_local_read_bandwidth = 1000000000000, max_local_write_bandwidth = 1000000000000, stream_like_engine_allow_direct_select = true, replication_wait_for_inactive_replica_timeout = 30, min_count_to_compile_aggregate_expression = 0, group_by_two_level_threshold = 98021, group_by_two_level_threshold_bytes = 32226128, enable_memory_bound_merging_of_aggregation_results = false, allow_nonconst_timezone_arguments = true, input_format_parallel_parsing = false, min_chunk_bytes_for_parallel_parsing = 6423219, merge_tree_coarse_index_granularity = 23, min_bytes_to_use_direct_io = 2897648350, min_bytes_to_use_mmap_io = 10737418240, log_queries = true, insert_quorum_timeout = 60000, merge_tree_read_split_ranges_into_intersecting_and_non_intersecting_injection_probability = 0.8199999928474426, http_response_buffer_size = 1551984, fsync_metadata = false, query_plan_join_swap_table = true, http_send_timeout = 60., http_receive_timeout = 60., use_index_for_in_with_subqueries_max_values = 1000000000, joined_subquery_requires_alias = false, opentelemetry_start_trace_probability = 0.10000000149011612, max_rows_to_read = 20000000, max_bytes_to_read = 1000000000000, max_bytes_to_read_leaf = 1000000000000, max_rows_to_group_by = 10000000000, max_bytes_before_external_group_by = 0, max_bytes_ratio_before_external_group_by = 0., max_rows_to_sort = 10000000000, max_bytes_to_sort = 10000000000, prefer_external_sort_block_bytes = 100000000, max_bytes_before_external_sort = 0, max_bytes_ratio_before_external_sort = 0., max_bytes_before_remerge_sort = 383361531, max_result_rows = 1000000000, max_result_bytes = 1000000000, max_execution_time = 600., max_execution_time_leaf = 600., max_execution_speed = 100000000000, max_execution_speed_bytes = 10000000000000, timeout_before_checking_execution_speed = 300., max_estimated_execution_time = 600., max_columns_to_read = 20000, max_temporary_columns = 20000, max_temporary_non_const_columns = 20000, max_rows_in_set = 10000000000, max_bytes_in_set = 10000000000, max_rows_in_join = 0, max_bytes_in_join = 10000000000, join_algorithm = 'hash', cross_join_min_rows_to_compress = 0, cross_join_min_bytes_to_compress = 100000000, max_rows_to_transfer = 1000000000, max_bytes_to_transfer = 1000000000, max_rows_in_distinct = 10000000000, max_bytes_in_distinct = 10000000000, max_memory_usage = 5000000000, max_memory_usage_for_user = 32000000000, max_untracked_memory = 1048576, memory_profiler_step = 1048576, max_network_bandwidth = 100000000000, max_network_bytes = 1000000000000, max_network_bandwidth_for_user = 100000000000, max_network_bandwidth_for_all_users = 100000000000, max_temporary_data_on_disk_size_for_user = 100000000000, max_temporary_data_on_disk_size_for_query = 100000000000, max_backup_bandwidth = 100000000000, log_comment = '00172_hits_joins.gen.sql', send_logs_level = 'warning', prefer_localhost_replica = false, optimize_read_in_order = false, optimize_aggregation_in_order = true, aggregation_in_order_max_block_bytes = 5094962, read_in_order_two_level_merge_threshold = 23, max_hyperscan_regexp_length = 1000000, max_hyperscan_regexp_total_length = 10000000, allow_introspection_functions = true, database_atomic_wait_for_drop_and_detach_synchronously = true, optimize_if_chain_to_multiif = true, optimize_if_transform_strings_to_enum = true, query_cache_max_size_in_bytes = 10000000, query_cache_max_entries = 100000, distributed_ddl_entry_format_version = 6, external_storage_max_read_rows = 10000000000, external_storage_max_read_bytes = 10000000000, local_filesystem_read_method = 'io_uring', remote_filesystem_read_method = 'read', local_filesystem_read_prefetch = true, remote_filesystem_read_prefetch = false, merge_tree_min_bytes_per_task_for_remote_reading = 8388608, merge_tree_compact_parts_min_granules_to_multibuffer_read = 33, async_insert_busy_timeout_max_ms = 5000, enable_filesystem_cache = true, enable_filesystem_cache_on_write_operations = true, throw_on_error_from_cache_on_write_operations = true, filesystem_cache_segments_batch_size = 0, use_page_cache_for_disks_without_file_cache = true, load_marks_asynchronously = true, allow_prefetched_read_pool_for_remote_filesystem = false, allow_prefetched_read_pool_for_local_filesystem = false, filesystem_prefetch_step_bytes = 104857600, filesystem_prefetch_step_marks = 50, filesystem_prefetch_max_memory_usage = 134217728, filesystem_prefetches_limit = 10, max_streams_for_merge_tree_reading = 1000, optimize_sorting_by_input_stream_properties = false, insert_keeper_max_retries = 100, insert_keeper_retry_initial_backoff_ms = 1, insert_keeper_retry_max_backoff_ms = 10, insert_keeper_fault_injection_probability = 0.009999999776482582, optimize_distinct_in_order = false, session_timezone = 'Mexico/BajaSur', grace_hash_join_initial_buckets = 4, output_format_native_write_json_as_string = true
2025.01.22 14:01:11.838257 [ 434 ] {} <Fatal> Application: Child process was terminated by signal 6.

```



One more test `00171_grouping_aggregated_transform_bug`. 
Stacktrace https://pastila.nl/?0008a026/ca8be7831aaa25d5aa4e61ceacb40b84#1aAtWr6r+85N6F8LZwhFoA==
Report https://s3.amazonaws.com/clickhouse-test-reports/74882/0ef7d10ef5b65acd7195d9d2e68a9e09f5d96041/stateless_tests__tsan__s3_storage__[2_3].html

Version 25.1.1.3786

### Does it reproduce on the most recent release?

Yes

### How to reproduce

```
```

### Expected behavior

_No response_

### Error message and/or stacktrace

_No response_

### Additional context

_No response_