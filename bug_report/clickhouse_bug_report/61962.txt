ID: 61962
Title: Segfault in some query involving multiSearchFirstIndex
Description:
AST Fuzzer (https://s3.amazonaws.com/clickhouse-test-reports/61911/1b828ab6f60574317853378262f78754ca7849d8/ast_fuzzer__ubsan_.html) found that this crashes the server:
```
SELECT 10, multiSearchFirstIndex(toLowCardinality('Hello World'), [toLowCardinality('NOT LIKE')])
```

```
########## Short fault info ############
(version 24.3.1.2589, build id: 095222B23361DB3072953F2A787D5800E2FB874E, git hash: 26e34fd2d9140574e0e25f805ba04fe840bd92d3) (from thread 164) Received signal -3
Signal description: sanitizer trap
Sanitizer trap.
Stack trace: 0x00005635a87c97d7 0x00005635a8beaf45 0x000056359c808e86 0x000056359c811d0f 0x00005635a4525235 0x000056359c825bdf 0x000056359cf51c01 0x00005635b2945519 0x00005635b2944b72 0x00005635b2945416 0x00005635b29471fe 0x00005635b2948657 0x00005635b3c57eab 0x00005635b3c57103 0x00005635b3f213bd 0x00005635b3f35ddf 0x00005635b3f26035 0x00005635b3f2f2d5 0x00005635b3f1122d 0x00005635b3ed1c17 0x00005635b3ee4dad 0x00005635b3eec6e3 0x00005635b5715a57 0x00005635b56fa29d 0x00005635b56edb50 0x00005635b56e4df3 0x00005635b58586aa 0x00005635b5855b3a 0x00005635b585ec2c 0x00005635b585c608 0x00005635b56b9a83 0x00005635b5e8be19 0x00005635b5e853c7 0x00005635b7c04946 0x00005635b7c3ee16 0x00005635baf22a9e 0x00005635baf23bba 0x00005635bb18f9d0 0x00005635bb18aad1 0x00007f1312aa9ac3 0x00007f1312b3b850
########################################
(version 24.3.1.2589, build id: 095222B23361DB3072953F2A787D5800E2FB874E, git hash: 26e34fd2d9140574e0e25f805ba04fe840bd92d3) (from thread 164) (query_id: 236ff486-efbd-4fce-85e9-4b02d9f18fa8) (query: SELECT 10, multiSearchFirstIndex(toLowCardinality('Hello World'), [toLowCardinality('NOT LIKE')])) Received signal sanitizer trap (-3)
Sanitizer trap.
Stack trace: 0x00005635a87c97d7 0x00005635a8beaf45 0x000056359c808e86 0x000056359c811d0f 0x00005635a4525235 0x000056359c825bdf 0x000056359cf51c01 0x00005635b2945519 0x00005635b2944b72 0x00005635b2945416 0x00005635b29471fe 0x00005635b2948657 0x00005635b3c57eab 0x00005635b3c57103 0x00005635b3f213bd 0x00005635b3f35ddf 0x00005635b3f26035 0x00005635b3f2f2d5 0x00005635b3f1122d 0x00005635b3ed1c17 0x00005635b3ee4dad 0x00005635b3eec6e3 0x00005635b5715a57 0x00005635b56fa29d 0x00005635b56edb50 0x00005635b56e4df3 0x00005635b58586aa 0x00005635b5855b3a 0x00005635b585ec2c 0x00005635b585c608 0x00005635b56b9a83 0x00005635b5e8be19 0x00005635b5e853c7 0x00005635b7c04946 0x00005635b7c3ee16 0x00005635baf22a9e 0x00005635baf23bba 0x00005635bb18f9d0 0x00005635bb18aad1 0x00007f1312aa9ac3 0x00007f1312b3b850
0. ./build_docker/./src/Common/StackTrace.cpp:349: StackTrace::tryCapture() @ 0x000000002400a7d7
1. ./src/Common/StackTrace.h:0: sanitizerDeathCallback() @ 0x000000002442bf45
2. __sanitizer::Die() @ 0x0000000018049e86
3. ? @ 0x0000000018052d0f
4. DB::FunctionsMultiStringSearch<DB::MultiSearchFirstIndexImpl<DB::(anonymous namespace)::NameMultiSearchFirstIndex, DB::PositionCaseSensitiveASCII>>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000001fd66235
5. DB::IFunction::executeImplDryRun(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x0000000018066bdf
6. DB::FunctionToExecutableFunctionAdaptor::executeDryRunImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x0000000018792c01
7. ./build_docker/./src/Functions/IFunction.cpp:0: DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000002e186519
8.0. inlined from ./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:202: boost::intrusive_ptr<DB::IColumn const>::operator->() const
8. ./build_docker/./src/Functions/IFunction.cpp:164: DB::IExecutableFunction::defaultImplementationForConstantArguments(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000002e185b72
9.0. inlined from ./contrib/boost/boost/smart_ptr/detail/operator_bool.hpp:14: boost::intrusive_ptr<DB::IColumn const>::operator bool() const
9. ./build_docker/./src/Functions/IFunction.cpp:238: DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000002e186416
10.0. inlined from ./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:196: boost::intrusive_ptr<DB::IColumn const>::operator*() const
10. ./build_docker/./src/Functions/IFunction.cpp:282: DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000002e1881fe
11. ./build_docker/./src/Functions/IFunction.cpp:0: DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000002e189657
12.0. inlined from ./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:117: intrusive_ptr
12.1. inlined from ./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:124: boost::intrusive_ptr<DB::IColumn const>::operator=(boost::intrusive_ptr<DB::IColumn const>&&)
12.2. inlined from ./src/Common/COW.h:136: COW<DB::IColumn>::immutable_ptr<DB::IColumn>::operator=(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&&)
12. ./build_docker/./src/Interpreters/ActionsDAG.cpp:328: DB::ActionsDAG::addFunctionImpl(std::shared_ptr<DB::IFunctionBase const> const&, std::vector<DB::ActionsDAG::Node const*, std::allocator<DB::ActionsDAG::Node const*>>, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>, String, std::shared_ptr<DB::IDataType const>, bool) @ 0x000000002f498eab
13. ./build_docker/./src/Interpreters/ActionsDAG.cpp:244: DB::ActionsDAG::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<DB::ActionsDAG::Node const*, std::allocator<DB::ActionsDAG::Node const*>>, String) @ 0x000000002f498103
14. ./build_docker/./src/Interpreters/ActionsVisitor.cpp:645: DB::ScopeStack::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<String, std::allocator<String>> const&, String) @ 0x000000002f7623bd
15.0. inlined from ./contrib/llvm-project/libcxx/include/string:1499: String::__is_long[abi:v15000]() const
15.1. inlined from ./contrib/llvm-project/libcxx/include/string:2333: ~basic_string
15. ./src/Interpreters/ActionsVisitor.h:182: DB::ActionsMatcher::Data::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<String, std::allocator<String>> const&, String) @ 0x000000002f776ddf
16.0. inlined from ./contrib/llvm-project/libcxx/include/string:1499: String::__is_long[abi:v15000]() const
16.1. inlined from ./contrib/llvm-project/libcxx/include/string:2333: ~basic_string
16. ./build_docker/./src/Interpreters/ActionsVisitor.cpp:1319: DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x000000002f767035
17. ./build_docker/./src/Interpreters/ActionsVisitor.cpp:0: DB::ActionsMatcher::visit(DB::ASTExpressionList&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x000000002f7702d5
18. ./src/Interpreters/InDepthNodeVisitor.h:78: DB::InDepthNodeVisitor<DB::ActionsMatcher, true, false, std::shared_ptr<DB::IAST> const>::doVisit(std::shared_ptr<DB::IAST> const&) @ 0x000000002f75222d
19.0. inlined from ./src/Interpreters/InDepthNodeVisitor.h:0: void DB::InDepthNodeVisitor<DB::ActionsMatcher, true, false, std::shared_ptr<DB::IAST> const>::visitImplMain<false>(std::shared_ptr<DB::IAST> const&)
19.1. inlined from ./src/Interpreters/InDepthNodeVisitor.h:51: void DB::InDepthNodeVisitor<DB::ActionsMatcher, true, false, std::shared_ptr<DB::IAST> const>::visitImpl<false>(std::shared_ptr<DB::IAST> const&)
19.2. inlined from ./src/Interpreters/InDepthNodeVisitor.h:32: DB::InDepthNodeVisitor<DB::ActionsMatcher, true, false, std::shared_ptr<DB::IAST> const>::visit(std::shared_ptr<DB::IAST> const&)
19. ./build_docker/./src/Interpreters/ExpressionAnalyzer.cpp:484: DB::ExpressionAnalyzer::getRootActions(std::shared_ptr<DB::IAST> const&, bool, std::shared_ptr<DB::ActionsDAG>&, bool) @ 0x000000002f712c17
20. ./build_docker/./src/Interpreters/ExpressionAnalyzer.cpp:0: DB::SelectQueryExpressionAnalyzer::appendSelect(DB::ExpressionActionsChain&, bool) @ 0x000000002f725dad
21. ./build_docker/./src/Interpreters/ExpressionAnalyzer.cpp:2071: DB::ExpressionAnalysisResult::ExpressionAnalysisResult(DB::SelectQueryExpressionAnalyzer&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, bool, bool, bool, std::shared_ptr<DB::FilterDAGInfo> const&, std::shared_ptr<DB::FilterDAGInfo> const&, DB::Block const&) @ 0x000000002f72d6e3
22. ./build_docker/./src/Interpreters/InterpreterSelectQuery.cpp:1038: DB::InterpreterSelectQuery::getSampleBlockImpl() @ 0x0000000030f56a57
23. ./build_docker/./src/Interpreters/InterpreterSelectQuery.cpp:0: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>)::$_0::operator()(bool) const @ 0x0000000030f3b29d
24. ./build_docker/./src/Interpreters/InterpreterSelectQuery.cpp:0: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000030f2eb50
25. ./build_docker/./src/Interpreters/InterpreterSelectQuery.cpp:0: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000030f25df3
26.0. inlined from ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:0: std::__unique_if<DB::InterpreterSelectQuery>::__unique_single std::make_unique[abi:v15000]<DB::InterpreterSelectQuery, std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>&, DB::SelectQueryOptions&, std::vector<String, std::allocator<String>> const&>(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>&, DB::SelectQueryOptions&, std::vector<String, std::allocator<String>> const&)
26. ./build_docker/./src/Interpreters/InterpreterSelectWithUnionQuery.cpp:255: DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000310996aa
27. ./build_docker/./src/Interpreters/InterpreterSelectWithUnionQuery.cpp:153: DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000031096b3a
28. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:0: std::__unique_if<DB::InterpreterSelectWithUnionQuery>::__unique_single std::make_unique[abi:v15000]<DB::InterpreterSelectWithUnionQuery, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&>(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&) @ 0x000000003109fc2c
29.0. inlined from ./contrib/llvm-project/libcxx/include/__memory/compressed_pair.h:40: __compressed_pair_elem<DB::InterpreterSelectWithUnionQuery *, void>
29.1. inlined from ./contrib/llvm-project/libcxx/include/__memory/compressed_pair.h:108: __compressed_pair<DB::InterpreterSelectWithUnionQuery *, std::default_delete<DB::InterpreterSelectWithUnionQuery> >
29.2. inlined from ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:211: unique_ptr<DB::InterpreterSelectWithUnionQuery, std::default_delete<DB::InterpreterSelectWithUnionQuery>, void, void>
29.3. inlined from ./contrib/llvm-project/libcxx/include/__functional/invoke.h:470: ?
29.4. inlined from ./contrib/llvm-project/libcxx/include/__functional/function.h:235: ?
29. ./contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x000000003109d608
30.0. inlined from ./contrib/llvm-project/libcxx/include/__functional/function.h:818: ?
30.1. inlined from ./contrib/llvm-project/libcxx/include/__functional/function.h:1174: ?
30. ./build_docker/./src/Interpreters/InterpreterFactory.cpp:356: DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x0000000030efaa83
31. ./build_docker/./src/Interpreters/executeQuery.cpp:0: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x00000000316cce19
32. ./build_docker/./src/Interpreters/executeQuery.cpp:1374: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000316c63c7
33. ./build_docker/./src/Server/TCPHandler.cpp:0: DB::TCPHandler::runImpl() @ 0x0000000033445946
34. ./build_docker/./src/Server/TCPHandler.cpp:2330: DB::TCPHandler::run() @ 0x000000003347fe16
35. ./build_docker/./base/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x0000000036763a9e
36.0. inlined from ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:302: std::unique_ptr<Poco::Net::TCPServerConnection, std::default_delete<Poco::Net::TCPServerConnection>>::reset[abi:v15000](Poco::Net::TCPServerConnection*)
36.1. inlined from ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:259: ~unique_ptr
36. ./build_docker/./base/poco/Net/src/TCPServerDispatcher.cpp:116: Poco::Net::TCPServerDispatcher::run() @ 0x0000000036764bba
37. ./build_docker/./base/poco/Foundation/src/ThreadPool.cpp:202: Poco::PooledThread::run() @ 0x00000000369d09d0
38.0. inlined from ./base/poco/Foundation/include/Poco/AutoPtr.h:205: Poco::AutoPtr<Poco::ThreadImpl::ThreadData>::operator->()
38. ./base/poco/Foundation/src/Thread_POSIX.cpp:350: Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000369cbad1
39. ? @ 0x00007f1312aa9ac3
40. ? @ 0x00007f1312b3b850
Integrity check of the executable skipped because the reference checksum could not be read.
Changed settings: receive_timeout = 10., receive_data_timeout_ms = 10000, alter_sync = 2, allow_suspicious_low_cardinality_types = true, log_queries = true, distributed_product_mode = 'local', table_function_remote_max_addresses = 200, optimize_throw_if_noop = true, max_execution_time = 10., join_algorithm = 'grace_hash', max_memory_usage = 10000000000, log_comment = '/workspace/ch/tests/queries/0_stateless/02294_stringsearch_with_nonconst_needle.sql', send_logs_level = 'fatal', allow_introspection_functions = true, function_sleep_max_microseconds_per_block = 10000000
```