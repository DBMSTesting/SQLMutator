ID: 69868
Title: Invalid number of rows in Chunk logical error
Description:
**Describe the bug**

Running a SELECT query with ORDER BY on a VARIANT column with JSON, may produce a logical error.

**How to reproduce**
Run the following statements:

```sql
CREATE TABLE t0 (c0 Variant(JSON, DateTime)) ENGINE = Memory();
CREATE TABLE t1 (c0 Variant(JSON, DateTime)) ENGINE = AggregatingMergeTree() ORDER BY tuple();
INSERT INTO t0 (c0) VALUES ('2104-04-29 02:51:40'::DateTime), ('{"c0":-7.1135990329}'::JSON), ('{}'::JSON), ('2068-03-26 15:28:17'::DateTime);
INSERT INTO t0 (c0) VALUES ('{"c1":{"c3":{"c0":null,"c4":[false,"2i2|%"],"c3":"lIn^"},"c4":"N@~I_l)g"}}'::JSON);
INSERT INTO t1 (c0) VALUES ('{"c4":{}}'), ('{"c0":188}'::JSON), ('{"c0":[[-751]]}'), ('2035-06-13 16:39:53'::DateTime), ('1995-04-21 15:21:57'::DateTime), ('{"c0":[[]]}'), ('{"c2":[-5520010067109858499],"c1":{}}'::JSON);
INSERT INTO t1 (c0) VALUES (NULL), ('2104-12-02 10:11:00'::DateTime), ('1976-09-11 10:37:44'), ('{"c4":[]}'), (NULL), ('{"c1":null}'::JSON), ('{"c3":{"c0":[false],"c2":{}}}'::JSON), ('{"c1":{"c0":8079465482191452401,"c3":493},"c3":{"c2":{},"c3":"2011-12-13","c2":{}},"c0":{"c4":-388909359158.793,"c0":[946501688501975.6846],"c2":[901,1105825216425403568]}}'::JSON), ('{"c2":{"c4":{"c0":{}}}}');
INSERT INTO t1 (c0) VALUES ('{"c2":[{}]}'::JSON), (NULL), ('{"c0":{}}'), ('{"c4":[[],177,8618714697411273793],"c0":"2069-06-27"}'::JSON);
INSERT INTO t0 (c0) VALUES ('{}'::JSON), ('{"c3":-536}'), ('{"c2":"(r|WtK%#:X"}'::JSON), ('2000-01-03 19:03:02'::DateTime), (NULL), (NULL), ('{"c1":true,"c0":[]}'::JSON), ('1992-04-10 11:35:35'::DateTime), ('{}'::JSON);
INSERT INTO t0 (c0) VALUES ('{"c3":-837,"c2":true,"c4":{"c0":[{},-566,["2111-11-27"]]}}'), ('2033-04-20 11:26:48'::DateTime), ('{}'::JSON), ('{"c4":true,"c0":{}}'::JSON);
INSERT INTO t1 (c0) VALUES ('{"c1":[6195420009409856729,[-124]]}');
INSERT INTO t0 (c0) VALUES ('{"c0":["%E9pq<=6x<"]}'::JSON), ('2000-06-02 20:38:44'::DateTime), ('2092-03-10 21:36:47'::DateTime), ('{"c3":"W+","c4":5926668677231486521,"c4":{"c0":[""],"c4":null}}');
INSERT INTO t1 (c0) VALUES ('2086-03-01 00:19:42'::DateTime), ('{"c2":["6L|ðŸ˜‚O&N0",{}],"c0":{"c1":"YU4hequ"}}'), ('{"c3":[11233117716509758829]}'::JSON), (NULL), ('{"c0":{"c2":[true],"c3":[18061405442914554451]},"c2":{}}'::JSON), ('2033-09-01 21:03:27'::DateTime), (NULL);
INSERT INTO t1 (c0) VALUES ('{}'::JSON), ('{"c3":[-524]}'::JSON), ('{"c2":-65.642133595144554995054944}'::JSON);
INSERT INTO t1 (c0) VALUES ('2001-01-13 09:18:39'), ('{"c0":"b pxkFe#"}'::JSON), ('2064-03-01 00:00:04'::DateTime), ('{"c1":true}'::JSON);
INSERT INTO t1 (c0) VALUES ('{"c3":{"c0":["WteooXdh=F",[true,null],360],"c4":true,"c3":[[],-876,{}]},"c0":"@^nY","c2":-227}'), ('{"c2":201}'), ('2068-04-01 22:08:48'::DateTime), ('{"c0":[" a_$7,=,j"]}'), ('{}'::JSON);
INSERT INTO t0 (c0) VALUES ('{"c1":[]}'::JSON), ('{"c0":[["2098-06-30"]]}'::JSON);
INSERT INTO t0 (c0) VALUES ('{"c1":{}}'), ('2038-03-15 06:29:57'::DateTime);
INSERT INTO t1 (c0) VALUES ('2034-09-09 12:07:38'::DateTime), ('2032-11-30 22:12:44'), ('{"c1":{"c1":{"c4":-160}}}'), (NULL), ('{}'::JSON), ('{"c4":{}}'::JSON), ('2017-01-12 13:47:36'::DateTime), ('2053-10-24 09:50:52');
INSERT INTO t1 (c0) VALUES ('{"c0":{"c3":{}}}'::JSON), ('1995-05-04 23:43:39'::DateTime), ('2025-09-02 17:39:56'::DateTime);
INSERT INTO t0 (c0) VALUES ('1984-05-05 04:10:51'::DateTime), ('{"c3":[["w4~&W@9[xL"]]}'::JSON), ('{}'::JSON), ('{"c4":17174612509216493315,"c3":{}}'::JSON), ('2044-04-25 09:28:50'::DateTime), ('{"c1":true}');
INSERT INTO t0 (c0) VALUES ('{"c2":[]}'), ('{"c3":null,"c3":-656,"c4":"b!}l[f?L"}'::JSON), ('2037-11-29 05:59:35'::DateTime), ('1983-09-14 13:30:00'::DateTime), ('{}'::JSON), ('2022-04-11 20:34:55'::DateTime), (NULL), ('{"c2":{}}'), ('1993-09-15 07:33:39'::DateTime);
INSERT INTO t1 (c0) VALUES ('2099-09-27 05:21:30'::DateTime);
INSERT INTO t0 (c0) VALUES ('2061-03-24 02:01:24'::DateTime);
INSERT INTO t1 (c0) VALUES ('{"c2":{"c3":"@&2plo^Wa."}}'), ('2074-08-04 09:13:35'::DateTime), ('2090-03-15 16:36:40'), ('{"c1":-913}'), ('2021-09-11 14:25:21'::DateTime), ('{"c0":[{},[-20820246.04004004]],"c3":{"c4":{}}}'::JSON), (NULL), ('{}'), ('2015-09-30 14:41:07'::DateTime), ('{}');
SELECT tx.c0 FROM t0 JOIN (SELECT c0 FROM t1 LIMIT 0) ty ON t0.c0 = ty.c0 FULL JOIN t0 tx ON t0.c0 = tx.c0 GROUP BY tx.c0, ty.c0 ORDER BY ty.c0 LIMIT 10;
```
Sometimes the following logical error is thrown:
```
<Fatal> : Logical error: 'Invalid number of rows in Chunk column Variant(UInt32, Object(max_dynamic_paths=1024, max_dynamic_types=32)) position 1: expected 10, got 3'.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. contrib/llvm-project/libcxx/include/exception:141: Poco::Exception::Exception(String const&, int) @ 0x00000000371ab591
1. src/Common/Exception.cpp:109: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000001e51d06d
2. src/Common/Exception.h:110: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000e63f066
3. src/Common/Exception.h:128: DB::Exception::Exception<String, String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&, String&&) @ 0x000000000e7f84e1
4. src/Processors/Chunk.cpp:65: DB::Chunk::checkNumRowsIsConsistent() @ 0x000000002f818d2c
5. src/Processors/Transforms/PartialSortingTransform.cpp:168: DB::PartialSortingTransform::transform(DB::Chunk&) @ 0x000000002fedbe97
6. src/Processors/ISimpleTransform.h:32: DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0x000000001eb3dfff
7. src/Processors/ISimpleTransform.cpp:89: DB::ISimpleTransform::work() @ 0x000000002f83339a
8. src/Processors/Executors/ExecutionThreadContext.cpp:47: DB::ExecutionThreadContext::executeTask() @ 0x000000002f876dee
9. src/Processors/Executors/PipelineExecutor.cpp:288: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x000000002f85b590
10. src/Processors/Executors/PipelineExecutor.cpp:254: DB::PipelineExecutor::executeSingleThread(unsigned long) @ 0x000000002f85bfca
11. src/Processors/Executors/PipelineExecutor.cpp:391: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x000000002f85d4ea
12. contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x000000001e6d2cc3
13. src/Common/ThreadPool.cpp:252: ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()::operator()() @ 0x000000001e6dc6bd
14. contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x000000001e6cbd7e
15. src/Common/ThreadPool.cpp:252: void* std::__thread_proxy[abi:v15007]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000001e6d6b0d
16. asan_thread_start(void*) @ 0x000000000e5f3bcd
17. ? @ 0x00007ffff7c9ca94
18. ? @ 0x00007ffff7d29c3c
```
Otherwise, the SELECT query gives non-deterministic results, but that may be expected from the order by clause.