ID: 4853
Title: Abnormally long merge
Description:
**Describe the bug**
Abnormally long merge and very high memory consumption. So far we observed +12h long merge using +100GB of RAM. We always had to restart the server to prevent it to eat up all the memory.
We are using ClickHouse `v19.3.7-stable`.

This is how one of those queries look:
```
is_initial_query:     1
user:                 default
query_id:             7329b666-1c62-4e00-a10a-bd9719154673
address:              ::ffff:127.0.0.1
port:                 49460
initial_user:         default
initial_query_id:     7329b666-1c62-4e00-a10a-bd9719154673
initial_address:      ::ffff:127.0.0.1
initial_port:         49460
interface:            1
os_user:              xxxxx
client_hostname:      clickhouse-xxxxxxxx-000-x.xxxxxxxxxxxxxxxxxxxxxxxx
client_name:          ClickHouse client
client_version_major: 19
client_version_minor: 3
client_version_patch: 7
client_revision:      54415
http_method:          0
http_user_agent:
quota_key:
elapsed:              76121.445612343
is_cancelled:         1
read_rows:            0
read_bytes:           0
total_rows_approx:    0
written_rows:         0
written_bytes:        0
memory_usage:         0
peak_memory_usage:    4096
query:                OPTIMIZE TABLE xxxxxxx_xxxxxx_local PARTITION 201901 FINAL
thread_numbers:       [1238]
ProfileEvents.Names:  ['Query','ReadCompressedBytes','CompressedReadBufferBlocks','CompressedReadBufferBytes','IOBufferAllocs','IOBufferAllocBytes','ZooKeeperTransactions','ZooKeeperList','ZooKeeperCreate','ZooKeeperExists','ZooKeeperGet','ContextLock','RWLockAcquiredReadLocks']
ProfileEvents.Values: [1,36,1,10,1,57,17,5,1,5,6,2,2]
Settings.Names:       ['max_threads','use_uncompressed_cache','background_pool_size','background_schedule_pool_size','load_balancing','compile','insert_distributed_sync','max_bytes_before_external_group_by','max_memory_usage']
Settings.Values:      ['64','0','40','40','random','0','1','190000000000','0']
```

The table looks like

```
create table if not exists xxxx_local
(
	c0 Date default toDate(c5),
	c1 Int8,
	c2 LowCardinality(UInt64),
	c3 LowCardinality(UInt32),
	c4 UInt64,
	c5 DateTime,
	c6 UInt64,
	c7 LowCardinality(UInt32),
	c8 UInt64,
	c9 LowCardinality(Float64),
	c10 LowCardinality(Float64),
	c11 LowCardinality(Float64),
	c12 LowCardinality(UInt64),
	c13 LowCardinality(UInt64),
	c14 LowCardinality(UInt64),
	c15 LowCardinality(UInt32),
	c16 LowCardinality(UInt64),
	c17 LowCardinality(UInt32),
	c18 UInt8,
	c19 DateTime,
	c20 Nullable(DateTime),
	c21 Nullable(FixedString(32)),
	c22 Nullable(FixedString(32)),
	c23 Nullable(String),
	c24 Nullable(String),
	c25 Nullable(String),
	c26 Nullable(UInt8),
	c27 Nullable(UInt8),
	c28 Nullable(UInt16),
	c29 Nullable(FixedString(16)),
	c30 LowCardinality(Nullable(Int8)),
	c31 LowCardinality(Nullable(Int8)),
	c32 LowCardinality(Nullable(String)),
	c33 Nullable(String),
	c34 LowCardinality(Nullable(String)),
	c35 LowCardinality(Nullable(UInt32)),
	c36 LowCardinality(Nullable(UInt32)),
	c37 LowCardinality(Nullable(UInt32)),
	c38 LowCardinality(Nullable(UInt32)),
	c39 LowCardinality(Nullable(UInt32)),
	c40 LowCardinality(Nullable(UInt32)),
	c41 LowCardinality(Nullable(UInt32)),
	c42 Nullable(UInt64),
	c43 LowCardinality(Nullable(UInt32)),
	c44 LowCardinality(Nullable(Int32)),
	c45 LowCardinality(Nullable(UInt32)),
	c46 LowCardinality(Nullable(UInt32)),
	c47 LowCardinality(Nullable(UInt32)),
	c48 Nullable(String),
	c49 Nullable(FixedString(16)),
	c50 Nullable(String),
	c51 Nullable(UInt32),
	c52 Nullable(String),
	c53 LowCardinality(Nullable(UInt32)),
	c54 Nullable(UInt32),
	c55 LowCardinality(Nullable(String)),
	c56 LowCardinality(Nullable(String)),
	c57 LowCardinality(Nullable(String)),
	c58 LowCardinality(Nullable(String)),
	c59 LowCardinality(Nullable(String)),
	c60 LowCardinality(Nullable(UInt32)),
	c61 LowCardinality(Nullable(String)),
	c62 LowCardinality(Nullable(UInt32)),
	c63 LowCardinality(Nullable(String)),
	c64 Nullable(UInt64),
	c65 Array(String),
	c66 Nullable(String),
	c67 LowCardinality(Nullable(String)),
	c68 LowCardinality(Nullable(String)),
	c69 Array(Int16),
	c70 Array(Float32),
	c71 Nullable(Int16),
	c72 Nullable(Float32),
	c73 Array(Int8),
	c74 Array(Float32),
	c75 Nullable(UInt32),
	c76 Array(Int8),
	c77 LowCardinality(Nullable(Int8)),
	c78 LowCardinality(Nullable(Int8))
) engine = ReplicatedCollapsingMergeTree('/clickhouse/{cluster}/tables/{shard}/xxxx', '{replica}', sign) 
PARTITION BY toYYYYMM(c0) 
ORDER BY (c5, c4, c3, c2, c6) ;
```
None of the `String` column store more than `128 bytes`

**How to reproduce**
We didn't succeed to reproduce it consistently, it shows up a bit randomly. 

Note that it only shows up when we run an `OPTIMIZE FINAL` never during normal background merge (so far) 

**Queries to run that lead to the unexpected result**
`OPTIMIZE TABLE xxxxxxx_xxxxxx_local PARTITION 201901 FINAL` 

**Expected behavior**
Most of our merge take few minutes and rarely more than a few gigabytes of RAM. 

**Error message and/or stacktrace**
The logs do not show any errors.

**Additional context**
Memory usage graph 
![Screenshot 2019-03-29 at 17 45 33](https://user-images.githubusercontent.com/1152716/55249272-fea8a200-524b-11e9-81d0-db9635ce8d78.png)


