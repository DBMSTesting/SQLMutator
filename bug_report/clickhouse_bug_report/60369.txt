ID: 60369
Title: Mat View underlying table has incorrect schema after restore if MV was altered
Description:
```
SELECT * FROM test_02977_2.mv;
```

Fails to read the data part because column `inner_id.XXXXX`.`timestamp` in the original database and in the persisted part had type DateTime but in the restored database it has type DateTime64(9)

```
2024.02.24 05:33:42.050580 [ 2823084 ] {ccaa0b9f-0cfd-4e6c-bbd6-3da9a3693c56} <Error> executeQuery: Code: 33. DB::Exception: Cannot read all data. Bytes read: 0. Bytes expected: 8. (CANNOT_READ_ALL_DATA) (version 24.2.1.1) (from 127.0.0.1:48648) (comment: 02977_alter_mv_repro.sql) (in query: SELECT * FROM test_02977_2.mv;), Stack trace (when copying this message, always include the lines below):

0. ./contrib/llvm-project/libcxx/include/exception:141: Poco::Exception::Exception(String const&, int) @ 0x00000000143f5df2
1. ./build/./src/Common/Exception.cpp:96: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000b7d7f37
2. DB::Exception::Exception<unsigned long&, String>(int, FormatStringHelperImpl<std::type_identity<unsigned long&>::type, std::type_identity<String>::type>, unsigned long&, String&&) @ 0x00000000069cec0a
3. DB::ReadBuffer::readStrict(char*, unsigned long) @ 0x00000000069ceb30
4. ./base/base/../base/Decimal.h:39: DB::SerializationDecimalBase<DB::DateTime64>::deserializeBinary(DB::IColumn&, DB::ReadBuffer&, DB::FormatSettings const&) const @ 0x000000001013d9f7
5. ./build/./src/Storages/MergeTree/IMergeTreeDataPart.cpp:873: DB::IMergeTreeDataPart::loadIndex() const @ 0x0000000011ac026c
6. ./build/./src/Storages/MergeTree/IMergeTreeDataPart.cpp:354: DB::IMergeTreeDataPart::getIndex() const @ 0x0000000011abf66a
7. ./build/./src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp:0: DB::MergeTreeDataSelectExecutor::markRangesFromPKRange(std::shared_ptr<DB::IMergeTreeDataPart const> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::KeyCondition const&, std::optional<DB::KeyCondition> const&, DB::Settings const&, std::shared_ptr<Poco::Logger>) @ 0x0000000011c30fda
8. ./build/./src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp:669: DB::MergeTreeDataSelectExecutor::filterPartsByPrimaryKeyAndSkipIndexes(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>&&, std::vector<std::shared_ptr<DB::AlterConversions const>, std::allocator<std::shared_ptr<DB::AlterConversions const>>>&&, std::shared_ptr<DB::StorageInMemoryMetadata const>, std::shared_ptr<DB::Context const> const&, DB::KeyCondition const&, std::optional<DB::KeyCondition> const&, DB::UsefulSkipIndexes const&, DB::MergeTreeReaderSettings const&, std::shared_ptr<Poco::Logger>, unsigned long, std::vector<DB::ReadFromMergeTree::IndexStat, std::allocator<DB::ReadFromMergeTree::IndexStat>>&, bool)::$_0::operator()(unsigned long) const @ 0x0000000011c402f4
9. ./build/./src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp:766: DB::MergeTreeDataSelectExecutor::filterPartsByPrimaryKeyAndSkipIndexes(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>&&, std::vector<std::shared_ptr<DB::AlterConversions const>, std::allocator<std::shared_ptr<DB::AlterConversions const>>>&&, std::shared_ptr<DB::StorageInMemoryMetadata const>, std::shared_ptr<DB::Context const> const&, DB::KeyCondition const&, std::optional<DB::KeyCondition> const&, DB::UsefulSkipIndexes const&, DB::MergeTreeReaderSettings const&, std::shared_ptr<Poco::Logger>, unsigned long, std::vector<DB::ReadFromMergeTree::IndexStat, std::allocator<DB::ReadFromMergeTree::IndexStat>>&, bool) @ 0x0000000011c3e12b
10. ./build/./src/Processors/QueryPlan/ReadFromMergeTree.cpp:0: DB::ReadFromMergeTree::selectRangesToReadImpl(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>, std::vector<std::shared_ptr<DB::AlterConversions const>, std::allocator<std::shared_ptr<DB::AlterConversions const>>>, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo const&, std::shared_ptr<DB::Context const>, unsigned long, std::shared_ptr<std::unordered_map<String, long, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, long>>>>, DB::MergeTreeData const&, std::vector<String, std::allocator<String>> const&, bool, std::shared_ptr<Poco::Logger>, std::optional<DB::ReadFromMergeTree::Indexes>&) @ 0x00000000125722de
11. ./build/./src/Processors/QueryPlan/ReadFromMergeTree.cpp:1520: DB::ReadFromMergeTree::selectRangesToRead(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>, std::vector<std::shared_ptr<DB::AlterConversions const>, std::allocator<std::shared_ptr<DB::AlterConversions const>>>, std::shared_ptr<DB::PrewhereInfo> const&, DB::ActionDAGNodes const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo const&, std::shared_ptr<DB::Context const>, unsigned long, std::shared_ptr<std::unordered_map<String, long, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, long>>>>, DB::MergeTreeData const&, std::vector<String, std::allocator<String>> const&, bool, std::shared_ptr<Poco::Logger>, std::optional<DB::ReadFromMergeTree::Indexes>&) @ 0x000000001256f5a2
12. ./build/./src/Processors/QueryPlan/ReadFromMergeTree.cpp:1306: DB::ReadFromMergeTree::selectRangesToRead(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>, std::vector<std::shared_ptr<DB::AlterConversions const>, std::allocator<std::shared_ptr<DB::AlterConversions const>>>) const @ 0x000000001256f2b8
13. ./build/./src/Processors/QueryPlan/ReadFromMergeTree.cpp:1817: DB::ReadFromMergeTree::getAnalysisResult() const @ 0x00000000125749db
14. ./build/./src/Processors/QueryPlan/ReadFromMergeTree.cpp:0: DB::ReadFromMergeTree::initializePipeline(DB::QueryPipelineBuilder&, DB::BuildQueryPipelineSettings const&) @ 0x00000000125764c7
15. ./contrib/llvm-project/libcxx/include/vector:1420: DB::ISourceStep::updatePipeline(std::vector<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>, std::allocator<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>>>, DB::BuildQueryPipelineSettings const&) @ 0x000000001253f9c2
16. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:302: DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x0000000012558c6b
17. ./build/./src/Interpreters/InterpreterSelectWithUnionQuery.cpp:380: DB::InterpreterSelectWithUnionQuery::execute() @ 0x0000000010d67fae
18. ./build/./src/Interpreters/executeQuery.cpp:0: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000001109c4a4
19. ./build/./src/Interpreters/executeQuery.cpp:1308: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x0000000011098b38
20. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:612: DB::TCPHandler::runImpl() @ 0x000000001211eb4d
21. ./build/./src/Server/TCPHandler.cpp:2315: DB::TCPHandler::run() @ 0x0000000012134859
22. ./build/./base/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x0000000014313ae7
23. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:48: Poco::Net::TCPServerDispatcher::run() @ 0x0000000014313fcd
24. ./build/./base/poco/Foundation/src/ThreadPool.cpp:202: Poco::PooledThread::run() @ 0x000000001444b207
25. ./base/poco/Foundation/include/Poco/SharedPtr.h:139: Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000014448d03
26. ? @ 0x00007ffff7c94ac3
27. ? @ 0x00007ffff7d26850

```

Here is the script to reproduce the issue

```
DROP DATABASE IF EXISTS test_02977;
CREATE DATABASE test_02977;

USE test_02977;

DROP TABLE IF EXISTS src;

CREATE TABLE src(Timestamp DateTime64(9), c1 String, c2 String) ENGINE=MergeTree ORDER BY Timestamp;

CREATE MATERIALIZED VIEW mv(timestamp DateTime, c12 String) ENGINE=MergeTree ORDER BY timestamp AS SELECT Timestamp as timestamp, c1 || c2 as c12 FROM src;

SELECT * FROM system.tables WHERE database = currentDatabase();

-- Insert some data
INSERT INTO src SELECT '2024-02-22'::DateTime + number, number, number FROM numbers(3);

-- { echoOn }
SELECT * FROM src;

SELECT * FROM mv;

-- Alter mat view query which leads to changing timestamp column data type
ALTER TABLE mv MODIFY QUERY SELECT Timestamp as timestamp, c1 || c2 as c12 FROM src;


SELECT * FROM system.tables WHERE database = currentDatabase();

SELECT * FROM src;
SELECT * FROM mv;

BACKUP DATABASE test_02977 TO Disk('backups', 'test_02977_backup1');

DROP DATABASE IF EXISTS test_02977_2;

RESTORE DATABASE test_02977 AS test_02977_2 FROM Disk('backups', 'test_02977_backup1');


SELECT * FROM system.tables WHERE database = 'test_02977_2';
SELECT * FROM test_02977_2.src;
SELECT * FROM test_02977_2.mv;

DROP DATABASE test_02977_2;


-- { echoOff }

DROP TABLE mv;
DROP TABLE src;

DROP DATABASE test_02977;
```