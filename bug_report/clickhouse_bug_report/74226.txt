ID: 74226
Title: `Database _table_function does not exist`. When using remote() in subquery and Parallel replicas 
Description:
Repro:
https://fiddle.clickhouse.com/63f7ca0d-dd98-420d-9681-049dedf3785e

Error:
```
2025-01-07 00:26:35 [1c2c8eef6f37] 2025.01.06 07:56:35.622503 [ 128261 ] {a26846de-65ba-416b-b978-86f5bbc13e74} <Error> executeQuery: Code: 81. DB::Exception: Database _table_function does not exist. (UNKNOWN_DATABASE) (version 25.1.1.1927 (official build)) (from [::1]:38404) (comment: 00459_group_array_insert_at.sql) (in query: SELECT k, ignore(groupArrayInsertAt(x, x)) FROM (SELECT dummy AS k, (randConstant() * 10) % 10 AS x FROM remote('127.0.0.{1,1}', system.one)) GROUP BY k ORDER BY k;), Stack trace (when copying this message, always include the lines below):
2025-01-07 00:26:35 
2025-01-07 00:26:35 0. ./build_docker/./src/Common/Exception.cpp:107: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000d8710bb
2025-01-07 00:26:35 1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000000086ff68c
2025-01-07 00:26:35 2. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x00000000086ff2ab
2025-01-07 00:26:35 3. ./build_docker/./src/Interpreters/DatabaseCatalog.cpp:663: DB::DatabaseCatalog::getDatabase(String const&) const @ 0x0000000011af110a
2025-01-07 00:26:35 4. ./build_docker/./src/Interpreters/Context.cpp:5405: DB::Context::resolveStorageID(DB::StorageID, DB::Context::StorageNamespace) const @ 0x0000000011a27cde
2025-01-07 00:26:35 5. ./build_docker/./src/Analyzer/Resolve/IdentifierResolver.cpp:418: DB::IdentifierResolver::tryResolveTableIdentifierFromDatabaseCatalog(DB::Identifier const&, std::shared_ptr<DB::Context const>) @ 0x0000000011862caa
2025-01-07 00:26:35 6. ./build_docker/./src/Analyzer/Resolve/QueryAnalyzer.cpp:1525: DB::QueryAnalyzer::tryResolveIdentifier(DB::IdentifierLookup const&, DB::IdentifierResolveScope&, DB::IdentifierResolveSettings) @ 0x00000000118277d2
2025-01-07 00:26:35 7. ./build_docker/./src/Analyzer/Resolve/QueryAnalyzer.cpp:4384: DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001180a070
2025-01-07 00:26:35 8. ./build_docker/./src/Analyzer/Resolve/QueryAnalyzer.cpp:3871: DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000118153b4
2025-01-07 00:26:35 9. ./build_docker/./src/Analyzer/Resolve/QueryAnalyzer.cpp:5337: DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000011846683
2025-01-07 00:26:35 10. ./build_docker/./src/Analyzer/Resolve/QueryAnalyzer.cpp:5604: DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001180aa66
2025-01-07 00:26:35 11. ./build_docker/./src/Analyzer/Resolve/QueryAnalyzer.cpp:172: DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000011808ecc
2025-01-07 00:26:35 12. ./build_docker/./src/Analyzer/Resolve/QueryAnalysisPass.cpp:18: DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x00000000118087a0
2025-01-07 00:26:35 13. ./build_docker/./src/Analyzer/QueryTreePassManager.cpp:209: DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>, unsigned long) @ 0x0000000011e9943e
2025-01-07 00:26:35 14. ./src/Analyzer/QueryTreePassManager.cpp:194: DB::(anonymous namespace)::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.16731851059554480708) @ 0x00000000120f7678
2025-01-07 00:26:35 15. ./build_docker/./src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:167: DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000120f58bc
2025-01-07 00:26:35 16. ./build_docker/./src/Processors/QueryPlan/ParallelReplicasLocalPlan.cpp:56: DB::createLocalPlanForParallelReplicas(std::shared_ptr<DB::IAST> const&, DB::Block const&, std::shared_ptr<DB::Context const>, DB::QueryProcessingStage::Enum, std::shared_ptr<DB::ParallelReplicasReadingCoordinator>, std::unique_ptr<DB::IQueryPlanStep, std::default_delete<DB::IQueryPlanStep>>, unsigned long) @ 0x0000000013bfa25d
2025-01-07 00:26:35 17. ./build_docker/./src/Interpreters/ClusterProxy/executeQuery.cpp:625: DB::ClusterProxy::executeQueryWithParallelReplicas(DB::QueryPlan&, DB::StorageID const&, DB::Block const&, DB::QueryProcessingStage::Enum, std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, std::shared_ptr<std::list<DB::StorageLimits, std::allocator<DB::StorageLimits>> const>, std::unique_ptr<DB::IQueryPlanStep, std::default_delete<DB::IQueryPlanStep>>) @ 0x00000000126a0ca7
2025-01-07 00:26:35 18. ./build_docker/./src/Planner/findParallelReplicasQuery.cpp:503: DB::buildQueryPlanForParallelReplicas(DB::QueryNode const&, std::shared_ptr<DB::PlannerContext> const&, std::shared_ptr<std::list<DB::StorageLimits, std::allocator<DB::StorageLimits>> const>) @ 0x0000000012111b3a
2025-01-07 00:26:35 19. ./build_docker/./src/Planner/Planner.cpp:1541: DB::Planner::buildPlanForQueryNode() @ 0x0000000012100e85
2025-01-07 00:26:35 20. ./build_docker/./src/Planner/Planner.cpp:1300: DB::Planner::buildQueryPlanIfNeeded() @ 0x00000000120fbdfe
2025-01-07 00:26:35 21. ./build_docker/./src/Planner/Planner.cpp:243: DB::Planner::Planner(std::shared_ptr<DB::IQueryTreeNode> const&, DB::SelectQueryOptions&) @ 0x00000000120fa45f
2025-01-07 00:26:35 22. ./build_docker/./src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:168: DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000120f5923
2025-01-07 00:26:35 23. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:597: std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne180100]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.16731851059554480708) @ 0x00000000120f9362
2025-01-07 00:26:35 24. ./contrib/llvm-project/libcxx/include/__functional/function.h:714: ? @ 0x0000000012094e16
2025-01-07 00:26:35 25. ./build_docker/./src/Interpreters/executeQuery.cpp:1372: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000001247808a
2025-01-07 00:26:35 26. ./build_docker/./src/Interpreters/executeQuery.cpp:1602: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000001247365c
2025-01-07 00:26:35 27. ./build_docker/./src/Server/TCPHandler.cpp:658: DB::TCPHandler::runImpl() @ 0x000000001371bacc
2025-01-07 00:26:35 28. ./build_docker/./src/Server/TCPHandler.cpp:2625: DB::TCPHandler::run() @ 0x0000000013736919
2025-01-07 00:26:35 29. ./build_docker/./base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x0000000016c49e07
2025-01-07 00:26:35 30. ./build_docker/./base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x0000000016c4a259
2025-01-07 00:26:35 31. ./build_docker/./base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x0000000016c167fb
2025-01-07 00:26:35 
2025-01-07 00:26:35 Received exception from server (version 25.1.1):
2025-01-07 00:26:35 Code: 81. DB::Exception: Received from localhost:9000. DB::Exception: Database _table_function does not exist. (UNKNOWN_DATABASE)
2025-01-07 00:26:35 (query: SELECT k, ignore(groupArrayInsertAt(x, x)) FROM (SELECT dummy AS k, (randConstant() * 10) % 10 AS x FROM remote('127.0.0.{1,1}', system.one)) GROUP BY k ORDER BY k;)

```


Failed tests with parallel replicas:
```
00944_ml_test
00098_shard_i_union_all
00459_group_array_insert_at
03303_distributed_explain
00163_shard_join_with_empty_table
01568_window_functions_distributed
00162_shard_global_join
01223_dist_on_dist
```



