ID: 9595
Title: StorageXDBC related abort in 19.17.5.18
Description:
Периодически КХ падает по сигналу abort.
Ubuntu 18.04.2 LTS
ядро 4.15.0-74-generic
unixodbc 2.3.4-1.1ubuntu3 
odbc-postgresql:amd64 1:10.01.0000-1    
```
2020.03.10 20:18:00.064519 [ 443 ] {} <Fatal> BaseDaemon: ########################################
2020.03.10 20:18:00.064619 [ 443 ] {} <Fatal> BaseDaemon: (version 19.17.5.18 (official build)) (from thread 86) Received signal Aborted (6).
2020.03.10 20:18:00.064646 [ 443 ] {} <Fatal> BaseDaemon: 
2020.03.10 20:18:00.064668 [ 443 ] {} <Fatal> BaseDaemon: Stack trace: 0x7fb41ea7ce97 0x7fb41ea7e801 0x7fb41ea6e39a 0x7fb41ea6e412 0x7fb41f24e55f 0x7fb41f244a98 0x564f9f7a0f2c 0x564f9f7ab1ec 0x564f9e11893e 0x564f9facbefe 0x564f9f832ae0 0x564f9f83a867 0x564f9f81bf9c 0x564f9f83c51f 0x564f9f83e155 0x564f9ffecdc5 0x564f9ffed5a4 0x564f9fa4f132 0x564f9f6ae5ca 0x564f9fddd824 0x564f9fde03d1 0x564f9f6aa612 0x564f9f6aa4c9 0x564f9f6aa4c9 0x564f9f6aa4c9 0x564f9f6aa4c9 0x564f9fa4f1b5 0x564f9f6ae5ca 0x564f9fddd824
2020.03.10 20:18:00.064916 [ 443 ] {} <Fatal> BaseDaemon: 3. 0x7fb41ea7ce97 raise /lib/x86_64-linux-gnu/libc-2.27.so
2020.03.10 20:18:00.064944 [ 443 ] {} <Fatal> BaseDaemon: 4. 0x7fb41ea7e801 abort /lib/x86_64-linux-gnu/libc-2.27.so
2020.03.10 20:18:00.064957 [ 443 ] {} <Fatal> BaseDaemon: 5. 0x7fb41ea6e39a ? /lib/x86_64-linux-gnu/libc-2.27.so
2020.03.10 20:18:00.064968 [ 443 ] {} <Fatal> BaseDaemon: 6. 0x7fb41ea6e412 ? /lib/x86_64-linux-gnu/libc-2.27.so
2020.03.10 20:18:00.065031 [ 443 ] {} <Fatal> BaseDaemon: 7. 0x7fb41f24e55f __pthread_tpp_change_priority /lib/x86_64-linux-gnu/libpthread-2.27.so
2020.03.10 20:18:00.065052 [ 443 ] {} <Fatal> BaseDaemon: 8. 0x7fb41f244a98 __pthread_mutex_lock_full /lib/x86_64-linux-gnu/libpthread-2.27.so
2020.03.10 20:18:00.065196 [ 443 ] {} <Fatal> BaseDaemon: 9. 0x564f9f7a0f2c DB::Context::getLock() const /usr/bin/clickhouse
2020.03.10 20:18:00.065259 [ 443 ] {} <Fatal> BaseDaemon: 10. 0x564f9f7ab1ec DB::Context::addXDBCBridgeCommand(std::unique_ptr<DB::ShellCommand, std::default_delete<DB::ShellCommand> >) const /usr/bin/clickhouse
2020.03.10 20:18:00.065322 [ 443 ] {} <Fatal> BaseDaemon: 11. 0x564f9e11893e DB::XDBCBridgeHelper<DB::ODBCBridgeMixin>::startBridgeSync() const /usr/bin/clickhouse
2020.03.10 20:18:00.065389 [ 443 ] {} <Fatal> BaseDaemon: 12. 0x564f9facbefe DB::StorageXDBC::read(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, DB::SelectQueryInfo const&, DB::Context const&, DB::QueryProcessingStage::Enum, unsigned long, unsigned int) /usr/bin/clickhouse
2020.03.10 20:18:00.065441 [ 443 ] {} <Fatal> BaseDaemon: 13. 0x564f9f832ae0 void DB::InterpreterSelectQuery::executeFetchColumns<DB::InterpreterSelectQuery::Pipeline>(DB::QueryProcessingStage::Enum, DB::InterpreterSelectQuery::Pipeline&, std::shared_ptr<DB::SortingInfo> const&, std::shared_ptr<DB::PrewhereInfo> const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, DB::QueryPipeline&) /usr/bin/clickhouse
2020.03.10 20:18:00.065464 [ 443 ] {} <Fatal> BaseDaemon: 14. 0x564f9f83a867 void DB::InterpreterSelectQuery::executeImpl<DB::InterpreterSelectQuery::Pipeline>(DB::InterpreterSelectQuery::Pipeline&, std::shared_ptr<DB::IBlockInputStream> const&, DB::QueryPipeline&) /usr/bin/clickhouse
2020.03.10 20:18:00.065485 [ 443 ] {} <Fatal> BaseDaemon: 15. 0x564f9f81bf9c DB::InterpreterSelectQuery::executeWithMultipleStreams(DB::QueryPipeline&) /usr/bin/clickhouse
2020.03.10 20:18:00.065500 [ 443 ] {} <Fatal> BaseDaemon: 16. 0x564f9f83c51f DB::InterpreterSelectWithUnionQuery::executeWithMultipleStreams(DB::QueryPipeline&) /usr/bin/clickhouse
2020.03.10 20:18:00.065519 [ 443 ] {} <Fatal> BaseDaemon: 17. 0x564f9f83e155 DB::InterpreterSelectWithUnionQuery::execute() /usr/bin/clickhouse
2020.03.10 20:18:00.065577 [ 443 ] {} <Fatal> BaseDaemon: 18. 0x564f9ffecdc5 ? /usr/bin/clickhouse
2020.03.10 20:18:00.065590 [ 443 ] {} <Fatal> BaseDaemon: 19. 0x564f9ffed5a4 ? /usr/bin/clickhouse
2020.03.10 20:18:00.085411 [ 443 ] {} <Fatal> BaseDaemon: 20. 0x564f9fa4f132 DB::LazyBlockInputStream::readImpl() /usr/bin/clickhouse
2020.03.10 20:18:00.085494 [ 443 ] {} <Fatal> BaseDaemon: 21. 0x564f9f6ae5ca DB::IBlockInputStream::read() /usr/bin/clickhouse
2020.03.10 20:18:00.085574 [ 443 ] {} <Fatal> BaseDaemon: 22. 0x564f9fddd824 DB::CreatingSetsBlockInputStream::createOne(DB::SubqueryForSet&) /usr/bin/clickhouse
2020.03.10 20:18:00.085621 [ 443 ] {} <Fatal> BaseDaemon: 23. 0x564f9fde03d1 DB::CreatingSetsBlockInputStream::readPrefixImpl() /usr/bin/clickhouse
2020.03.10 20:18:00.085668 [ 443 ] {} <Fatal> BaseDaemon: 24. 0x564f9f6aa612 DB::IBlockInputStream::readPrefix() /usr/bin/clickhouse
2020.03.10 20:18:00.085720 [ 443 ] {} <Fatal> BaseDaemon: 25. 0x564f9f6aa4c9 DB::IBlockInputStream::readPrefix() /usr/bin/clickhouse
2020.03.10 20:18:00.085739 [ 443 ] {} <Fatal> BaseDaemon: 26. 0x564f9f6aa4c9 DB::IBlockInputStream::readPrefix() /usr/bin/clickhouse
2020.03.10 20:18:00.085752 [ 443 ] {} <Fatal> BaseDaemon: 27. 0x564f9f6aa4c9 DB::IBlockInputStream::readPrefix() /usr/bin/clickhouse
2020.03.10 20:18:00.085764 [ 443 ] {} <Fatal> BaseDaemon: 28. 0x564f9f6aa4c9 DB::IBlockInputStream::readPrefix() /usr/bin/clickhouse
2020.03.10 20:18:00.085778 [ 443 ] {} <Fatal> BaseDaemon: 29. 0x564f9fa4f1b5 DB::LazyBlockInputStream::readImpl() /usr/bin/clickhouse
2020.03.10 20:18:00.085804 [ 443 ] {} <Fatal> BaseDaemon: 30. 0x564f9f6ae5ca DB::IBlockInputStream::read() /usr/bin/clickhouse
2020.03.10 20:18:00.085819 [ 443 ] {} <Fatal> BaseDaemon: 31. 0x564f9fddd824 DB::CreatingSetsBlockInputStream::createOne(DB::SubqueryForSet&) /usr/bin/clickhouse
```
Тред 86
```
2020.03.10 20:18:00.032287 [ 86 ] {6d85b1f2-84cc-4208-9009-ba6bbc4a5eb0} <Debug> Join: setSampleBlock: true_origin String String(size = 0)
2020.03.10 20:18:00.032503 [ 86 ] {6d85b1f2-84cc-4208-9009-ba6bbc4a5eb0} <Debug> iconjob_postgres.payments (SelectExecutor): Key condition: unknown
2020.03.10 20:18:00.032519 [ 86 ] {6d85b1f2-84cc-4208-9009-ba6bbc4a5eb0} <Debug> iconjob_postgres.payments (SelectExecutor): MinMax index condition: unknown
2020.03.10 20:18:00.032545 [ 86 ] {6d85b1f2-84cc-4208-9009-ba6bbc4a5eb0} <Debug> iconjob_postgres.payments (SelectExecutor): Selected 22 parts by date, 22 parts by key, 49 marks to read from 22 ranges
2020.03.10 20:18:00.032810 [ 86 ] {6d85b1f2-84cc-4208-9009-ba6bbc4a5eb0} <Trace> iconjob_postgres.payments (SelectExecutor): Reading approx. 401408 rows with
16 streams
2020.03.10 20:18:00.032975 [ 86 ] {6d85b1f2-84cc-4208-9009-ba6bbc4a5eb0} <Trace> InterpreterSelectQuery: FetchColumns -> Complete
2020.03.10 20:18:00.033061 [ 86 ] {6d85b1f2-84cc-4208-9009-ba6bbc4a5eb0} <Trace> InterpreterSelectQuery: FetchColumns -> Complete
2020.03.10 20:18:00.033363 [ 86 ] {6d85b1f2-84cc-4208-9009-ba6bbc4a5eb0} <Trace> InterpreterSelectQuery: FetchColumns -> Complete
2020.03.10 20:18:00.033420 [ 86 ] {6d85b1f2-84cc-4208-9009-ba6bbc4a5eb0} <Trace> InterpreterSelectQuery: FetchColumns -> Complete
2020.03.10 20:18:00.033620 [ 86 ] {6d85b1f2-84cc-4208-9009-ba6bbc4a5eb0} <Trace> InterpreterSelectQuery: FetchColumns -> Complete
2020.03.10 20:18:00.033688 [ 86 ] {6d85b1f2-84cc-4208-9009-ba6bbc4a5eb0} <Trace> CreatingSetsBlockInputStream: Creating join.
2020.03.10 20:18:00.033745 [ 86 ] {6d85b1f2-84cc-4208-9009-ba6bbc4a5eb0} <Trace> ReadWriteBufferFromHTTP: Sending request to http://localhost:9018/ping
2020.03.10 20:18:00.034148 [ 86 ] {6d85b1f2-84cc-4208-9009-ba6bbc4a5eb0} <Trace> ODBCBridgeHelper: clickhouse-odbc-bridge is not running, will try to start it
2020.03.10 20:18:00.034225 [ 86 ] {6d85b1f2-84cc-4208-9009-ba6bbc4a5eb0} <Trace> ODBCBridgeHelper: Starting clickhouse-odbc-bridge
```
