ID: 55280
Title: SIGSEGV while upgrading from 23.3 to 23.8
Description:
> You have to provide the following information whenever possible.

```
2023.10.06 18:29:38.898732 [ 458277 ] {} <Fatal> BaseDaemon: ########## Short fault info ############
2023.10.06 18:29:38.898832 [ 458277 ] {} <Fatal> BaseDaemon: (version 23.8.3.48 (official build), build id: 72D8FFD698F4E1EC1FE5F271E6230115D017A031, git hash: ebe4eb3d23e3f0505c33262966e50d6241506774) (from thread 458166) Received signal 11
2023.10.06 18:29:38.898870 [ 458277 ] {} <Fatal> BaseDaemon: Signal description: Segmentation fault
2023.10.06 18:29:38.898893 [ 458277 ] {} <Fatal> BaseDaemon: Address: 0x70. Access: read. Address not mapped to object.
2023.10.06 18:29:38.898926 [ 458277 ] {} <Fatal> BaseDaemon: Stack trace: 0x00000000130ebaf0 0x00000000133e28ea 0x00000000133f838b 0x00000000133f80bc 0x00000000133f77b3 0x000000001319d41a 0x0000000013194250 0x0000000013193a08 0x000000000c70f15e 0x000000000c712c1c 0x000000000c711464 0x00007f7ce439d609 0x00007f7ce42c2133
2023.10.06 18:29:38.898954 [ 458277 ] {} <Fatal> BaseDaemon: ########################################
2023.10.06 18:29:38.898973 [ 458277 ] {} <Fatal> BaseDaemon: (version 23.8.3.48 (official build), build id: 72D8FFD698F4E1EC1FE5F271E6230115D017A031, git hash: ebe4eb3d23e3f0505c33262966e50d6241506774) (from thread 458166) (no query) Received signal Segmentation fault (11)
2023.10.06 18:29:38.898990 [ 458277 ] {} <Fatal> BaseDaemon: Address: 0x70. Access: read. Address not mapped to object.
2023.10.06 18:29:38.899001 [ 458277 ] {} <Fatal> BaseDaemon: Stack trace: 0x00000000130ebaf0 0x00000000133e28ea 0x00000000133f838b 0x00000000133f80bc 0x00000000133f77b3 0x000000001319d41a 0x0000000013194250 0x0000000013193a08 0x000000000c70f15e 0x000000000c712c1c 0x000000000c711464 0x00007f7ce439d609 0x00007f7ce42c2133
2023.10.06 18:29:38.899064 [ 458277 ] {} <Fatal> BaseDaemon: 2. void std::__function::__policy_invoker<void (DB::Progress const&)>::__call_impl<std::__function::__default_alloc_func<DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&)::$_4, void (DB::Progress const&)>>(std::__function::__policy_storage const*, DB::Progress const&) @ 0x00000000130ebaf0 in /opt/clickhouse/bin/clickhouse.238
2023.10.06 18:29:38.899102 [ 458277 ] {} <Fatal> BaseDaemon: 3. DB::CountingTransform::onConsume(DB::Chunk) @ 0x00000000133e28ea in /opt/clickhouse/bin/clickhouse.238
2023.10.06 18:29:38.899121 [ 458277 ] {} <Fatal> BaseDaemon: 4. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::ExceptionKeepingTransform::work()::$_1, void ()>>(std::__function::__policy_storage const*) @ 0x00000000133f838b in /opt/clickhouse/bin/clickhouse.238
2023.10.06 18:29:38.899141 [ 458277 ] {} <Fatal> BaseDaemon: 5. DB::runStep(std::function<void ()>, DB::ThreadStatus*, std::atomic<unsigned long>*) @ 0x00000000133f80bc in /opt/clickhouse/bin/clickhouse.238
2023.10.06 18:29:38.899184 [ 458277 ] {} <Fatal> BaseDaemon: 6. DB::ExceptionKeepingTransform::work() @ 0x00000000133f77b3 in /opt/clickhouse/bin/clickhouse.238
2023.10.06 18:29:38.899214 [ 458277 ] {} <Fatal> BaseDaemon: 7. DB::ExecutionThreadContext::executeTask() @ 0x000000001319d41a in /opt/clickhouse/bin/clickhouse.238
2023.10.06 18:29:38.899234 [ 458277 ] {} <Fatal> BaseDaemon: 8. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000013194250 in /opt/clickhouse/bin/clickhouse.238
2023.10.06 18:29:38.899247 [ 458277 ] {} <Fatal> BaseDaemon: 9. DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x0000000013193a08 in /opt/clickhouse/bin/clickhouse.238
2023.10.06 18:29:38.899264 [ 458277 ] {} <Fatal> BaseDaemon: 10. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>) @ 0x000000000c70f15e in /opt/clickhouse/bin/clickhouse.238
2023.10.06 18:29:38.899297 [ 458277 ] {} <Fatal> BaseDaemon: 11. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000c712c1c in /opt/clickhouse/bin/clickhouse.238
2023.10.06 18:29:38.899321 [ 458277 ] {} <Fatal> BaseDaemon: 12. void* std::__thread_proxy[abi:v15000]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000c711464 in /opt/clickhouse/bin/clickhouse.238
2023.10.06 18:29:38.899335 [ 458277 ] {} <Fatal> BaseDaemon: 13. ? @ 0x00007f7ce439d609 in ?
2023.10.06 18:29:38.899354 [ 458277 ] {} <Fatal> BaseDaemon: 14. ? @ 0x00007f7ce42c2133 in ?
```

Reverting back (with `ratio_of_defaults_for_sparse_serialization` set) to 23.3, it does not crash.

> A clear and concise description of what works not as it is supposed to.

Not crash.


