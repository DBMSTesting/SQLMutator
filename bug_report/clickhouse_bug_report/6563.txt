ID: 6563
Title: Segmentation fault when trying to display the context of exception.
Description:
Given a simple multiIf query:
```
SELECT multiIf(id>2, id, id-1) FROM trips2;
```
I've got corruption with stack trace:
```
(gdb) bt
#0  DB::(anonymous namespace)::collectSymbolsFromProgramHeaders (symbols=..., info=0x7f3af5217040) at ../dbms/src/Common/SymbolIndex.cpp:68
#1  DB::(anonymous namespace)::collectSymbols (info=0x7f3af5217040, data_ptr=0xabdc4e0 <ext::singleton<DB::SymbolIndex>::instance()::instance>)
    at ../dbms/src/Common/SymbolIndex.cpp:264
#2  0x00000000072838a7 in dl_iterate_phdr (callback=0x34131a0 <DB::(anonymous namespace)::collectSymbols(dl_phdr_info*, size_t, void*)>,
    data=0xabdc4e0 <ext::singleton<DB::SymbolIndex>::instance()::instance>) at ../libs/libcommon/src/phdr_cache.cpp:76
#3  0x0000000003414f31 in DB::SymbolIndex::update (this=this@entry=0xabdc4e0 <ext::singleton<DB::SymbolIndex>::instance()::instance>)
    at ../dbms/src/Common/SymbolIndex.cpp:296
#4  0x0000000003410862 in DB::SymbolIndex::SymbolIndex (this=0xabdc4e0 <ext::singleton<DB::SymbolIndex>::instance()::instance>)
    at ../dbms/src/Common/SymbolIndex.h:20
#5  ext::singleton<DB::SymbolIndex>::instance () at ../libs/libcommon/include/ext/singleton.h:32
#6  toStringImpl (size=<optimized out>, offset=<optimized out>, frames=...) at ../dbms/src/Common/StackTrace.cpp:246
#7  SimpleCache<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >(const std::array<void*, 32>&, long unsigned int, long unsigned int), toStringImpl>::operator()<const std::array<void*, 32>&, long unsigned int const&, long unsigned int const&>(const std::array<void*, 32> &, const unsigned long &, const unsigned long &) (this=0xabdc480 <StackTrace::toString[abi:cxx11]() const::func_cached>)
    at ../libs/libcommon/include/common/SimpleCache.h:46
#8  0x00000000034109fe in StackTrace::toString[abi:cxx11]() const (this=0x7f3a50da20b8) at ../dbms/src/Common/StackTrace.cpp:295
#9  0x000000000328b53b in DB::setExceptionStackTrace (elem=...) at ../dbms/src/Common/Exception.h:42
#10 0x000000000328bc9e in DB::onExceptionBeforeStart (query=..., context=..., current_time=current_time@entry=1566288179)
    at ../dbms/src/Interpreters/executeQuery.cpp:135
#11 0x000000000328be2d in DB::executeQueryImpl (begin=<optimized out>, end=<optimized out>, context=..., internal=<optimized out>,
    stage=<optimized out>, has_query_tail=false) at ../dbms/src/Interpreters/executeQuery.cpp:470
#12 0x00000000061ef17c in DB::executeQuery (query=..., context=..., internal=internal@entry=false, stage=<optimized out>,
    may_have_embedded_data=<optimized out>) at /usr/include/c++/8/bits/basic_string.h:2302
#13 0x000000000345dee9 in DB::TCPHandler::runImpl (this=0x7f3a50c1a000) at ../dbms/programs/server/TCPHandler.cpp:210
#14 0x000000000345e71b in DB::TCPHandler::run (this=0x7f3a50c1a000) at ../dbms/programs/server/TCPHandler.cpp:1083
#15 0x0000000006cb55af in Poco::Net::TCPServerConnection::start (this=<optimized out>) at ../contrib/poco/Net/src/TCPServerConnection.cpp:43
#16 0x0000000006cb5ce9 in Poco::Net::TCPServerDispatcher::run (this=0x7f3af53a5380) at ../contrib/poco/Net/src/TCPServerDispatcher.cpp:114
#17 0x000000000738d811 in Poco::PooledThread::run (this=0x7f3af5376680) at ../contrib/poco/Foundation/src/ThreadPool.cpp:214
```
The corruption could be easily reproduced given any table with even very few records. I chose the CK version of `v19.13.1.11-stable` 
