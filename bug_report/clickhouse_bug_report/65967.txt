ID: 65967
Title: "Not-ready Set" error in system.columns
Description:
```
:) SELECT 1 FROM system.columns WHERE table IN (SELECT '')

SELECT 1
FROM system.columns
WHERE `table` IN (
    SELECT ''
)

Query id: eeda797c-1e69-4bae-a044-89eb4737b929


Elapsed: 0.024 sec. 

Received exception from server (version 24.7.1):
Code: 49. DB::Exception: Received from localhost:9000. DB::Exception: Not-ready Set is passed as the second argument for function 'in': while executing 'FUNCTION in(table :: 0, __set_9468720847238136480_6591329536935121128 :: 1) -> in(table, __set_9468720847238136480_6591329536935121128) UInt8 : 2'. (LOGICAL_ERROR)
```

Stack:
```
0. ./contrib/llvm-project/libcxx/include/exception:141: Poco::Exception::Exception(String const&, int) @ 0x0000000013b34a16
1. ./build/./src/Common/Exception.cpp:101: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000b0e1dbf
2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000006208e74
3. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x0000000006208a2f
4. DB::(anonymous namespace)::FunctionIn<false, false, true, false>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000839af1b
5. DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x0000000006ccec9f
6. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000000e9a2a86
7. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000000e9a3301
8. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000000e9a454c
9. ./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:117: DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool, bool) const @ 0x000000000f8bc5a7
10. ./contrib/llvm-project/libcxx/include/vector:537: DB::ExpressionActions::execute(DB::Block&, bool, bool) const @ 0x000000000f8bd5a7
11. ./build/./src/Storages/VirtualColumnUtils.cpp:0: DB::VirtualColumnUtils::filterBlockWithDAG(std::shared_ptr<DB::ActionsDAG>, DB::Block&, std::shared_ptr<DB::Context const>) @ 0x0000000010c44e9e
12. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:701: DB::VirtualColumnUtils::filterBlockWithPredicate(DB::ActionsDAG::Node const*, DB::Block&, std::shared_ptr<DB::Context const>) @ 0x0000000010c48f9e
13. ./build/./src/Storages/System/StorageSystemColumns.cpp:0: DB::ReadFromSystemColumns::initializePipeline(DB::QueryPipelineBuilder&, DB::BuildQueryPipelineSettings const&) @ 0x000000000e7f49fd
14. ./contrib/llvm-project/libcxx/include/vector:1420: DB::ISourceStep::updatePipeline(std::vector<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>, std::allocator<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>>>, DB::BuildQueryP
ipelineSettings const&) @ 0x00000000118346c5
15. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:302: DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x000000001184bcab
16. ./build/./src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:252: DB::InterpreterSelectQueryAnalyzer::buildQueryPipeline() @ 0x00000000100ddd32
17. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:436: DB::InterpreterSelectQueryAnalyzer::execute() @ 0x00000000100ddae4
18. ./build/./src/Interpreters/executeQuery.cpp:0: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000001046efa0
19. ./build/./src/Interpreters/executeQuery.cpp:1391: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000001046b890
20. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:612: DB::TCPHandler::runImpl() @ 0x0000000011422767
21. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:593: DB::TCPHandler::run() @ 0x000000001143993c
22. ./build/./base/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x0000000013bdcd0c
23. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:48: Poco::Net::TCPServerDispatcher::run() @ 0x0000000013bdd1fa
24. ./build/./base/poco/Foundation/src/ThreadPool.cpp:219: Poco::PooledThread::run() @ 0x0000000013b867bf
25. ./base/poco/Foundation/include/Poco/SharedPtr.h:139: Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000013b841af
26. ? @ 0x0000734334e94ac3
27. ? @ 0x0000734334f26850
```