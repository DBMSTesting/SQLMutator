ID: 74360
Title: Double any left join with Join table. Cannot parse string. Parallel replicas
Description:
Repro:
```
DROP TABLE IF EXISTS tab;
CREATE TABLE tab ( `k` Nullable(UInt32), `k1` Nullable(UInt32), `k2` Nullable(UInt32), `v` String ) ENGINE = MergeTree ORDER BY tuple();
INSERT INTO tab VALUES (1, 1, 1, 'a'), (2, 2, 2, 'b');

DROP TABLE IF EXISTS mem;
CREATE TABLE mem ( `k` UInt64, `v` String ) ENGINE = Join(ANY, LEFT, k);
INSERT INTO mem VALUES (1, 'A'), (2, 'B'), (3, 'B');

SET allow_experimental_analyzer = 1;

SELECT *
FROM tab
ANY LEFT JOIN mem ON k1 = mem.k
ANY LEFT JOIN mem AS t ON k2 = t.k
ORDER BY tab.v;
```

Result:
```
03208_multiple_joins_with_storage_join:                                 [ FAIL ]
Reason: return code:  6
[nikpc] 2025.01.09 11:16:33.918792 [ 179050 ] {8f8e4982-efbf-44e7-a5d7-640fed2bda4d} <Error> executeQuery: Code: 6. DB::Exception: Cannot parse string 'A' as UInt64: syntax error at begin of string. Note: there are toUInt64OrZero and toUInt64OrNull functions, which returns zero/NULL instead of throwing exception.: while converting source column `__table2.v` to destination column `__table2.k`: while executing 'FUNCTION _CAST(__table2.v :: 5, UInt64 :: 9) -> _CAST(__table2.v, UInt64) UInt64 : 8'. (CANNOT_PARSE_TEXT) (version 25.1.1.1921 (official build)) (from [::ffff:127.0.0.1]:32984) (comment: 03208_multiple_joins_with_storage_join.sql) (in query: SELECT * FROM tab ANY LEFT JOIN mem ON k1 = mem.k ANY LEFT JOIN mem AS t ON k2 = t.k ORDER BY tab.v;), Stack trace (when copying this message, always include the lines below):

0. ./build_docker/./src/Common/Exception.cpp:107: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000d87b63b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000000086ff62c
2. DB::detail::throwExceptionForIncompletelyParsedValue(DB::ReadBuffer&, DB::IDataType const&) @ 0x00000000087e19e4
3. ./src/Functions/FunctionsConversion.h:1041: COW<DB::IColumn>::immutable_ptr<DB::IColumn> DB::detail::ConvertThroughParsing<DB::DataTypeString, DB::DataTypeNumber<unsigned long>, DB::detail::NameToUInt64, (DB::detail::ConvertFromStringExceptionMode)0, (DB::detail::ConvertFromStringParsingMode)0>::execute<void*>(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, void*) @ 0x0000000007f4f7ac
4. ./src/Functions/FunctionsConversion.h:1579: bool DB::callOnIndexAndDataType<DB::DataTypeNumber<unsigned long>, DB::detail::FunctionConvert<DB::DataTypeNumber<unsigned long>, DB::detail::NameToUInt64, DB::detail::ToNumberMonotonicity<unsigned long>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString>(DB::TypeIndex, DB::detail::FunctionConvert<DB::DataTypeNumber<unsigned long>, DB::detail::NameToUInt64, DB::detail::ToNumberMonotonicity<unsigned long>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const::'lambda'(auto const&, DB::detail::BehaviourOnErrorFromString)&, DB::detail::BehaviourOnErrorFromString&&) @ 0x0000000007f4d32e
5. ./src/Functions/FunctionsConversion.h:2512: DB::detail::FunctionConvert<DB::DataTypeNumber<unsigned long>, DB::detail::NameToUInt64, DB::detail::ToNumberMonotonicity<unsigned long>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x0000000007f4b482
6. ./src/Functions/FunctionsConversion.h:2293: DB::detail::FunctionConvert<DB::DataTypeNumber<unsigned long>, DB::detail::NameToUInt64, DB::detail::ToNumberMonotonicity<unsigned long>>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x0000000007f4a3fa
7. ./build_docker/./src/Functions/IFunctionAdaptors.cpp:10: DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000109c9ada
8. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000109c2fa1
9. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000109c421e
10. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000109c547b
11. DB::IFunctionBase::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000109c57b9
12. COW<DB::IColumn>::immutable_ptr<DB::IColumn> std::__function::__policy_invoker<COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::__call_impl[abi:ne180100]<std::__function::__default_alloc_func<DB::detail::FunctionCast::createFunctionAdaptor(std::shared_ptr<DB::IFunction>, std::shared_ptr<DB::IDataType const> const&)::'lambda'(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long), COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>>(std::__function::__policy_storage const*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) @ 0x0000000010a47496
13. DB::detail::ExecutableFunctionCast::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x0000000010a1c1e4
14. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000109c2fa1
15. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000109c4169
16. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000109c547b
17. ./build_docker/./src/Interpreters/ExpressionActions.cpp:636: DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool, bool) const @ 0x0000000011b25e19
18. ./build_docker/./src/Processors/Transforms/ExpressionTransform.cpp:25: DB::ExpressionTransform::transform(DB::Chunk&) @ 0x0000000013a44256
19. ./src/Processors/ISimpleTransform.h:32: DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0x000000000f8ed253
20. ./build_docker/./src/Processors/ISimpleTransform.cpp:89: DB::ISimpleTransform::work() @ 0x00000000137af652
21. ./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:49: DB::ExecutionThreadContext::executeTask() @ 0x00000000137cdc67
22. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:290: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000137c0904
23. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:256: void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne180100]<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x00000000137c346e
24. ./contrib/llvm-project/libcxx/include/__functional/function.h:714: ? @ 0x000000000d957a7b
25. ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:312: void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne180100]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000d95e342
26. ./contrib/llvm-project/libcxx/include/__functional/function.h:714: ? @ 0x000000000d954dff
27. ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:312: void* std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000d95bf7a
28. ? @ 0x00007f811ea9ca94
29. ? @ 0x00007f811eb29c3c

Received exception from server (version 25.1.1):
Code: 6. DB::Exception: Received from localhost:9000. DB::Exception: Cannot parse string 'A' as UInt64: syntax error at begin of string. Note: there are toUInt64OrZero and toUInt64OrNull functions, which returns zero/NULL instead of throwing exception.: while converting source column `__table2.v` to destination column `__table2.k`: while executing 'FUNCTION _CAST(__table2.v :: 5, UInt64 :: 9) -> _CAST(__table2.v, UInt64) UInt64 : 8'. (CANNOT_PARSE_TEXT)
(query: SELECT *
FROM tab
ANY LEFT JOIN mem ON k1 = mem.k
ANY LEFT JOIN mem AS t ON k2 = t.k
ORDER BY tab.v;)

```

Affected tests:
```
03208_multiple_joins_with_storage_join.sql
```



Version 25.1.1.1921
