ID: 74211
Title: Logical Error: Invalid number of columns in chunk pushed to OutputPort
Description:
**Describe the bug**
Run GROUP BY with a Nullable column on a Log table.

**How to reproduce**
Run Fiddle: https://fiddle.clickhouse.com/a2e6b523-f4a5-4831-83a1-b3cffd7996ca

Stack trace:
```
<Fatal> : Logical error: 'Invalid number of columns in chunk pushed to OutputPort. Expected 2, found 1
Header: c0.c1.null Array(UInt8) Array(size = 0, UInt64(size = 0), UInt8(size = 0)), c0.c2 Array(Int32) Array(size = 0, UInt64(size = 0), Int32(size = 0))
Chunk:  Array(size = 1, UInt64(size = 1), UInt8(size = 1))
'.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. contrib/llvm-project/libcxx/include/__exception/exception.h:106: Poco::Exception::Exception(String const&, int) @ 0x0000000038facf11
1. src/Common/Exception.cpp:105: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000001c15ada2
2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000b4e4b4e
3. src/Common/Exception.h:123: DB::Exception::Exception<unsigned long, unsigned long, String, String>(int, FormatStringHelperImpl<std::type_identity<unsigned long>::type, std::type_identity<unsigned long>::type, std::type_identity<String>::type, std::type_identity<String>::type>, unsigned long&&, unsigned long&&, String&&, String&&) @ 0x000000002b2e3bea
4. src/Processors/Port.h:415: DB::ISource::prepare() @ 0x00000000310be80e
5. src/Processors/Executors/ExecutingGraph.cpp:280: DB::ExecutingGraph::updateNode(unsigned long, std::queue<DB::ExecutingGraph::Node*, std::deque<DB::ExecutingGraph::Node*, AllocatorWithMemoryTracking<DB::ExecutingGraph::Node*>>>&, std::queue<DB::ExecutingGraph::Node*, std::deque<DB::ExecutingGraph::Node*, AllocatorWithMemoryTracking<DB::ExecutingGraph::Node*>>>&) @ 0x00000000310ee3ea
6. src/Processors/Executors/PipelineExecutor.cpp:309: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000310dfede
7. src/Processors/Executors/PipelineExecutor.cpp:256: void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne180100]<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x00000000310e27d5
8. contrib/llvm-project/libcxx/include/__functional/function.h:714: ? @ 0x000000001c3272ef
9. contrib/llvm-project/libcxx/include/__type_traits/invoke.h:312: ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()() @ 0x000000001c333c81
10. contrib/llvm-project/libcxx/include/__functional/function.h:714: ? @ 0x000000001c322827
11. contrib/llvm-project/libcxx/include/__type_traits/invoke.h:312: void* std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000001c32f1f0
12. asan_thread_start(void*) @ 0x000000000b493e77
13. ? @ 0x00007ffff7ca1e2e
14. ? @ 0x00007ffff7d33a4c
```