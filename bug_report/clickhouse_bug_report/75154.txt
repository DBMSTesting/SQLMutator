ID: 75154
Title: Crash with CTE query
Description:
### Describe the bug

I think this crash is not related to the others. It happens in the client.

### How to reproduce

Run Fiddle: https://fiddle.clickhouse.com/6562cf6c-0db7-4942-aab4-74f510d5a67a

### Error message and/or stacktrace

From UBSAN:
```
src/Parsers/ParserInsertQuery.cpp:187:45: runtime error: member call on null pointer of type 'DB::TypePromotion<DB::IAST>'
SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior src/Parsers/ParserInsertQuery.cpp:187:45
```
Stack trace:
```
Signal description: Segmentation fault
Address: NULL pointer. Access: read. Address not mapped to object.
Stack trace: 0x00005e6cf9efab4d 0x00005e6cfa591e7a 0x00007973f7c45250 0x00005e6d11f3857a 0x00005e6d11ed9b32 0x00005e6d11f3f0d6 0x00005e6d11ed9b32 0x00005e6d0feaf63e 0x00005e6d192c9d09 0x00005e6d192c3a24 0x00005e6d192c7c18 0x00005e6d192c723f 0x00005e6d0ff97777 0x00005e6d0ff5d55d 0x00005e6d0fe98d44 0x00005e6cfa257e09 0x00005e6d186b1c57 0x00005e6cfa26ec09 0x00005e6ce925e87f 0x00007973f7c2a3b8 0x00007973f7c2a47b 0x00005e6ce918702e
########################################
(version 25.2.1.215 (official build), build id: B0D889108BD8A6E304EEC518E83159F042E3905D, git hash: d3e3b9c01ae81a05bfd63e4ce51df22583510096) (from thread 1614745) (no query) Received signal Segmentation fault (11)
Address: NULL pointer. Access: read. Address not mapped to object.
Stack trace: 0x00005e6cf9efab4d 0x00005e6cfa591e7a 0x00007973f7c45250 0x00005e6d11f3857a 0x00005e6d11ed9b32 0x00005e6d11f3f0d6 0x00005e6d11ed9b32 0x00005e6d0feaf63e 0x00005e6d192c9d09 0x00005e6d192c3a24 0x00005e6d192c7c18 0x00005e6d192c723f 0x00005e6d0ff97777 0x00005e6d0ff5d55d 0x00005e6d0fe98d44 0x00005e6cfa257e09 0x00005e6d186b1c57 0x00005e6cfa26ec09 0x00005e6ce925e87f 0x00007973f7c2a3b8 0x00007973f7c2a47b 0x00005e6ce918702e
0.0. inlined from src/Common/StackTrace.cpp:381: StackTrace::tryCapture()
0. src/Common/StackTrace.cpp:350: StackTrace::StackTrace(ucontext_t const&) @ 0x000000001c3eeb4d
1. src/Common/SignalHandlers.cpp:104: signalHandler(int, siginfo_t*, void*) @ 0x000000001ca85e7a
2. ? @ 0x00007973f7c45250
3.0. inlined from src/Common/typeid_cast.h:42: T typeid_cast<DB::ASTSelectWithUnionQuery*, DB::IAST>(DB::IAST*)
3.1. inlined from src/Common/TypePromotion.h:43: DB::TypePromotion<DB::IAST>::CastHelper<DB::ASTSelectWithUnionQuery, false, false>::value(DB::IAST*)
3.2. inlined from src/Common/TypePromotion.h:57: std::invoke_result<decltype(&CastHelper<DB::ASTSelectWithUnionQuery, false>::value), DB::TypePromotion<DB::IAST>::CastHelper<DB::ASTSelectWithUnionQuery, false, std::is_reference_v<DB::ASTSelectWithUnionQuery>>, DB::IAST*>::type DB::TypePromotion<DB::IAST>::as<DB::ASTSelectWithUnionQuery>()
3. src/Parsers/ParserInsertQuery.cpp:187: DB::ParserInsertQuery::parseImpl(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&) @ 0x000000003442c57a
4.0. inlined from src/Parsers/IParserBase.cpp:14: operator()
4.1. inlined from src/Parsers/IParserBase.h:31: bool DB::IParserBase::wrapParseImpl<DB::IParserBase::parse(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&)::$_0>(DB::IParser::Pos&, DB::IParserBase::IncreaseDepthTag, DB::IParserBase::parse(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&)::$_0 const&)
4. src/Parsers/IParserBase.cpp:11: DB::IParserBase::parse(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&) @ 0x00000000343cdb32
5. src/Parsers/ParserQuery.cpp:78: DB::ParserQuery::parseImpl(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&) @ 0x00000000344330d6
6.0. inlined from src/Parsers/IParserBase.cpp:14: operator()
6.1. inlined from src/Parsers/IParserBase.h:31: bool DB::IParserBase::wrapParseImpl<DB::IParserBase::parse(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&)::$_0>(DB::IParser::Pos&, DB::IParserBase::IncreaseDepthTag, DB::IParserBase::parse(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&)::$_0 const&)
6. src/Parsers/IParserBase.cpp:11: DB::IParserBase::parse(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&) @ 0x00000000343cdb32
7. src/Client/ClientBaseHelpers.cpp:170: DB::highlight(String const&, std::vector<replxx::Replxx::Color, std::allocator<replxx::Replxx::Color>>&, DB::Context const&) @ 0x00000000323a363e
8.0. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:714: ?
8.1. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:981: ?
8. contrib/replxx/src/replxx_impl.cxx:810: replxx::Replxx::ReplxxImpl::render(replxx::Replxx::ReplxxImpl::HINT_ACTION) @ 0x000000003b7bdd09
9. contrib/replxx/src/replxx_impl.cxx:1007: replxx::Replxx::ReplxxImpl::refresh_line(replxx::Replxx::ReplxxImpl::HINT_ACTION, bool) @ 0x000000003b7b7a24
10. contrib/replxx/src/replxx_impl.cxx:0: replxx::Replxx::ReplxxImpl::get_input_line() @ 0x000000003b7bbc18
11. contrib/replxx/src/replxx_impl.cxx:671: replxx::Replxx::ReplxxImpl::input(String const&) @ 0x000000003b7bb23f
12. src/Client/ReplxxLineReader.cpp:498: DB::ReplxxLineReader::readOneLine(String const&) @ 0x000000003248b777
13. src/Client/LineReader.cpp:163: DB::LineReader::readLine(String const&, String const&) @ 0x000000003245155d
14. src/Client/ClientBase.cpp:3124: DB::ClientBase::runInteractive() @ 0x000000003238cd44
15. programs/client/Client.cpp:393: DB::Client::main(std::vector<String, std::allocator<String>> const&) @ 0x000000001c74be09
16. base/poco/Util/src/Application.cpp:315: Poco::Util::Application::run() @ 0x000000003aba5c57
17. programs/client/Client.cpp:1127: mainEntryClickHouseClient(int, char**) @ 0x000000001c762c09
18. programs/main.cpp:269: main @ 0x000000000b75287f
19. ? @ 0x00007973f7c2a3b8
20. ? @ 0x00007973f7c2a47b
```