ID: 9969
Title: Brotli HTTP compression failing on 20.3.5
Description:
We are getting the following exception when querying data using the Grafana ClickHouse plugin on the new 20.3.5 release. HTTP compression is enabled on the server, and the Grafana plugin sends an `Accept Encoding: gzip, deflate, br` header.  Is there some way we can diable brotli compression without disabling compression completely?

> 2020.03.31 13:54:50.167406 [ 26365 ] {15EF0662EB85DF85} <Error> executeQuery: Code: 449, e.displayText() = DB::Exception: brotli compress failed: While executing JSONRowOutputFormat (version 20.3.5.21 (official build)) (from [2001:558:fc0c:0:f816:3eff:fe6f:de33]:40234) (in que
> ry: SELECT     (intDiv(toUInt32(datetime), 15) * 15) * 1000 as t,     pipeline,     host,     avg(eps)    FROM analytics.kpipe_metrics_d WHERE datetime >= toDateTime(1585652088) and metric = 'processed' and pipeline like '%%%%' GROUP BY t, pipeline, host ORDER BY t FORMAT JSON
>  ), Stack trace (when copying this message, always include the lines below):
> 
> 0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x1050f0d0 in /usr/bin/clickhouse
> 1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x8f3272d in /usr/bin/clickhouse
> 2. ? @ 0x8fd6a4c in /usr/bin/clickhouse
> 3. DB::WriteBufferFromHTTPServerResponse::nextImpl() @ 0x8fcd942 in /usr/bin/clickhouse
> 4. DB::WriteBufferValidUTF8::nextImpl() @ 0xaa7af5e in /usr/bin/clickhouse
> 5. DB::JSONRowOutputFormat::writeField(DB::IColumn const&, DB::IDataType const&, unsigned long) @ 0xdc81801 in /usr/bin/clickhouse
> 6. DB::IRowOutputFormat::write(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > > const&, unsigned long) @ 0xdc0a4a9 in /usr/bin/clickhouse
> 7. DB::IRowOutputFormat::consume(DB::Chunk) @ 0xdc0a332 in /usr/bin/clickhouse
> 8. DB::IOutputFormat::work() @ 0xdbca30d in /usr/bin/clickhouse
> 9. ? @ 0xdbb2881 in /usr/bin/clickhouse
> 10. DB::PipelineExecutor::executeSingleThread(unsigned long, unsigned long) @ 0xdbb6b2d in /usr/bin/clickhouse
> 11. ? @ 0xdbb7522 in /usr/bin/clickhouse
> 12. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x8f567eb in /usr/bin/clickhouse
> 13. ? @ 0x8f54c33 in /usr/bin/clickhouse
> 14. start_thread @ 0x7dd5 in /usr/lib64/libpthread-2.17.so
> 15. __clone @ 0xfe02d in /usr/lib64/libc-2.17.so
> 