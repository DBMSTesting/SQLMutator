ID: 2662
Title: segfaults when using arrayElement on Array(Nullable(String)) type
Description:
When trying to GROUP BY on an array index, when not all rows have the index leads to the following:

```
ClickHouse client version 1.1.54388.
Connecting to localhost:9000 as user default.
Connected to ClickHouse server version 1.1.54388.

8805bb17cbc9 :) create temporary table wups (a Array(Nullable(String)));

CREATE TEMPORARY TABLE wups
(
    a Array(Nullable(String))
)

Ok.

0 rows in set. Elapsed: 0.002 sec.

8805bb17cbc9 :) select count(), a[1] from wups group by a[1];

SELECT
    count(),
    a[1]
FROM wups
GROUP BY a[1]

Ok.

0 rows in set. Elapsed: 0.003 sec.

8805bb17cbc9 :) insert into wups (a) values(['foo']);

INSERT INTO wups (a) VALUES

Ok.

1 rows in set. Elapsed: 0.003 sec.

8805bb17cbc9 :) select count(), a[1] from wups group by a[1];

SELECT
    count(),
    a[1]
FROM wups
GROUP BY a[1]

┌─count()─┬─arrayElement(a, 1)─┐
│       1 │ foo                │
└─────────┴────────────────────┘

1 rows in set. Elapsed: 0.004 sec.

8805bb17cbc9 :) insert into wups (a) values([]);

INSERT INTO wups (a) VALUES

Ok.

1 rows in set. Elapsed: 0.003 sec.

8805bb17cbc9 :) select count(), a[1] from wups group by a[1];

SELECT
    count(),
    a[1]
FROM wups
GROUP BY a[1]

← Progress: 2.00 rows, 29.00 B (19.28 rows/s., 279.50 B/s.)
Exception on client:
Code: 32. DB::Exception: Attempt to read after eof: while receiving packet from localhost:9000, ::1

Connecting to localhost:9000 as user default.
Code: 210. DB::NetException: Connection reset by peer: while reading from socket ([::1]:9000)
```

Segfault:

```
2018.07.17 02:48:08.588761 [ 27 ] <Error> BaseDaemon: ########################################
2018.07.17 02:48:08.588797 [ 27 ] <Error> BaseDaemon: (from thread 26) Received signal Segmentation fault (11).
2018.07.17 02:48:08.588814 [ 27 ] <Error> BaseDaemon: Address: NULL pointer.
2018.07.17 02:48:08.588830 [ 27 ] <Error> BaseDaemon: Access: read.
2018.07.17 02:48:08.588846 [ 27 ] <Error> BaseDaemon: Address not mapped to object.
2018.07.17 02:48:08.608064 [ 27 ] <Error> BaseDaemon: 0. /usr/bin/clickhouse-server(DB::ColumnNullable::serializeValueIntoArena(unsigned long, DB::Arena&, char const*&) const+0x4e) [0x4eabe2e]
2018.07.17 02:48:08.608103 [ 27 ] <Error> BaseDaemon: 1. /usr/bin/clickhouse-server() [0x51b50b0]
2018.07.17 02:48:08.608169 [ 27 ] <Error> BaseDaemon: 2. /usr/bin/clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<HashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, HashTableGrower<8ul>, Allocator<true> > > >(DB::AggregationMethodSerialized<HashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, HashTableGrower<8ul>, Allocator<true> > >&, DB::AggregationMethodSerialized<HashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, HashTableGrower<8ul>, Allocator<true> > >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<unsigned long, std::allocator<unsigned long> > const&, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x8d) [0x5215fad]
2018.07.17 02:48:08.608217 [ 27 ] <Error> BaseDaemon: 3. /usr/bin/clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<HashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, HashTableGrower<8ul>, Allocator<true> > > >(DB::AggregationMethodSerialized<HashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, HashTableGrower<8ul>, Allocator<true> > >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<unsigned long, std::allocator<unsigned long> > const&, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x75) [0x5216335]
2018.07.17 02:48:08.608272 [ 27 ] <Error> BaseDaemon: 4. /usr/bin/clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x1620) [0x51c81e0]
2018.07.17 02:48:08.608309 [ 27 ] <Error> BaseDaemon: 5. /usr/bin/clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler, (DB::StreamUnionMode)0>::thread(MemoryTracker*, unsigned long)+0x444) [0x5171224]
2018.07.17 02:48:08.608346 [ 27 ] <Error> BaseDaemon: 6. /usr/bin/clickhouse-server() [0x92cc1af]
2018.07.17 02:48:08.608379 [ 27 ] <Error> BaseDaemon: 7. /lib/x86_64-linux-gnu/libpthread.so.0(+0x76db) [0x7f64d1d646db]
```

I would expect this to behave similar to a null.

This also seems to cause a similar, but different segfault when just doing:

```
8805bb17cbc9 :) create temporary table wups (a Array(Nullable(String)));

CREATE TEMPORARY TABLE wups
(
    a Array(Nullable(String))
)

Ok.

0 rows in set. Elapsed: 0.002 sec.

8805bb17cbc9 :) insert into wups (a) values([]);

INSERT INTO wups (a) VALUES

Ok.

1 rows in set. Elapsed: 0.002 sec.

8805bb17cbc9 :) select a[1] from wups;

SELECT a[1]
FROM wups


Exception on client:
Code: 89. DB::Exception: Unknown compression method: 105: while receiving packet from localhost:9000, ::1
```

With the following stacktrace:

```
2018.07.17 02:55:57.738462 [ 21 ] <Error> executeQuery: Code: 366, e.displayText() = DB::Exception: Logical error: Sizes of nested column and null map of Nullable column are not equal, e.what() = DB::Exception (from 172.17.0.1:35760) (in query: select a[1] from wups), Stack trace:

0. /usr/bin/clickhouse-server(StackTrace::StackTrace()+0x16) [0x5645df6]
1. /usr/bin/clickhouse-server(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x22) [0x2d74962]
2. /usr/bin/clickhouse-server(DB::ColumnNullable::checkConsistency() const+0x8a) [0x4eac20a]
3. /usr/bin/clickhouse-server(DB::DataTypeNullable::serializeBinaryBulkWithMultipleStreams(DB::IColumn const&, std::function<DB::WriteBuffer* (std::vector<DB::IDataType::Substream, std::allocator<DB::IDataType::Substream> > const&)>, unsigned long, unsigned long, bool, std::vector<DB::IDataType::Substream, std::allocator<DB::IDataType::Substream> >) const+0x55) [0x472ff55]
4. /usr/bin/clickhouse-server(DB::NativeBlockOutputStream::writeData(DB::IDataType const&, COWPtr<DB::IColumn>::immutable_ptr<DB::IColumn> const&, DB::WriteBuffer&, unsigned long, unsigned long)+0x21d) [0x46f949d]
5. /usr/bin/clickhouse-server(DB::NativeBlockOutputStream::write(DB::Block const&)+0x1210) [0x46fa930]
6. /usr/bin/clickhouse-server(DB::TCPHandler::sendData(DB::Block const&)+0x41) [0x2d7d9b1]
7. /usr/bin/clickhouse-server(DB::TCPHandler::processOrdinaryQuery()+0x495) [0x2d7e085]
8. /usr/bin/clickhouse-server(DB::TCPHandler::runImpl()+0x608) [0x2d81668]
9. /usr/bin/clickhouse-server(DB::TCPHandler::run()+0x2b) [0x2d822db]
10. /usr/bin/clickhouse-server(Poco::Net::TCPServerConnection::start()+0xf) [0x5839b4f]
11. /usr/bin/clickhouse-server(Poco::Net::TCPServerDispatcher::run()+0x16a) [0x5839f2a]
12. /usr/bin/clickhouse-server(Poco::PooledThread::run()+0x77) [0x58dbd47]
13. /usr/bin/clickhouse-server(Poco::ThreadImpl::runnableEntry(void*)+0x38) [0x58d7c08]
14. /usr/bin/clickhouse-server() [0x92cc1af]
15. /lib/x86_64-linux-gnu/libpthread.so.0(+0x76db) [0x7fd38e65a6db]
16. /lib/x86_64-linux-gnu/libc.so.6(clone+0x3f) [0x7fd38dde188f]
```

In either of these situations, I'd expect there to be an error of some sort if agreed to not handle it gracefully as NULL (I can see both sides), but I would not expect a segfault with the server crashing.