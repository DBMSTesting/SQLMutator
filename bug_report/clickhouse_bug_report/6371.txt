ID: 6371
Title: Quantile/median with nullable Decimal128 causes segfault
Description:
Reproduce
---

Version 19.13.1.1 from GitHub repo

```sql
select arrayReduce('median', [toDecimal128OrNull('1', 2)])
```

These cause segfault too:

```sql
select arrayReduce('quantile(0.2)', [toDecimal128OrNull('1', 2)])
select arrayReduce('medianExact', [toDecimal128OrNull('1', 2)])
```

These work well:

```sql
select arrayReduce('median', [toDecimal32OrNull('1', 2)])
select arrayReduce('median', [toDecimal64OrNull('1', 2)])
select arrayReduce('median', [toDecimal128OrZero('1', 2)])
select arrayReduce('sum', [toDecimal128OrNull('1', 2)])
```

Debug Info
---

```
<Error> BaseDaemon: (version 19.13.1.1) (from thread 40) Received signal Segmentation fault (11).
<Error> BaseDaemon: Address: NULL pointer. Access: read. Unknown si_code.
<Error> BaseDaemon: #3 0x64937f8 ReservoirSampler<DB::Decimal<__int128>, (ReservoirSamplerOnEmpty::Enum)1, std::__1::less<DB::Decimal<__int128> > >::insert(DB::Decimal<__int128> const&)
#4 0x64936fa DB::AggregateFunctionQuantile<DB::Decimal<__int128>, DB::QuantileReservoirSampler<DB::Decimal<__int128> >, DB::NameQuantile, false, void, false>::add(char*, DB::IColumn const**, unsigned long, DB::Arena*) const
#5 0x646954b DB::AggregateFunctionNullUnary<true>::add(char*, DB::IColumn const**, unsigned long, DB::Arena*) const
#6 0x5900c2b DB::FunctionArrayReduce::executeImpl(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long)
#7 0x718a729 DB::PreparedFunctionImpl::defaultImplementationForConstantArguments(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long, bool)
#8 0x718b8c9 DB::PreparedFunctionImpl::execute(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long, bool)
#9 0x73a57bd DB::ExpressionAction::prepare(DB::Block&, DB::Settings const&)
#10 0x73ace27 DB::ExpressionActions::addImpl(DB::ExpressionAction, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&)
#11 0x73acb13 DB::ExpressionActions::add(DB::ExpressionAction const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&)
#12 0x74cb044 DB::ScopeStack::addAction(DB::ExpressionAction const&)
#13 0x74cd954 DB::ActionsVisitor::visit(std::__1::shared_ptr<DB::IAST> const&)
#14 0x74cbef5 DB::ActionsVisitor::visit(std::__1::shared_ptr<DB::IAST> const&)
#15 0x73bfbb0 DB::ExpressionAnalyzer::getRootActions(std::__1::shared_ptr<DB::IAST> const&, bool, std::__1::shared_ptr<DB::ExpressionActions>&, bool)
#16 0x73c884b DB::ExpressionAnalyzer::appendSelect(DB::ExpressionActionsChain&, bool)
#17 0x6c6bc95 DB::InterpreterSelectQuery::analyzeExpressions(DB::QueryProcessingStage::Enum, bool, std::__1::shared_ptr<DB::FilterInfo> const&)
#18 0x6c7bfd1 void DB::InterpreterSelectQuery::executeImpl<DB::InterpreterSelectQuery::Pipeline>(DB::InterpreterSelectQuery::Pipeline&, std::__1::shared_ptr<DB::IBlockInputStream> const&, bool)
#19 0x6c68497 DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)
#20 0x6c673aa DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)
#21 0x6ca90f2 DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)
#22 0x6c59a1f DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, DB::Context&, DB::QueryProcessingStage::Enum)
#23 0x6db6abc DB::executeQueryImpl(char const*, char const*, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool)
#24 0x6db64c9 DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool)
#25 0x3874dc1 DB::TCPHandler::runImpl()
#26 0x387db8c DB::TCPHandler::run()
#27 0x781620c Poco::Net::TCPServerConnection::start()
#28 0x78166b6 Poco::Net::TCPServerDispatcher::run()
#29 0x7e47fea Poco::PooledThread::run()
#30 0x7e45c1b Poco::ThreadImpl::runnableEntry(void*)
#31 0x7e4746b void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void* (*)(void*), Poco::ThreadImpl*> >(void*)
```