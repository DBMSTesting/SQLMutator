ID: 74326
Title: Insert with Dynamic type SEGV
Description:
**Describe the bug**
Very easy to reproduce.

**How to reproduce**
Run Fiddle: https://fiddle.clickhouse.com/626de574-85f5-47d7-958f-5170ac0303ba

From Debug build:
```
Logical error: 'Bad cast from type DB::DataTypeTuple to DB::DataTypeArray'.
Stack trace (when copying this message, always include the lines below):

0. contrib/llvm-project/libcxx/include/__exception/exception.h:106: Poco::Exception::Exception(String const&, int) @ 0x000000003b987d51
1. src/Common/Exception.cpp:105: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000001ee22aa0
2. src/Common/Exception.h:105: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000ef8560b
3. src/Common/Exception.h:123: DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000ef8931f
4. src/Common/assert_cast.h:47: DB::DataTypeArray const& assert_cast<DB::DataTypeArray const&, DB::IDataType const&>(DB::IDataType const&) @ 0x00000000109cdac8
5. src/Processors/Formats/Impl/ConstantExpressionTemplate.cpp:564: DB::ConstantExpressionTemplate::parseLiteralAndAssertType(DB::ReadBuffer&, DB::TokenIterator const&, DB::IDataType const*, unsigned long, DB::Settings const&) @ 0x0000000033496b0c
6. src/Processors/Formats/Impl/ConstantExpressionTemplate.cpp:511: DB::ConstantExpressionTemplate::tryParseExpression(DB::ReadBuffer&, DB::TokenIterator const&, DB::FormatSettings const&, unsigned long&, DB::Settings const&) @ 0x0000000033495e68
7. src/Processors/Formats/Impl/ConstantExpressionTemplate.cpp:465: DB::ConstantExpressionTemplate::parseExpression(DB::ReadBuffer&, DB::TokenIterator const&, DB::FormatSettings const&, DB::Settings const&) @ 0x0000000033495428
8. src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:263: DB::ValuesBlockInputFormat::tryParseExpressionUsingTemplate(COW<DB::IColumn>::mutable_ptr<DB::IColumn>&, unsigned long) @ 0x0000000033484cde
9. src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:240: DB::ValuesBlockInputFormat::readRow(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>&, unsigned long) @ 0x00000000334823ac
10. src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:129: DB::ValuesBlockInputFormat::read() @ 0x0000000033480911
11. src/Processors/Formats/IInputFormat.cpp:19: DB::IInputFormat::generate() @ 0x0000000032f0a506
12. src/Processors/ISource.cpp:139: DB::ISource::tryGenerate() @ 0x0000000032eb5dba
13. src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x0000000032eb53bf
14. src/Processors/Executors/ExecutionThreadContext.cpp:49: DB::ExecutionThreadContext::executeTask() @ 0x0000000032ef39ae
15. src/Processors/Executors/PipelineExecutor.cpp:290: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000032ed819d
16. src/Processors/Executors/PipelineExecutor.cpp:256: DB::PipelineExecutor::executeSingleThread(unsigned long) @ 0x0000000032ed8b2e
17. src/Processors/Executors/PipelineExecutor.cpp:455: DB::PipelineExecutor::executeImpl(unsigned long, bool) @ 0x0000000032ed4fbb
18. src/Processors/Executors/PipelineExecutor.cpp:127: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x0000000032ed4337
19. src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:83: void std::__function::__policy_invoker<void ()>::__call_impl[abi:se180100]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000032efb7e4
20. contrib/llvm-project/libcxx/include/__functional/function.h:714: ? @ 0x000000001efe2921
21. contrib/llvm-project/libcxx/include/__type_traits/invoke.h:312: void* std::__thread_proxy[abi:se180100]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000001efefbd0
22. asan_thread_start(void*) @ 0x000000000ef3695b
23. ? @ 0x00007ffff7ca1e2e
24. ? @ 0x00007ffff7d33a4c
```