ID: 68749
Title: Same-named, nested CTEs with the production analyzer enabled error with `UNKNOWN_TABLE`
Description:
ClickHouse version: v24.8.2.3

**Describe what's wrong**

With the new analyzer, ClickHouse is unable to execute a query where an nested CTE uses a CTE with the same name as an outer CTE. For example, this query fails with `UNKNOWN_TABLE`:

```sql
with query_1 as (
    with shared_data as (
        select 1 as value
    ), shared_data_2 as (
        select * from shared_data
    )
    select * from shared_data_2
), shared_data as (
    select * from query_1
)
select * from shared_data s -- raises UNKNOWN_TABLE
```

If I disable the new analyzer with `allow_experimental_analyzer=0`, the query returns what I expect and doesn't error.

Link to [play.clickhouse.com](https://play.clickhouse.com/play?user=play#d2l0aCBxdWVyeV8xIGFzICgKICAgIHdpdGggc2hhcmVkX2RhdGEgYXMgKAogICAgICAgIHNlbGVjdCAxIGFzIHZhbHVlCiAgICApLCBzaGFyZWRfZGF0YV8yIGFzICgKICAgICAgICBzZWxlY3QgKiBmcm9tIHNoYXJlZF9kYXRhCiAgICApCiAgICBzZWxlY3QgKiBmcm9tIHNoYXJlZF9kYXRhXzIKKSwgc2hhcmVkX2RhdGEgYXMgKAogICAgc2VsZWN0ICogZnJvbSBxdWVyeV8xCikKc2VsZWN0ICogZnJvbSBzaGFyZWRfZGF0YSBzIAo=) (fiddle isn't working right now)

**Does it reproduce on the most recent release?**

Yes

**How to reproduce**

* Run the above query; see error

**Expected behavior**

I would expect that the query execute and follow the behavior of the old analyzer.

**Error message and/or stacktrace**

```
0. Poco::Exception::Exception(String const&, int) @ 0x000000010d4b0e60
1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000001073bb0e4
2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000102c48a7c
3. DB::Exception::Exception<String const&, String>(int, FormatStringHelperImpl<std::type_identity<String const&>::type, std::type_identity<String>::type>, String const&, String&&) @ 0x00000001031b5380
4. DB::QueryAnalyzer::initializeQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010a74eb24
5. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010a729644
6. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010a72e3b0
7. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000010a74f834
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010a729664
9. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010a72e3b0
10. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000010a74f834
11. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010a729664
12. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010a72e3b0
13. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000010a74f834
14. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010a729664
15. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010a728c28
16. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010a728540
17. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010a6a393c
18. DB::(anonymous namespace)::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ac3a080
19. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ac382f8
20. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ac3b884
21. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010abdb13c
22. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000010af12004
23. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000010af0f754
24. DB::LocalConnection::sendQuery(DB::ConnectionTimeouts const&, String const&, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>> const&, String const&, unsigned long long, DB::Settings const*, DB::ClientInfo const*, bool, std::function<void (DB::Progress const&)>) @ 0x000000010be4e9f8
25. DB::ClientBase::processOrdinaryQuery(String const&, std::shared_ptr<DB::IAST>) @ 0x000000010be0df70
26. DB::ClientBase::processParsedSingleQuery(String const&, String const&, std::shared_ptr<DB::IAST>, std::optional<bool>, bool) @ 0x000000010be0cc04
27. DB::ClientBase::executeMultiQuery(String const&) @ 0x000000010be14c80
28. DB::ClientBase::processQueryText(String const&) @ 0x000000010be15978
29. DB::ClientBase::runInteractive() @ 0x000000010be178d0
30. DB::LocalServer::main(std::vector<String, std::allocator<String>> const&) @ 0x0000000107693790
31. Poco::Util::Application::run() @ 0x000000010d58825c


Elapsed: 0.001 sec.

Received exception:
Code: 60. DB::Exception: Unknown table expression identifier 'shared_data' in scope shared_data_2 AS (SELECT * FROM shared_data). (UNKNOWN_TABLE)
```

