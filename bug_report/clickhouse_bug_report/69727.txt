ID: 69727
Title: Materialized view with intersect logical error
Description:
**Describe the bug**

Creating a materialized with an intersect call, gives a bad cast logical error.

**How to reproduce**
Run:

```sql
CREATE MATERIALIZED VIEW v0 AS (SELECT 1) INTERSECT (SELECT 1);
```

Stack trace:
```
<Fatal> : Logical error: 'Bad cast from type DB::ASTSelectIntersectExceptQuery to DB::ASTSelectWithUnionQuery'.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. contrib/llvm-project/libcxx/include/exception:141: Poco::Exception::Exception(String const&, int) @ 0x00000000371f59d1
1. src/Common/Exception.cpp:109: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000001e51136d
2. src/Common/Exception.h:110: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000e68a066
3. src/Common/Exception.h:128: DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000e68dcdb
4. src/Common/typeid_cast.h:33: _Z11typeid_castIRN2DB23ASTSelectWithUnionQueryENS0_4IASTEQsr3stdE14is_reference_vIT_EES4_RT0_ @ 0x000000002b009e6b
5. src/Common/TypePromotion.h:26: DB::isSingleSelect(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::IAST>&) @ 0x000000002df34f60
6. src/Storages/SelectQueryDescription.cpp:113: DB::isSingleSelect(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::IAST>&) @ 0x000000002df351ab
7. src/Storages/SelectQueryDescription.cpp:129: DB::SelectQueryDescription::getSelectQueryFromASTForMatView(std::shared_ptr<DB::IAST> const&, bool, std::shared_ptr<DB::Context const>) @ 0x000000002df347f1
8. src/Storages/StorageMaterializedView.cpp:126: DB::StorageMaterializedView::StorageMaterializedView(DB::StorageID const&, std::shared_ptr<DB::Context const>, DB::ASTCreateQuery const&, DB::ColumnsDescription const&, DB::LoadingStrictnessLevel, String const&) @ 0x000000002e11a9a9
9. contrib/llvm-project/libcxx/include/__memory/construct_at.h:35: std::shared_ptr<DB::StorageMaterializedView> std::allocate_shared[abi:v15007]<DB::StorageMaterializedView, std::allocator<DB::StorageMaterializedView>, DB::StorageID const&, std::shared_ptr<DB::Context>, DB::ASTCreateQuery const&, DB::ColumnsDescription const&, DB::LoadingStrictnessLevel const&, String const&, void>(std::allocator<DB::StorageMaterializedView> const&, DB::StorageID const&, std::shared_ptr<DB::Context>&&, DB::ASTCreateQuery const&, DB::ColumnsDescription const&, DB::LoadingStrictnessLevel const&, String const&) @ 0x000000002e12f86e
10. contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:962: std::shared_ptr<DB::IStorage> std::__function::__policy_invoker<std::shared_ptr<DB::IStorage> (DB::StorageFactory::Arguments const&)>::__call_impl<std::__function::__default_alloc_func<DB::registerStorageMaterializedView(DB::StorageFactory&)::$_0, std::shared_ptr<DB::IStorage> (DB::StorageFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::StorageFactory::Arguments const&) @ 0x000000002e12d2cc
11. contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x000000002df9adf8
12. src/Interpreters/InterpreterCreateQuery.cpp:1735: DB::InterpreterCreateQuery::doCreateTable(DB::ASTCreateQuery&, DB::InterpreterCreateQuery::TableProperties const&, std::unique_ptr<DB::DDLGuard, std::default_delete<DB::DDLGuard>>&, DB::LoadingStrictnessLevel) @ 0x000000002bedca1e
13. src/Interpreters/InterpreterCreateQuery.cpp:1559: DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x000000002bed093a
14. src/Interpreters/InterpreterCreateQuery.cpp:2059: DB::InterpreterCreateQuery::execute() @ 0x000000002bee5013
15. src/Interpreters/executeQuery.cpp:1254: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000002c77385a
16. src/Interpreters/executeQuery.cpp:1420: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000002c76c809
17. src/Server/TCPHandler.cpp:564: DB::TCPHandler::runImpl() @ 0x000000002f708b45
18. src/Server/TCPHandler.cpp:2499: DB::TCPHandler::run() @ 0x000000002f739609
19. base/poco/Net/src/TCPServerConnection.cpp:43: Poco::Net::TCPServerConnection::start() @ 0x00000000373b266f
20. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x00000000373b3277
21. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x00000000372d474b
22. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000372cf408
23. asan_thread_start(void*) @ 0x000000000e63ebcd
24. ? @ 0x00007ffff7c9ca94
25. ? @ 0x00007ffff7d29c3c
```