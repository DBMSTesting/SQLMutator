ID: 71858
Title: Invalid number of rows in Chunk column with WITH FILL INTERPOLATE
Description:
**Does it reproduce on the most recent release?**

https://fiddle.clickhouse.com/3724e842-f782-4e2e-86ba-925799da9f4a

**How to reproduce**

```
SELECT toDateTime('2019-01-01 00:00:00') AS timestamp, '13110425-91ad-4300-bb93-8853228d2634' AS station_id, '13110425-91ad-4300-bb93-8853228d2634' AS owner_id, '7a6cbd4b-5526-444e-87c3-1ea827b7a3a8' AS point_id, 1 AS value order by timestamp asc WITH FILL FROM toDateTime('2019-01-01 00:00:00') TO toDateTime('2019-02-01 00:00:00') + toIntervalMinute(5) STEP toIntervalSecond(300) INTERPOLATE (station_id, owner_id)
```

**Error message and/or stacktrace**

```
Code: 49. DB::Exception: Invalid number of rows in Chunk column String position 1: expected 1, got 2. (LOGICAL_ERROR), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000d0fa5bb
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000007994f0c
2. DB::Exception::Exception<String, String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&, String&&) @ 0x0000000007a465eb
3. DB::Chunk::checkNumRowsIsConsistent() @ 0x0000000012fb48b2
4. DB::Chunk::setColumns(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>, unsigned long) @ 0x0000000012fb5021
5. DB::FillingTransform::transform(DB::Chunk&) @ 0x00000000133a7f6f
6. DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0x000000000eb01030
7. DB::ISimpleTransform::work() @ 0x0000000012fc00b2
8. DB::ExecutionThreadContext::executeTask() @ 0x0000000012fdc847
9. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000012fd1130
10. DB::PipelineExecutor::execute(unsigned long, bool) @ 0x0000000012fd05c2
11. DB::CompletedPipelineExecutor::execute() @ 0x0000000012fceed2
12. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>) @ 0x0000000011ca6cef
13. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000012eec7f0
14. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x0000000012ef1ae5
15. DB::HTTPServerConnection::run() @ 0x0000000012f713c3
16. DB::TCPProtocolStackHandler::run() @ 0x000000000d2f939c
17. Poco::Net::TCPServerConnection::start() @ 0x000000001584b827
18. Poco::Net::TCPServerDispatcher::run() @ 0x000000001584bcb9
19. Poco::PooledThread::run() @ 0x00000000158189c1
20. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015816f7d
21. ? @ 0x00007992e7385ac3
22. ? @ 0x00007992e7417850
 (version 24.6.1.4609 (official build))
```