ID: 70748
Title: Hypothesis index mark count mismatch
Description:
**Describe the bug**

Using a Hypothesis index on a join triggers a logical error.

**How to reproduce**
Run:
https://fiddle.clickhouse.com/6e711a9b-eb8d-4880-9b4d-c9bdf0dfd140

```
<Fatal> : Logical error: 'right_mark <= marks_count'.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. src/Common/StackTrace.cpp:380: StackTrace::tryCapture() @ 0x000000001da326d7
1. src/Common/Exception.cpp:53: DB::abortOnFailedAssertion(String const&) @ 0x000000001d9bfdce
2. src/Storages/MergeTree/MergeTreeReaderStream.cpp:213: DB::MergeTreeReaderStreamSingleColumn::getRightOffset(unsigned long) @ 0x000000002f2d9e4c
3. src/Storages/MergeTree/MergeTreeReaderStream.cpp:305: DB::MergeTreeReaderStreamSingleColumn::estimateMarkRangeBytes(DB::MarkRanges const&) @ 0x000000002f2da2ce
4. src/Storages/MergeTree/MergeTreeReaderStream.cpp:57: DB::MergeTreeReaderStream::init() @ 0x000000002f2d5bab
5. src/Storages/MergeTree/MergeTreeReaderStream.cpp:171: DB::MergeTreeReaderStream::adjustRightMark(unsigned long) @ 0x000000002f2d9552
6. src/Storages/MergeTree/MergeTreeIndexReader.cpp:73: DB::MergeTreeIndexReader::MergeTreeIndexReader(std::shared_ptr<DB::IMergeTreeIndex const>, std::shared_ptr<DB::IMergeTreeDataPart const>, unsigned long, DB::MarkRanges const&, DB::MarkCache*, DB::UncompressedCache*, DB::MergeTreeReaderSettings) @ 0x000000002f18922a
7. contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:714: std::__unique_if<DB::MergeTreeIndexReader>::__unique_single std::make_unique[abi:v15007]<DB::MergeTreeIndexReader, std::shared_ptr<DB::IMergeTreeIndex const> const&, std::shared_ptr<DB::IMergeTreeDataPart const>&, unsigned long&, DB::MarkRanges const&, DB::MarkCache*&, DB::UncompressedCache*&, DB::MergeTreeReaderSettings const&>(std::shared_ptr<DB::IMergeTreeIndex const> const&, std::shared_ptr<DB::IMergeTreeDataPart const>&, unsigned long&, DB::MarkRanges const&, DB::MarkCache*&, DB::UncompressedCache*&, DB::MergeTreeReaderSettings const&) @ 0x000000002f136c6c
8. src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp:1529: DB::MergeTreeDataSelectExecutor::filterMarksUsingMergedIndex(std::vector<std::shared_ptr<DB::IMergeTreeIndex const>, std::allocator<std::shared_ptr<DB::IMergeTreeIndex const>>>, std::shared_ptr<DB::IMergeTreeIndexMergedCondition>, std::shared_ptr<DB::IMergeTreeDataPart const>, DB::MarkRanges const&, DB::Settings const&, DB::MergeTreeReaderSettings const&, DB::MarkCache*, DB::UncompressedCache*, std::shared_ptr<Poco::Logger>) @ 0x000000002f130175
9. src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp:766: DB::MergeTreeDataSelectExecutor::filterPartsByPrimaryKeyAndSkipIndexes(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>&&, std::shared_ptr<DB::StorageInMemoryMetadata const>, std::shared_ptr<DB::Context const> const&, DB::KeyCondition const&, std::optional<DB::KeyCondition> const&, DB::UsefulSkipIndexes const&, DB::MergeTreeReaderSettings const&, std::shared_ptr<Poco::Logger>, unsigned long, std::vector<DB::ReadFromMergeTree::IndexStat, std::allocator<DB::ReadFromMergeTree::IndexStat>>&, bool, bool)::$_0::operator()(unsigned long) const @ 0x000000002f128ebe
10. src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp:794: DB::MergeTreeDataSelectExecutor::filterPartsByPrimaryKeyAndSkipIndexes(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>&&, std::shared_ptr<DB::StorageInMemoryMetadata const>, std::shared_ptr<DB::Context const> const&, DB::KeyCondition const&, std::optional<DB::KeyCondition> const&, DB::UsefulSkipIndexes const&, DB::MergeTreeReaderSettings const&, std::shared_ptr<Poco::Logger>, unsigned long, std::vector<DB::ReadFromMergeTree::IndexStat, std::allocator<DB::ReadFromMergeTree::IndexStat>>&, bool, bool) @ 0x000000002f1239ec
11. src/Processors/QueryPlan/ReadFromMergeTree.cpp:1740: DB::ReadFromMergeTree::selectRangesToRead(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>, std::shared_ptr<DB::MergeTreeData::IMutationsSnapshot const>, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo const&, std::shared_ptr<DB::Context const>, unsigned long, std::shared_ptr<std::unordered_map<String, long, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, long>>>>, DB::MergeTreeData const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<Poco::Logger>, std::optional<DB::ReadFromMergeTree::Indexes>&, bool) @ 0x00000000307ce291
12. src/Processors/QueryPlan/ReadFromMergeTree.cpp:1454: DB::ReadFromMergeTree::selectRangesToRead(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>, bool) const @ 0x00000000307cc142
13. src/Processors/QueryPlan/ReadFromMergeTree.cpp:1449: DB::ReadFromMergeTree::getAnalysisResult() const @ 0x00000000307d8f4c
14. src/Processors/QueryPlan/ReadFromMergeTree.cpp:2030: DB::ReadFromMergeTree::initializePipeline(DB::QueryPipelineBuilder&, DB::BuildQueryPipelineSettings const&) @ 0x00000000307db1cd
15. src/Processors/QueryPlan/ISourceStep.cpp:20: DB::ISourceStep::updatePipeline(std::vector<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>, std::allocator<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>>>, DB::BuildQueryPipelineSettings const&) @ 0x0000000030754b7c
16. src/Processors/QueryPlan/QueryPlan.cpp:188: DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x000000003079cabb
17. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:252: DB::InterpreterSelectQueryAnalyzer::buildQueryPipeline() @ 0x000000002c56e244
18. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:221: DB::InterpreterSelectQueryAnalyzer::execute() @ 0x000000002c56dae8
19. src/Interpreters/executeQuery.cpp:1349: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000002cb95d19
20. src/Interpreters/executeQuery.cpp:1516: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000002cb8e029
21. src/Server/TCPHandler.cpp:587: DB::TCPHandler::runImpl() @ 0x000000002fb513c3
22. src/Server/TCPHandler.cpp:2519: DB::TCPHandler::run() @ 0x000000002fb80d09
23. base/poco/Net/src/TCPServerConnection.cpp:43: Poco::Net::TCPServerConnection::start() @ 0x000000003786726f
24. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x0000000037867e5a
25. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x0000000037789a6b
26. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000037784728
27. asan_thread_start(void*) @ 0x000000000e82695b
28. ? @ 0x00007ffff7ca1e2e
29. ? @ 0x00007ffff7d33a4c
```