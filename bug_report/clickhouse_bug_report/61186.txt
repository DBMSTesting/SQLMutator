ID: 61186
Title: Fatal error: groupArraySortedMerge (Attempt to read after eof)
Description:
```sql
SELECT groupArraySortedMerge(10)(CAST(unhex('0A01003C79A557B3C43400C4865AA84C3B4B01000650BC18F7DE0B00FAAF43E708213401008ED706EA0A9F13007228F915F5602C0100C692CA8FB81405003A6D357047EB1A01008416B7C3239EE3FF7BE9483CDC61DC01003E133A7C081AF5FFC1ECC583F7E5EA01000000000000000000000000000000000100C4865AA84C3BCBFF3B79A557B3C4B4010024C46EF500F1ECFFDB3B910AFF0ED301005E2FC14EBAEAE5FFA1D03EB14515DA'), 'AggregateFunction(groupArraySorted(10), Decimal(38, 38))'))
```

Output:
```
[9eb3d133da8d] 2024.03.11 18:54:56.030827 [ 721 ] <Fatal> BaseDaemon: ########################################
[9eb3d133da8d] 2024.03.11 18:54:56.030879 [ 721 ] <Fatal> BaseDaemon: (version 24.2.1.2248 (official build), build id: 11BFAC593A3DFF10D15AED5011579750AA6F6F78, git hash: 891689a41506d00aa169548f5b4a8774351242c4) (from thread 715) (query_id: efbd5d85-c191-4a1a-bb91-cef90294e2b8) (query: SELECT groupArraySortedMerge(10)(CAST(unhex('0A01003C79A557B3C43400C4865AA84C3B4B01000650BC18F7DE0B00FAAF43E708213401008ED706EA0A9F13007228F915F5602C0100C692CA8FB81405003A6D357047EB1A01008416B7C3239EE3FF7BE9483CDC61DC01003E133A7C081AF5FFC1ECC583F7E5EA01000000000000000000000000000000000100C4865AA84C3BCBFF3B79A557B3C4B4010024C46EF500F1ECFFDB3B910AFF0ED301005E2FC14EBAEAE5FFA1D03EB14515DA'), 'AggregateFunction(groupArraySorted(10), Decimal(38, 38))'))) Received signal Segmentation fault (11)
[9eb3d133da8d] 2024.03.11 18:54:56.030913 [ 721 ] <Fatal> BaseDaemon: Address: 0x3c06077e8. Access: read. Address not mapped to object.
[9eb3d133da8d] 2024.03.11 18:54:56.030984 [ 721 ] <Fatal> BaseDaemon: Stack trace: 0x0000000007917db5 0x000000000d72e3ba 0x000000000efbbb3f 0x00000000112ed5f8 0x00000000112ecd5b 0x00000000133e50be 0x0000000013031afa 0x0000000013028550 0x0000000013029638 0x000000000cff84e1 0x000000000cffbd1a 0x000000000cffab1e 0x00007f63f0ca6609 0x00007f63f0bcb353
[9eb3d133da8d] 2024.03.11 18:54:56.032039 [ 721 ] <Fatal> BaseDaemon: 2. auto DB::Field::dispatch<DB::Field::create(DB::Field const&)::'lambda'(auto&), DB::Field const&>(auto&&, DB::Field const&) @ 0x0000000007917db5
[9eb3d133da8d] 2024.03.11 18:54:56.033292 [ 721 ] <Fatal> BaseDaemon: 3. DB::(anonymous namespace)::GroupArraySorted<DB::(anonymous namespace)::GroupArraySortedData<DB::Field, (DB::(anonymous namespace)::GroupArraySortedStrategy)0>, DB::Field>::merge(char*, char const*, DB::Arena*) const @ 0x000000000d72e3ba
[9eb3d133da8d] 2024.03.11 18:54:56.034153 [ 721 ] <Fatal> BaseDaemon: 4. DB::IAggregateFunctionHelper<DB::AggregateFunctionMerge>::addBatchSinglePlace(unsigned long, unsigned long, char*, DB::IColumn const**, DB::Arena*, long) const @ 0x000000000efbbb3f
[9eb3d133da8d] 2024.03.11 18:54:56.035186 [ 721 ] <Fatal> BaseDaemon: 5. void DB::Aggregator::executeWithoutKeyImpl<false>(char*&, unsigned long, unsigned long, DB::Aggregator::AggregateFunctionInstruction*, DB::Arena*) const @ 0x00000000112ed5f8
[9eb3d133da8d] 2024.03.11 18:54:56.035885 [ 721 ] <Fatal> BaseDaemon: 6. DB::Aggregator::executeOnBlock(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>, unsigned long, unsigned long, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*>>&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*>>, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*>>>>&, bool&) const @ 0x00000000112ecd5b
[9eb3d133da8d] 2024.03.11 18:54:56.036860 [ 721 ] <Fatal> BaseDaemon: 7. DB::AggregatingTransform::work() @ 0x00000000133e50be
[9eb3d133da8d] 2024.03.11 18:54:56.036912 [ 721 ] <Fatal> BaseDaemon: 8. DB::ExecutionThreadContext::executeTask() @ 0x0000000013031afa
[9eb3d133da8d] 2024.03.11 18:54:56.037975 [ 721 ] <Fatal> BaseDaemon: 9. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000013028550
[9eb3d133da8d] 2024.03.11 18:54:56.039567 [ 721 ] <Fatal> BaseDaemon: 10. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000013029638
[9eb3d133da8d] 2024.03.11 18:54:56.040558 [ 721 ] <Fatal> BaseDaemon: 11. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>) @ 0x000000000cff84e1
[9eb3d133da8d] 2024.03.11 18:54:56.040632 [ 721 ] <Fatal> BaseDaemon: 12. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000cffbd1a
[9eb3d133da8d] 2024.03.11 18:54:56.041547 [ 721 ] <Fatal> BaseDaemon: 13. void* std::__thread_proxy[abi:v15000]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000cffab1e
[9eb3d133da8d] 2024.03.11 18:54:56.041577 [ 721 ] <Fatal> BaseDaemon: 14. ? @ 0x00007f63f0ca6609
[9eb3d133da8d] 2024.03.11 18:54:56.041605 [ 721 ] <Fatal> BaseDaemon: 15. ? @ 0x00007f63f0bcb353
[9eb3d133da8d] 2024.03.11 18:54:56.162524 [ 721 ] <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 73D5AB9D584A93C8A10ADE2F95BE2F8F)
[9eb3d133da8d] 2024.03.11 18:54:56.162762 [ 721 ] <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues
[9eb3d133da8d] 2024.03.11 18:54:56.162876 [ 721 ] <Fatal> BaseDaemon: Changed settings: output_format_pretty_color = 0, output_format_pretty_grid_charset = 'ASCII'
```

