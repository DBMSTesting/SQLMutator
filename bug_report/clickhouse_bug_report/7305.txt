ID: 7305
Title: Buffer table cannot flush to target table
Description:
In a 3 nodes cluster, I have a non sharded replicated table (**target_table**).
Inserts to this table works as expected.

If I create a buffer table (**buffer_table**) that has to flush to **target_table**, when I insert data, I can query it but it never flushes data.

The logs say:
```
2019.10.14 11:27:38.168062 [ 58 ] {} <Error> void DB::StorageBuffer::flushThread(): Code: 164, e.displayText() = DB::Exception: Cannot insert into table in readonly mode, Stack trace:

0. 0x5590ca5e4640 StackTrace::StackTrace() /usr/bin/clickhouse
1. 0x5590ca5e4415 DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) /usr/bin/clickhouse
2. 0x5590ca372845 ? /usr/bin/clickhouse
3. 0x5590cd933a29 DB::InterpreterInsertQuery::execute() /usr/bin/clickhouse
4. 0x5590ce0f8a27 DB::StorageBuffer::writeBlockToDestination(DB::Block const&, std::shared_ptr<DB::IStorage>) /usr/bin/clickhouse
5. 0x5590ce0fa375 DB::StorageBuffer::flushBuffer(DB::StorageBuffer::Buffer&, bool, bool) /usr/bin/clickhouse
6. 0x5590ce0fa5d2 DB::StorageBuffer::flushThread() /usr/bin/clickhouse
7. 0x5590ce0fe77b ThreadFromGlobalPool::ThreadFromGlobalPool<void (DB::StorageBuffer::*)(), DB::StorageBuffer*>(void (DB::StorageBuffer::*&&)(), DB::StorageBuffer*&&)::{lambda()#1}::operator()() const /usr/bin/clickhouse
8. 0x5590ca62d61c ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>) /usr/bin/clickhouse
9. 0x5590d02f4eb0 ? /usr/bin/clickhouse
10. 0x7febcb76c6db start_thread /lib/x86_64-linux-gnu/libpthread-2.27.so
11. 0x7febcb08988f clone /build/glibc-OTsEL5/glibc-2.27/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:97
 (version 19.15.3.6 (official build))
```

Querying with `select database, table, is_readonly from system.replicas` says that no table is in readonly mode.

What am I missing?

Just to add more info:

- If I query buffer_table, I see all the data inserted to **buffer_table** and **target_table** correctly.
- **target_table** and **buffer_table** have been created in all nodes of cluster. 

