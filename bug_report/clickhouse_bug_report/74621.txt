ID: 74621
Title: Logical Error: Block structure mismatch in function connect between ConvertingTransform and StorageFileSink stream
Description:
### Describe the bug

This is not related to https://github.com/ClickHouse/ClickHouse/issues/71217 I think. The logical error comes from the client.

### How to reproduce

Run:

```sql
CREATE TABLE t0 (c0 Int) ENGINE = Memory;
INSERT INTO TABLE t0 (c0) VALUES (1);
INSERT INTO TABLE FUNCTION file('<path to file>', 'CSV') SELECT (SELECT t0.c0 FROM t0) FROM t0;
```

### Error message and/or stacktrace

Stack trace:

```
Logical error: 'Received from localhost:9000. DB::Exception: Block structure mismatch in function connect between ConvertingTransform and StorageFileSink stream: different types:
_subquery_1 Nullable(Int32) Nullable(size = 0, Int32(size = 0), UInt8(size = 0))
_subquery_1 Int32 Int32(size = 0). Stack trace:

0. src/Common/Exception.cpp:107: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dce4c7b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000008b7efcc
2. src/Common/Exception.h:123: DB::Exception::Exception<std::basic_string_view<char, std::char_traits<char>>&, String, String>(int, FormatStringHelperImpl<std::type_identity<std::basic_string_view<char, std::char_traits<char>>&>::type, std::type_identity<String>::type, std::type_identity<String>::type>, std::basic_string_view<char, std::char_traits<char>>&, String&&, String&&) @ 0x00000000117d1bab
3. src/Core/Block.cpp:37: void DB::checkColumnStructure<void>(DB::ColumnWithTypeAndName const&, DB::ColumnWithTypeAndName const&, std::basic_string_view<char, std::char_traits<char>>, bool, int) (.llvm.15651087548051592428) @ 0x00000000117ca46a
4. src/Core/Block.cpp:129: void DB::checkBlockStructure<void>(DB::Block const&, DB::Block const&, std::basic_string_view<char, std::char_traits<char>>, bool) (.llvm.15651087548051592428) @ 0x00000000117d00f3
5. src/Core/Block.cpp:779: DB::connect(DB::OutputPort&, DB::InputPort&, bool) @ 0x0000000013e7edc3
6. src/QueryPipeline/Pipe.cpp:668: DB::Pipe::addChains(std::vector<DB::Chain, std::allocator<DB::Chain>>) @ 0x0000000011a2b1e8
7. src/QueryPipeline/QueryPipelineBuilder.cpp:154: DB::InterpreterInsertQuery::buildInsertSelectPipeline(DB::ASTInsertQuery&, std::shared_ptr<DB::IStorage>) @ 0x0000000012749b90
8. src/Interpreters/InterpreterInsertQuery.cpp:850: DB::InterpreterInsertQuery::execute() @ 0x000000001274b9ff
9. src/Interpreters/executeQuery.cpp:1441: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x0000000012b225b7
10. src/Interpreters/executeQuery.cpp:1608: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x0000000012b1d4fc
11. src/Server/TCPHandler.cpp:658: DB::TCPHandler::runImpl() @ 0x0000000013dedc6c
12. src/Server/TCPHandler.cpp:2625: DB::TCPHandler::run() @ 0x0000000013e0b559
13. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x0000000017393d47
14. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x0000000017394199
15. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x00000000173606fb
16. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001735ebdd
17. ? @ 0x00007981cdca1e2e
18. ? @ 0x00007981cdd33a4
```