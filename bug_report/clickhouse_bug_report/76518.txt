ID: 76518
Title: INSERT SELECT fails during schema inferece if the same identifier is used in projection list
Description:
### Company or project name

_No response_

### Describe what's wrong

`INSERT SELECT` fails if it projects the same identifier several times in the `SELECT` part.

**Note:** It doesn't work with `enable_analyzer` set to `0` and `1`. I added `analyzer` tag for visibility.

### Does it reproduce on the most recent release?

Yes

### How to reproduce

```sql
CREATE TABLE IF NOT EXISTS http (
    x Int64,
    y Int64
) ENGINE = MergeTree() ORDER BY ();
```

```sql
INSERT INTO http (
    x,
    y
) SELECT 
    size as `x`,
    size as `y`
FROM s3Cluster(...)
LIMIT 1;
```


### Expected behavior

`INSERT SELECT` succeeds.

### Error message and/or stacktrace


Exception:
```
DB::Exception: Cannot add column size: column with this name already exists. (ILLEGAL_COLUMN) (version 25.1.5.31 (official build))
```

Stacktrace:
```
0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dd109bb
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000008bae62c
2. DB::Exception::Exception<String&>(int, FormatStringHelperImpl<std::type_identity<String&>::type>, String&) @ 0x0000000008bc5acb
3. DB::ColumnsDescription::add(DB::ColumnDescription, String const&, bool, bool) @ 0x0000000013101ab9
4. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000011efb12d
5. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000011f281ba
6. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000011eec246
7. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000011eea6ac
8. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000011ee9f80
9. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x00000000125a6d76
10. DB::(anonymous namespace)::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.1070560979882664992) @ 0x0000000012806d9d
11. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000012804f7c
12. DB::InterpreterInsertQuery::buildInsertSelectPipeline(DB::ASTInsertQuery&, std::shared_ptr<DB::IStorage>) @ 0x00000000127ab5c8
13. DB::InterpreterInsertQuery::execute() @ 0x00000000127ae67f
14. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x0000000012b95cb4
15. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x0000000012b90c9c
16. DB::TCPHandler::runImpl() @ 0x0000000013e86cac
17. DB::TCPHandler::run() @ 0x0000000013ea4839
18. Poco::Net::TCPServerConnection::start() @ 0x0000000017461687
19. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017461ad9
20. Poco::PooledThread::run() @ 0x000000001742e05b
21. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001742c53d
22. ? @ 0x0000776ffd8cfac3
23. ? @ 0x0000776ffd960a04
```

### Additional context

Workaround:

```sql
INSERT INTO http (
    x,
    y
) SELECT 
    size as `x`,
    size + 0 as `y`
FROM s3Cluster(...)
LIMIT 1;
```