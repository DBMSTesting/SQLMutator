ID: 58016
Title: DB::Exception after upgrading to 23.10, Illegal type Tuple(UInt64, UInt8) of argument of function toUInt64 
Description:
**Describe the unexpected behaviour**
after upgrading to 23.10 version, the query below

`select * from table where (id1,id2) in (select tuple(id1,id2) from table2)`

 throws exception like
`DB::Exception: Illegal type Tuple(UInt64, UInt8) of argument of function toUInt64`

when we roll it back, it's good again.

**How to reproduce**
* Which ClickHouse server version to use

23.10 and 23.11

**Expected behavior**
The query should work as before.

**Error message and/or stacktrace**
`DB::Exception: Illegal type Tuple(UInt64, UInt8) of argument of function toUInt64. Stack trace:

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000c4fd017 in /usr/bin/clickhouse
1. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x00000000071c6b28 in /usr/bin/clickhouse
2. DB::FunctionConvert<DB::DataTypeNumber<unsigned long>, DB::NameToUInt64, DB::ToNumberMonotonicity<unsigned long>>::executeInternal(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000073186f3 in /usr/bin/clickhouse
3. DB::FunctionConvert<DB::DataTypeNumber<unsigned long>, DB::NameToUInt64, DB::ToNumberMonotonicity<unsigned long>>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000073173fa in /usr/bin/clickhouse
4. DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000071c47ae in /usr/bin/clickhouse
5. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000000f917e9e in /usr/bin/clickhouse
6. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000000f9189c2 in /usr/bin/clickhouse
7. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000000f919f29 in /usr/bin/clickhouse
8. DB::IFunctionBase::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000071c38ad in /usr/bin/clickhouse
9. COW<DB::IColumn>::immutable_ptr<DB::IColumn> std::__function::__policy_invoker<COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::__call_impl<std::__function::__default_alloc_func<DB::FunctionCast<DB::CastInternalName>::createFunctionAdaptor(std::shared_ptr<DB::IFunction>, std::shared_ptr<DB::IDataType const> const&)::'lambda'(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long), COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>>(std::__function::__policy_storage const*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) @ 0x000000000f942116 in /usr/bin/clickhouse
10. COW<DB::IColumn>::immutable_ptr<DB::IColumn> std::__function::__policy_invoker<COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::__call_impl<std::__function::__default_alloc_func<DB::FunctionCast<DB::CastInternalName>::prepareRemoveNullable(std::shared_ptr<DB::IDataType const> const&, std::shared_ptr<DB::IDataType const> const&, bool) const::'lambda'(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long), COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>>(std::__function::__policy_storage const*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) @ 0x000000000fa7fc74 in /usr/bin/clickhouse
11. DB::ExecutableFunctionCast::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000f928544 in /usr/bin/clickhouse
12. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000000f917e9e in /usr/bin/clickhouse
13. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000000f91890e in /usr/bin/clickhouse
14. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000000f919f29 in /usr/bin/clickhouse
15. DB::IFunctionBase::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000071c38ad in /usr/bin/clickhouse
16. DB::castColumn(DB::CastType, DB::ColumnWithTypeAndName const&, std::shared_ptr<DB::IDataType const> const&, DB::InternalCastFunctionCache*) (.llvm.8173381244234561852) @ 0x00000000112f13e6 in /usr/bin/clickhouse
17. DB::KeyCondition::extractAtomFromTree(DB::RPNBuilderTreeNode const&, DB::KeyCondition::RPNElement&) @ 0x0000000011c71c0b in /usr/bin/clickhouse
18. DB::RPNBuilder<DB::KeyCondition::RPNElement>::traverseTree(DB::RPNBuilderTreeNode const&) @ 0x0000000011c80678 in /usr/bin/clickhouse
19. DB::RPNBuilder<DB::KeyCondition::RPNElement>::traverseTree(DB::RPNBuilderTreeNode const&) @ 0x0000000011c807ed in /usr/bin/clickhouse
20. DB::KeyCondition::KeyCondition(std::shared_ptr<DB::ActionsDAG>, std::shared_ptr<DB::Context const>, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::ExpressionActions> const&, std::unordered_set<String, std::hash<String>, std::equal_to<String>, std::allocator<String>>, bool, bool) @ 0x0000000011c6af6d in /usr/bin/clickhouse
21. DB::buildIndexes(std::optional<DB::ReadFromMergeTree::Indexes>&, std::shared_ptr<DB::ActionsDAG>, DB::MergeTreeData const&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryInfo const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&) (.llvm.4102751748512899113) @ 0x00000000126ba433 in /usr/bin/clickhouse
22. DB::ReadFromMergeTree::applyFilters() @ 0x00000000126b9530 in /usr/bin/clickhouse
23. DB::QueryPlanOptimizations::optimizeTreeThirdPass(DB::QueryPlan&, DB::QueryPlan::Node&, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&) @ 0x000000001271dd1b in /usr/bin/clickhouse
24. DB::QueryPlan::optimize(DB::QueryPlanOptimizationSettings const&) @ 0x000000001269ed85 in /usr/bin/clickhouse
25. DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x000000001269dc6e in /usr/bin/clickhouse
26. DB::InterpreterSelectWithUnionQuery::execute() @ 0x0000000010fac0b7 in /usr/bin/clickhouse
27. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000001132db82 in /usr/bin/clickhouse
28. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000001132789a in /usr/bin/clickhouse
29. DB::TCPHandler::runImpl() @ 0x00000000122320e9 in /usr/bin/clickhouse
30. DB::TCPHandler::run() @ 0x0000000012246a79 in /usr/bin/clickhouse
31. Poco::Net::TCPServerConnection::start() @ 0x0000000014c6fc52 in /usr/bin/clickhouse
: While executing Remote. (ILLEGAL_TYPE_OF_ARGUMENT) (version 23.6.2.18 (official build))
stack_trace:                           0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e22b5f5 in /usr/bin/clickhouse
1. DB::readException(DB::ReadBuffer&, String const&, bool) @ 0x000000000e28e26f in /usr/bin/clickhouse
2. DB::Connection::receiveException() const @ 0x0000000014b85d0a in /usr/bin/clickhouse
3. DB::Connection::receivePacket() @ 0x0000000014b8e371 in /usr/bin/clickhouse
4. DB::PacketReceiver::Task::run(std::function<void (int, Poco::Timespan, DB::AsyncEventTimeoutType, String const&, unsigned int)>, std::function<void ()>) @ 0x0000000014bc2052 in /usr/bin/clickhouse
5. void boost::context::detail::fiber_entry<boost::context::detail::fiber_record<boost::context::fiber, FiberStack&, Fiber::RoutineImpl<DB::AsyncTaskExecutor::Routine>>>(boost::context::detail::transfer_t) @ 0x0000000012c72fc3 in /usr/bin/clickhouse`

**Additional context**
Add any other context about the problem here.
