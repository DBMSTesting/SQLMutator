ID: 8328
Title: Execute SQL Clickhouse service crash
Description:
Execute SQL Clickhouse service crash

2019.12.21 10:28:23.747170 [ 139 ] {} <Error> BaseDaemon: ########################################
2019.12.21 10:28:23.747274 [ 139 ] {} <Error> BaseDaemon: (version 19.5.3.1) (from thread 105) Received signal Segmentation fault (11).
2019.12.21 10:28:23.747324 [ 139 ] {} <Error> BaseDaemon: Address: 0xfffffffffffffffe
2019.12.21 10:28:23.747356 [ 139 ] {} <Error> BaseDaemon: Access: read.
2019.12.21 10:28:23.747365 [ 139 ] {} <Error> BaseDaemon: Address not mapped to object.
2019.12.21 10:28:23.830209 [ 139 ] {} <Error> BaseDaemon: 0. clickhouse-server(DB::ExtractParamToStringImpl<DB::ExtractRaw>::vector(DB::PODArray<unsigned char, 4096ul, Allocator<false>, 15ul, 16ul> const&, DB::PODArray<unsigned long, 4096ul, Allocator<false>, 15ul, 16ul> const&, std::string, DB::PODArray<unsigned char, 4096ul, Allocator<false>, 15ul, 16ul>&, DB::PODArray<unsigned long, 4096ul, Allocator<false>, 15ul, 16ul>&)+0x3c3) [0x36802f3]
2019.12.21 10:28:23.830306 [ 139 ] {} <Error> BaseDaemon: 1. clickhouse-server(DB::FunctionsStringSearchToString<DB::ExtractParamToStringImpl<DB::ExtractRaw>, DB::NameVisitParamExtractRaw>::executeImpl(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long)+0x116) [0x3680bd6]
2019.12.21 10:28:23.830327 [ 139 ] {} <Error> BaseDaemon: 2. clickhouse-server(DB::PreparedFunctionImpl::defaultImplementationForNulls(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long, bool)+0x151) [0x614b0c1]
2019.12.21 10:28:23.830350 [ 139 ] {} <Error> BaseDaemon: 3. clickhouse-server(DB::PreparedFunctionImpl::executeWithoutLowCardinalityColumns(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long, bool)+0x6b) [0x614aefb]
2019.12.21 10:28:23.830384 [ 139 ] {} <Error> BaseDaemon: 4. clickhouse-server(DB::PreparedFunctionImpl::execute(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long, bool)+0x378) [0x614b568]
2019.12.21 10:28:23.830406 [ 139 ] {} <Error> BaseDaemon: 5. clickhouse-server(DB::ExpressionAction::execute(DB::Block&, bool) const+0x264) [0x62e0414]
2019.12.21 10:28:23.830424 [ 139 ] {} <Error> BaseDaemon: 6. clickhouse-server(DB::ExpressionActions::execute(DB::Block&, bool) const+0x45) [0x62e1ff5]
2019.12.21 10:28:23.830442 [ 139 ] {} <Error> BaseDaemon: 7. clickhouse-server(DB::FilterBlockInputStream::readImpl()+0x3f2) [0x61af192]
2019.12.21 10:28:23.830466 [ 139 ] {} <Error> BaseDaemon: 8. clickhouse-server(DB::IBlockInputStream::read()+0x135) [0x5c44675]
2019.12.21 10:28:23.830483 [ 139 ] {} <Error> BaseDaemon: 9. clickhouse-server(DB::ExpressionBlockInputStream::readImpl()+0x1a) [0x61ae2ba]
2019.12.21 10:28:23.830500 [ 139 ] {} <Error> BaseDaemon: 10. clickhouse-server(DB::IBlockInputStream::read()+0x135) [0x5c44675]
2019.12.21 10:28:23.830518 [ 139 ] {} <Error> BaseDaemon: 11. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x2b5) [0x61da335]
2019.12.21 10:28:23.830534 [ 139 ] {} <Error> BaseDaemon: 12. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019.12.21 10:28:23.830552 [ 139 ] {} <Error> BaseDaemon: 13. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019.12.21 10:28:23.830569 [ 139 ] {} <Error> BaseDaemon: 14. clickhouse-server() [0x71eee5f]
2019.12.21 10:28:23.830584 [ 139 ] {} <Error> BaseDaemon: 15. /lib64/libpthread.so.0(+0x7dc5) [0x7f90b649fdc5]


version:19.5.3.1
Execute SQL:
select
	count(*) as pv,
	count(distinct imei) as uv
from
	realtime.tb_app_action
where
	stat_date = '2019-12-20'
	and SUBSTRING(uploadtime, 1, 11)= '20191220202'
	and ( pagetype = 'tribeinfopost' and actiontype = 'hudong' and visitParamExtractString(visitParamExtractRaw(wuxian_data,'json'),'bl_source') in ('from3normal','from3zhaopin'))
	or ( pagetype = 'tribepost' and actiontype = 'publishsuccess'and visitParamExtractString(visitParamExtractRaw(wuxian_data,'json'),'bl_source') in ('from3normal','from3zhaopin')) ;


