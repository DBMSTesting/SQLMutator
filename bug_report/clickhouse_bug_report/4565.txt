ID: 4565
Title: ALTER TABLE ADD COLUMN IF NOT EXISTS returns error when column already exists
Description:
**Describe the bug**
`ALTER TABLE ADD COLUMN` query returns error when the column already exists in the table even with keyword `If Not Exists`. 

**How to reproduce**
* Which ClickHouse server version to use
19.3.5

* Queries to run that lead to unexpected result
`ALTER TABLE "test" ADD COLUMN IF NOT EXISTS "foo1" String, ADD COLUMN IF NOT EXISTS "foo2" String`

**Expected behavior**
The query should return success if column foo1 exists when expression `IF NOT EXISTS` is available.


**Error message and/or stacktrace**
Here is an example stack trace with the column name and table name mocked out.

019.03.03 21:17:18.133559 [ 57 ] {ff120d8c-7efe-4ab7-8425-cfd6f2ab735a} <Error> executeQuery: Code: 44, e.displayText() = DB::Exception: Cannot add column foo: column with this name already exists (from [::ffff:10.82.227.74]:53628) (in query: ALTER TABLE "test" ADD COLUMN IF NOT EXISTS "foo" String), Stack trace:

0. /usr/bin/clickhouse-server(StackTrace::StackTrace()+0x16) [0x6f12636]
1. /usr/bin/clickhouse-server(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x22) [0x3399b02]
2. /usr/bin/clickhouse-server(DB::AlterCommand::apply(DB::ColumnsDescription&, DB::IndicesDescription&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::IAST>&) const+0x11c7) [0x697aa57]
3. /usr/bin/clickhouse-server(DB::AlterCommands::apply(DB::ColumnsDescription&, DB::IndicesDescription&, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::IAST>&) const+0x1ad) [0x697aded]
4. /usr/bin/clickhouse-server(DB::MergeTreeData::checkAlter(DB::AlterCommands const&, DB::Context const&)+0x1c1) [0x65e15d1]
5. /usr/bin/clickhouse-server(DB::StorageMergeTree::alter(DB::AlterCommands const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::al
locator<char> > const&, DB::Context const&)+0x21a) [0x653075a]
6. /usr/bin/clickhouse-server(DB::InterpreterAlterQuery::execute()+0x52d) [0x693e2fd]
7. /usr/bin/clickhouse-server() [0x643beb3]
8. /usr/bin/clickhouse-server(DB::executeQuery(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool)+0x81) [0x643dd21]
9. /usr/bin/clickhouse-server(DB::TCPHandler::runImpl()+0x4a6) [0x33a9236]
10. /usr/bin/clickhouse-server(DB::TCPHandler::run()+0x2b) [0x33aa40b]
11. /usr/bin/clickhouse-server(Poco::Net::TCPServerConnection::start()+0xf) [0x704907f]
12. /usr/bin/clickhouse-server(Poco::Net::TCPServerDispatcher::run()+0x16a) [0x704945a]
13. /usr/bin/clickhouse-server(Poco::PooledThread::run()+0x77) [0x7125967]
14. /usr/bin/clickhouse-server(Poco::ThreadImpl::runnableEntry(void*)+0x38) [0x7121828]
15. /usr/bin/clickhouse-server() [0xacbf28f]
16. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8064) [0x7f4c73b7f064]
17. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f4c731a762d]

**Additional context**
I'm running the `ALTER` query concurrently from a few processes, they all try to add a few columns that seemed new to the process, and there could be overlapping in the columns they are trying to add. In short, there is a chance 2 processes try to add the same column `foo`, but I would hope `IF NOT EXISTS` should effectively treat the second add as a noop.


