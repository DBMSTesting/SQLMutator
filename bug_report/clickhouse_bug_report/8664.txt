ID: 8664
Title: Exception is thrown when ORDER BY .. LIMIT is used
Description:
When LIMIT is greater than result data length and ORDER BY is used then exception is thrown.

**How to reproduce**
* Version: 19.17.6.36 or newer
* query: `SELECT 1 AS a ORDER BY a LIMIT 2`

**Error message and/or stacktrace**
```
Received exception from server (version 19.17.6):
Code: 12. DB::Exception: Received from 127.0.0.1:9000. DB::Exception: Parameters start = 0, length = 2 are out of bound in ColumnVector<T>::insertRangeFrom method (data.size() = 1)..
```
Stack trace:
```
0. 0x55e1cd9b80e0 StackTrace::StackTrace() /usr/bin/clickhouse
1. 0x55e1cd9b7eb5 DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) /usr/bin/clickhouse
2. 0x55e1d0f3aec1 DB::ColumnVector<long>::insertRangeFrom(DB::IColumn const&, unsigned long, unsigned long) /usr/bin/clickhouse
3. 0x55e1d0eb4e3e DB::sortBlock(DB::Block&, std::vector<DB::SortColumnDescription, std::allocator<DB::SortColumnDescription> > const&, unsigned long) /usr/bin/clickhouse
4. 0x55e1d13b29a5 DB::PartialSortingBlockInputStream::readImpl() /usr/bin/clickhouse
5. 0x55e1d0c16efa DB::IBlockInputStream::read() /usr/bin/clickhouse
6. 0x55e1d1390a7c DB::MergeSortingBlockInputStream::readImpl() /usr/bin/clickhouse
7. 0x55e1d0c16efa DB::IBlockInputStream::read() /usr/bin/clickhouse
8. 0x55e1d1376beb DB::ExpressionBlockInputStream::readImpl() /usr/bin/clickhouse
9. 0x55e1d0c16efa DB::IBlockInputStream::read() /usr/bin/clickhouse
10. 0x55e1d0c1beaa DB::LimitBlockInputStream::readImpl() /usr/bin/clickhouse
11. 0x55e1d0c16efa DB::IBlockInputStream::read() /usr/bin/clickhouse
12. 0x55e1d0c0ffcb DB::AsynchronousBlockInputStream::calculate() /usr/bin/clickhouse
13. 0x55e1d0c10390 ? /usr/bin/clickhouse
14. 0x55e1cda04a8e ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>) /usr/bin/clickhouse
15. 0x55e1cda0509e ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const /usr/bin/clickhouse
16. 0x55e1cda0255c ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>) /usr/bin/clickhouse
17. 0x55e1d37a6780 ? /usr/bin/clickhouse
18. 0x7f70419fb6db start_thread /lib/x86_64-linux-gnu/libpthread-2.27.so
19. 0x7f704131888f clone /lib/x86_64-linux-gnu/libc-2.27.so
```