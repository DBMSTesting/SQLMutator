ID: 75928
Title: Logical Error on PartsSplitter with reverse key
Description:
### Describe the bug

Issue only happens with `ORDER BY DESC`. Doesn't seem related to https://github.com/ClickHouse/ClickHouse/issues/73400

### How to reproduce

Run Fiddle: https://fiddle.clickhouse.com/d7d58cf9-b68b-42c2-b00e-25afbd964ec2

### Error message and/or stacktrace

Stack trace:

```
<Fatal> : Logical error: 'parts_ranges[0].event == PartsRangesIterator::EventType::RangeStart'.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. src/Common/StackTrace.cpp:381: StackTrace::tryCapture() @ 0x0000000025687df7
1. src/Common/StackTrace.h:48: DB::abortOnFailedAssertion(String const&) @ 0x000000002563dcb7
2. src/Processors/QueryPlan/PartsSplitter.cpp:507: (anonymous namespace)::splitPartsRanges(DB::RangesInDataParts, bool, std::shared_ptr<Poco::Logger> const&) @ 0x0000000036226824
3. src/Processors/QueryPlan/PartsSplitter.cpp:980: DB::splitPartsWithRangesByPrimaryKey(DB::KeyDescription const&, std::shared_ptr<DB::ExpressionActions>, DB::RangesInDataParts, unsigned long, std::shared_ptr<DB::Context const>, std::function<DB::Pipe (DB::RangesInDataParts)>&&, bool, bool) @ 0x0000000036220a87
4. src/Processors/QueryPlan/ReadFromMergeTree.cpp:1366: DB::ReadFromMergeTree::spreadMarkRangesAmongStreamsFinal(DB::RangesInDataParts&&, unsigned long, std::vector<String, std::allocator<String>> const&, std::vector<String, std::allocator<String>> const&, std::optional<DB::ActionsDAG>&) @ 0x00000000361d3def
5. src/Processors/QueryPlan/ReadFromMergeTree.cpp:2026: DB::ReadFromMergeTree::spreadMarkRanges(DB::RangesInDataParts&&, unsigned long, DB::ReadFromMergeTree::AnalysisResult&, std::optional<DB::ActionsDAG>&) @ 0x00000000361e19c5
6. src/Processors/QueryPlan/ReadFromMergeTree.cpp:2129: DB::ReadFromMergeTree::initializePipeline(DB::QueryPipelineBuilder&, DB::BuildQueryPipelineSettings const&) @ 0x00000000361e3f31
7. src/Processors/QueryPlan/ISourceStep.cpp:20: DB::ISourceStep::updatePipeline(std::vector<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>, std::allocator<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>>>, DB::BuildQueryPipelineSettings const&) @ 0x00000000361543df
8. src/Processors/QueryPlan/QueryPlan.cpp:202: DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x000000003619e99a
9. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:274: DB::InterpreterSelectQueryAnalyzer::buildQueryPipeline() @ 0x0000000031e0ec13
10. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:241: DB::InterpreterSelectQueryAnalyzer::execute() @ 0x0000000031e0e806
11. src/Interpreters/executeQuery.cpp:1455: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x0000000032331194
12. src/Interpreters/executeQuery.cpp:1622: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000003232b0db
13. src/Server/TCPHandler.cpp:662: DB::TCPHandler::runImpl() @ 0x000000003571cd7c
14. src/Server/TCPHandler.cpp:2625: DB::TCPHandler::run() @ 0x000000003574bbce
15. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x00000000399b0da2
16. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x00000000399b1a72
17. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x000000003991b1f7
18. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000039916c2e
19. ? @ 0x00007bbacbca1e2e
20. ? @ 0x00007bbacbd33a4c
```