ID: 8452
Title: Code: 393, e.displayText() = DB::Exception: There is no query
Description:
(you don't have to strictly follow this form)

**Describe the bug or unexpected behaviour**
A clear and concise description of what works not as it is supposed to.
When a table begins to merge, some error occurs and the exception log in system.replication_queue like this.
```
##### Exception from system.replication_queue table. #####
72 │ MUTATE_PART │ 2019-12-29 07:51:56 │               0 │ cluster01-03-3 │ 20181228_0_799_6_7740     │ ['20181228_0_799_6_7557']     │         0 │                      0 │        12 │ Code: 393, e.displayText() = DB::Exception: There is no query (version 19.8.3.8) │ 2019-12-29 08:07:01 │             0 │                 │ 0000-00-00 00:00:00 │
```
This kind of exception blocks the normal merge process, which fulfill the queue and the max_replicated_merges_in_queue = 16, and this mutation will retry again and again.  This should not work with this behaviour, I think.

**How to reproduce**
I just find this table has this kind of problem,it looks like some bugs.

* Which ClickHouse server version to use
19.8.3.8

* Which interface to use, if matters
No interface.
* Non-default settings, if any
* `CREATE TABLE` statements for all tables involved
* Sample data for all these tables, use [clickhouse-obfuscator](https://github.com/ClickHouse/ClickHouse/blob/master/dbms/programs/obfuscator/Obfuscator.cpp#L42-L80) if necessary
* Queries to run that lead to unexpected result

**Expected behavior**
A clear and concise description of what you expected to happen.

**Error message and/or stacktrace**
## This is the function stack ##
Error> cloudatlas.trace_events_local: DB::StorageReplicatedMergeTree::queueTask()::<lambda(DB::StorageReplicatedMergeTree::LogEntryPtr&)>: Code: 393, e.displayText() = DB::Exception: There is no query, Stack trace:

0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x65b4e16]
1. clickhouse-server(DB::Exception::Exception(std::string const&, int)+0x1f) [0x32aa7ff]
2. clickhouse-server(DB::Context::getQueryContext() const+0x49) [0x5c9b3c9]
3. clickhouse-server(DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, std::shared_ptr<DB::IBlockInputStream> const&, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<std::string, std::allocator<std::string> > const&)+0xe96) [0x5cf0a46]
4. clickhouse-server(DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::vector<std::string, std::allocator<std::string> > const&)+0x3b) [0x5cf0f4b]
5. clickhouse-server(DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::vector<std::string, std::allocator<std::string> > const&)+0x705) [0x5cfd7d5]
6. clickhouse-server(DB::interpretSubquery(std::shared_ptr<DB::IAST> const&, DB::Context const&, unsigned long, std::vector<std::string, std::allocator<std::string> > const&)+0x216) [0x624ffc6]
7. clickhouse-server(DB::ActionsVisitor::makeSet(DB::ASTFunction const*, DB::Block const&)+0x408) [0x62d5fe8]
8. clickhouse-server(DB::ActionsVisitor::visit(std::shared_ptr<DB::IAST> const&)+0x15cd) [0x62d7cfd]
Already at oldest change
9. clickhouse-server(DB::ActionsVisitor::visit(std::shared_ptr<DB::IAST> const&)+0xfd6) [0x62d7706]
10. clickhouse-server(DB::ExpressionAnalyzer::getRootActions(std::shared_ptr<DB::IAST> const&, bool, std::shared_ptr<DB::ExpressionActions>&, bool)+0xbf) [0x6211aef]
11. clickhouse-server(DB::ExpressionAnalyzer::appendWhere(DB::ExpressionActionsChain&, bool)+0x177) [0x62156b7]
12. clickhouse-server(DB::InterpreterSelectQuery::analyzeExpressions(DB::QueryProcessingStage::Enum, bool, std::shared_ptr<DB::FilterInfo> const&)+0x606) [0x5cecb76]
13. clickhouse-server(DB::InterpreterSelectQuery::executeImpl(DB::InterpreterSelectQuery::Pipeline&, std::shared_ptr<DB::IBlockInputStream> const&, bool)+0x6ce) [0x5cee56e]
14. clickhouse-server(DB::InterpreterSelectQuery::execute()+0x54) [0x5cf10f4]
15. clickhouse-server(DB::MutationsInterpreter::isStorageTouchedByMutations() const+0x3ed) [0x623416d]
16. clickhouse-server(DB::MergeTreeDataMergerMutator::mutatePartToTemporaryPart(DB::FutureMergedMutatedPart const&, std::vector<DB::MutationCommand, std::allocator<DB::MutationCommand> > const&, DB::MergeListEntry&, DB::Context const&)+0x81e) [0x5f6387e]
17. clickhouse-server(DB::StorageReplicatedMergeTree::tryExecutePartMutation(DB::ReplicatedMergeTreeLogEntry const&)+0x485) [0x5edbf35]
18. clickhouse-server(DB::StorageReplicatedMergeTree::executeLogEntry(DB::ReplicatedMergeTreeLogEntry&)+0x8d) [0x5ee552d]
19. clickhouse-server() [0x5ee5d20]
20. clickhouse-server(DB::ReplicatedMergeTreeQueue::processEntry(std::function<std::shared_ptr<zkutil::ZooKeeper> ()>, std::shared_ptr<DB::ReplicatedMergeTreeLogEntry>&, std::function<bool (std::shared_ptr<DB::ReplicatedMergeTreeLogEntry>&)>)+0x3e) [0x5fe995e]
21. clickhouse-server(DB::StorageReplicatedMergeTree::queueTask()+0x146) [0x5ec3116]
####
```
**Additional context**No.