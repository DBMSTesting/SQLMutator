ID: 71507
Title: Paste join with Group by logical error
Description:
**Describe the bug**
A query with two `PASTE JOIN` and `GROUP BY` gives a logical error on the latest head.

**How to reproduce**
Run:
https://fiddle.clickhouse.com/1afb1b88-c0eb-49e4-b768-cc9126813236

Stack trace:
```
<Fatal> : Logical error: 'Invalid number of columns in chunk pushed to OutputPort. Expected 2, found 3
Header: __table2.c0 UInt8 UInt8(size = 0), __table4.c0 Int32 Int32(size = 0)
Chunk:  Int32(size = 1) Const(size = 1, UInt8(size = 1)) Int32(size = 1)
'.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. ./contrib/llvm-project/libcxx/include/exception:141: Poco::Exception::Exception(String const&, int) @ 0x000000003510fb74
1. src/Common/Exception.cpp:109: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000001a5746a9
2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000ae00d85
3. ./src/Common/Exception.h:129: DB::Exception::Exception<unsigned long, unsigned long, String, String>(int, FormatStringHelperImpl<std::type_identity<unsigned long>::type, std::type_identity<unsigned long>::type, std::type_identity<String>::type, std::type_identity<String>::type>, unsigned long&&, unsigned long&&, String&&, String&&) @ 0x0000000028bd99a6
4. ./src/Processors/Port.h:415: DB::IMergingTransformBase::prepare() @ 0x000000002e815ea4
5. src/Processors/Executors/ExecutingGraph.cpp:277: DB::ExecutingGraph::updateNode(unsigned long, std::queue<DB::ExecutingGraph::Node*, std::deque<DB::ExecutingGraph::Node*, AllocatorWithMemoryTracking<DB::ExecutingGraph::Node*>>>&, std::queue<DB::ExecutingGraph::Node*, std::deque<DB::ExecutingGraph::Node*, AllocatorWithMemoryTracking<DB::ExecutingGraph::Node*>>>&) @ 0x000000002df71a0a
6. src/Processors/Executors/PipelineExecutor.cpp:308: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x000000002df65d21
7. src/Processors/Executors/PipelineExecutor.cpp:255: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x000000002df67c15
8. ./contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x000000001a7436f0
9. ./contrib/llvm-project/libcxx/include/__functional/invoke.h:359: ? @ 0x000000001a74f3a1
10. ./contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x000000001a73e852
11. ./contrib/llvm-project/libcxx/include/__functional/invoke.h:359: ? @ 0x000000001a74ac55
12. asan_thread_start(void*) @ 0x000000000adb5059
13. ? @ 0x00007ffff7ca1e2e
14. ? @ 0x00007ffff7d33a4c
```