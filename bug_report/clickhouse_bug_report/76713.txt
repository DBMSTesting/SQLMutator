ID: 76713
Title: Logical error: 'parent_node == (stack.rbegin() + 1)->node'
Description:
### Describe the bug

Easy to reproduce. Only happens with new analyzer enabled.

### How to reproduce

My ClickHouse server is running on default port 9000. Run:

```sql
CREATE TABLE t0 (c0 Int) ENGINE = Memory;
INSERT INTO TABLE t0 (c0) VALUES (1);
SELECT 1 FROM (SELECT materialize(1) FROM remote('localhost:9000', 'default', 't0') ORDER BY 1) ORDER BY 1;
```

### Error message and/or stacktrace

Stack trace:

```
<Fatal> : Logical error: 'parent_node == (stack.rbegin() + 1)->node'.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. src/Common/StackTrace.cpp:381: StackTrace::tryCapture() @ 0x0000000023a607d7
1. src/Common/StackTrace.h:48: DB::abortOnFailedAssertion(String const&) @ 0x0000000023a155f7
2. src/Processors/QueryPlan/Optimizations/removeRedundantSorting.cpp:104: DB::QueryPlanOptimizations::RemoveRedundantSorting::tryRemoveSorting(DB::QueryPlan::Node*, DB::QueryPlan::Node*) @ 0x00000000321fdbb1
3. src/Processors/QueryPlan/Optimizations/removeRedundantSorting.cpp:44: DB::QueryPlanOptimizations::RemoveRedundantSorting::visitTopDownImpl(DB::QueryPlan::Node*, DB::QueryPlan::Node*) @ 0x00000000321fd2a1
4. src/Processors/QueryPlan/QueryPlanVisitor.h:69: DB::QueryPlanVisitor<DB::QueryPlanOptimizations::RemoveRedundantSorting, false>::visit() @ 0x00000000321fcb6f
5. src/Processors/QueryPlan/Optimizations/removeRedundantSorting.cpp:270: DB::QueryPlanOptimizations::tryRemoveRedundantSorting(DB::QueryPlan::Node*) @ 0x00000000321fc843
6. src/Processors/QueryPlan/QueryPlan.cpp:487: DB::QueryPlan::optimize(DB::QueryPlanOptimizationSettings const&) @ 0x0000000032093f1c
7. src/Processors/QueryPlan/QueryPlan.cpp:175: DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x000000003209358e
8. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:275: DB::InterpreterSelectQueryAnalyzer::buildQueryPipeline() @ 0x000000002dc53d93
9. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:242: DB::InterpreterSelectQueryAnalyzer::execute() @ 0x000000002dc53986
10. src/Interpreters/executeQuery.cpp:1458: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x000000002e1a08f4
11. src/Interpreters/executeQuery.cpp:1625: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000002e19a73b
12. src/Server/TCPHandler.cpp:664: DB::TCPHandler::runImpl() @ 0x000000003160219c
13. src/Server/TCPHandler.cpp:2629: DB::TCPHandler::run() @ 0x0000000031631a8e
14. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x0000000035971962
15. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x0000000035972632
16. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x00000000358d9c77
17. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000358d56ae
18. ? @ 0x00007ffff7ca1e2e
19. ? @ 0x00007ffff7d33a4c
```