ID: 48147
Title: Different order of where expressions lead to different query result
Description:
**Describe what's wrong**
when I got wrong result when I execute two query:
```
select toDate(`#time`), count(), fromUnixTimestamp(toUnixTimestamp(toDateTime(toDate(`#time`) - 0)))
from (select `#time` from test)
where ((toUnixTimestamp(toDateTime(toDate(`#time`) - 0)) between 1677600000 and 1677686399) or
       (toUnixTimestamp(toDateTime(toDate(`#time`) - 1)) between 1677600000 and 1677686399) or
       (toUnixTimestamp(toDateTime(toDate(`#time`) - 2)) between 1677600000 and 1677686399) or
       (toUnixTimestamp(toDateTime(toDate(`#time`) - 3)) between 1677600000 and 1677686399) or
       (toUnixTimestamp(toDateTime(toDate(`#time`) - 4)) between 1677600000 and 1677686399) or
       (toUnixTimestamp(toDateTime(toDate(`#time`) - 5)) between 1677600000 and 1677686399) or
       (toUnixTimestamp(toDateTime(toDate(`#time`) - 6)) between 1677600000 and 1677686399))
group by toDate(`#time`)
order by toDate(`#time`) desc;

┌─toDate(#time)─┬─count()─┬─fromUnixTimestamp(toUnixTimestamp(toDateTime(minus(toDate(#time), 0))))─┐
│    2023-03-02 │   20057 │                                                     2023-03-02 00:00:00 │
│    2023-03-01 │  700839 │                                                     2023-03-01 00:00:00 │
└───────────────┴─────────┴─────────────────────────────────────────────────────────────────────────┘
```
but adjuxst the order of expression in where , got the correct result:
```
select toDate(`#time`), count(), fromUnixTimestamp(toUnixTimestamp(toDateTime(toDate(`#time`) - 0)))
from test
where or(if(toUnixTimestamp(toDateTime(toDate(`#time`) - 6)) between 1677600000 and 1677686399,1,0) ,
       if(toUnixTimestamp(toDateTime(toDate(`#time`) - 5)) between 1677600000 and 1677686399,1,0) ,
       if(toUnixTimestamp(toDateTime(toDate(`#time`) - 4)) between 1677600000 and 1677686399,1,0) ,
       if(toUnixTimestamp(toDateTime(toDate(`#time`) - 3)) between 1677600000 and 1677686399,1,0) ,
       if(toUnixTimestamp(toDateTime(toDate(`#time`) - 2)) between 1677600000 and 1677686399,1,0) ,
       if(toUnixTimestamp(toDateTime(toDate(`#time`) - 1)) between 1677600000 and 1677686399,1,0) ,
       if(toUnixTimestamp(toDateTime(toDate(`#time`) - 0)) between 1677600000 and 1677686399,1,0))
and 1
group by toDate(`#time`)
order by toDate(`#time`) desc;

┌─toDate(#time)─┬─count()─┬─fromUnixTimestamp(toUnixTimestamp(toDateTime(minus(toDate(#time), 0))))─┐
│    2023-03-07 │  590424 │                                                     2023-03-07 00:00:00 │
│    2023-03-06 │  585313 │                                                     2023-03-06 00:00:00 │
│    2023-03-05 │  682955 │                                                     2023-03-05 00:00:00 │
│    2023-03-04 │  729251 │                                                     2023-03-04 00:00:00 │
│    2023-03-03 │  725641 │                                                     2023-03-03 00:00:00 │
│    2023-03-02 │  724716 │                                                     2023-03-02 00:00:00 │
│    2023-03-01 │  700839 │                                                     2023-03-01 00:00:00 │
└───────────────┴─────────┴─────────────────────────────────────────────────────────────────────────┘

```

> A clear and concise description of what works not as it is supposed to.

> A link to reproducer in [https://fiddle.clickhouse.com/](https://fiddle.clickhouse.com/).

**Does it reproduce on recent release?**

reproduce on v23.2.4.12-stable

**Enable crash reporting**

**How to reproduce**

* Which ClickHouse server version to use
 v23.2.4.12-stable
* Which interface to use, if matters
* Non-default settings, if any
* `CREATE TABLE` statements for all tables involved
```
CREATE TABLE default.test
(
    `#time` DateTime64(3)
)
ENGINE = MergeTree
ORDER BY `#time`
SETTINGS index_granularity = 8192 

./bin/clickhouse client  -q 'insert into test format CSV' < _time.csv
```
* Sample data for all these tables, use [clickhouse-obfuscator]
```
head -n10 _time.csv
2023-03-03 10:27:37.179
2023-03-03 19:57:18.953
2023-03-01 13:20:44.848
2023-03-01 17:18:46.05
2023-03-01 23:37:47.581
2023-03-02 00:13:45.407
2023-03-02 00:39:56.079
2023-03-02 01:05:46.256
2023-03-02 01:12:24.187
2023-03-02 01:12:48.175

tail -n10 _time.csv
2023-03-07 23:58:23.18
2023-03-07 23:58:29.21
2023-03-07 23:58:34.129
2023-03-07 23:58:46.361
2023-03-07 23:58:51.437
2023-03-07 23:58:52.404
2023-03-07 23:58:53.413
2023-03-07 23:59:01.539
2023-03-07 23:59:08.205
2023-03-07 23:59:09.531

```
* Queries to run that lead to unexpected result
```
select toDate(`#time`), count(), fromUnixTimestamp(toUnixTimestamp(toDateTime(toDate(`#time`) - 0)))
from (select `#time` from test)
where ((toUnixTimestamp(toDateTime(toDate(`#time`) - 0)) between 1677600000 and 1677686399) or
       (toUnixTimestamp(toDateTime(toDate(`#time`) - 1)) between 1677600000 and 1677686399) or
       (toUnixTimestamp(toDateTime(toDate(`#time`) - 2)) between 1677600000 and 1677686399) or
       (toUnixTimestamp(toDateTime(toDate(`#time`) - 3)) between 1677600000 and 1677686399) or
       (toUnixTimestamp(toDateTime(toDate(`#time`) - 4)) between 1677600000 and 1677686399) or
       (toUnixTimestamp(toDateTime(toDate(`#time`) - 5)) between 1677600000 and 1677686399) or
       (toUnixTimestamp(toDateTime(toDate(`#time`) - 6)) between 1677600000 and 1677686399))
group by toDate(`#time`)
order by toDate(`#time`) desc;


┌─toDate(#time)─┬─count()─┬─fromUnixTimestamp(toUnixTimestamp(toDateTime(minus(toDate(#time), 0))))─┐
│    2023-03-02 │   20057 │                                                     2023-03-02 00:00:00 │
│    2023-03-01 │  700839 │                                                     2023-03-01 00:00:00 │
└───────────────┴─────────┴─────────────────────────────────────────────────────────────────────────┘

```
**Expected behavior**
```
┌─toDate(#time)─┬─count()─┬─fromUnixTimestamp(toUnixTimestamp(toDateTime(minus(toDate(#time), 0))))─┐
│    2023-03-07 │  590424 │                                                     2023-03-07 00:00:00 │
│    2023-03-06 │  585313 │                                                     2023-03-06 00:00:00 │
│    2023-03-05 │  682955 │                                                     2023-03-05 00:00:00 │
│    2023-03-04 │  729251 │                                                     2023-03-04 00:00:00 │
│    2023-03-03 │  725641 │                                                     2023-03-03 00:00:00 │
│    2023-03-02 │  724716 │                                                     2023-03-02 00:00:00 │
│    2023-03-01 │  700839 │                                                     2023-03-01 00:00:00 │
└───────────────┴─────────┴─────────────────────────────────────────────────────────────────────────┘

```
