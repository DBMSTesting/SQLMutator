ID: 6916
Title: Table Engine Kafka Loop Failure
Description:
(you don't have to strictly follow this form)

**Describe the bug or unexpected behaviour**

I have a table engine by kafka, something like below:

```
CREATE TABLE kafka_table
     mid UInt64,
     name    String,
     desc     String
  ) ENGINE = Kafka('kakfa-brokers', 'foo_topic', 'groupid-test', 'JSONEachRow');

CREATE MATERIALIZED VIEW kafka_consumer TO raw_data_table
AS
SELECT
  mid,           
  name,
  desc
FROM kafka_table
```
Now CH consumes message from Kafka Brokers. In my situation, there a 10000 message in topic "foo_topic". CH consumes, at the message 980th, CH could not pass 980th json message (maybe not-correct-json-message). CH retry at 980th, loop forever at 980th.




**How to reproduce**
* Which ClickHouse server version to use
- 19.14.3.3

**Error message and/or stacktrace**

_2019.09.12 10:19:15.016842 [ 25 ] {} <Trace> StorageKafka (KAFKA_TABLE): Re-joining claimed consumer after failure
2019.09.12 10:19:15.018843 [ 25 ] {} <Error> void DB::StorageKafka::threadFunc(): Code: 27, e.displayText() = DB::Exception: Cannot parse input: expected " before: ~","cols" (while read the value of key NAME): (at row 15922)
, Stack trace:

0. 0x55eb5818a080 StackTrace::StackTrace() /usr/bin/clickhouse
1. 0x55eb58189e55 DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) /usr/bin/clickhouse
2. 0x55eb57d459ac ? /usr/bin/clickhouse
3. 0x55eb5b35e712 DB::assertChar(char, DB::ReadBuffer&) /usr/bin/clickhouse
4. 0x55eb5b368d32 DB::DataTypeNumberBase<double>::deserializeTextJSON(DB::IColumn&, DB::ReadBuffer&, DB::FormatSettings const&) const /usr/bin/clickhouse
5. 0x55eb5b358bd3 DB::DataTypeNullable::deserializeTextJSON(DB::IColumn&, DB::ReadBuffer&, DB::FormatSettings const&) const /usr/bin/clickhouse
6. 0x55eb5b88a9ef DB::JSONEachRowRowInputFormat::readField(unsigned long, std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&) /usr/bin/clickhouse
7. 0x55eb5b88b0af DB::JSONEachRowRowInputFormat::readJSONObject(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&) /usr/bin/clickhouse
8. 0x55eb5b88bcb4 DB::JSONEachRowRowInputFormat::readRow(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, DB::RowReadExtension&) /usr/bin/clickhouse
9. 0x55eb5bc7880d DB::IRowInputFormat::generate() /usr/bin/clickhouse
10. 0x55eb5b8501ce DB::ISource::work() /usr/bin/clickhouse
11. 0x55eb5b82b635 DB::InputStreamFromInputFormat::readImpl() /usr/bin/clickhouse
12. 0x55eb5b2c2167 DB::IBlockInputStream::read() /usr/bin/clickhouse
13. 0x55eb5bc86e8a DB::KafkaBlockInputStream::readImpl() /usr/bin/clickhouse
14. 0x55eb5b2c2167 DB::IBlockInputStream::read() /usr/bin/clickhouse
15. 0x55eb5b2debb0 DB::copyData(DB::IBlockInputStream&, DB::IBlockOutputStream&, std::atomic<bool>*) /usr/bin/clickhouse
16. 0x55eb5b957526 DB::StorageKafka::streamToViews() /usr/bin/clickhouse
17. 0x55eb5b957c71 DB::StorageKafka::threadFunc() /usr/bin/clickhouse
18. 0x55eb5b97a909 DB::BackgroundSchedulePoolTaskInfo::execute() /usr/bin/clickhouse
19. 0x55eb5b97b24a DB::BackgroundSchedulePool::threadFunction() /usr/bin/clickhouse
20. 0x55eb5b97b2ca ? /usr/bin/clickhouse
21. 0x55eb581c585c ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>) /usr/bin/clickhouse
22. 0x55eb5de30e60 ? /usr/bin/clickhouse
23. 0x7fade4d63dd5 start_thread /usr/lib64/libpthread-2.17.so
24. 0x7fade468102d __clone /usr/lib64/libc-2.17.so
 (version 19.14.3.3 (official build))_

**Additional context**
Add any other context about the problem here.
