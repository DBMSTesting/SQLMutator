ID: 48402
Title: 23.3 close_connection and share_connection do not work with named collections
Description:
I use the close_connection and share_connection settings with MySQL dictionaries.
After an upgrade to 23.3 ClickHouse cannot load such dictionaries.
```
Code: 36. DB::Exception: Unexpected key close_connection in named collection. Required keys: database, db, password, table, user, username, optional keys: connect_timeout, connection_auto_close, connection_max_tries, connection_pool_size, connection_wait_timeout, addresses_expr, host, hostname, mysql_datatypes_support_level, on_duplicate_clause, port, read_write_timeout, replace_query. (BAD_ARGUMENTS), Stack trace
 (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0xe18d895 in /usr/bin/clickhouse
1. ? @ 0x120ddc86 in /usr/bin/clickhouse
2. ? @ 0x120db04a in /usr/bin/clickhouse
3. DB::StorageMySQL::processNamedCollectionResult(DB::NamedCollection const&, DB::MySQLSettings&, bool) @ 0x13f4c3ed in /usr/bin/clickhouse
4. ? @ 0x10a1753c in /usr/bin/clickhouse
5. DB::DictionarySourceFactory::create(String const&, Poco::Util::AbstractConfiguration const&, String const&, DB::DictionaryStructure const&, std::shared_ptr<DB::Context const>, String const&, bool) const @ 0x12445f90 in /usr/bin/clickhouse
6. DB::DictionaryFactory::create(String const&, Poco::Util::AbstractConfiguration const&, String const&, std::shared_ptr<DB::Context const>, bool) const @ 0x12442669 in /usr/bin/clickhouse
7. DB::ExternalDictionariesLoader::create(String const&, Poco::Util::AbstractConfiguration const&, String const&, String const&) const @ 0x1311fa5b in /usr/bin/clickhouse
8. DB::ExternalLoader::LoadingDispatcher::doLoading(String const&, unsigned long, bool, unsigned long, bool, std::shared_ptr<DB::ThreadGroupStatus>) @ 0x1312c653 in /usr/bin/clickhouse
9. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<void (DB::ExternalLoader::LoadingDispatcher::*)(String const&, unsigned long, bool, unsigned long, boo
l, std::shared_ptr<DB::ThreadGroupStatus>), DB::ExternalLoader::LoadingDispatcher*, String&, unsigned long&, bool&, unsigned long&, bool, std::shared_ptr<DB::ThreadGroupStatus>>(void (DB::ExternalLoader::LoadingDispatcher::*&&)(String const&, unsigned long, boo
l, unsigned long, bool, std::shared_ptr<DB::ThreadGroupStatus>), DB::ExternalLoader::LoadingDispatcher*&&, String&, unsigned long&, bool&, unsigned long&, bool&&, std::shared_ptr<DB::ThreadGroupStatus>&&)::'lambda'(), void ()>>(std::__function::__policy_storage
 const*) @ 0x131324d3 in /usr/bin/clickhouse
10. ThreadPoolImpl<std::thread>::worker(std::__list_iterator<std::thread, void*>) @ 0xe25cc73 in /usr/bin/clickhouse
11. ? @ 0xe2628e1 in /usr/bin/clickhouse
12. start_thread @ 0x74a4 in /lib/x86_64-linux-gnu/libpthread-2.24.so
13. clone @ 0xe8d0f in /lib/x86_64-linux-gnu/libc-2.24.so
 (version 23.3.1.2823 (official build))

Code: 36. DB::Exception: Unexpected key share_connection in named collection. Required keys: database, db, password, table, user, username, optional keys: connect_timeout, connection_auto_close, connection_max_tries, connection_pool_size, connection_wait_timeout, addresses_expr, host, hostname, mysql_datatypes_support_level, on_duplicate_clause, port, read_write_timeout, replace_query. (BAD_ARGUMENTS),
 Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0xe18d895 in /usr/bin/clickhouse
1. ? @ 0x120ddc86 in /usr/bin/clickhouse
2. ? @ 0x120db04a in /usr/bin/clickhouse
3. DB::StorageMySQL::processNamedCollectionResult(DB::NamedCollection const&, DB::MySQLSettings&, bool) @ 0x13f4c3ed in /usr/bin/clickhouse
4. ? @ 0x10a1753c in /usr/bin/clickhouse
5. DB::DictionarySourceFactory::create(String const&, Poco::Util::AbstractConfiguration const&, String const&, DB::DictionaryStructure const&, std::shared_ptr<DB::Context const>, String const&, bool) const @ 0x12445f90 in /usr/bin/clickhouse
6. DB::DictionaryFactory::create(String const&, Poco::Util::AbstractConfiguration const&, String const&, std::shared_ptr<DB::Context const>, bool) const @ 0x12442669 in /usr/bin/clickhouse
7. DB::ExternalDictionariesLoader::create(String const&, Poco::Util::AbstractConfiguration const&, String const&, String const&) const @ 0x1311fa5b in /usr/bin/clickhouse
8. DB::ExternalLoader::LoadingDispatcher::doLoading(String const&, unsigned long, bool, unsigned long, bool, std::shared_ptr<DB::ThreadGroupStatus>) @ 0x1312c653 in /usr/bin/clickhouse
9. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<void (DB::ExternalLoader::LoadingDispatcher::*)(String const&, unsigned long, bool, unsigned long, bool, std::shared_ptr<DB::ThreadGroupStatus>), DB::ExternalLoader::LoadingDispatcher*, String&, unsigned long&, bool&, unsigned long&, bool, std::shared_ptr<DB::ThreadGroupStatus>>(void (DB::ExternalLoader::LoadingDispatcher::*&&)(String const&, unsigned long, bool, unsigned long, bool, std::shared_ptr<DB::ThreadGroupStatus>), DB::ExternalLoader::LoadingDispatcher*&&, String&, unsigned long&, bool&, unsigned long&, bool&&, std::shared_ptr<DB::ThreadGroupStatus>&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x131324d3 in /usr/bin/clickhouse
10. ThreadPoolImpl<std::thread>::worker(std::__list_iterator<std::thread, void*>) @ 0xe25cc73 in /usr/bin/clickhouse
11. ? @ 0xe2628e1 in /usr/bin/clickhouse
12. start_thread @ 0x74a4 in /lib/x86_64-linux-gnu/libpthread-2.24.so
13. clone @ 0xe8d0f in /lib/x86_64-linux-gnu/libc-2.24.so
 (version 23.3.1.2823 (official build))
```
The dictionaries work well if I don't use named collections in their definition.
An example:
```
create dictionary mysql_collection
(
  key    String,
  value  String
)
PRIMARY KEY key
SOURCE(MYSQL(
    name mysql_config
    table 'table_name'
    close_connection 'true'
))
LAYOUT(complex_key_hashed)
LIFETIME(0);
```