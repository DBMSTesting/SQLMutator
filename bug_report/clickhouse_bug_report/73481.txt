ID: 73481
Title: SQLite to PostgreSQL column conversion logical error
Description:
**Describe the bug**
In a 3 database setup, a logical error happens.

**How to reproduce**
In SQLite run:
```sql
CREATE TABLE tx(c0 TEXT);
```
Then in PostgreSQL run:
```sql
CREATE TABLE test.tx(c0 TIMESTAMP);
```
Then in ClickHouse run:
```sql
CREATE TABLE tx(c0 DateTime) ENGINE = SQLite('<path to sqlite db>', 'tx');
INSERT INTO TABLE FUNCTION postgresql('<host:port>', 'test', 'tx', '<postgres user>', '<postgres passwd>', 'test') (c0) SELECT c0 FROM tx; --logical error
```
Stack trace:
```
<Fatal> : Logical error: 'Bad cast from type DB::ColumnVector<unsigned int> to DB::ColumnString'.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. std::exception::exception[abi:v15007]() @ 0x0000000018f61d34
1. base/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(String const&, int) @ 0x0000000038addd00
2. src/Common/Exception.cpp:105: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x0000000025a5e74b
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000018dff8b6
4. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000018e01f4f
5. DB::ColumnString& assert_cast<DB::ColumnString&, DB::IColumn&>(DB::IColumn&) @ 0x0000000018e47b1d
6. src/Processors/Sources/SQLiteSource.cpp:157: DB::SQLiteSource::insertValue(DB::IColumn&, DB::ExternalResultDescription::ValueType, int) @ 0x000000003595db25
7. src/Processors/Sources/SQLiteSource.cpp:102: DB::SQLiteSource::generate() @ 0x000000003595ce58
8. src/Processors/ISource.cpp:139: DB::ISource::tryGenerate() @ 0x000000003522e396
9. src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x000000003522dba4
10. src/Processors/Executors/ExecutionThreadContext.cpp:49: DB::ExecutionThreadContext::executeTask() @ 0x000000003525a1f6
11. src/Processors/Executors/PipelineExecutor.cpp:290: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x000000003524643c
12. src/Processors/Executors/PipelineExecutor.cpp:256: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000035247b09
13. contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x0000000025b825af
14. contrib/llvm-project/libcxx/include/__functional/invoke.h:359: ? @ 0x0000000025b8a594
15. contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x0000000025b7fde1
16. contrib/llvm-project/libcxx/include/__functional/invoke.h:359: ? @ 0x0000000025b86d8a
17. ? @ 0x00007ffff7ca1e2e
18. ? @ 0x00007ffff7d33a4c
```