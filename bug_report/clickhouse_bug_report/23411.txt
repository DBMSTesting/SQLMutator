ID: 23411
Title: part intersects next part. It is a bug
Description:
```shell
0. DB::MergeTreeData::getActivePartsToReplace(DB::MergeTreePartInfo const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB:
:IMergeTreeDataPart const>&, std::__1::unique_lock<std::__1::mutex>&) const @ 0xf5e3460 in /usr/bin/clickhouse
1. DB::MergeTreeData::renameTempPartAndReplace(std::__1::shared_ptr<DB::IMergeTreeDataPart>&, SimpleIncrement*, DB::MergeTreeData::Transaction*, std::__1::unique_lock<std::__1::mutex>&, std::__1
::vector<std::__1::shared_ptr<DB::IMergeTreeDataPart const>, std::__1::allocator<std::__1::shared_ptr<DB::IMergeTreeDataPart const> > >*) @ 0xf5e4a14 in /usr/bin/clickhouse
2. DB::MergeTreeData::renameTempPartAndReplace(std::__1::shared_ptr<DB::IMergeTreeDataPart>&, SimpleIncrement*, DB::MergeTreeData::Transaction*) @ 0xf5e704d in /usr/bin/clickhouse
3. DB::StorageReplicatedMergeTree::fetchPart(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const>
 const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool, unsigned long, std::__1::shared_ptr<zkutil::ZooKeeper>) @ 0xf3f67ae in /usr/bin/click
house
4. DB::StorageReplicatedMergeTree::executeFetch(DB::ReplicatedMergeTreeLogEntry&) @ 0xf3f0bb9 in /usr/bin/clickhouse
5. DB::StorageReplicatedMergeTree::executeLogEntry(DB::ReplicatedMergeTreeLogEntry&) @ 0xf3dd3ef in /usr/bin/clickhouse
6. ? @ 0xf44e65f in /usr/bin/clickhouse
7. DB::ReplicatedMergeTreeQueue::processEntry(std::__1::function<std::__1::shared_ptr<zkutil::ZooKeeper> ()>, std::__1::shared_ptr<DB::ReplicatedMergeTreeLogEntry>&, std::__1::function<bool (std
::__1::shared_ptr<DB::ReplicatedMergeTreeLogEntry>&)>) @ 0xf783d48 in /usr/bin/clickhouse
8. DB::StorageReplicatedMergeTree::processQueueEntry(std::__1::shared_ptr<DB::ReplicatedMergeTreeQueue::SelectedEntry>) @ 0xf406c9d in /usr/bin/clickhouse
9. ? @ 0xf574f37 in /usr/bin/clickhouse
10. ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>) @ 0x8651748 in /usr/bin/clickhouse
11. ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(vo
id&&, void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()&&...)::'lambda'()::operator()() @ 0x86536ff 
in /usr/bin/clickhouse
12. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x864ed1f in /usr/bin/clickhouse
13. ? @ 0x86527b3 in /usr/bin/clickhouse
14. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so
15. __clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so
 (version 21.3.3.14 (official build))
2021.04.21 01:18:50.779743 [ 88 ] {} <Information> mydatabase.mytable1 (ReplicatedMergeTreeQueue): Not executing log entry queue-0000079367 for part 1616374800_39
_74_3 because another log entry for the same part is being processed. This shouldn't happen often.
2021.04.21 01:18:50.805999 [ 3126 ] {0c37bf90-2dd5-44e7-8668-7836bd2f5575} <Information> executeQuery: Read 74 rows, 24.16 KiB in 0.01219634 sec., 6067 rows/sec., 1.93 MiB/sec.
2021.04.21 01:18:50.808905 [ 472 ] {} <Warning> mydatabase.mytable2 (2fc75d87-dd8e-4b7b-8638-4a190bf3f0f8): Part 20210320_98_98_0 is covered by 20210320_98_16
9_4 but should be merged into 20210320_89_102_2. This shouldn't happen often.
2021.04.21 01:18:50.848408 [ 472 ] {} <Error> mydatabase.mytable3 (2fc75d87-dd8e-4b7b-8638-4a190bf3f0f8): auto DB::StorageReplicatedMergeTree::processQueueEnt
ry(ReplicatedMergeTreeQueue::SelectedEntryPtr)::(anonymous class)::operator()(DB::StorageReplicatedMergeTree::LogEntryPtr &) const: Code: 49, e.displayText() = DB::Exception: Part 20210320_89_10
2_2 intersects next part 20210320_98_169_4 (state Committed). It is a bug., Stack trace (when copying this message, always include the lines below):
```
The cluster has been running for several weeks, and this morning it suddenly reported an error. We didn't do anything