ID: 10007
Title: Received signal Segmentation fault (11)
Description:
**Environment**
On ClickHouse 20.1.4.14 with revision 54431.
Two Pods on Kubernetes with Zookeeper (3 Pods on same Cluster).
Filesystem by Rook-Ceph (on same Cluster).

**Error message and stacktrace**
Suddenly, without any operation made by users, clickhouse gave the following error and crashed:
<pre><code>2020.04.02 04:43:56.500905 [ 139 ] {} <Fatal> BaseDaemon: (version 20.1.4.14 (official build)) (from thread 55) (query_id: 2b57a5fb-b8c7-4481-84cb-f0d36f095987) Received signal Segmentation fault (11).
2020.04.02 04:43:56.500700 [ 139 ] {} <Fatal> BaseDaemon: ########################################
2020.04.02 04:43:56.501120 [ 139 ] {} <Fatal> BaseDaemon: Stack trace: 0x4ff9ee3 0x8c44de6 0x8dc8e89 0x8dcbdc8 0x975b291 0x8c3800a 0x8c3c564 0x8c0f2e1 0x8c41070 0x8c41311 0x9705d42 0x9706682 0x8f07dc2 0x8f07faf 0x8a6f42f 0x94800bd 0x94820df 0x8a6dfba 0x8a6df21 0x8a6df21 0x8a6df21 0x94ec561 0x94ecca5 0x4fa4fd7 0x4fa358f 0x7fed4557c6db 0x7fed44e9988f
2020.04.02 04:43:56.501060 [ 139 ] {} <Fatal> BaseDaemon: Address: 0x7 Access: read. Address not mapped to object.
2020.04.02 04:43:56.501673 [ 139 ] {} <Fatal> BaseDaemon: 5. 0x8dc8e89 ?  in /usr/bin/clickhouse
2020.04.02 04:43:56.501750 [ 139 ] {} <Fatal> BaseDaemon: 6. 0x8dcbdc8 DB::getDatabaseAndTablesWithColumnNames(std::__1::vector<DB::ASTTableExpression const*, std::__1::allocator<DB::ASTTableExpression const*> > const&, DB::Context const&, bool)  in /usr/bin/clickhouse
2020.04.02 04:43:56.502155 [ 139 ] {} <Fatal> BaseDaemon: 11. 0x8c41070 DB::InterpreterSelectWithUnionQuery::executeWithMultipleStreams(DB::QueryPipeline&)  in /usr/bin/clickhouse
2020.04.02 04:43:56.502356 [ 139 ] {} <Fatal> BaseDaemon: 15. 0x8f07dc2 std::__1::function<std::__1::shared_ptr<DB::IBlockInputStream> ()>::operator()() const  in /usr/bin/clickhouse
2020.04.02 04:43:56.502510 [ 139 ] {} <Fatal> BaseDaemon: 18. 0x94800bd DB::CreatingSetsBlockInputStream::createOne(DB::SubqueryForSet&)  in /usr/bin/clickhouse
2020.04.02 04:43:56.501592 [ 139 ] {} <Fatal> BaseDaemon: 4. 0x8c44de6 DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&)  in /usr/bin/clickhouse
2020.04.02 04:43:56.502427 [ 139 ] {} <Fatal> BaseDaemon: 17. 0x8a6f42f DB::IBlockInputStream::read()  in /usr/bin/clickhouse
2020.04.02 04:43:56.501467 [ 139 ] {} <Fatal> BaseDaemon: 3. 0x4ff9ee3 DB::Block::Block(DB::Block const&)  in /usr/bin/clickhouse
2020.04.02 04:43:56.501935 [ 139 ] {} <Fatal> BaseDaemon: 8. 0x8c3800a void DB::InterpreterSelectQuery::executeFetchColumns<DB::InterpreterSelectQuery::Pipeline>(DB::QueryProcessingStage::Enum, DB::InterpreterSelectQuery::Pipeline&, std::__1::shared_ptr<DB::PrewhereInfo> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, DB::QueryPipeline&)  in /usr/bin/clickhouse
2020.04.02 04:43:56.501859 [ 139 ] {} <Fatal> BaseDaemon: 7. 0x975b291 DB::StorageView::read(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, DB::SelectQueryInfo const&, DB::Context const&, DB::QueryProcessingStage::Enum, unsigned long, unsigned int)  in /usr/bin/clickhouse
2020.04.02 04:43:56.502198 [ 139 ] {} <Fatal> BaseDaemon: 12. 0x8c41311 DB::InterpreterSelectWithUnionQuery::execute()  in /usr/bin/clickhouse
2020.04.02 04:43:56.502231 [ 139 ] {} <Fatal> BaseDaemon: 13. 0x9705d42 ?  in /usr/bin/clickhouse
2020.04.02 04:43:56.502392 [ 139 ] {} <Fatal> BaseDaemon: 16. 0x8f07faf DB::LazyBlockInputStream::readImpl()  in /usr/bin/clickhouse
2020.04.02 04:43:56.502073 [ 139 ] {} <Fatal> BaseDaemon: 9. 0x8c3c564 void DB::InterpreterSelectQuery::executeImpl<DB::InterpreterSelectQuery::Pipeline>(DB::InterpreterSelectQuery::Pipeline&, std::__1::shared_ptr<DB::IBlockInputStream> const&, DB::QueryPipeline&)  in /usr/bin/clickhouse
2020.04.02 04:43:56.502112 [ 139 ] {} <Fatal> BaseDaemon: 10. 0x8c0f2e1 DB::InterpreterSelectQuery::executeWithMultipleStreams(DB::QueryPipeline&)  in /usr/bin/clickhouse
2020.04.02 04:43:56.502271 [ 139 ] {} <Fatal> BaseDaemon: 14. 0x9706682 ?  in /usr/bin/clickhouse
2020.04.02 04:43:56.502691 [ 139 ] {} <Fatal> BaseDaemon: 21. 0x8a6df21 DB::IBlockInputStream::readPrefix()  in /usr/bin/clickhouse
2020.04.02 04:43:56.502779 [ 139 ] {} <Fatal> BaseDaemon: 23. 0x8a6df21 DB::IBlockInputStream::readPrefix()  in /usr/bin/clickhouse
2020.04.02 04:43:56.502883 [ 139 ] {} <Fatal> BaseDaemon: 25. 0x94ecca5 ThreadFromGlobalPool::ThreadFromGlobalPool<void (DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::*)(std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long), DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>*, std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long&>(void (DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::*&&)(std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long), DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>*&&, std::__1::shared_ptr<DB::ThreadGroupStatus>&&, unsigned long&)::'lambda'()::operator()() const  in /usr/bin/clickhouse
2020.04.02 04:43:56.502936 [ 139 ] {} <Fatal> BaseDaemon: 26. 0x4fa4fd7 ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>)  in /usr/bin/clickhouse
2020.04.02 04:43:56.502971 [ 139 ] {} <Fatal> BaseDaemon: 27. 0x4fa358f ?  in /usr/bin/clickhouse
2020.04.02 04:43:56.502636 [ 139 ] {} <Fatal> BaseDaemon: 20. 0x8a6dfba DB::IBlockInputStream::readPrefix()  in /usr/bin/clickhouse
2020.04.02 04:43:56.502818 [ 139 ] {} <Fatal> BaseDaemon: 24. 0x94ec561 DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long)  in /usr/bin/clickhouse
2020.04.02 04:43:56.503034 [ 139 ] {} <Fatal> BaseDaemon: 28. 0x76db start_thread  in /lib/x86_64-linux-gnu/libpthread-2.27.so
2020.04.02 04:43:56.502554 [ 139 ] {} <Fatal> BaseDaemon: 19. 0x94820df DB::CreatingSetsBlockInputStream::readPrefixImpl()  in /usr/bin/clickhouse
2020.04.02 04:43:56.502743 [ 139 ] {} <Fatal> BaseDaemon: 22. 0x8a6df21 DB::IBlockInputStream::readPrefix()  in /usr/bin/clickhouse
2020.04.02 04:43:56.503079 [ 139 ] {} <Fatal> BaseDaemon: 29. 0x12188f clone  in /lib/x86_64-linux-gnu/libc-2.27.so
</code></pre>

Following the problem the Clickhouse instance, which crashed, was started again after 1 minute. At start, one of the tables couldn't get attached:
<pre><code>2020.04.02 04:44:59.946535 [ 1 ] {} <Error> Application: Caught exception while loading metadata: Code: 231, e.displayText() = DB::Exception: The local set of parts of table default.flight_consumption doesn't look like the set of parts in ZooKeeper: 13.86 thousand rows of 14.80 thousand total rows in filesystem are suspicious.
There are 3 unexpected parts with 13860 rows (1 of them is not just-written with 13860 rows), 0 missing parts (with 0 blocks).:
Cannot attach table '`flight_consumption`' from query ATTACH TABLE flight_consumption (`flight_number_iata` String, `flight_date` UInt64, `airport_code` String, `gpu_consumption` Nullable(Float64), `pca_consumption` Nullable(Float64), `update_timestamp` UInt64) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{shard}/flight_consumption', '{replica}') PARTITION BY toYYYYMM(toDateTime(update_timestamp / 1000)) PRIMARY KEY (update_timestamp, flight_number_iata, flight_date) ORDER BY (update_timestamp, flight_number_iata, flight_date) SETTINGS index_granularity = 8192
</code></pre>

which is weird because the table couldn't change **that** much in just one minute, I think.
