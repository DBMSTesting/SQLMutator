ID: 5823
Title: Authentication problem when querying a Distributed Table
Description:
**Describe the bug**

This issue happened to me after updating our clickhouse **default** user credentials from passwordless to having a password. I used to successfully query to a distributed table before applying a password to the **default** user.

For example, this works.

```bash
clickhouse-client --user default --password password123 --query="select * from replicated_table_name"
```

This doesn't.

```bash
clickhouse-client --user default --password password123 --query="select * from distributed_table_name"
```

Error.

```txt
Received exception from server (version 19.4.1):
Code: 194. DB::Exception: Received from localhost:9000, 127.0.0.1. DB::Exception: Received from ch-01-0.clickhouse.svc.cluster.local:9000, 10.201.0.240. DB::Exception: Password required for user default.
```

**How to reproduce**

* Which ClickHouse server version to use

19.4.1.3

* Which interface to use, if matters

TCP and HTTP

* Non-default settings, if any

A customized users.xml

```xml
<?xml version="1.0"?>
<yandex>
    <!-- Profiles of settings. -->
    <profiles>
        <!-- Default settings. -->
        <default>
            <!-- Maximum memory usage for processing single query, in bytes. -->
            <max_memory_usage>10000000000</max_memory_usage>
            <use_uncompressed_cache>0</use_uncompressed_cache>
            <load_balancing>random</load_balancing>
        </default>
        <readonly>
            <readonly>1</readonly>
        </readonly>
    </profiles>

    <!-- Users and ACL. -->
    <users>
        <default>
            <password>password123</password>
            <networks incl="networks" replace="replace">
                <ip>::/0</ip>
            </networks>
            <profile>default</profile>
            <quota>default</quota>
        </default>
        <readonly>
            <password>password123</password>
            <networks incl="networks" replace="replace">
                <ip>::/0</ip>
            </networks>
            <profile>readonly</profile>
            <quota>default</quota>
        </readonly>
    </users>

    <!-- Quotas. -->
    <quotas>
        <default>
            <interval>
                <duration>3600</duration>
                <queries>0</queries>
                <errors>0</errors>
                <result_rows>0</result_rows>
                <read_rows>0</read_rows>
                <execution_time>0</execution_time>
            </interval>
        </default>
    </quotas>
</yandex>
```

* `CREATE TABLE` statements for all tables involved

Just create a distributed table from a sharded table.

* Queries to run that lead to unexpected result

```sql
SELECT * FROM distributed_table_name;
```

**Expected behavior**

I'm expecting to perform a successful query.

**Error message and/or stacktrace**

```
2019.07.01 14:14:53.654539 [ 47 ] {68558650-7e64-4c30-b5c8-53ec893d861d} <Error> executeQuery: Code: 194, e.displayText() = DB::Exception: Received from ch-02-0.clickhouse.svc.cluster.local:9000, 10.201.0.240. DB::Exception: Password required for user default. Stack trace:

0. /usr/bin/clickhouse-server(StackTrace::StackTrace()+0x16) [0x6f72d06]
1. /usr/bin/clickhouse-server(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x22) [0x37129a2]
2. /usr/bin/clickhouse-server() [0x64da61b]
3. /usr/bin/clickhouse-server(DB::SecurityManager::authorizeAndGetUser(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Poco::Net::IPAddress const&) const+0xcc) [0x64daeec]
4. /usr/bin/clickhouse-server(DB::Context::setUser(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Poco::Net::SocketAddress const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x92) [0x63d1922]
5. /usr/bin/clickhouse-server(DB::TCPHandler::receiveHello()+0x678) [0x371d178]
6. /usr/bin/clickhouse-server(DB::TCPHandler::runImpl()+0x1f8) [0x371fe68]
7. /usr/bin/clickhouse-server(DB::TCPHandler::run()+0x2b) [0x3720a0b]
8. /usr/bin/clickhouse-server(Poco::Net::TCPServerConnection::start()+0xf) [0x707669f]
9. /usr/bin/clickhouse-server(Poco::Net::TCPServerDispatcher::run()+0xe9) [0x7076dd9]
10. /usr/bin/clickhouse-server(Poco::PooledThread::run()+0x81) [0x7129f11]
11. /usr/bin/clickhouse-server(Poco::ThreadImpl::runnableEntry(void*)+0x38) [0x71260d8]
12. /usr/bin/clickhouse-server() [0xadeeb5f]
13. /lib/x86_64-linux-gnu/libpthread.so.0(+0x76db) [0x7f23e56f06db]
14. /lib/x86_64-linux-gnu/libc.so.6(clone+0x3f) [0x7f23e4c6f88f]
 (from 127.0.0.1:46862) (in query: select count() from clicks_distributed), Stack trace:

0. /usr/bin/clickhouse-server(StackTrace::StackTrace()+0x16) [0x6f72d06]
1. /usr/bin/clickhouse-server(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x22) [0x37129a2]
2. /usr/bin/clickhouse-server(DB::readException(DB::Exception&, DB::ReadBuffer&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x21f) [0x6f9a59f]
3. /usr/bin/clickhouse-server(DB::Connection::receiveException()+0x81) [0x67b5c31]
4. /usr/bin/clickhouse-server(DB::Connection::receiveHello()+0x166) [0x67b6046]
5. /usr/bin/clickhouse-server(DB::Connection::connect()+0x28a) [0x67b7d0a]
6. /usr/bin/clickhouse-server(DB::Connection::forceConnected()+0x278) [0x67b92b8]
7. /usr/bin/clickhouse-server(DB::ConnectionPoolWithFailover::tryGetEntry(DB::IConnectionPool&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, DB::Settings const*, DB::QualifiedTableName const*)+0x495) [0x67bf4c5]
8. /usr/bin/clickhouse-server() [0x67c0724]
9. /usr/bin/clickhouse-server(PoolWithFailoverBase<DB::IConnectionPool>::getMany(unsigned long, unsigned long, std::function<PoolWithFailoverBase<DB::IConnectionPool>::TryResult (DB::IConnectionPool&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)> const&, std::function<unsigned long (unsigned long)> const&, bool)+0x2e9) [0x67c5709]
10. /usr/bin/clickhouse-server(DB::ConnectionPoolWithFailover::getManyImpl(DB::Settings const*, DB::PoolMode, std::function<PoolWithFailoverBase<DB::IConnectionPool>::TryResult (DB::IConnectionPool&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)> const&)+0xce) [0x67c0a1e]
11. /usr/bin/clickhouse-server(DB::ConnectionPoolWithFailover::getManyChecked(DB::Settings const*, DB::PoolMode, DB::QualifiedTableName const&)+0x8e) [0x67c0ebe]
12. /usr/bin/clickhouse-server() [0x6301b17]
13. /usr/bin/clickhouse-server(DB::RemoteBlockInputStream::sendQuery()+0x40) [0x6303560]
14. /usr/bin/clickhouse-server(DB::ParallelInputsProcessor<DB::UnionBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x15e) [0x642eb4e]
15. /usr/bin/clickhouse-server(ThreadFromGlobalPool::ThreadFromGlobalPool<DB::ParallelInputsProcessor<DB::UnionBlockInputStream::Handler>::process()::{lambda()#1}>(DB::ParallelInputsProcessor<DB::UnionBlockInputStream::Handler>::process()::{lambda()#1}&&)::{lambda()#1}::operator()() const+0x6d) [0x642f74d]
16. /usr/bin/clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x1ab) [0x6f78c9b]
17. /usr/bin/clickhouse-server() [0xadeeb5f]
18. /lib/x86_64-linux-gnu/libpthread.so.0(+0x76db) [0x7f23e56f06db]
19. /lib/x86_64-linux-gnu/libc.so.6(clone+0x3f) [0x7f23e4c6f88f]

2019.07.01 14:14:53.655088 [ 47 ] {68558650-7e64-4c30-b5c8-53ec893d861d} <Error> virtual DB::UnionBlockInputStream::~UnionBlockInputStream(): Code: 194, e.displayText() = DB::Exception: Received from ch-01-0.clickshield.svc.cluster.local:9000, 10.201.14.35. DB::Exception: Password required for user default. Stack trace:

0. /usr/bin/clickhouse-server(StackTrace::StackTrace()+0x16) [0x6f72d06]
1. /usr/bin/clickhouse-server(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x22) [0x37129a2]
2. /usr/bin/clickhouse-server() [0x64da61b]
3. /usr/bin/clickhouse-server(DB::SecurityManager::authorizeAndGetUser(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Poco::Net::IPAddress const&) const+0xcc) [0x64daeec]
4. /usr/bin/clickhouse-server(DB::Context::setUser(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Poco::Net::SocketAddress const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x92) [0x63d1922]
5. /usr/bin/clickhouse-server(DB::TCPHandler::receiveHello()+0x678) [0x371d178]
6. /usr/bin/clickhouse-server(DB::TCPHandler::runImpl()+0x1f8) [0x371fe68]
7. /usr/bin/clickhouse-server(DB::TCPHandler::run()+0x2b) [0x3720a0b]
8. /usr/bin/clickhouse-server(Poco::Net::TCPServerConnection::start()+0xf) [0x707669f]
9. /usr/bin/clickhouse-server(Poco::Net::TCPServerDispatcher::run()+0xe9) [0x7076dd9]
10. /usr/bin/clickhouse-server(Poco::PooledThread::run()+0x81) [0x7129f11]
11. /usr/bin/clickhouse-server(Poco::ThreadImpl::runnableEntry(void*)+0x38) [0x71260d8]
12. /usr/bin/clickhouse-server() [0xadeeb5f]
13. /lib/x86_64-linux-gnu/libpthread.so.0(+0x76db) [0x7f76baac36db]
14. /lib/x86_64-linux-gnu/libc.so.6(clone+0x3f) [0x7f76ba04288f]
, Stack trace:

0. /usr/bin/clickhouse-server(StackTrace::StackTrace()+0x16) [0x6f72d06]
1. /usr/bin/clickhouse-server(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x22) [0x37129a2]
2. /usr/bin/clickhouse-server(DB::readException(DB::Exception&, DB::ReadBuffer&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x21f) [0x6f9a59f]
3. /usr/bin/clickhouse-server(DB::Connection::receiveException()+0x81) [0x67b5c31]
4. /usr/bin/clickhouse-server(DB::Connection::receiveHello()+0x166) [0x67b6046]
5. /usr/bin/clickhouse-server(DB::Connection::connect()+0x28a) [0x67b7d0a]
6. /usr/bin/clickhouse-server(DB::Connection::forceConnected()+0x278) [0x67b92b8]
7. /usr/bin/clickhouse-server(DB::ConnectionPoolWithFailover::tryGetEntry(DB::IConnectionPool&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, DB::Settings const*, DB::QualifiedTableName const*)+0x495) [0x67bf4c5]
8. /usr/bin/clickhouse-server() [0x67c0724]
9. /usr/bin/clickhouse-server(PoolWithFailoverBase<DB::IConnectionPool>::getMany(unsigned long, unsigned long, std::function<PoolWithFailoverBase<DB::IConnectionPool>::TryResult (DB::IConnectionPool&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)> const&, std::function<unsigned long (unsigned long)> const&, bool)+0x2e9) [0x67c5709]
10. /usr/bin/clickhouse-server(DB::ConnectionPoolWithFailover::getManyImpl(DB::Settings const*, DB::PoolMode, std::function<PoolWithFailoverBase<DB::IConnectionPool>::TryResult (DB::IConnectionPool&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)> const&)+0xce) [0x67c0a1e]
11. /usr/bin/clickhouse-server(DB::ConnectionPoolWithFailover::getManyChecked(DB::Settings const*, DB::PoolMode, DB::QualifiedTableName const&)+0x8e) [0x67c0ebe]
12. /usr/bin/clickhouse-server() [0x6301b17]
13. /usr/bin/clickhouse-server(DB::RemoteBlockInputStream::sendQuery()+0x40) [0x6303560]
14. /usr/bin/clickhouse-server(DB::ParallelInputsProcessor<DB::UnionBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x15e) [0x642eb4e]
15. /usr/bin/clickhouse-server(ThreadFromGlobalPool::ThreadFromGlobalPool<DB::ParallelInputsProcessor<DB::UnionBlockInputStream::Handler>::process()::{lambda()#1}>(DB::ParallelInputsProcessor<DB::UnionBlockInputStream::Handler>::process()::{lambda()#1}&&)::{lambda()#1}::operator()() const+0x6d) [0x642f74d]
16. /usr/bin/clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x1ab) [0x6f78c9b]
17. /usr/bin/clickhouse-server() [0xadeeb5f]
18. /lib/x86_64-linux-gnu/libpthread.so.0(+0x76db) [0x7f23e56f06db]
19. /lib/x86_64-linux-gnu/libc.so.6(clone+0x3f) [0x7f23e4c6f88f]
```

