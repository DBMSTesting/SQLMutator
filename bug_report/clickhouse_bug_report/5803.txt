ID: 5803
Title: Updating External Dict (cache layout) through HTTPS with Basic Auth
Description:
**Describe the bug**
I have an External Dict with a cached layout.
Dict source is HTTPS.
Source HTTP server accepts Basic Auth (put into URL)

1. CH successfully reads whole dict via GET request.
2. CH fails to authenticate when request some certain keys via POST request.

Dict config
```<yandex>
    <dictionary>
        <name>taxonomy</name>
        <lifetime>300</lifetime>
        <source>
            <http>
                <url>https://user:pass@api.company/api/v1/data</url>
                <format>JSONEachRow</format>
            </http>
        </source>
        <layout>
            <cache>
                <size_in_cells>100000</size_in_cells>
            </cache>
        </layout>
        <structure>
            <id>
                <name>category_id_hash</name>
            </id>
            <attribute>
                <name>category_id</name>
                <type>String</type>
                <injective>true</injective>
                <null_value></null_value>
            </attribute>
            <attribute>
                <name>name</name>
                <type>String</type>
                <injective>false</injective>
                <null_value></null_value>
            </attribute>
        </structure>
    </dictionary>
</yandex>
```
**How to reproduce**
* Which ClickHouse server version to use
19.7.3.1



**Error message and/or stacktrace**
```2019.06.30 07:25:42.816861 [ 40 ] {789fe354-591e-477d-870f-f5fb396a33c1} <Error> executeQuery: Code: 86, e.displayText() = DB::Exception: Received error from remote server /api/v0/cluster_builder/taxonomy_categories.
 HTTP status code: 401 Unauthorized, body: <html>
<head><title>401 Authorization Required</title></head>
<body bgcolor="white">
<center><h1>401 Authorization Required</h1></center>
<hr><center>nginx/1.10.3 (Ubuntu)</center>
</body>
</html>
 (version 19.7.3.1) (from 18.214.36.203:42396) (in query: select dictGetString('taxonomy', 'name', 11111111111111111415) FORMAT TabSeparatedWithNamesAndTypes;), Stack trace:

0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x6834a66]
1. clickhouse-server(DB::Exception::Exception(std::string const&, int)+0x1f) [0x317311f]
2. clickhouse-server(DB::receiveResponse(Poco::Net::HTTPClientSession&, Poco::Net::HTTPRequest const&, Poco::Net::HTTPResponse&)+0x160) [0x684aa50]
3. clickhouse-server(std::_MakeUniq<DB::ReadWriteBufferFromHTTP>::__single_object std::make_unique<DB::ReadWriteBufferFromHTTP, Poco::URI&, std::string const&, std::function<void (std::ostream&)>&, DB::ConnectionTime
outs&>(Poco::URI&, std::string const&, std::function<void (std::ostream&)>&, DB::ConnectionTimeouts&)+0x2f4) [0x54ca574]
4. clickhouse-server(DB::HTTPDictionarySource::loadIds(std::vector<unsigned long, std::allocator<unsigned long> > const&)+0xbe) [0x54c529e]
5. clickhouse-server(DB::CacheDictionary::getString(std::string const&, DB::PODArray<unsigned long, 4096ul, AllocatorWithHint<false, AllocatorHints::DefaultHint, 67108864ul>, 15ul, 16ul> const&, DB::ColumnString*) co
nst+0x8ee) [0x4d1032e]
6. clickhouse-server(bool DB::FunctionDictGetString::executeDispatch<DB::CacheDictionary>(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, DB::IDictionaryBase const*)+0x10
4) [0x35077b4]
7. clickhouse-server(DB::FunctionDictGetString::executeImpl(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long)+0x14e) [0x351a49e]
8. clickhouse-server(DB::PreparedFunctionImpl::defaultImplementationForConstantArguments(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long, bool)+0x49f) [0x62
ad24f]
9. clickhouse-server(DB::PreparedFunctionImpl::executeWithoutLowCardinalityColumns(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long, bool)+0x35) [0x62ad925]
10. clickhouse-server(DB::PreparedFunctionImpl::execute(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long, bool)+0x378) [0x62adfc8]
11. clickhouse-server(DB::ExpressionAction::prepare(DB::Block&, DB::Settings const&)+0x707) [0x6446b07]
12. clickhouse-server(DB::ExpressionActions::addImpl(DB::ExpressionAction, std::vector<std::string, std::allocator<std::string> >&)+0xf5) [0x6447b75]
13. clickhouse-server(DB::ExpressionActions::add(DB::ExpressionAction const&, std::vector<std::string, std::allocator<std::string> >&)+0x32) [0x6448312]
14. clickhouse-server(DB::ScopeStack::addAction(DB::ExpressionAction const&)+0xa1) [0x6519211]
15. clickhouse-server(DB::ActionsVisitor::visit(std::shared_ptr<DB::IAST> const&)+0x19be) [0x651d0ae]
16. clickhouse-server(DB::ActionsVisitor::visit(std::shared_ptr<DB::IAST> const&)+0xcfa) [0x651c3ea]
17. clickhouse-server(DB::ExpressionAnalyzer::getRootActions(std::shared_ptr<DB::IAST> const&, bool, std::shared_ptr<DB::ExpressionActions>&, bool)+0xbf) [0x645321f]
18. clickhouse-server(DB::ExpressionAnalyzer::appendSelect(DB::ExpressionActionsChain&, bool)+0x74) [0x64544a4]
19. clickhouse-server(DB::InterpreterSelectQuery::analyzeExpressions(DB::QueryProcessingStage::Enum, bool, std::shared_ptr<DB::FilterInfo> const&)+0x6e8) [0x5eb11b8]
20. clickhouse-server(DB::InterpreterSelectQuery::executeImpl(DB::InterpreterSelectQuery::Pipeline&, std::shared_ptr<DB::IBlockInputStream> const&, bool)+0x1287) [0x5eb3bf7]
21. clickhouse-server(DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, std::shared_ptr<DB::IBlockInputStream> const&, std::shared_ptr<DB::IStorage> const&, DB::
SelectQueryOptions const&, std::vector<std::string, std::allocator<std::string> > const&)+0x81c) [0x5eb513c]
22. clickhouse-server(DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::vector<std::string, std::allocator<std::string> > con
st&)+0x3b) [0x5eb5d8b]
23. clickhouse-server(DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::vector<std::string, std::allocator<
std::string> > const&)+0x78b) [0x5ec208b]
24. clickhouse-server(DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, DB::Context&, DB::QueryProcessingStage::Enum)+0x16a) [0x5e9aa2a]
25. clickhouse-server() [0x5fc42a1]
26. clickhouse-server(DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::function<void (std::string const&)>, std::function<void (std::string const&)>)+0x11e) [0x5fc47de]
27. clickhouse-server(DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&)+0x1ca8) [0x3186548]
28. clickhouse-server(DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&)+0x458) [0x3188af8]
29. clickhouse-server(Poco::Net::HTTPServerConnection::run()+0x2a9) [0x6a7aec9]
30. clickhouse-server(Poco::Net::TCPServerConnection::start()+0xf) [0x6a75e9f]
31. clickhouse-server(Poco::Net::TCPServerDispatcher::run()+0xe5) [0x6a76585]```