ID: 62157
Title: DB::Exception: Resolve identifier 'a' from parent scope only supported for constants and CTE.
Description:
> Please make sure that the version you're using is still supported (you can find the list [here](https://github.com/ClickHouse/ClickHouse/blob/master/SECURITY.md#scope-and-supported-versions)).

> You have to provide the following information whenever possible.

**Describe what's wrong**

> A clear and concise description of what works not as it is supposed to.

> A link to reproducer in [https://fiddle.clickhouse.com/](https://fiddle.clickhouse.com/).

With latest master branch, when we run `dotProduct.xml`, get following exception
```
DB::Exception: Resolve identifier 'a' from parent scope only supported for constants and CTE. Actual __getScalar('12068812512011724325_16646313706875636746') node type FUNCTION. In scope SELECT dotProduct(a, v) AS dp FROM vecs_Float32. (UNSUPPORTED_METHOD)
```

```
2024.04.02 17:20:09.575142 [ 101368 ] {a21b1741-4276-4269-be0e-4985041df550} <Error> TCPHandler: Code: 1. DB::Exception: Resolve identifier 'a' from parent scope only supported for constants and CTE. Actual __getScalar('12068812512011724325_16646313706875636746') node type FUNCTION. In scope SELECT dotProduct(a, v) AS dp FROM vecs_Float32. (UNSUPPORTED_METHOD), Stack trace (when copying this message, always include the lines below):

0. ../contrib/llvm-project/libcxx/include/exception:141: Poco::Exception::Exception(String const&, int) @ 0x0000000012e9b8f6
1. ./build1/../src/Common/Exception.cpp:96: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x0000000005e5e29d
2. ../contrib/llvm-project/libcxx/include/string:1499: DB::Exception::Exception<String const&, String, char const*, String>(int, FormatStringHelperImpl<std::type_identity<String const&>::type, std::type_identity<String>::type, std::type_identity<char const*>::type, std::type_identity<String>::type>, String const&, String&&, char const*&&, String&&) @ 0x000000000f6a66e1
3. ./build1/../src/Analyzer/Passes/QueryAnalysisPass.cpp:0: DB::(anonymous namespace)::QueryAnalyzer::tryResolveIdentifier(DB::(anonymous namespace)::IdentifierLookup const&, DB::(anonymous namespace)::IdentifierResolveScope&, DB::(anonymous namespace)::IdentifierResolveSettings) @ 0x000000000f66e374
4. ../contrib/llvm-project/libcxx/include/string:1499: DB::(anonymous namespace)::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, bool, bool) @ 0x000000000f662acd
5. ./build1/../src/Analyzer/Passes/QueryAnalysisPass.cpp:6511: DB::(anonymous namespace)::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, bool, bool) @ 0x000000000f660c14
6. ../contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:815: DB::(anonymous namespace)::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&) @ 0x000000000f6737f6
7. ../contrib/llvm-project/libcxx/include/vector:543: DB::(anonymous namespace)::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, bool, bool) @ 0x000000000f661fb9
8. ./build1/../src/Analyzer/Passes/QueryAnalysisPass.cpp:6511: DB::(anonymous namespace)::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, bool, bool) @ 0x000000000f660c14
9. ../contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:815: DB::(anonymous namespace)::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&) @ 0x000000000f669c89
10. ./build1/../src/Analyzer/Passes/QueryAnalysisPass.cpp:0: DB::(anonymous namespace)::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::(anonymous namespace)::IdentifierResolveScope&) @ 0x000000000f65a561
11. ./build1/../src/Analyzer/Passes/QueryAnalysisPass.cpp:6406: DB::(anonymous namespace)::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, bool, bool) @ 0x000000000f66256c
12. ../contrib/llvm-project/libcxx/include/vector:434: DB::(anonymous namespace)::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, DB::(anonymous namespace)::QueryExpressionsAliasVisitor&) @ 0x000000000f668d60
13. ./build1/../src/Analyzer/Passes/QueryAnalysisPass.cpp:7995: DB::(anonymous namespace)::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::(anonymous namespace)::IdentifierResolveScope&) @ 0x000000000f65a4fc
14. ./build1/../src/Analyzer/Passes/QueryAnalysisPass.cpp:0: DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000000f65842d
15. ./build1/../src/Analyzer/QueryTreePassManager.cpp:184: DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000000f6568c2
16. ./build1/../src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:0: DB::(anonymous namespace)::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000000f8e1d78
17. ./build1/../src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:132: DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x000000000f8e0871
18. ../contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:701: std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000000f8e2a31
19. ./build1/../src/Interpreters/InterpreterFactory.cpp:0: DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000000f881bac
20. ../contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:302: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000000fc76003
21. ./build1/../src/Interpreters/executeQuery.cpp:1374: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000000fc730b0
22. ../contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:612: DB::TCPHandler::runImpl() @ 0x0000000010c05729
23. ../contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:593: DB::TCPHandler::run() @ 0x0000000010c1c13c
24. ./build1/../base/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x0000000012db6e8c
25. ../contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:48: Poco::Net::TCPServerDispatcher::run() @ 0x0000000012db737a
26. ./build1/../base/poco/Foundation/src/ThreadPool.cpp:202: Poco::PooledThread::run() @ 0x0000000012ef2fe7
27. ../base/poco/Foundation/include/Poco/SharedPtr.h:139: Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000012ef0a0f
28. ? @ 0x00007feba68c7609
29. ? @ 0x00007feba67ec133
```

**Does it reproduce on the most recent release?**

[The list of releases](https://github.com/ClickHouse/ClickHouse/blob/master/utils/list-versions/version_date.tsv)

**Enable crash reporting**

> Change "enabled" to true in "send_crash_reports" section in `config.xml`:
```
<send_crash_reports>
        <!-- Changing <enabled> to true allows sending crash reports to -->
        <!-- the ClickHouse core developers team via Sentry https://sentry.io -->
        <enabled>false</enabled>
```

**How to reproduce**

* Which ClickHouse server version to use
* Which interface to use, if it matters
* Non-default settings, if any
* `CREATE TABLE` statements for all tables involved
* Sample data for all these tables, use [clickhouse-obfuscator](https://github.com/ClickHouse/ClickHouse/blob/master/programs/obfuscator/Obfuscator.cpp#L42-L80) if necessary
* Queries to run that lead to an unexpected result

**Expected behavior**

> A clear and concise description of what you expected to happen.

**Error message and/or stacktrace**

> If applicable, add screenshots to help explain your problem.

**Additional context**

> Add any other context about the problem here.
