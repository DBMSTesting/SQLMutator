ID: 75699
Title: Logical error in JOIN Merge table over Distributed
Description:
https://s3.amazonaws.com/clickhouse-test-reports/75454/0317e5e21f151e8c04763f694173297655a4c597/stress_test__tsan_.html

```SQL
DROP TABLE IF EXISTS a;
DROP TABLE IF EXISTS aa;
DROP TABLE IF EXISTS b;
DROP TABLE IF EXISTS m;

CREATE TABLE a (key UInt32) ENGINE = MergeTree ORDER BY key;
CREATE TABLE b (key UInt32, ID UInt32) ENGINE = MergeTree ORDER BY key;

CREATE TABLE aa (key UInt32) ENGINE = Distributed(test_cluster_two_shards, currentDatabase(), a, key);

CREATE TABLE m (key UInt32) ENGINE = Merge(currentDatabase(), 'a');

INSERT INTO a VALUES (0);
INSERT INTO b VALUES (0, 1), (42, 1);

SELECT * FROM m INNER JOIN b USING(key) WHERE ID = 1;

```

```
<Error> executeQuery: Code: 49. DB::Exception: Column ID UInt32 query tree node does not have valid source node. (LOGICAL_ERROR) (version 25.2.1.1) (from 127.0.0.1:63716) (query 11, line 18) (in query: SELECT * FROM m INNER JOIN b USING(key) WHERE ID = 1;), Stack trace (when copying this message, always include the lines below):

0. ./contrib/llvm-project/libcxx/include/__exception/exception.h:106: Poco::Exception::Exception(String const&, int) @ 0x0000000016c1b22b
1. ./_build/release/./src/Common/Exception.cpp:106: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000c37d5b9
2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000711ae2c
3. DB::Exception::Exception<String const&, String>(int, FormatStringHelperImpl<std::type_identity<String const&>::type, std::type_identity<String>::type>, String const&, String&&) @ 0x0000000007720eab
4. ./_build/release/./src/Analyzer/ColumnNode.cpp:36: DB::ColumnNode::getColumnSource() const @ 0x000000001105f6b7
5. ./_build/release/./src/Analyzer/createUniqueAliasesIfNecessary.cpp:156: DB::InDepthQueryTreeVisitorWithContext<DB::(anonymous namespace)::CreateUniqueArrayJoinAliasesVisitor>::visit(std::shared_ptr<DB::IQueryTreeNode>&) @ 0x0000000011148fb1
6. ./src/Analyzer/InDepthQueryTreeVisitor.h:205: DB::InDepthQueryTreeVisitorWithContext<DB::(anonymous namespace)::CreateUniqueArrayJoinAliasesVisitor>::visit(std::shared_ptr<DB::IQueryTreeNode>&) @ 0x000000001114906d
7. ./src/Analyzer/InDepthQueryTreeVisitor.h:205: DB::InDepthQueryTreeVisitorWithContext<DB::(anonymous namespace)::CreateUniqueArrayJoinAliasesVisitor>::visit(std::shared_ptr<DB::IQueryTreeNode>&) @ 0x000000001114906d
8. ./src/Analyzer/InDepthQueryTreeVisitor.h:205: DB::InDepthQueryTreeVisitorWithContext<DB::(anonymous namespace)::CreateUniqueArrayJoinAliasesVisitor>::visit(std::shared_ptr<DB::IQueryTreeNode>&) @ 0x000000001114906d
9. ./_build/release/./src/Analyzer/createUniqueAliasesIfNecessary.cpp:228: DB::createUniqueAliasesIfNecessary(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const> const&) @ 0x00000000111482a5
10. ./_build/release/./src/Storages/buildQueryTreeForShard.cpp:431: DB::buildQueryTreeForShard(std::shared_ptr<DB::PlannerContext> const&, std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000012fc933e
11. ./_build/release/./src/Storages/StorageDistributed.cpp:832: DB::StorageDistributed::read(DB::QueryPlan&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageSnapshot> const&, DB::SelectQueryInfo&, std::shared_ptr<DB::Context const>, DB::QueryProcessingStage::Enum, unsigned long, unsigned long) @ 0x0000000012cd2a1f
12. ./_build/release/./src/Storages/StorageMerge.cpp:1148: DB::ReadFromMerge::createPlanForTable(std::shared_ptr<DB::StorageSnapshot> const&, DB::SelectQueryInfo&, DB::QueryProcessingStage::Enum, unsigned long, std::tuple<String, std::shared_ptr<DB::IStorage>, std::shared_ptr<DB::RWLockImpl::LockHolderImpl>, String> const&, std::vector<String, std::allocator<String>> const&, std::optional<DB::ReadFromMerge::RowPolicyData> const&, std::shared_ptr<DB::Context>, unsigned long) const @ 0x0000000012dafab1
13. ./_build/release/./src/Storages/StorageMerge.cpp:707: DB::ReadFromMerge::createChildrenPlans(DB::SelectQueryInfo&) const @ 0x0000000012daa2dd
14. ./_build/release/./src/Storages/StorageMerge.cpp:567: DB::ReadFromMerge::filterTablesAndCreateChildrenPlans() @ 0x0000000012da7c18
15. ./_build/release/./src/Storages/StorageMerge.cpp:1586: DB::ReadFromMerge::getChildPlans() @ 0x0000000012db5b57
16. ./_build/release/./src/Processors/QueryPlan/QueryPlan.cpp:420: DB::QueryPlan::explainPlan(DB::WriteBuffer&, DB::ExplainPlanOptions const&, unsigned long) const @ 0x0000000013d49fca
17. ./_build/release/./src/Planner/Utils.cpp:86: DB::dumpQueryPlan(DB::QueryPlan const&) @ 0x00000000110b6c0a
18. ./_build/release/./src/Processors/QueryPlan/QueryPlan.cpp:497: DB::QueryPlan::optimize(DB::QueryPlanOptimizationSettings const&) @ 0x0000000013d4709f
19. ./_build/release/./src/Processors/QueryPlan/QueryPlan.cpp:175: DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x0000000013d4628e
20. ./_build/release/./src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:274: DB::InterpreterSelectQueryAnalyzer::buildQueryPipeline() @ 0x00000000119b716e
21. ./_build/release/./src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:241: DB::InterpreterSelectQueryAnalyzer::execute() @ 0x00000000119b6efe
22. ./_build/release/./src/Interpreters/executeQuery.cpp:1456: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x0000000011cfd774
23. ./_build/release/./src/Interpreters/executeQuery.cpp:1622: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x0000000011cf96c2
24. ./_build/release/./src/Server/TCPHandler.cpp:662: DB::TCPHandler::runImpl() @ 0x00000000138826da
25. ./_build/release/./src/Server/TCPHandler.cpp:2625: DB::TCPHandler::run() @ 0x000000001389e018
26. ./_build/release/./base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x0000000016cc4b27
27. ./_build/release/./base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x0000000016cc4ffa
28. ./_build/release/./base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x0000000016c707f2
29. ./base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000016c6e2c3
30. ? @ 0x00007401a1494ac3
31. ? @ 0x00007401a1526850
```