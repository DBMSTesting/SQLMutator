ID: 40094
Title: Query with Order By toStartOfHour(created) will actually order by the full created datetime, instead of just worrying about the hour
Description:
**Describe what's wrong**
I was expecting the function `toStartOfHour(<DateTime>)` to be effectively identical to `date_trunc('hour', <DateTime>)`.
In fact, they product very different results when ordering by.

Example:
`select created from mydb.mytable where eventday = '2022-04-01' order by rand() limit 10000`
Produces an example result like:
```
2022-04-01 08:22:46.000
2022-04-01 19:23:30.000
2022-04-01 11:52:03.000
2022-04-01 18:05:14.000
2022-04-01 08:26:48.000
2022-04-01 08:47:11.000
2022-04-01 06:23:11.000
2022-04-01 04:24:00.000
2022-04-01 03:02:43.000
2022-04-01 02:49:41.000
```

Wrap that in a query to order by toStartOfHour:
```sql
select toStartOfHour(created) as t1, created from (
  select created from mydb.mytable where eventday = '2022-04-01' order by rand() limit 10000
) order by t1;
```
Produces:
```
2022-04-01 00:00:00.000	2022-04-01 00:00:10.000
2022-04-01 00:00:00.000	2022-04-01 00:00:23.000
2022-04-01 00:00:00.000	2022-04-01 00:00:34.000
2022-04-01 00:00:00.000	2022-04-01 00:00:36.000
2022-04-01 00:00:00.000	2022-04-01 00:00:42.000
2022-04-01 00:00:00.000	2022-04-01 00:00:42.000
2022-04-01 00:00:00.000	2022-04-01 00:00:49.000
2022-04-01 00:00:00.000	2022-04-01 00:00:53.000
2022-04-01 00:00:00.000	2022-04-01 00:00:53.000
2022-04-01 00:00:00.000	2022-04-01 00:01:13.000
```

But if you change it to date_trunc, you get what I expect:
```sql
select date_trunc('hour', created) as t1, created from (
  select created from mydb.mytable where eventday = '2022-04-01' order by rand() limit 10000
) order by t1;
```
Result:
```
2022-04-01 00:00:00.000	2022-04-01 00:04:00.000
2022-04-01 00:00:00.000	2022-04-01 00:27:06.000
2022-04-01 00:00:00.000	2022-04-01 00:19:17.000
2022-04-01 00:00:00.000	2022-04-01 00:44:02.000
2022-04-01 00:00:00.000	2022-04-01 00:47:44.000
2022-04-01 00:00:00.000	2022-04-01 00:59:58.000
2022-04-01 00:00:00.000	2022-04-01 00:43:58.000
2022-04-01 00:00:00.000	2022-04-01 00:55:13.000
2022-04-01 00:00:00.000	2022-04-01 00:05:11.000
2022-04-01 00:00:00.000	2022-04-01 00:53:46.000
```

**Does it reproduce on recent release?**
Haven't tested recent releases yet.

**How to reproduce**
* Which ClickHouse server version to use
22.3.2.2
* Which interface to use, if matters
DBeaver
* Non-default settings, if any
None that I know of. DBeaver client is using UTC time.
* `CREATE TABLE` statements for all tables involved
```sql
CREATE TABLE IF NOT EXISTS mydb.mytable_local ON CLUSTER mycluster (
    created          DateTime,
    eventday         Date DEFAULT toDate(created),
    user_id          UInt32
    -- lots of other columns
)
    ENGINE = ReplicatedMergeTree('/clickhouse/tables/{shard}/mydb.mytable_local', '{replica}')
    PARTITION BY toYYYYMM(eventday)
    ORDER BY (user_id, eventday, created)
    TTL eventday + toIntervalDay(ttldays) DELETE;
CREATE TABLE IF NOT EXISTS mydb.mytable ON CLUSTER mycluster AS mydb.mytable_local ENGINE = Distributed(mycluster, mydb, mytable_local, rand());
```
* Sample data for all these tables, use [clickhouse-obfuscator]
just fill with lots of random timestamps within 1 day
* Queries to run that lead to unexpected result

**Expected behavior**
date_trunc('hour', ...) and toStartOfHour(...) should behave the same

**Additional weirdness**
If you add a sort on a hash, toStartOfHour will fail, while date_trunc will succeed:
`select created from mydb.mytable where eventday = '2022-04-01' order by date_trunc('hour', created), intHash64(created) limit 10000`
gives good results.

`select created from mydb.mytable where eventday = '2022-04-01' order by toStartOfHour(created), intHash64(created) limit 10000`
gives: 
`SQL Error [10]: ClickHouse exception, code: 10, host: localhost, port: 8123; Code: 10, e.displayText() = DB::Exception: Not found column intHash64(created) in block. There are only columns: created`