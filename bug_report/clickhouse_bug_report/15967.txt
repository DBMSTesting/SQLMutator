ID: 15967
Title: clickhouse ignores proxy settings specified in configuration of s3 storage
Description:
## Clickhouse version
docker yandex/clickhouse-server:20.9.3

## Issue

I'm trying to make Clickhouse s3 storage work when proxy settings specified. As it's not documented yet, all settings I tried are borrowed from your integration tests: https://github.com/Jokser/ClickHouse/blob/6165c2aa991639ef8b4581b77ff5cc76d595c6a0/tests/integration/test_s3_with_proxy/configs/config.d/storage_conf.xml

I tried both proxy uri and proxy resolver. And no matter what option I choose I get the following errors:

```
2020.10.14 10:34:25.248074 [ 48 ] {} <Error> AWSClient: Failed to make request to: https://s3.cloud.mts.ru/ch/data/avmcktmyguznknjtmcmudaypeeynhfvk: Poco::Exception. Code: 1000, e.code() = 0, e.displayText() = Timeout: connect timed out: 213.108.128.78:443, Stack trace (when copying this message, always include the lines below):

0. Poco::TimeoutException::TimeoutException(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x18e1fa9f in /usr/bin/clickhouse
1. ? @ 0x18d34295 in /usr/bin/clickhouse
2. Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool) @ 0x18ccaed5 in /usr/bin/clickhouse
3. Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&) @ 0x18cce021 in /usr/bin/clickhouse
4. Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&) @ 0x18cfe175 in /usr/bin/clickhouse
5. Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&) @ 0x18cc541b in /usr/bin/clickhouse
6. Poco::Net::HTTPClientSession::reconnect() @ 0x18ceb078 in /usr/bin/clickhouse
7. Poco::Net::HTTPClientSession::sendRequest(Poco::Net::HTTPRequest&) @ 0x18cec3d8 in /usr/bin/clickhouse
8. DB::S3::PocoHTTPClient::MakeRequestInternal(Aws::Http::HttpRequest&, std::__1::shared_ptr<Aws::Http::Standard::StandardHttpResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const @ 0x152763a2 in /usr/bin/clickhouse
9. DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const @ 0x15277cc4 in /usr/bin/clickhouse
10. Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*) const @ 0x16fd1e45 in /usr/bin/clickhouse
11. Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*) const @ 0x16fd2805 in /usr/bin/clickhouse
12. Aws::Client::AWSXMLClient::MakeRequest(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*) const @ 0x16fd38af in /usr/bin/clickhouse
13. Aws::S3::S3Client::PutObject(Aws::S3::Model::PutObjectRequest const&) const @ 0x16f2aac6 in /usr/bin/clickhouse
14. DB::WriteBufferFromS3::complete() @ 0x15826084 in /usr/bin/clickhouse
15. ? @ 0x1580ff58 in /usr/bin/clickhouse
16. ? @ 0x158029ca in /usr/bin/clickhouse
17. ? @ 0x1580422e in /usr/bin/clickhouse
18. DB::DiskFactory::create(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Poco::Util::AbstractConfiguration const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context const&) const @ 0x157f17e0 in /usr/bin/clickhouse
19. DB::DiskSelector::DiskSelector(Poco::Util::AbstractConfiguration const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context const&) @ 0x157df7bc in /usr/bin/clickhouse
20. DB::Context::getDiskSelector(std::__1::lock_guard<std::__1::mutex>&) const @ 0x1585500d in /usr/bin/clickhouse
21. DB::Context::getStoragePolicySelector(std::__1::lock_guard<std::__1::mutex>&) const @ 0x15855e3d in /usr/bin/clickhouse
22. DB::Context::getStoragePolicy(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const @ 0x15855f8c in /usr/bin/clickhouse
23. DB::MergeTreeData::getStoragePolicy() const @ 0x16214326 in /usr/bin/clickhouse
24. DB::MergeTreeData::getRelativeDataPathsWithDisks() const @ 0x1621ecc5 in /usr/bin/clickhouse
25. DB::MergeTreeData::MergeTreeData(DB::StorageID const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::StorageInMemoryMetadata const&, DB::Context&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::MergeTreeData::MergingParams const&, std::__1::unique_ptr<DB::MergeTreeSettings, std::__1::default_delete<DB::MergeTreeSettings> >, bool, bool, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>) @ 0x1623e0bd in /usr/bin/clickhouse
26. DB::StorageMergeTree::StorageMergeTree(DB::StorageID const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::StorageInMemoryMetadata const&, bool, DB::Context&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::MergeTreeData::MergingParams const&, std::__1::unique_ptr<DB::MergeTreeSettings, std::__1::default_delete<DB::MergeTreeSettings> >, bool) @ 0x1602e13f in /usr/bin/clickhouse
27. ? @ 0x1642ae6c in /usr/bin/clickhouse
28. std::__1::__function::__func<std::__1::shared_ptr<DB::IStorage> (*)(DB::StorageFactory::Arguments const&), std::__1::allocator<std::__1::shared_ptr<DB::IStorage> (*)(DB::StorageFactory::Arguments const&)>, std::__1::shared_ptr<DB::IStorage> (DB::StorageFactory::Arguments const&)>::operator()(DB::StorageFactory::Arguments const&) @ 0x1642ecb7 in /usr/bin/clickhouse
29. DB::StorageFactory::get(DB::ASTCreateQuery const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, DB::Context&, DB::ColumnsDescription const&, DB::ConstraintsDescription const&, bool) const @ 0x15faad11 in /usr/bin/clickhouse
30. DB::createTableFromAST(DB::ASTCreateQuery, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool) @ 0x158e78f9 in /usr/bin/clickhouse
31. ? @ 0x158db401 in /usr/bin/clickhouse
 (version 20.9.3.45 (official build))
2020.10.14 10:34:25.248225 [ 48 ] {} <Error> AWSClient: HTTP response code: -1
Exception name:
Error message: Poco::Exception. Code: 1000, e.code() = 0, e.displayText() = Timeout: connect timed out: 213.108.128.78:443 (version 20.9.3.45 (official build))
0 response headers:
2020.10.14 10:34:25.248251 [ 48 ] {} <Warning> AWSClient: If the signature check failed. This could be because of a time skew. Attempting to adjust the signer.
2020.10.14 10:34:25.248281 [ 48 ] {} <Warning> AWSClient: Request failed, now waiting 12800 ms before attempting again.
```

Here the configurations I've played with:

1) proxy uri:

```xml
<yandex>
  <storage_configuration>
    <disks>
      <s3>
        <type>s3</type>
        <endpoint>https://s3.cloud.mts.ru/ch/data/</endpoint>
        <access_key_id>***</access_key_id>
        <secret_access_key>***</secret_access_key>
      </s3>
      <proxy>
          <uri>http://squid.corp.local:3128</uri>
      </proxy>
      <policies>
        <s3>
          <volumes>
            <main>
              <disk>s3</disk>
            </main>
          </volumes>
        </s3>
      </policies>
    </disks>
  </storage_configuration>
</yandex>
```

2) proxy resolver:

```xml
<yandex>
  <storage_configuration>
    <disks>
      <s3>
        <type>s3</type>
        <endpoint>https://s3.cloud.mts.ru/ch/data/</endpoint>
        <access_key_id>***</access_key_id>
        <secret_access_key>***</secret_access_key>
      </s3>
      <proxy>
          <resolver>
             <endpoint>http://clickhouse-test.corp.local:8080</endpoint>
             <scheme>http</scheme>
             <port>3128</port>
          </resolver>
      </proxy>
      <policies>
        <s3>
          <volumes>
            <main>
              <disk>s3</disk>
            </main>
          </volumes>
        </s3>
      </policies>
    </disks>
  </storage_configuration>
</yandex>
```

The proxy resolver is a python app as in the integration tests:

```python
import bottle
import random

@bottle.route('/')
def index():
  return 'squid.corp.local'

bottle.run(host='0.0.0.0', port=8080)
```

I can not find any log of Clickhouse connection to our proxy (Squid). Also I did not get the connection from Clickhouse to the proxy resolver. Therefore I can conclude that Clickhouse has ignored proxy settings in the configuration or I did something wrong even though I was guided by the example from your code. 