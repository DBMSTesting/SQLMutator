ID: 71298
Title: PostgreSQL connector doesn't support non UTF-8 strings
Description:
**Describe the bug**
In Clickhouse, strings may contain invalid UTF-8 characters, but the PostgreSQL connector doesn't accept those.

**How to reproduce**
In PostgreSQL run:
```sql
CREATE SCHEMA test;
CREATE TABLE test.t0(c0 bytea); --an equivalent binary type
```
Then in Clickhouse run:
```sql
CREATE TABLE t0 (c0 String) ENGINE = PostgreSQL('<host:port>', '<dbname>', 't0', '<user>', '<password>', 'test');
INSERT INTO TABLE t0 (c0) VALUES (x'f0288cbc'); --invalid UTF-8 string logical error
```
Stack trace:
```
<Fatal> : Logical error: 'std::exception. Code: 1001, type: pqxx::argument_error, e.what() = Invalid byte sequence for encoding UTF8 at byte 0: 0xf0 0x28 0x8c 0xbc (version 24.11.1.540 (official build)), Stack trace:

0. ./contrib/llvm-project/libcxx/include/exception:141: std::logic_error::logic_error(String const&) @ 0x000000003aa14f0e
1. ./contrib/llvm-project/libcxx/include/stdexcept:140: pqxx::argument_error::argument_error(String const&) @ 0x0000000039d9bf6e
2. contrib/libpqxx/src/encodings.cxx:62: (anonymous namespace)::throw_for_encoding_error(char const*, char const*, unsigned long, unsigned long) @ 0x0000000039d98792
3. contrib/libpqxx/src/encodings.cxx:0: pqxx::internal::glyph_scanner<(pqxx::internal::encoding_group)14>::call(char const*, unsigned long, unsigned long) @ 0x0000000039d99d27
4. contrib/libpqxx/src/stream_to.cxx:142: pqxx::stream_to::escape_field_to_buffer(std::basic_string_view<char, std::char_traits<char>>) @ 0x0000000039db4fb0
5. ./contrib/libpqxx/include/pqxx/stream_to.hxx:398: DB::PostgreSQLSink::StreamTo::insert(std::vector<std::optional<String>, std::allocator<std::optional<String>>> const&) @ 0x000000002c4aafbb
6. src/Storages/StoragePostgreSQL.cpp:293: DB::PostgreSQLSink::consume(DB::Chunk&) @ 0x000000002c4a968c
7. src/Processors/Sinks/SinkToStorage.cpp:18: DB::SinkToStorage::onConsume(DB::Chunk) @ 0x000000002e758f5c
8. src/Processors/Transforms/ExceptionKeepingTransform.cpp:150: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::ExceptionKeepingTransform::work()::$_1, void ()>>(std::__function::__policy_storage const*) @ 0x000000002e51e79a
9. ./contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x000000002e51e2b1
10. src/Processors/Transforms/ExceptionKeepingTransform.cpp:150: DB::ExceptionKeepingTransform::work() @ 0x000000002e51d406
11. src/Processors/Executors/ExecutionThreadContext.cpp:47: DB::ExecutionThreadContext::executeTask() @ 0x000000002decb80e
12. src/Processors/Executors/PipelineExecutor.cpp:289: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x000000002deb0111
13. src/Processors/Executors/PipelineExecutor.cpp:163: DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x000000002deaef72
14. src/Server/TCPHandler.cpp:1020: DB::TCPHandler::processInsertQuery() @ 0x000000002dce4d8f
15. src/Server/TCPHandler.cpp:612: DB::TCPHandler::runImpl() @ 0x000000002dcd15ff
16. src/Server/TCPHandler.cpp:2527: DB::TCPHandler::run() @ 0x000000002dd03800
17. base/poco/Net/src/TCPServerConnection.cpp:43: Poco::Net::TCPServerConnection::start() @ 0x000000003522564f
18. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x0000000035226237
19. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x0000000035127f3c
20. ./base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000035122088
21. asan_thread_start(void*) @ 0x000000000ad58059
22. ? @ 0x00007ffff7ca1e2e
23. ? @ 0x00007ffff7d33a4c
```