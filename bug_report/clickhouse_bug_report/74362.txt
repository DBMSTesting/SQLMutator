ID: 74362
Title: Unsupported JOIN keys of type keys256 in StorageJoin. Storage Join + Parallel replicas
Description:
Test `02498_storage_join_key_positions`

```
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS tj;

CREATE TABLE t1 (key1 UInt64, key2 UInt64, key3 UInt64) ENGINE = MergeTree ORDER BY tuple();
INSERT INTO t1 VALUES (11, 12, 13), (21, 22, 23), (31, 32, 33), (41, 42, 43), (51, 52, 53);

CREATE TABLE tj (key2 UInt64, key1 UInt64, key3 UInt64, attr UInt64) ENGINE = Join(ALL, INNER, key3, key2, key1);
INSERT INTO tj VALUES (22, 21, 23, 2000), (32, 31, 33, 3000), (42, 41, 43, 4000), (52, 51, 53, 5000), (62, 61, 63, 6000);
SET enable_analyzer = 1;

SELECT * FROM t1 ALL INNER JOIN tj USING (key1, key2, key3) ORDER BY key1;
```

Result:
```
[nikpc] 2025.01.09 11:28:42.825535 [ 179051 ] {97107da8-2dae-40a6-a3c2-f11a537c3eee} <Error> executeQuery: Code: 121. DB::Exception: Unsupported JOIN keys of type keys256 in StorageJoin: While executing Join. (UNSUPPORTED_JOIN_KEYS) (version 25.1.1.1921 (official build)) (from [::ffff:127.0.0.1]:55978) (comment: 02498_storage_join_key_positions.gen.sql) (in query: SELECT * FROM t1 ALL INNER JOIN tj USING (key1, key2, key3) ORDER BY key1;), Stack trace (when copying this message, always include the lines below):

0. ./build_docker/./src/Common/Exception.cpp:107: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000d87b63b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000000086ff62c
2. ./src/Common/Exception.h:123: DB::Exception::Exception<DB::HashJoin::Type&>(int, FormatStringHelperImpl<std::type_identity<DB::HashJoin::Type&>::type>, DB::HashJoin::Type&) @ 0x00000000125a388b
3. ./build_docker/./src/Storages/StorageJoin.cpp:624: bool static_for_impl<int, 0, bool DB::joinDispatch<std::variant<DB::HashJoin::MapsTemplate<DB::RowRef>, DB::HashJoin::MapsTemplate<DB::RowRefList>, DB::HashJoin::MapsTemplate<std::unique_ptr<DB::SortedLookupVectorBase, std::default_delete<DB::SortedLookupVectorBase>>>>, DB::JoinSource::generate()::'lambda'(int, auto, auto&)>(DB::JoinKind, DB::JoinStrictness, int&, bool, auto&&)::'lambda'(int), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23>(auto&&, std::integer_sequence<int, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23...>) @ 0x0000000012ac6323
4. ./base/base/../base/constexpr_helpers.h:31: DB::JoinSource::generate() @ 0x0000000012ab8641
5. ./build_docker/./src/Processors/ISource.cpp:139: DB::ISource::tryGenerate() @ 0x00000000137b1d1b
6. ./build_docker/./src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x00000000137b1a07
7. ./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:49: DB::ExecutionThreadContext::executeTask() @ 0x00000000137cdc67
8. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:290: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000137c0904
9. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:256: void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne180100]<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x00000000137c346e
10. ./contrib/llvm-project/libcxx/include/__functional/function.h:714: ? @ 0x000000000d957a7b
11. ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:312: void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne180100]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000d95e342
12. ./contrib/llvm-project/libcxx/include/__functional/function.h:714: ? @ 0x000000000d954dff
13. ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:312: void* std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000d95bf7a
14. ? @ 0x00007f811ea9ca94
15. ? @ 0x00007f811eb29c3c

Received exception from server (version 25.1.1):
Code: 121. DB::Exception: Received from localhost:9000. DB::Exception: Unsupported JOIN keys of type keys256 in StorageJoin: While executing Join. (UNSUPPORTED_JOIN_KEYS)
(query: SELECT * FROM t1 ALL INNER JOIN tj USING (key1, key2, key3) ORDER BY key1;)

```


Test `01594_storage_join_uuid`

Repro:
```
DROP TABLE IF EXISTS joint;
DROP TABLE IF EXISTS t;

CREATE TABLE IF NOT EXISTS joint
(
    id    UUID,
    value LowCardinality(String)
)
ENGINE = Join (ANY, LEFT, id);

CREATE TABLE IF NOT EXISTS t
(
    id    UUID,
    d     DateTime
)
ENGINE = MergeTree
PARTITION BY toDate(d)
ORDER BY id;

insert into joint VALUES ('00000000-0000-0000-0000-000000000000', 'yo');
insert into t VALUES ('00000000-0000-0000-0000-000000000000', now());

SELECT id FROM t
ANY LEFT JOIN joint ON t.id = joint.id;
```


Result:
```
[nikpc] 2025.01.09 11:31:38.798206 [ 179051 ] {777dc4d0-ac1b-42e0-b3d7-69284bfc460e} <Error> executeQuery: Code: 121. DB::Exception: Unsupported JOIN keys of type keys128 in StorageJoin: While executing Join. (UNSUPPORTED_JOIN_KEYS) (version 25.1.1.1921 (official build)) (from [::ffff:127.0.0.1]:39866) (comment: 01594_storage_join_uuid.sql) (in query: SELECT id FROM t ANY LEFT JOIN joint ON t.id = joint.id;), Stack trace (when copying this message, always include the lines below):

0. ./build_docker/./src/Common/Exception.cpp:107: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000d87b63b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000000086ff62c
2. ./src/Common/Exception.h:123: DB::Exception::Exception<DB::HashJoin::Type&>(int, FormatStringHelperImpl<std::type_identity<DB::HashJoin::Type&>::type>, DB::HashJoin::Type&) @ 0x00000000125a388b
3. ./build_docker/./src/Storages/StorageJoin.cpp:624: bool static_for_impl<int, 0, bool DB::joinDispatch<std::variant<DB::HashJoin::MapsTemplate<DB::RowRef>, DB::HashJoin::MapsTemplate<DB::RowRefList>, DB::HashJoin::MapsTemplate<std::unique_ptr<DB::SortedLookupVectorBase, std::default_delete<DB::SortedLookupVectorBase>>>>, DB::JoinSource::generate()::'lambda'(int, auto, auto&)>(DB::JoinKind, DB::JoinStrictness, int&, bool, auto&&)::'lambda'(int), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23>(auto&&, std::integer_sequence<int, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23...>) @ 0x0000000012ac6405
4. ./base/base/../base/constexpr_helpers.h:31: DB::JoinSource::generate() @ 0x0000000012ab8641
5. ./build_docker/./src/Processors/ISource.cpp:139: DB::ISource::tryGenerate() @ 0x00000000137b1d1b
6. ./build_docker/./src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x00000000137b1a07
7. ./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:49: DB::ExecutionThreadContext::executeTask() @ 0x00000000137cdc67
8. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:290: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000137c0904
9. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:256: void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne180100]<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x00000000137c346e
10. ./contrib/llvm-project/libcxx/include/__functional/function.h:714: ? @ 0x000000000d957a7b
11. ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:312: void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne180100]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000d95e342
12. ./contrib/llvm-project/libcxx/include/__functional/function.h:714: ? @ 0x000000000d954dff
13. ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:312: void* std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000d95bf7a
14. ? @ 0x00007f811ea9ca94
15. ? @ 0x00007f811eb29c3c

Received exception from server (version 25.1.1):
Code: 121. DB::Exception: Received from localhost:9000. DB::Exception: Unsupported JOIN keys of type keys128 in StorageJoin: While executing Join. (UNSUPPORTED_JOIN_KEYS)
(query: SELECT id FROM t
ANY LEFT JOIN joint ON t.id = joint.id;)
```

Version 25.1.1.1921
