ID: 36755
Title: ClickHouse does't put schema name when it retrieves array dimension size
Description:
> You have to provide the following information whenever possible.

I have postgresql (11.14) with schema described bellow
```
create schema etl;
create table etl.test (
    arr bigint[]
);

insert into etl.test VALUES ('{{NULL}}')
```
So, I've created multi dimensional array with NULL.

Then, I tried to fetch it in ClickHouse:

```
SELECT * FROM postgresql('postgres:5432','db','test','main_user','pwd','etl')
```

I'm getting an error:
```
DB::Exception: PostgreSQL table test does not exist. Stack trace:

0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0xb6fbcfa in /usr/bin/clickhouse
1. DB::Exception::Exception<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>(int, fmt::v8::basic_format_string<char, fmt::v8::type_identity<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>::type>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0xb768a58 in /usr/bin/clickhouse
2. std::__1::shared_ptr<DB::PostgreSQLTableStructure::ColumnsInfo> DB::readNamesAndTypesList<pqxx::transaction<(pqxx::isolation_level)0, (pqxx::write_policy)0> >(pqxx::transaction<(pqxx::isolation_level)0, (pqxx::write_policy)0>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool, bool) @ 0x1534b8af in /usr/bin/clickhouse
3. DB::PostgreSQLTableStructure DB::fetchPostgreSQLTableStructure<pqxx::transaction<(pqxx::isolation_level)0, (pqxx::write_policy)0> >(pqxx::transaction<(pqxx::isolation_level)0, (pqxx::write_policy)0>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool, bool, bool) @ 0x15349bd0 in /usr/bin/clickhouse
4. DB::fetchPostgreSQLTableStructure(pqxx::connection&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool) @ 0x15352df6 in /usr/bin/clickhouse
5. DB::TableFunctionPostgreSQL::getActualTableStructure(std::__1::shared_ptr<DB::Context const>) const @ 0x15135de0 in /usr/bin/clickhouse
6. DB::TableFunctionPostgreSQL::executeImpl(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::ColumnsDescription) const @ 0x151357ea in /usr/bin/clickhouse
7. DB::ITableFunction::execute(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::ColumnsDescription, bool) const @ 0x1541d691 in /usr/bin/clickhouse
8. DB::Context::executeTableFunction(std::__1::shared_ptr<DB::IAST> const&) @ 0x15ce1bc5 in /usr/bin/clickhouse
9. DB::JoinedTables::getLeftTableStorage() @ 0x1618e199 in /usr/bin/clickhouse
10. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, DB::SubqueryForSet, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, DB::SubqueryForSet> > >, std::__1::unordered_map<DB::PreparedSetKey, std::__1::shared_ptr<DB::Set>, DB::PreparedSetKey::Hash, std::__1::equal_to<DB::PreparedSetKey>, std::__1::allocator<std::__1::pair<DB::PreparedSetKey const, std::__1::shared_ptr<DB::Set> > > >) @ 0x160ffbfe in /usr/bin/clickhouse
11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x160fea62 in /usr/bin/clickhouse
12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::__1::shared_ptr<DB::IAST> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x161600ea in /usr/bin/clickhouse
13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x1615e3b6 in /usr/bin/clickhouse
14. DB::InterpreterInsertQuery::execute() @ 0x160e5021 in /usr/bin/clickhouse
15. ? @ 0x1642b895 in /usr/bin/clickhouse
16. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x16428f35 in /usr/bin/clickhouse
17. DB::TCPHandler::runImpl() @ 0x16fe528a in /usr/bin/clickhouse
18. DB::TCPHandler::run() @ 0x16ff58b9 in /usr/bin/clickhouse
19. Poco::Net::TCPServerConnection::start() @ 0x1b3e782f in /usr/bin/clickhouse
20. Poco::Net::TCPServerDispatcher::run() @ 0x1b3e9c81 in /usr/bin/clickhouse
21. Poco::PooledThread::run() @ 0x1b5b06c9 in /usr/bin/clickhouse
22. Poco::ThreadImpl::runnableEntry(void*) @ 0x1b5ada20 in /usr/bin/clickhouse
23. ? @ 0x7f99a1b7e609 in ?
24. clone @ 0x7f99a1aa3163 in ?
```

```
DESCRIBE TABLE postgresql('postgres:5432','db','test','main_user','pwd','etl')
arr Array(Nullable(Int64))
```

In postgresql log i've found :
```
ERROR:  relation "test" does not exist at character 33
STATEMENT:  SELECT array_ndims(arr) FROM test LIMIT 1
```

It happens, because ClickHouse doesn't put schema hear
https://github.com/ClickHouse/ClickHouse/blob/master/src/Databases/PostgreSQL/fetchPostgreSQLTableStructure.cpp#L216

ClickHouse version: 22.3.4.20