ID: 4919
Title: LowCardinality(Nullable(String)) and argMax seg fault
Description:
>**Describe the bug**
>A clear and concise description of what the bug is.

execution of a query results in segmentation fault
>**How to reproduce**
>* Which ClickHouse server version to use

master branch(9158e040753cc6dac870b8cab95fbe23173bc928), as well as 19.6.1
>* Queries to run that lead to unexpected result

```sql
CREATE TABLE default.test (`date` Date, `name` LowCardinality(Nullable(String)), `clicks` Nullable(Int32)) ENGINE = MergeTree() ORDER BY date SETTINGS index_granularity = 8192;
INSERT INTO test SELECT '2019-01-01', null, 0 FROM numbers(1000000);
SELECT date, argMax(name, clicks) FROM test GROUP BY date;
```

>**Error message and/or stacktrace**
```
Program terminated with signal SIGSEGV, Segmentation fault.
#0  memcpy (destination=0x7fc988e58050, source=<optimized out>, size=<optimized out>) at /usr/lib/gcc/x86_64-pc-linux-gnu/8.2.1/include/emmintrin.h:696
696   return *__P;
[Current thread is 1 (LWP 24144)]
(gdb) bt
#0  memcpy (destination=0x7fc988e58050, source=<optimized out>, size=<optimized out>) at /usr/lib/gcc/x86_64-pc-linux-gnu/8.2.1/include/emmintrin.h:696
#1  0x0000000005be781f in DB::AggregateFunctionNullVariadic<true>::add (arena=<optimized out>, row_num=<optimized out>, columns=<optimized out>, place=<optimized out>, this=<optimized out>)
    at ../dbms/src/AggregateFunctions/AggregateFunctionNull.h:43
#2  DB::IAggregateFunctionHelper<DB::AggregateFunctionNullVariadic<true> >::addFree (that=<optimized out>, place=<optimized out>, columns=<optimized out>, row_num=<optimized out>, arena=<optimized out>)
    at ../dbms/src/AggregateFunctions/IAggregateFunction.h:131
#3  0x0000000006587dad in DB::Aggregator::executeImplCase<false, DB::AggregationMethodOneNumber<unsigned short, FixedHashMap<unsigned short, char*, Allocator<true> > > > (this=this@entry=0x7fc98d5ea378, 
    method=..., state=..., aggregates_pool=aggregates_pool@entry=0x7fc988e06370, rows=65536, aggregate_instructions=0x7fc98a400800, overflow_row=0x0) at ../dbms/src/Common/ColumnsHashingImpl.h:65
#4  0x0000000006588053 in DB::Aggregator::executeImpl<DB::AggregationMethodOneNumber<unsigned short, FixedHashMap<unsigned short, char*, Allocator<true> > > > (this=this@entry=0x7fc98d5ea378, method=..., 
    aggregates_pool=0x7fc988e06370, rows=rows@entry=65536, key_columns=..., aggregate_instructions=aggregate_instructions@entry=0x7fc98a400800, keys=..., no_more_keys=false, overflow_row=0x0)
    at ../libs/libcommon/include/common/StringRef.h:30
#5  0x0000000006579118 in DB::Aggregator::executeOnBlock (this=0x7fc98d5ea378, block=..., result=..., key_columns=..., aggregate_columns=..., key=..., no_more_keys=@0x7fc98d5ea628: false)
    at /usr/include/c++/8.2.1/bits/unique_ptr.h:342
#6  0x000000000652b26d in DB::ParallelAggregatingBlockInputStream::Handler::onBlock (thread_num=2, block=..., this=0x7fc98d5ea698) at /usr/include/c++/8.2.1/bits/shared_ptr_base.h:998
#7  DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::publishPayload (this=0x7fc98d5ea6a0, thread_num=2, block=...) at ../dbms/src/DataStreams/ParallelInputsProcessor.h:175
#8  DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::loop (thread_num=<optimized out>, this=<optimized out>) at ../dbms/src/DataStreams/ParallelInputsProcessor.h:297
#9  DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread (this=0x7fc98d5ea6a0, thread_group=..., thread_num=2) at ../dbms/src/DataStreams/ParallelInputsProcessor.h:210
#10 0x000000000652ba41 in DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::process()::{lambda()#1}::operator()() const (this=<optimized out>)
    at /usr/include/c++/8.2.1/ext/atomicity.h:96
#11 std::__invoke_impl<void, DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::process()::{lambda()#1} const&>(std::__invoke_other, DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::process()::{lambda()#1} const&) (__f=...) at /usr/include/c++/8.2.1/bits/invoke.h:60
#12 std::__invoke<DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::process()::{lambda()#1} const&>(std::__invoke_result&&, (DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::process()::{lambda()#1} const&)...) (__fn=...) at /usr/include/c++/8.2.1/bits/invoke.h:95
#13 std::__apply_impl<DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::process()::{lambda()#1} const&, std::tuple<> const&>(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::process()::{lambda()#1} const&, std::tuple<> const&, std::integer_sequence<unsigned long>) (__t=..., __f=...) at /usr/include/c++/8.2.1/tuple:1678
#14 std::apply<DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::process()::{lambda()#1} const&, std::tuple<> const&>(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::process()::{lambda()#1} const&, std::tuple<> const&) (__t=..., __f=...) at /usr/include/c++/8.2.1/tuple:1687
#15 ThreadFromGlobalPool::ThreadFromGlobalPool<DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::process()::{lambda()#1}>(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::process()::{lambda()#1}&&)::{lambda()#1}::operator()() const (this=0x7fc98a400000) at ../dbms/src/Common/ThreadPool.h:147
#16 0x0000000006a647cf in std::function<void ()>::operator()() const (this=0x7fc98b9fa750) at /usr/include/c++/8.2.1/bits/std_function.h:682
#17 ThreadPoolImpl<std::thread>::worker (this=<optimized out>, thread_it=...) at ../dbms/src/Common/ThreadPool.cpp:169
#18 0x0000000007655953 in execute_native_thread_routine ()
```

ArchLinux 5.0.5-arch1-1-ARCH
gcc (GCC) 8.2.1 20181127