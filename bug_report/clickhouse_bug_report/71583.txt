ID: 71583
Title: Can't read empty tuple from Arrow file
Description:
**Describe the bug**
A logical error happens on the client if an empty tuple is imported from an Arrow file.

**How to reproduce**
Run:

```sql
CREATE TABLE t0 (c0 Tuple()) ENGINE = Memory();
INSERT INTO TABLE t0 (c0) VALUES (());
INSERT INTO TABLE FUNCTION file('<path to file>', 'Arrow', 'c0 Tuple()') SELECT c0 FROM t0;
INSERT INTO TABLE t0 (c0) FROM INFILE '<path to file>' FORMAT Arrow;
/*
Logical error: 'This function cannot be used to construct empty tuple. It is a bug'.
*/
```
Stack trace:
```
Logical error: 'This function cannot be used to construct empty tuple. It is a bug'.
Stack trace (when copying this message, always include the lines below):

0. std::exception::capture() @ 0x0000000019428f0b
1. contrib/llvm-project/libcxx/include/exception:114: Poco::Exception::Exception(String const&, int) @ 0x0000000038ca9dc5
2. src/Common/Exception.cpp:109: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000255838ab
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000000192a7296
4. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x00000000192c0cef
5. src/Columns/ColumnTuple.cpp:69: DB::ColumnTuple::create(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&) @ 0x000000003386152b
6. src/Columns/ColumnTuple.h:43: DB::readNonNullableColumnFromArrowColumn(std::shared_ptr<arrow::ChunkedArray> const&, String, std::unordered_map<String, DB::ArrowColumnToCHColumn::DictionaryInfo, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, DB::ArrowColumnToCHColumn::DictionaryInfo>>>, std::shared_ptr<DB::IDataType const>, bool, DB::ReadColumnFromArrowColumnSettings const&) @ 0x00000000353fb607
7. src/Processors/Formats/Impl/ArrowColumnToCHColumn.cpp:1142: DB::readColumnFromArrowColumn(std::shared_ptr<arrow::ChunkedArray> const&, String, std::unordered_map<String, DB::ArrowColumnToCHColumn::DictionaryInfo, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, DB::ArrowColumnToCHColumn::DictionaryInfo>>>, std::shared_ptr<DB::IDataType const>, bool, bool, DB::ReadColumnFromArrowColumnSettings const&) @ 0x00000000353eabbb
8. src/Processors/Formats/Impl/ArrowColumnToCHColumn.cpp:1344: DB::ArrowColumnToCHColumn::arrowColumnsToCHChunk(std::unordered_map<String, DB::ArrowColumnToCHColumn::ArrowColumn, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, DB::ArrowColumnToCHColumn::ArrowColumn>>> const&, unsigned long, DB::BlockMissingValues*) @ 0x00000000353ec703
9. src/Processors/Formats/Impl/ArrowColumnToCHColumn.cpp:1250: DB::ArrowColumnToCHColumn::arrowTableToCHChunk(std::shared_ptr<arrow::Table> const&, unsigned long, DB::BlockMissingValues*) @ 0x00000000353ebcb3
10. src/Processors/Formats/Impl/ArrowBlockInputFormat.cpp:92: DB::ArrowBlockInputFormat::read() @ 0x00000000353cd952
11. src/Processors/Formats/IInputFormat.cpp:19: DB::IInputFormat::generate() @ 0x00000000353b4f75
12. src/Processors/ISource.cpp:139: DB::ISource::tryGenerate() @ 0x0000000035374694
13. src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x0000000035373cba
14. src/Processors/Executors/ExecutionThreadContext.cpp:47: DB::ExecutionThreadContext::executeTask() @ 0x00000000353a3e20
15. src/Processors/Executors/PipelineExecutor.cpp:289: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x000000003538eac3
16. src/Processors/Executors/PipelineExecutor.cpp:163: DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x000000003538e0a3
17. src/Processors/Executors/PullingPipelineExecutor.cpp:54: DB::PullingPipelineExecutor::pull(DB::Chunk&) @ 0x00000000353ab694
18. src/Storages/StorageFile.cpp:1474: DB::StorageFileSource::generate() @ 0x0000000033e7b59f
19. src/Processors/ISource.cpp:139: DB::ISource::tryGenerate() @ 0x0000000035374694
20. src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x0000000035373cba
21. src/Processors/Executors/ExecutionThreadContext.cpp:47: DB::ExecutionThreadContext::executeTask() @ 0x00000000353a3e20
22. src/Processors/Executors/PipelineExecutor.cpp:289: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x000000003538eac3
23. src/Processors/Executors/PipelineExecutor.cpp:255: DB::PipelineExecutor::executeImpl(unsigned long, bool) @ 0x000000003538db36
24. src/Processors/Executors/PipelineExecutor.cpp:126: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x000000003538d74a
25. src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:83: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x00000000353a926c
26. contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x00000000256ba7cf
27. contrib/llvm-project/libcxx/include/__functional/invoke.h:359: ? @ 0x00000000256c19ca
28. ? @ 0x0000717c200a1e2e
29. ? @ 0x0000717c20133a4c
```