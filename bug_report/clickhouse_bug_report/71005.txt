ID: 71005
Title: Assertion error on insert with new JSON datatype
Description:
**Describe the bug**
Inserting a JSON value with duplicated keys when `use_json_alias_for_old_object_type` is set, gives an assertion error in the client.

**How to reproduce**
I can't reproduce it on Fiddle, maybe because it wasn't compiled with assertions enabled. Run on Clickhouse client:
```sql
SET allow_experimental_json_type = 1, type_json_skip_duplicated_paths = 1, use_json_alias_for_old_object_type = 1;
CREATE TABLE t0 (c0 JSON) ENGINE = Memory();
INSERT INTO TABLE t0 (c0) VALUES ('{"a":1,"a":2}');
```
Stack trace:
```
clickhouse: src/DataTypes/Serializations/SerializationObjectDeprecated.cpp:80: void DB::SerializationObjectDeprecated<DB::JSONDataParser<DB::SimdJSONParser>>::deserializeTextImpl(IColumn &, Reader &&) const [Parser = DB::JSONDataParser<DB::SimdJSONParser>, Reader = (lambda at src/DataTypes/Serializations/SerializationObjectDeprecated.cpp:115:33)]: Assertion `subcolumn.size() == old_column_size' failed.
########## Short fault info ############
(version 24.10.1.2446 (official build), build id: , git hash: 1dedcd1be7a6c129fd5174d1b76c39e59b72ae40, architecture: x86_64) (from thread 1408736) Received signal 6
Signal description: Aborted

Stack trace: 0x000000000c473ea8 0x000000000c6c02a5 0x00007173cd445250 0x00007173cd4a3f1d 0x00007173cd44519e 0x00007173cd428902 0x00007173cd42881e 0x00007173cd43b7c7 0x0000000010dff2c5 0x0000000010dfac4d 0x0000000010dd270b 0x000000001334ce60 0x000000001334bfee 0x0000000013150036 0x000000001312e477 0x000000001312e247 0x0000000013147849 0x000000001313cabd 0x000000001313cd5d 0x000000001313b58c 0x000000001313afaf 0x000000001314a6ca 0x000000000c4f928e 0x000000000c4fe6f2 0x00007173cd4a1e2e 0x00007173cd533a4c
########################################
(version 24.10.1.2446 (official build), build id: , git hash: 1dedcd1be7a6c129fd5174d1b76c39e59b72ae40) (from thread 1408736) (no query) Received signal Aborted (6)

Stack trace: 0x000000000c473ea8 0x000000000c6c02a5 0x00007173cd445250 0x00007173cd4a3f1d 0x00007173cd44519e 0x00007173cd428902 0x00007173cd42881e 0x00007173cd43b7c7 0x0000000010dff2c5 0x0000000010dfac4d 0x0000000010dd270b 0x000000001334ce60 0x000000001334bfee 0x0000000013150036 0x000000001312e477 0x000000001312e247 0x0000000013147849 0x000000001313cabd 0x000000001313cd5d 0x000000001313b58c 0x000000001313afaf 0x000000001314a6ca 0x000000000c4f928e 0x000000000c4fe6f2 0x00007173cd4a1e2e 0x00007173cd533a4c
0.0. inlined from src/Common/StackTrace.cpp:380: StackTrace::tryCapture()
0. src/Common/StackTrace.cpp:349: StackTrace::StackTrace(ucontext_t const&) @ 0x000000000c473ea8
1. src/Common/SignalHandlers.cpp:85: signalHandler(int, siginfo_t*, void*) @ 0x000000000c6c02a5
2. ? @ 0x00007173cd445250
3. ? @ 0x00007173cd4a3f1d
4. ? @ 0x00007173cd44519e
5. ? @ 0x00007173cd428902
6. ? @ 0x00007173cd42881e
7. ? @ 0x00007173cd43b7c7
8. src/DataTypes/Serializations/SerializationObjectDeprecated.cpp:80: void DB::SerializationObjectDeprecated<DB::JSONDataParser<DB::SimdJSONParser>>::deserializeTextImpl<DB::SerializationObjectDeprecated<DB::JSONDataParser<DB::SimdJSONParser>>::deserializeTextQuoted(DB::IColumn&, DB::ReadBuffer&, DB::FormatSettings const&) const::'lambda'(String&)>(DB::IColumn&, DB::SerializationObjectDeprecated<DB::JSONDataParser<DB::SimdJSONParser>>::deserializeTextQuoted(DB::IColumn&, DB::ReadBuffer&, DB::FormatSettings const&) const::'lambda'(String&)&&) const @ 0x0000000010dff2c5
9. src/DataTypes/Serializations/SerializationObjectDeprecated.cpp:115: DB::SerializationObjectDeprecated<DB::JSONDataParser<DB::SimdJSONParser>>::deserializeTextQuoted(DB::IColumn&, DB::ReadBuffer&, DB::FormatSettings const&) const @ 0x0000000010dfac4d
10. src/DataTypes/Serializations/SerializationNullable.cpp:571: DB::SerializationNullable::deserializeNullAsDefaultOrNestedTextQuoted(DB::IColumn&, DB::ReadBuffer&, DB::FormatSettings const&, std::shared_ptr<DB::ISerialization const> const&) @ 0x0000000010dd270b
11.0. inlined from src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:306: DB::ValuesBlockInputFormat::tryReadValue(DB::IColumn&, unsigned long)
11. src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:238: DB::ValuesBlockInputFormat::readRow(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>&, unsigned long) @ 0x000000001334ce60
12. src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:129: DB::ValuesBlockInputFormat::read() @ 0x000000001334bfee
13. src/Processors/Formats/IInputFormat.cpp:19: DB::IInputFormat::generate() @ 0x0000000013150036
14. src/Processors/ISource.cpp:139: DB::ISource::tryGenerate() @ 0x000000001312e477
15. src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x000000001312e247
16.0. inlined from src/Processors/Executors/ExecutionThreadContext.cpp:47: DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*)
16. src/Processors/Executors/ExecutionThreadContext.cpp:96: DB::ExecutionThreadContext::executeTask() @ 0x0000000013147849
17. src/Processors/Executors/PipelineExecutor.cpp:289: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x000000001313cabd
18. src/Processors/Executors/PipelineExecutor.cpp:255: DB::PipelineExecutor::executeSingleThread(unsigned long) @ 0x000000001313cd5d
19. src/Processors/Executors/PipelineExecutor.cpp:441: DB::PipelineExecutor::executeImpl(unsigned long, bool) @ 0x000000001313b58c
20. src/Processors/Executors/PipelineExecutor.cpp:126: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x000000001313afaf
21.0. inlined from src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:83: DB::threadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::shared_ptr<DB::ThreadGroup>, unsigned long, bool)
21.1. inlined from src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:109: operator()
21.2. inlined from contrib/llvm-project/libcxx/include/__functional/invoke.h:394: ?
21.3. inlined from contrib/llvm-project/libcxx/include/tuple:1789: _ZNSt3__118__apply_tuple_implB6v15007IRZN2DB28PullingAsyncPipelineExecutor4pullERNS1_5ChunkEmE3$_0RNS_5tupleIJEEETpTnmJEEEDcOT_OT0_NS_15__tuple_indicesIJXspT1_EEEE
21.4. inlined from contrib/llvm-project/libcxx/include/tuple:1798: decltype(auto) std::apply[abi:v15007]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&)
21.5. inlined from src/Common/ThreadPool.h:311: operator()
21.6. inlined from contrib/llvm-project/libcxx/include/__functional/invoke.h:394: ?
21.7. inlined from contrib/llvm-project/libcxx/include/__functional/invoke.h:479: ?
21.8. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:235: ?
21. contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x000000001314a6ca
22.0. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:848: ?
22.1. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:1197: ?
22. src/Common/ThreadPool.cpp:785: ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000c4f928e
23.0. inlined from contrib/llvm-project/libcxx/include/__functional/invoke.h:359: ?
23.1. inlined from contrib/llvm-project/libcxx/include/thread:284: void std::__thread_execute[abi:v15007]<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*, 2ul>(std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>&, std::__tuple_indices<2ul>)
23. contrib/llvm-project/libcxx/include/thread:295: void* std::__thread_proxy[abi:v15007]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000c4fe6f2
24. ? @ 0x00007173cd4a1e2e
25. ? @ 0x00007173cd533a4c
```