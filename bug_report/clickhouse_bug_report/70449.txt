ID: 70449
Title: Logical error on exporting opentelemetry to qryn via zipkin spans
Description:
**Describe what's wrong**

When trying to export opentelemetry log via http engine to qryn, I get logical error on CREATE MATERIALIZED VIEW

**How to reproduce**
```
ClickHouse client version 24.9.2.42 (official build).
Connecting to localhost:9000 as user default.
Connected to ClickHouse server version 24.9.2.

Warnings:
 * Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using echo 1 > /proc/sys/kernel/task_delayacct or by using sysctl.

homer :) SET opentelemetry_start_trace_probability = 1.0;
SELECT 1;
system flush logs;

DROP TABLE IF EXISTS default.zipkin_spans;

CREATE MATERIALIZED VIEW default.zipkin_spans
ENGINE = URL('http://127.0.0.1:3100/tempo/api/push', 'JSONEachRow')
SETTINGS output_format_json_named_tuples_as_objects = 1,
    output_format_json_array_of_rows = 1 AS
SELECT
    lower(hex(reinterpretAsFixedString(trace_id))) AS traceId,
    lower(hex(parent_span_id)) AS parentId,
    lower(hex(span_id)) AS id,
    operation_name AS name,
    start_time_us AS timestamp,
    finish_time_us - start_time_us AS duration,
    cast(tuple('clickhouse'), 'Tuple(serviceName text)') AS localEndpoint,
    cast(tuple(
        attribute.values[indexOf(attribute.names, 'db.statement')]),
        'Tuple("db.statement" text)') AS tags
FROM system.opentelemetry_span_log;

SET opentelemetry_start_trace_probability = 1.

Query id: 1eaa701d-a9b1-4c7c-a6e0-b96f03ff6519

Ok.

0 rows in set. Elapsed: 0.002 sec.


SELECT 1

Query id: bc702b88-fd54-4569-94c5-d578f2571fef

   ┌─1─┐
1. │ 1 │
   └───┘

1 row in set. Elapsed: 0.003 sec.


SYSTEM FLUSH LOGS

Query id: 063de2fa-e453-4005-b74d-d4a362ce4ed2

Ok.

0 rows in set. Elapsed: 0.171 sec.


DROP TABLE IF EXISTS default.zipkin_spans

Query id: 6f2de89f-6ecc-44b2-9bd2-d50a3d8ed5f6

Ok.

0 rows in set. Elapsed: 0.003 sec.


CREATE MATERIALIZED VIEW default.zipkin_spans
ENGINE = URL('http://127.0.0.1:3100/tempo/api/push', 'JSONEachRow')
SETTINGS output_format_json_named_tuples_as_objects = 1, output_format_json_array_of_rows = 1
AS SELECT
    lower(hex(reinterpretAsFixedString(trace_id))) AS traceId,
    lower(hex(parent_span_id)) AS parentId,
    lower(hex(span_id)) AS id,
    operation_name AS name,
    start_time_us AS timestamp,
    finish_time_us - start_time_us AS duration,
    CAST(tuple('clickhouse'), 'Tuple(serviceName text)') AS localEndpoint,
    CAST(tuple(attribute.values[indexOf(attribute.names, 'db.statement')]), 'Tuple("db.statement" text)') AS tags
FROM system.opentelemetry_span_log

Query id: 9225929c-1fd3-449f-8ff5-50dacaf8267d


Elapsed: 0.008 sec.

Received exception from server (version 24.9.2):
Code: 49. DB::Exception: Received from localhost:9000. DB::Exception: Column identifier __table1.attribute.values is already registered. (LOGICAL_ERROR)

```
**Error log**
```
2024.10.07 05:05:26.795191 [ 11774 ] {9225929c-1fd3-449f-8ff5-50dacaf8267d} <Error> TCPHandler: Code: 49. DB::Exception: Column identifier __table1.attribute.values is already registered. (LOGICAL_ERROR), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000d66ad9b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000007e75b2c
2. DB::Exception::Exception<String&>(int, FormatStringHelperImpl<std::type_identity<String&>::type>, String&) @ 0x0000000007e90f6b
3. DB::GlobalPlannerContext::createColumnIdentifier(DB::NameAndTypePair const&, std::shared_ptr<DB::IQueryTreeNode> const&) @ 0x000000001122b09f
4. DB::GlobalPlannerContext::createColumnIdentifier(std::shared_ptr<DB::IQueryTreeNode> const&) @ 0x000000001122adbd
5. DB::InDepthQueryTreeVisitor<DB::(anonymous namespace)::CollectSourceColumnsVisitor, false>::visit(std::shared_ptr<DB::IQueryTreeNode>&) (.llvm.4383764299736518122) @ 0x00000000112cba5c
6. DB::InDepthQueryTreeVisitor<DB::(anonymous namespace)::CollectSourceColumnsVisitor, false>::visit(std::shared_ptr<DB::IQueryTreeNode>&) (.llvm.4383764299736518122) @ 0x00000000112cbecf
7. DB::InDepthQueryTreeVisitor<DB::(anonymous namespace)::CollectSourceColumnsVisitor, false>::visit(std::shared_ptr<DB::IQueryTreeNode>&) (.llvm.4383764299736518122) @ 0x00000000112cbecf
8. DB::InDepthQueryTreeVisitor<DB::(anonymous namespace)::CollectSourceColumnsVisitor, false>::visit(std::shared_ptr<DB::IQueryTreeNode>&) (.llvm.4383764299736518122) @ 0x00000000112cbecf
9. DB::InDepthQueryTreeVisitor<DB::(anonymous namespace)::CollectSourceColumnsVisitor, false>::visit(std::shared_ptr<DB::IQueryTreeNode>&) (.llvm.4383764299736518122) @ 0x00000000112cbecf
10. DB::InDepthQueryTreeVisitor<DB::(anonymous namespace)::CollectSourceColumnsVisitor, false>::visit(std::shared_ptr<DB::IQueryTreeNode>&) (.llvm.4383764299736518122) @ 0x00000000112cbecf
11. DB::InDepthQueryTreeVisitor<DB::(anonymous namespace)::CollectSourceColumnsVisitor, false>::visit(std::shared_ptr<DB::IQueryTreeNode>&) (.llvm.4383764299736518122) @ 0x00000000112cbecf
12. DB::InDepthQueryTreeVisitor<DB::(anonymous namespace)::CollectSourceColumnsVisitor, false>::visit(std::shared_ptr<DB::IQueryTreeNode>&) (.llvm.4383764299736518122) @ 0x00000000112cbecf
13. DB::collectTableExpressionData(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::PlannerContext>&) @ 0x00000000112ca630
14. DB::Planner::buildPlanForQueryNode() @ 0x0000000011b8ea8e
15. DB::Planner::buildQueryPlanIfNeeded() @ 0x0000000011b8c3b9
16. DB::InterpreterSelectQueryAnalyzer::getSampleBlock() @ 0x0000000011b88b3d
17. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x0000000011b889e6
18. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x00000000118fc69b
19. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x000000001190401f
20. DB::InterpreterCreateQuery::execute() @ 0x0000000011915c10
21. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x0000000011ed0ed5
22. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x0000000011ecce7a
23. DB::TCPHandler::runImpl() @ 0x00000000130a7d74
24. DB::TCPHandler::run() @ 0x00000000130c31f8
25. Poco::Net::TCPServerConnection::start() @ 0x0000000015ef4227
26. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015ef46b9
27. Poco::PooledThread::run() @ 0x0000000015ec12a1
28. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015ebf85d
29. ? @ 0x00007c889fc9ca94
30. ? @ 0x00007c889fd29c3c
```


**Expected behavior**

No exception

**Additional context**
Ubuntu 24.04.1 LTS \n \l
6.8.0-45-generic
gcc (Ubuntu 13.2.0-23ubuntu4) 13.2.0

sse4.2 enabled, running on a E5-4669 via proxmox hypervisor with HOST mode
Installed via clickhouse repo (https://packages.clickhouse.com/deb stable main)