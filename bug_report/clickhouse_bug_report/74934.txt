ID: 74934
Title: Logical Error: Invalid number of columns in chunk pushed to OutputPort in join
Description:
### Describe the bug

This seems to be a regression introduced in v24.12 from the `query_plan_join_swap_table` setting.

The reproducible steps are different from https://github.com/ClickHouse/ClickHouse/issues/74211 so it may be a separate issue.

### How to reproduce

Run Fiddle: https://fiddle.clickhouse.com/88b0fc6e-bace-4619-8a90-b98fa3f5a190

### Error message and/or stacktrace

Stack trace:

```
<Fatal> : Logical error: 'Invalid number of columns in chunk pushed to OutputPort. Expected 4, found 3
Header: __table1.c0 Int32 Int32(size = 0), __table2.c0 UInt8 UInt8(size = 0), __table4.c0 UInt8 UInt8(size = 0), __table4.c1 UInt8 UInt8(size = 0)
Chunk:  Int32(size = 1) Const(size = 1, UInt8(size = 1)) Const(size = 1, UInt8(size = 1))
'.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. std::exception::exception[abi:ne180100]() @ 0x000000001973b214
1. base/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(String const&, int) @ 0x000000003a8080a0
2. src/Common/Exception.cpp:105: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000002644cf0b
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000000195dacd6
4. src/Common/Exception.h:123: DB::Exception::Exception<unsigned long, unsigned long, String, String>(int, FormatStringHelperImpl<std::type_identity<unsigned long>::type, std::type_identity<unsigned long>::type, std::type_identity<String>::type, std::type_identity<String>::type>, unsigned long&&, unsigned long&&, String&&, String&&) @ 0x000000003212e02f
5. src/Processors/Port.h:415: DB::IMergingTransformBase::prepare() @ 0x0000000036f42951
6. src/Processors/Executors/ExecutingGraph.cpp:280: DB::ExecutingGraph::updateNode(unsigned long, std::queue<DB::ExecutingGraph::Node*, std::deque<DB::ExecutingGraph::Node*, AllocatorWithMemoryTracking<DB::ExecutingGraph::Node*>>>&, std::queue<DB::ExecutingGraph::Node*, std::deque<DB::ExecutingGraph::Node*, AllocatorWithMemoryTracking<DB::ExecutingGraph::Node*>>>&) @ 0x00000000367fd2bf
7. src/Processors/Executors/PipelineExecutor.cpp:309: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000367f4d3d
8. src/Processors/Executors/PipelineExecutor.cpp:256: void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne180100]<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x00000000367f64a9
9. contrib/llvm-project/libcxx/include/__functional/function.h:714: ? @ 0x000000002656f323
10. contrib/llvm-project/libcxx/include/__type_traits/invoke.h:312: ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()() @ 0x0000000026577234
11. contrib/llvm-project/libcxx/include/__functional/function.h:714: ? @ 0x000000002656caf8
12. contrib/llvm-project/libcxx/include/__type_traits/invoke.h:312: void* std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x0000000026573c0a
13. ? @ 0x00007ffff7ca1e2e
14. ? @ 0x00007ffff7d33a4c
```