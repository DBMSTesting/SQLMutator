ID: 8100
Title: Using Join Engine table in JOIN clause crashes ClickHouse server
Description:
If I use the table of type `ENGINE = Join` in `JOIN` clause of `SELECT` query, it crashes the ClickHouse Server.

```
DROP TABLE IF EXISTS master;
DROP TABLE IF EXISTS transaction;

CREATE TABLE master (id Int32, name String) ENGINE = Join (ANY, LEFT, id);
INSERT INTO master VALUES (1, 'ONE');
CREATE TABLE transaction (id Int32, value Float64, master_id Int32) ENGINE = MergeTree() ORDER BY id;
INSERT INTO transaction VALUES (1, 52.5, 1);

-- BEWARE: This will crash the ClickHouse Server
SELECT tx.id, tx.value, m.name FROM transaction tx ANY LEFT JOIN master m ON m.id = tx.master_id;
```

```
2019.12.09 14:45:39.038229 [ 46 ] {7ba1de39-468f-4556-a85f-0dc5d3417e8f} <Debug> executeQuery: (from 127.0.0.1:49814) SELECT tx.id, tx.value, m.name FROM transaction AS tx ANY LEFT JOIN master AS m ON m.id = tx.master_id
2019.12.09 14:45:39.038581 [ 46 ] {7ba1de39-468f-4556-a85f-0dc5d3417e8f} <Debug> muthu.transaction (SelectExecutor): Key condition: unknown
2019.12.09 14:45:39.038605 [ 46 ] {7ba1de39-468f-4556-a85f-0dc5d3417e8f} <Debug> muthu.transaction (SelectExecutor): Selected 1 parts by date, 1 parts by key, 1 marks to read from 1 ranges
2019.12.09 14:45:39.038641 [ 46 ] {7ba1de39-468f-4556-a85f-0dc5d3417e8f} <Trace> muthu.transaction (SelectExecutor): Reading approx. 8192 rows with 1 streams
2019.12.09 14:45:39.038680 [ 46 ] {7ba1de39-468f-4556-a85f-0dc5d3417e8f} <Trace> InterpreterSelectQuery: FetchColumns -> Complete
2019.12.09 14:45:39.038891 [ 50 ] {} <Fatal> BaseDaemon: ########################################
2019.12.09 14:45:39.038924 [ 50 ] {} <Fatal> BaseDaemon: (version 19.17.5.18 (official build)) (from thread 46) Received signal Segmentation fault (11).
2019.12.09 14:45:39.038946 [ 50 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Address not mapped to object.
2019.12.09 14:45:39.038977 [ 50 ] {} <Fatal> BaseDaemon: Stack trace: 0x5613f513b8ac 0x5613f516aa37 0x5613f511c005 0x5613f5833c00 0x5613f5834bb5 0x5613f56b60ad 0x5613f50f81ce 0x5613f50d8f9c 0x5613f50f951f 0x5613f50fb155 0x5613f51fdf4e 0x5613f51ff39e 0x5613f1d9afc4 0x5613f1d9b9fb 0x5613f5c9c6f0 0x5613f5c9ce0d 0x5613f7372f81 0x5613f7370d2c 0x5613f7ae6ec0 0x7fab127f06db 0x7fab1210d88f
2019.12.09 14:45:39.039016 [ 50 ] {} <Fatal> BaseDaemon: 3. 0x5613f513b8ac ? /usr/bin/clickhouse
2019.12.09 14:45:39.039072 [ 50 ] {} <Fatal> BaseDaemon: 4. 0x5613f516aa37 void DB::Join::joinBlockImpl<(DB::ASTTableJoin::Kind)1, (DB::ASTTableJoin::Strictness)1, DB::Join::MapsTemplate<DB::JoinStuff::WithFlags<DB::RowRef, false> > >(DB::Block&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, DB::Block const&, DB::Join::MapsTemplate<DB::JoinStuff::WithFlags<DB::RowRef, false> > const&) const /usr/bin/clickhouse
2019.12.09 14:45:39.039098 [ 50 ] {} <Fatal> BaseDaemon: 5. 0x5613f511c005 DB::Join::joinBlock(DB::Block&) /usr/bin/clickhouse
2019.12.09 14:45:39.039125 [ 50 ] {} <Fatal> BaseDaemon: 6. 0x5613f5833c00 DB::ExpressionAction::execute(DB::Block&, bool) const /usr/bin/clickhouse
2019.12.09 14:45:39.039143 [ 50 ] {} <Fatal> BaseDaemon: 7. 0x5613f5834bb5 DB::ExpressionActions::execute(DB::Block&, bool) const /usr/bin/clickhouse
2019.12.09 14:45:39.039161 [ 50 ] {} <Fatal> BaseDaemon: 8. 0x5613f56b60ad DB::ExpressionBlockInputStream::ExpressionBlockInputStream(std::shared_ptr<DB::IBlockInputStream> const&, std::shared_ptr<DB::ExpressionActions> const&) /usr/bin/clickhouse
2019.12.09 14:45:39.039179 [ 50 ] {} <Fatal> BaseDaemon: 9. 0x5613f50f81ce void DB::InterpreterSelectQuery::executeImpl<DB::InterpreterSelectQuery::Pipeline>(DB::InterpreterSelectQuery::Pipeline&, std::shared_ptr<DB::IBlockInputStream> const&, DB::QueryPipeline&) /usr/bin/clickhouse
2019.12.09 14:45:39.039196 [ 50 ] {} <Fatal> BaseDaemon: 10. 0x5613f50d8f9c DB::InterpreterSelectQuery::executeWithMultipleStreams(DB::QueryPipeline&) /usr/bin/clickhouse
2019.12.09 14:45:39.039211 [ 50 ] {} <Fatal> BaseDaemon: 11. 0x5613f50f951f DB::InterpreterSelectWithUnionQuery::executeWithMultipleStreams(DB::QueryPipeline&) /usr/bin/clickhouse
2019.12.09 14:45:39.039230 [ 50 ] {} <Fatal> BaseDaemon: 12. 0x5613f50fb155 DB::InterpreterSelectWithUnionQuery::execute() /usr/bin/clickhouse
2019.12.09 14:45:39.039240 [ 50 ] {} <Fatal> BaseDaemon: 13. 0x5613f51fdf4e ? /usr/bin/clickhouse
2019.12.09 14:45:39.039258 [ 50 ] {} <Fatal> BaseDaemon: 14. 0x5613f51ff39e DB::executeQuery(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, bool) /usr/bin/clickhouse
2019.12.09 14:45:39.039274 [ 50 ] {} <Fatal> BaseDaemon: 15. 0x5613f1d9afc4 DB::TCPHandler::runImpl() /usr/bin/clickhouse
2019.12.09 14:45:39.039288 [ 50 ] {} <Fatal> BaseDaemon: 16. 0x5613f1d9b9fb DB::TCPHandler::run() /usr/bin/clickhouse
2019.12.09 14:45:39.039304 [ 50 ] {} <Fatal> BaseDaemon: 17. 0x5613f5c9c6f0 Poco::Net::TCPServerConnection::start() /usr/bin/clickhouse
2019.12.09 14:45:39.039321 [ 50 ] {} <Fatal> BaseDaemon: 18. 0x5613f5c9ce0d Poco::Net::TCPServerDispatcher::run() /usr/bin/clickhouse
2019.12.09 14:45:39.039333 [ 50 ] {} <Fatal> BaseDaemon: 19. 0x5613f7372f81 Poco::PooledThread::run() /usr/bin/clickhouse
2019.12.09 14:45:39.039349 [ 50 ] {} <Fatal> BaseDaemon: 20. 0x5613f7370d2c Poco::ThreadImpl::runnableEntry(void*) /usr/bin/clickhouse
2019.12.09 14:45:39.039363 [ 50 ] {} <Fatal> BaseDaemon: 21. 0x5613f7ae6ec0 ? /usr/bin/clickhouse
2019.12.09 14:45:39.039382 [ 50 ] {} <Fatal> BaseDaemon: 22. 0x7fab127f06db start_thread /lib/x86_64-linux-gnu/libpthread-2.27.so
2019.12.09 14:45:39.039401 [ 50 ] {} <Fatal> BaseDaemon: 23. 0x7fab1210d88f clone /lib/x86_64-linux-gnu/libc-2.27.so

```


> ClickHouse client version 19.17.5.18 (official build).
> Connecting to database muthu at localhost:9000 as user default.
> Connected to ClickHouse server version 19.17.5 revision 54428.
