ID: 72887
Title: Explain Syntax SEGV after failed transaction
Description:
This may be related to the old analyzer still being used. Start ClickHouse with the Keeper server and transactions enabled, then run the statements.

**How to reproduce**
Run:
```sql
CREATE TABLE t0 (c0 Int) ENGINE = Memory();
BEGIN TRANSACTION;
DELETE FROM idontexist WHERE TRUE;
EXPLAIN SYNTAX SELECT 1 FROM (SELECT 1) tx JOIN t0 ON TRUE; --SEGV
```
UBSAN stack trace:
```
build/src/Interpreters/IInterpreter.cpp:44:18: runtime error: member call on null pointer of type 'DB::IStorage'
SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior src/Interpreters/IInterpreter.cpp:44:18
<Trace> BaseDaemon: Received signal -3
<Fatal> BaseDaemon: ########## Short fault info ############
<Fatal> BaseDaemon: (version 24.12.1.1102 (official build), build id: 6AC091C0B8F2764F2C8D52198CC45A68CEC64F9C, git hash: 95a36b93120aba1bf305aba2f7a3f33f8a371ff0, architecture: x86_64) (from thread 3878121) Received signal -3
<Fatal> BaseDaemon: Signal description: sanitizer trap
<Fatal> BaseDaemon: Sanitizer trap.
<Fatal> BaseDaemon: Stack trace: 0x000056b7d735ba77 0x000056b7d7781667 0x000056b7ca3d1d30 0x000056b7ca3dbbd9 0x000056b7e35f44e7 0x000056b7e3b7dd56 0x000056b7e3b7bda6 0x000056b7e3b7bb93 0x000056b7e365f921 0x000056b7e3660044 0x000056b7e366004f 0x000056b7e366004f 0x000056b7e3656529 0x000056b7e365392c 0x000056b7e410a243 0x000056b7e410414e 0x000056b7e6b99e5c 0x000056b7e6bc4dae 0x000056b7ea48a442 0x000056b7ea48b112 0x000056b7ea3e8e17 0x000056b7ea3e470e 0x00007946a7aa1e2e 0x00007946a7b33a4c
<Fatal> BaseDaemon: ########################################
<Fatal> BaseDaemon: (version 24.12.1.1102 (official build), build id: 6AC091C0B8F2764F2C8D52198CC45A68CEC64F9C, git hash: 95a36b93120aba1bf305aba2f7a3f33f8a371ff0) (from thread 3878121) (query_id: aa032090-0fc0-4658-ac51-ae76b5ca6fad) (query: EXPLAIN SYNTAX SELECT 1 FROM (SELECT 1) AS tx INNER JOIN t0 ON true) Received signal sanitizer trap (-3)
<Fatal> BaseDaemon: Sanitizer trap.
<Fatal> BaseDaemon: Stack trace: 0x000056b7d735ba77 0x000056b7d7781667 0x000056b7ca3d1d30 0x000056b7ca3dbbd9 0x000056b7e35f44e7 0x000056b7e3b7dd56 0x000056b7e3b7bda6 0x000056b7e3b7bb93 0x000056b7e365f921 0x000056b7e3660044 0x000056b7e366004f 0x000056b7e366004f 0x000056b7e3656529 0x000056b7e365392c 0x000056b7e410a243 0x000056b7e410414e 0x000056b7e6b99e5c 0x000056b7e6bc4dae 0x000056b7ea48a442 0x000056b7ea48b112 0x000056b7ea3e8e17 0x000056b7ea3e470e 0x00007946a7aa1e2e 0x00007946a7b33a4c
<Fatal> BaseDaemon: 0. src/Common/StackTrace.cpp:380: StackTrace::tryCapture() @ 0x0000000026350a77
<Fatal> BaseDaemon: 1.0. inlined from src/Common/StackTrace.h:48: StackTrace
<Fatal> BaseDaemon: 1. src/Common/SignalHandlers.cpp:200: sanitizerDeathCallback() @ 0x0000000026776667
<Fatal> BaseDaemon: 2. __sanitizer::Die() @ 0x00000000193c6d30
<Fatal> BaseDaemon: 3. ? @ 0x00000000193d0bd9
<Fatal> BaseDaemon: 4. src/Interpreters/IInterpreter.cpp:0: DB::IInterpreter::checkStorageSupportsTransactionsIfNeeded(std::shared_ptr<DB::IStorage> const&, std::shared_ptr<DB::Context const>, bool) @ 0x00000000325e94e7
<Fatal> BaseDaemon: 5. src/Interpreters/InterpreterSelectQuery.cpp:591: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000032b72d56
<Fatal> BaseDaemon: 6. src/Interpreters/InterpreterSelectQuery.cpp:477: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000032b70da6
<Fatal> BaseDaemon: 7. src/Interpreters/InterpreterSelectQuery.cpp:294: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000032b70b93
<Fatal> BaseDaemon: 8.0. inlined from src/Interpreters/InterpreterExplainQuery.cpp:79: DB::(anonymous namespace)::ExplainAnalyzedSyntaxMatcher::visit(DB::ASTSelectQuery&, std::shared_ptr<DB::IAST>&, DB::(anonymous namespace)::ExplainAnalyzedSyntaxMatcher::Data&)
<Fatal> BaseDaemon: 8.1. inlined from src/Interpreters/InterpreterExplainQuery.cpp:72: DB::(anonymous namespace)::ExplainAnalyzedSyntaxMatcher::visit(std::shared_ptr<DB::IAST>&, DB::(anonymous namespace)::ExplainAnalyzedSyntaxMatcher::Data&)
<Fatal> BaseDaemon: 8. src/Interpreters/InDepthNodeVisitor.h:71: DB::InDepthNodeVisitor<DB::(anonymous namespace)::ExplainAnalyzedSyntaxMatcher, true, false, std::shared_ptr<DB::IAST>>::doVisit(std::shared_ptr<DB::IAST>&) @ 0x0000000032654921
<Fatal> BaseDaemon: 9.0. inlined from src/Interpreters/InDepthNodeVisitor.h:61: void DB::InDepthNodeVisitor<DB::(anonymous namespace)::ExplainAnalyzedSyntaxMatcher, true, false, std::shared_ptr<DB::IAST>>::visitImplMain<false>(std::shared_ptr<DB::IAST>&)
<Fatal> BaseDaemon: 9.1. inlined from src/Interpreters/InDepthNodeVisitor.h:51: void DB::InDepthNodeVisitor<DB::(anonymous namespace)::ExplainAnalyzedSyntaxMatcher, true, false, std::shared_ptr<DB::IAST>>::visitImpl<false>(std::shared_ptr<DB::IAST>&)
<Fatal> BaseDaemon: 9. src/Interpreters/InDepthNodeVisitor.h:92: void DB::InDepthNodeVisitor<DB::(anonymous namespace)::ExplainAnalyzedSyntaxMatcher, true, false, std::shared_ptr<DB::IAST>>::visitChildren<false>(std::shared_ptr<DB::IAST>&) @ 0x0000000032655044
<Fatal> BaseDaemon: 10.0. inlined from src/Interpreters/InDepthNodeVisitor.h:64: void DB::InDepthNodeVisitor<DB::(anonymous namespace)::ExplainAnalyzedSyntaxMatcher, true, false, std::shared_ptr<DB::IAST>>::visitImplMain<false>(std::shared_ptr<DB::IAST>&)
<Fatal> BaseDaemon: 10.1. inlined from src/Interpreters/InDepthNodeVisitor.h:51: void DB::InDepthNodeVisitor<DB::(anonymous namespace)::ExplainAnalyzedSyntaxMatcher, true, false, std::shared_ptr<DB::IAST>>::visitImpl<false>(std::shared_ptr<DB::IAST>&)
<Fatal> BaseDaemon: 10. src/Interpreters/InDepthNodeVisitor.h:92: void DB::InDepthNodeVisitor<DB::(anonymous namespace)::ExplainAnalyzedSyntaxMatcher, true, false, std::shared_ptr<DB::IAST>>::visitChildren<false>(std::shared_ptr<DB::IAST>&) @ 0x000000003265504f
<Fatal> BaseDaemon: 11.0. inlined from src/Interpreters/InDepthNodeVisitor.h:64: void DB::InDepthNodeVisitor<DB::(anonymous namespace)::ExplainAnalyzedSyntaxMatcher, true, false, std::shared_ptr<DB::IAST>>::visitImplMain<false>(std::shared_ptr<DB::IAST>&)
<Fatal> BaseDaemon: 11.1. inlined from src/Interpreters/InDepthNodeVisitor.h:51: void DB::InDepthNodeVisitor<DB::(anonymous namespace)::ExplainAnalyzedSyntaxMatcher, true, false, std::shared_ptr<DB::IAST>>::visitImpl<false>(std::shared_ptr<DB::IAST>&)
<Fatal> BaseDaemon: 11. src/Interpreters/InDepthNodeVisitor.h:92: void DB::InDepthNodeVisitor<DB::(anonymous namespace)::ExplainAnalyzedSyntaxMatcher, true, false, std::shared_ptr<DB::IAST>>::visitChildren<false>(std::shared_ptr<DB::IAST>&) @ 0x000000003265504f
<Fatal> BaseDaemon: 12.0. inlined from src/Interpreters/InDepthNodeVisitor.h:64: void DB::InDepthNodeVisitor<DB::(anonymous namespace)::ExplainAnalyzedSyntaxMatcher, true, false, std::shared_ptr<DB::IAST>>::visitImplMain<false>(std::shared_ptr<DB::IAST>&)
<Fatal> BaseDaemon: 12.1. inlined from src/Interpreters/InDepthNodeVisitor.h:51: void DB::InDepthNodeVisitor<DB::(anonymous namespace)::ExplainAnalyzedSyntaxMatcher, true, false, std::shared_ptr<DB::IAST>>::visitImpl<false>(std::shared_ptr<DB::IAST>&)
<Fatal> BaseDaemon: 12.2. inlined from src/Interpreters/InDepthNodeVisitor.h:32: DB::InDepthNodeVisitor<DB::(anonymous namespace)::ExplainAnalyzedSyntaxMatcher, true, false, std::shared_ptr<DB::IAST>>::visit(std::shared_ptr<DB::IAST>&)
<Fatal> BaseDaemon: 12. src/Interpreters/InterpreterExplainQuery.cpp:393: DB::InterpreterExplainQuery::executeImpl() @ 0x000000003264b529
<Fatal> BaseDaemon: 13. src/Interpreters/InterpreterExplainQuery.cpp:98: DB::InterpreterExplainQuery::execute() @ 0x000000003264892c
<Fatal> BaseDaemon: 14. src/Interpreters/executeQuery.cpp:1368: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x00000000330ff243
<Fatal> BaseDaemon: 15. src/Interpreters/executeQuery.cpp:1535: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000330f914e
<Fatal> BaseDaemon: 16. src/Server/TCPHandler.cpp:656: DB::TCPHandler::runImpl() @ 0x0000000035b8ee5c
<Fatal> BaseDaemon: 17. src/Server/TCPHandler.cpp:2598: DB::TCPHandler::run() @ 0x0000000035bb9dae
<Fatal> BaseDaemon: 18. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x000000003947f442
<Fatal> BaseDaemon: 19. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x0000000039480112
<Fatal> BaseDaemon: 20. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x00000000393dde17
<Fatal> BaseDaemon: 21. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000393d970e
<Fatal> BaseDaemon: 22. ? @ 0x00007946a7aa1e2e
<Fatal> BaseDaemon: 23. ? @ 0x00007946a7b33a4c
```