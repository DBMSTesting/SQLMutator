ID: 4389
Title: Lambdas in higher order functions no longer work when enable_optimize_predicate_expression is enabled
Description:
Lambdas in higher order functions no longer work when enable_optimize_predicate_expression is enabled. Suspect this is due to checking isStateful on IFunction interface whereas lambdas are expressions?

**How to reproduce**
* Which ClickHouse server version to use - 19.3.3
* Which interface to use, if matters - clickhouse-client / native
* Non-default settings, if any - enable_optimize_predicate_expression = 1
* `CREATE TABLE` statements for all tables involved / NA
* Sample data for all these tables, use [clickhouse-obfuscator](https://github.com/yandex/ClickHouse/blob/master/dbms/programs/obfuscator/Obfuscator.cpp#L42-L80) if necessary
* Queries to run that lead to unexpected result

```
WITH
	arrayJoin(arrayMap(x -> x, arraySort(groupArray((ts, n))))) AS k
SELECT
	z,
	k
FROM (
	SELECT 
		ts, 
		n, 
		z
	FROM system.one 
	ARRAY JOIN 
		[1, 3, 4, 5, 6] AS ts, 
		[1, 2, 2, 2, 1] AS n, 
		['a', 'a', 'b', 'a', 'b'] AS z
	ORDER BY 
		n ASC, 
		ts DESC
) WHERE z = 'a'
GROUP BY z
SETTINGS enable_optimize_predicate_expression = 1;
```

**Expected behavior**

Lambda / higher order function is evaluated as when enable_optimize_predicate_expression = 0 and predicate push down works as expected.

**Error message and/or stacktrace**

```
[clickhouse-demo] 2019.02.14 04:02:56.529800 {b104e930-cf7f-4e43-9784-23007bf9180f} [ 53 ] <Debug> executeQuery: (from 127.0.0.1:57442) WITH 	arrayJoin(arrayMap(x -> x, arraySort(groupArray((ts, n))))) AS k SELECT 	z, 	k FROM ( 	SELECT  		ts,  		n,  		z 	FROM system.one  	ARRAY JOIN  		[1, 3, 4, 5, 6] AS ts,  		[1, 2, 2, 2, 1] AS n,  		['a', 'a', 'b', 'a', 'b'] AS z 	ORDER BY  	n ASC,  		ts DESC ) WHERE z = 'a' GROUP BY z SETTINGS enable_optimize_predicate_expression = 1;
[clickhouse-demo] 2019.02.14 04:02:56.538117 {b104e930-cf7f-4e43-9784-23007bf9180f} [ 53 ] <Debug> MemoryTracker: Peak memory usage (total): 24.13 KiB.
[clickhouse-demo] 2019.02.14 04:02:56.538302 {b104e930-cf7f-4e43-9784-23007bf9180f} [ 53 ] <Error> executeQuery: Code: 46, e.displayText() = DB::Exception: Unknown function lambda (from 127.0.0.1:57442) (in query: WITH 	arrayJoin(arrayMap(x -> x, arraySort(groupArray((ts, n))))) AS k SELECT 	z, 	k FROM ( 	SELECT  		ts,  		n,  		z 	FROM system.one  	ARRAY JOIN  		[1, 3, 4, 5, 6] AS ts,  		[1, 2, 2, 2, 1] AS n,  		['a', 'a', 'b', 'a', 'b'] AS z 	ORDER BY  		n ASC,  		ts DESC ) WHERE z = 'a' GROUP BY z SETTINGS enable_optimize_predicate_expression = 1;), Stack trace:

0. /usr/bin/clickhouse-server(StackTrace::StackTrace()+0x16) [0x6f14e76]
1. /usr/bin/clickhouse-server(DB::FunctionFactory::get(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, DB::Context const&) const+0x1ad3) [0x5e494c3]
2. /usr/bin/clickhouse-server(DB::PredicateExpressionsOptimizer::allowPushDown(DB::ASTSelectQuery const*)+0x147) [0x604ed27]
3. /usr/bin/clickhouse-server(DB::PredicateExpressionsOptimizer::optimizeImpl(std::shared_ptr<DB::IAST>&, std::map<DB::ASTSelectQuery*, std::vector<std::pair<std::shared_ptr<DB::IAST>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::shared_ptr<DB::IAST>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::less<DB::ASTSelectQuery*>, std::allocator<std::pair<DB::ASTSelectQuery* const, std::vector<std::pair<std::shared_ptr<DB::IAST>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::shared_ptr<DB::IAST>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > >&, DB::PredicateExpressionsOptimizer::OptimizeKind)+0x16e) [0x6052d8e]
4. /usr/bin/clickhouse-server(DB::PredicateExpressionsOptimizer::optimize()+0x8f) [0x60531af]
5. /usr/bin/clickhouse-server(DB::SyntaxAnalyzer::analyze(std::shared_ptr<DB::IAST>&, DB::NamesAndTypesList const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::shared_ptr<DB::IStorage>) const+0x2253) [0x5b0a033]
6. /usr/bin/clickhouse-server(DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, std::shared_ptr<DB::IBlockInputStream> const&, std::shared_ptr<DB::IStorage> const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, DB::QueryProcessingStage::Enum, unsigned long, bool)+0x448) [0x59f3e78]
7. /usr/bin/clickhouse-server(DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, DB::QueryProcessingStage::Enum, unsigned long, bool)+0x56) [0x59f4ee6]
8. /usr/bin/clickhouse-server(DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, DB::QueryProcessingStage::Enum, unsigned long, bool)+0x7e7) [0x5a011d7]
9. /usr/bin/clickhouse-server(DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, DB::Context&, DB::QueryProcessingStage::Enum)+0x368) [0x59dc458]
10. /usr/bin/clickhouse-server() [0x5b3a134]
11. /usr/bin/clickhouse-server(DB::executeQuery(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool)+0x81) [0x5b3bfe1]
12. /usr/bin/clickhouse-server(DB::TCPHandler::runImpl()+0x4b6) [0x33a9aa6]
13. /usr/bin/clickhouse-server(DB::TCPHandler::run()+0x2b) [0x33aac3b]
14. /usr/bin/clickhouse-server(Poco::Net::TCPServerConnection::start()+0xf) [0x704b7ef]
15. /usr/bin/clickhouse-server(Poco::Net::TCPServerDispatcher::run()+0x16a) [0x704bbca]
16. /usr/bin/clickhouse-server(Poco::PooledThread::run()+0x77) [0x71280d7]
17. /usr/bin/clickhouse-server(Poco::ThreadImpl::runnableEntry(void*)+0x38) [0x7123f98]
18. /usr/bin/clickhouse-server() [0xacc19cf]
19. /lib/x86_64-linux-gnu/libpthread.so.0(+0x76ba) [0x7f8f3d5606ba]
20. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f8f3cb8141d]

Received exception from server (version 19.3.3):
Code: 46. DB::Exception: Received from localhost:9000, 127.0.0.1. DB::Exception: Unknown function lambda. 
```

**Additional context**

Lambda functions should be marked as not stateful and predicate push down should work. Naturally if a lambda function uses a stateful function then recursive syntax analysis should call this out.
