ID: 5027
Title: Data loss when using jdbc batch insert to ReplicatedMergeTree engine.
Description:
**Describe the bug**
The data was loss when using jdbc batch insert into ReplicatedMergeTree engine based table. there was no Exception and Error . Be there any suggestions for following code fragments , Thanks .

private def batchLoad(pendingMap: HashMap[String, ListBuffer[AsdBase]], maxPendingSize: Int, config: Config): Unit = {

    pendingMap.foreach(tuple => {
      val (tableName, pendingBuffer) = (tuple._1, tuple._2)
      if (pendingBuffer.size >= maxPendingSize) {
        val clickHouseURL = config.getString("clickhouse.url")
        val dataSource = new BalancedClickhouseDataSource(clickHouseURL)
        dataSource.scheduleActualization(3, java.util.concurrent.TimeUnit.SECONDS)
        val connection = dataSource.getConnection

        val insertSql = s"INSERT INTO ${tableName} (request_time, advertiser_id, order_id, exe_lineitem_id, lineitem_path, deal_id, pyid, platform, city_id, mobile_device_type, os) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)".stripMargin
        val statement = connection.prepareStatement(insertSql)

        pendingBuffer.map(asdBase => {
          statement.setString(1, asdBase.requestTime)
          statement.setLong(2, asdBase.advertiserId)
          statement.setLong(3, asdBase.orderId)
          statement.setLong(4, asdBase.exeCampaignId)
          statement.setString(5, asdBase.lineItemPath)
          statement.setLong(6, asdBase.dealId)
          statement.setString(7, asdBase.pyid)
          statement.setString(8, asdBase.platform)
          statement.setLong(9, asdBase.cityId)
          statement.setString(10, asdBase.mobileDeviceType)
          statement.setString(11, asdBase.os)
          statement.addBatch()
        })

        try {
          statement.executeBatch()
          println(s"loading ${pendingBuffer.size} records into ck table: $tableName")
          pendingBuffer.clear()

        } catch {
          case e: Exception => {
            e.printStackTrace()
          }
        } finally {
          statement.close()
          connection.close()
        }
      }
    })

  }