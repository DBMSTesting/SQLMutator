ID: 75593
Title: Logical Error: Bad cast from type DB::ColumnString to DB::ColumnLowCardinality
Description:
### Describe the bug

This happens with a Merge table. Run Fiddle.

### How to reproduce

Run Fiddle: https://fiddle.clickhouse.com/d5973612-7892-456b-83ed-c0422cd7e811

### Error message and/or stacktrace

Stack trace:

```
<Fatal> : Logical error: 'Bad cast from type DB::ColumnString to DB::ColumnLowCardinality'.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. contrib/llvm-project/libcxx/include/__exception/exception.h:106: Poco::Exception::Exception(String const&, int) @ 0x000000003a9930b1
1. src/Common/Exception.cpp:106: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000001c3582a5
2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000b74a64e
3. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000b74e0de
4. T typeid_cast<DB::ColumnLowCardinality const&, DB::IColumn const>(DB::IColumn const&) @ 0x00000000130787d2
5. DB::detail::FunctionCast::prepareUnpackDictionaries(std::shared_ptr<DB::IDataType const> const&, std::shared_ptr<DB::IDataType const> const&) const::'lambda0'(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)::operator()(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) const @ 0x0000000028bd629c
6. COW<DB::IColumn>::immutable_ptr<DB::IColumn> std::__function::__policy_invoker<COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::__call_impl[abi:ne180100]<std::__function::__default_alloc_func<DB::detail::FunctionCast::prepareUnpackDictionaries(std::shared_ptr<DB::IDataType const> const&, std::shared_ptr<DB::IDataType const> const&) const::'lambda0'(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long), COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>>(std::__function::__policy_storage const*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) @ 0x0000000028bd5ce1
7. DB::detail::ExecutableFunctionCast::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x0000000028784395
8. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000002860b4bb
9. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000002860ee4e
10. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000028612750
11. src/Interpreters/ExpressionActions.cpp:636: DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool, bool) const @ 0x000000002bb05655
12. src/Interpreters/ExpressionActions.cpp:816: DB::ExpressionActions::execute(DB::Block&, bool, bool) const @ 0x000000002bb08489
13. src/Storages/VirtualColumnUtils.cpp:105: DB::VirtualColumnUtils::filterBlockWithExpression(std::shared_ptr<DB::ExpressionActions> const&, DB::Block&) @ 0x00000000311d1047
14. src/Storages/VirtualColumnUtils.cpp:491: DB::VirtualColumnUtils::filterBlockWithPredicate(DB::ActionsDAG::Node const*, DB::Block&, std::shared_ptr<DB::Context const>, bool) @ 0x00000000311e1aea
15. src/Storages/StorageMerge.cpp:1328: DB::ReadFromMerge::getSelectedTables(std::shared_ptr<DB::Context const>, bool, bool) const @ 0x0000000030d6b7e6
16. src/Storages/StorageMerge.cpp:566: DB::ReadFromMerge::filterTablesAndCreateChildrenPlans() @ 0x0000000030d684b1
17. src/Storages/StorageMerge.cpp:1581: DB::ReadFromMerge::applyFilters(DB::ActionDAGNodes) @ 0x0000000030d8aa0f
18. ./src/Processors/QueryPlan/SourceStepWithFilter.h:39: DB::SourceStepWithFilterBase::applyFilters() @ 0x00000000335993f7
19. src/Processors/QueryPlan/Optimizations/optimizePrimaryKeyConditionAndLimit.cpp:50: DB::QueryPlanOptimizations::optimizePrimaryKeyConditionAndLimit(std::vector<DB::QueryPlanOptimizations::Frame, std::allocator<DB::QueryPlanOptimizations::Frame>> const&) @ 0x0000000033598fab
20. src/Processors/QueryPlan/Optimizations/optimizeTree.cpp:119: DB::QueryPlanOptimizations::optimizeTreeSecondPass(DB::QueryPlanOptimizationSettings const&, DB::QueryPlan::Node&, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&) @ 0x00000000335957fb
21. src/Processors/QueryPlan/QueryPlan.cpp:490: DB::QueryPlan::optimize(DB::QueryPlanOptimizationSettings const&) @ 0x00000000333e335c
22. src/Processors/QueryPlan/QueryPlan.cpp:175: DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x00000000333e09b6
23. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:274: DB::InterpreterSelectQueryAnalyzer::buildQueryPipeline() @ 0x000000002cf1e9e0
24. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:241: DB::InterpreterSelectQueryAnalyzer::execute() @ 0x000000002cf1e1c7
25. src/Interpreters/executeQuery.cpp:1455: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x000000002d6c5e59
26. src/Interpreters/executeQuery.cpp:1621: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000002d6be21e
27. src/Server/TCPHandler.cpp:662: DB::TCPHandler::runImpl() @ 0x0000000032684800
28. src/Server/TCPHandler.cpp:2624: DB::TCPHandler::run() @ 0x00000000326c3996
29. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x000000003ab763ef
30. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x000000003ab76f9e
31. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x000000003aa892eb
```