ID: 5376
Title: ODBC bridge with PostgreSQL requires prepared statements support
Description:
Good day.
We are using external dictionaries in PostgreSQL via ODBC
There is two types of connections in our infrastructure:
- direct connection to Postgres
- connection via pooler (pgBouncer) in transaction mode

Database startup, when connecting via pooler fails.
`/etc/odbc.ini` contains `UseServerSidePrepare=No` for both types
It worked in 1.1.54370 (pre-odbc-bridge version)

**How to reproduce**
* Which ClickHouse server version to use
18.14.19
External dictionary via ODBC
External database: postgres
Use connection pooler between odbc and postgres. 
Connections Pooler: pgbouncer, but also tested with yandex\odyssey with same result
Pooling strategy: transaction

**Expected behavior**
Successful database startup in both cases

**Error message and/or stacktrace**
```
2019.05.22 07:01:43.222254 [ 1 ] {} <Error> Application: DB::Exception: Cannot create table from metadata file /var/lib/clickhouse/metadata/db//dict.sql, error: DB::Exception: Received error from remote server /?connection_string=DSN%3postgres_pgbouncer&columns=...&max_block_size=8192. HTTP status code: 500 Internal Server Error, body: ï¿½Poco::Exception. Code: 1000, e.code() = 0, e.displayText() = ODBC handle exception: Failed to get number of columns: Connection:Not applicable
Server:postgres_pgbouncer
===========================
ODBC Diagnostic record #1:
===========================
SQLSTATE = 26000
Native Error Code = 1
ERROR: unnamed prepared statement does not exist;
No query has been executed with that handle

, e.what() = ODBC handle exception, stack trace:
0. /usr/bin/clickhouse-server(StackTrace::StackTrace()+0x16) [0x99d31a6]
1. /usr/bin/clickhouse-server(DB::receiveResponse(Poco::Net::HTTPClientSession&, Poco::Net::HTTPRequest const&, Poco::Net::HTTPResponse&)+0x191) [0x99ec2c1]
2. /usr/bin/clickhouse-server(DB::ReadWriteBufferFromHTTP::ReadWriteBufferFromHTTP(Poco::URI, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::function<void (std::ostream&)>, DB::ConnectionTimeouts const&, Poco::Net::HTTPBasicCredentials const&, unsigned long)+0x2df) [0x9a0500f]
3. /usr/bin/clickhouse-server() [0x7c3557f]
4. /usr/bin/clickhouse-server(DB::XDBCDictionarySource::loadBase(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x287) [0x7c365d7]
5. /usr/bin/clickhouse-server(DB::XDBCDictionarySource::loadAll()+0x107) [0x7c368d7]
6. /usr/bin/clickhouse-server(DB::FlatDictionary::loadData()+0x4e) [0x73e86ce]
7. /usr/bin/clickhouse-server(DB::FlatDictionary::FlatDictionary(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, DB::DictionaryStructure const&, std::unique_ptr<DB::IDictionarySource, std::default_delete<DB::IDictionarySource> >, DB::ExternalLoadableLifetime, bool, std::shared_ptr<DB::Block>)+0x5da) [0x73e8e9a]
8. /usr/bin/clickhouse-server(DB::DictionaryFactory::create(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Poco::Util::AbstractConfiguration const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, DB::Context&) const+0x1310) [0x7ad9140]
9. /usr/bin/clickhouse-server(DB::ExternalDictionaries::create(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Poco::Util::AbstractConfiguration const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x43) [0x7590913]
10. /usr/bin/clickhouse-server(DB::ExternalLoader::reloadFromConfigFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x12fb) [0x759400b]
11. /usr/bin/clickhouse-server(DB::ExternalLoader::reloadFromConfigFiles(bool, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbb) [0x75965cb]
12. /usr/bin/clickhouse-server(DB::ExternalLoader::reloadAndUpdate(bool)+0x61) [0x7596ca1]
13. /usr/bin/clickhouse-server(DB::ExternalLoader::init(bool)+0x65) [0x7598395]
14. /usr/bin/clickhouse-server(DB::ExternalDictionaries::ExternalDictionaries(std::unique_ptr<DB::IExternalLoaderConfigRepository, std::default_delete<DB::IExternalLoaderConfigRepository> >, DB::Context&, bool)+0x1d0) [0x7591010]
15. /usr/bin/clickhouse-server(DB::Context::getExternalDictionariesImpl(bool) const+0xf0) [0x7543e30]
16. /usr/bin/clickhouse-server() [0x7ba4eda]
17. /usr/bin/clickhouse-server(DB::StorageFactory::get(DB::ASTCreateQuery&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, DB::Context&, DB::Context&, DB::ColumnsDescription const&, bool, bool) const+0x1fe) [0x773491e]
18. /usr/bin/clickhouse-server(DB::createTableFromDefinition(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, DB::Context&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10a) [0x6b7071a]
19. /usr/bin/clickhouse-server() [0x79faf26]
20. /usr/bin/clickhouse-server() [0x79fb5f4]
21. /usr/bin/clickhouse-server(ThreadPool::worker()+0x19e) [0x9bd63ce]
22. /usr/bin/clickhouse-server() [0xa3c68cf]
23. /lib/x86_64-linux-gnu/libpthread.so.0(+0x76ba) [0x7f241efd46ba]
24. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f241e5f541d]

2019.05.22 07:01:43.222307 [ 1 ] {} <Information> Application: shutting down
2019.05.22 07:01:43.222313 [ 1 ] {} <Debug> Application: Uninitializing subsystem: Logging Subsystem
2019.05.22 07:01:43.222333 [ 2 ] {} <Information> BaseDaemon: Stop SignalListener thread
```
