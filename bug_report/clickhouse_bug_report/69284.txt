ID: 69284
Title: Logical error on join with final
Description:
**Describe the bug**

Run the steps on the Fiddle, this may be related to the `Dynamic` type.

**How to reproduce**

Run the fiddle:
https://fiddle.clickhouse.com/9113deea-1abc-4613-a4d5-c57307d94034

Here is the stack trace:
```
<Fatal> : Logical error: 'parts_ranges[0].event == PartsRangesIterator::EventType::RangeStart'.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. src/Common/StackTrace.cpp:372: StackTrace::tryCapture() @ 0x000000001e49c2b7
1. src/Common/Exception.cpp:53: DB::abortOnFailedAssertion(String const&) @ 0x000000001e42c02e
2. src/Processors/QueryPlan/PartsSplitter.cpp:488: (anonymous namespace)::splitPartsRanges(DB::RangesInDataParts, std::shared_ptr<Poco::Logger> const&) @ 0x000000003027ddc1
3. src/Processors/QueryPlan/PartsSplitter.cpp:916: DB::splitPartsWithRangesByPrimaryKey(DB::KeyDescription const&, std::shared_ptr<DB::ExpressionActions>, DB::RangesInDataParts, unsigned long, std::shared_ptr<DB::Context const>, std::function<DB::Pipe (DB::RangesInDataParts)>&&, bool, bool) @ 0x00000000302729a2
4. src/Processors/QueryPlan/ReadFromMergeTree.cpp:1292: DB::ReadFromMergeTree::spreadMarkRangesAmongStreamsFinal(DB::RangesInDataParts&&, unsigned long, std::vector<String, std::allocator<String>> const&, std::vector<String, std::allocator<String>> const&, std::optional<DB::ActionsDAG>&) @ 0x000000003020cbbe
5. src/Processors/QueryPlan/ReadFromMergeTree.cpp:1905: DB::ReadFromMergeTree::spreadMarkRanges(DB::RangesInDataParts&&, unsigned long, DB::ReadFromMergeTree::AnalysisResult&, std::optional<DB::ActionsDAG>&) @ 0x000000003021c7e1
6. src/Processors/QueryPlan/ReadFromMergeTree.cpp:2009: DB::ReadFromMergeTree::initializePipeline(DB::QueryPipelineBuilder&, DB::BuildQueryPipelineSettings const&) @ 0x000000003021ebcd
7. src/Processors/QueryPlan/ISourceStep.cpp:20: DB::ISourceStep::updatePipeline(std::vector<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>, std::allocator<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>>>, DB::BuildQueryPipelineSettings const&) @ 0x000000003019861c
8. src/Processors/QueryPlan/QueryPlan.cpp:188: DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x00000000301e0d95
9. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:252: DB::InterpreterSelectQueryAnalyzer::buildQueryPipeline() @ 0x000000002c01bc83
10. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:221: DB::InterpreterSelectQueryAnalyzer::execute() @ 0x000000002c01b528
11. src/Interpreters/executeQuery.cpp:1238: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000002c649c3a
12. src/Interpreters/executeQuery.cpp:1404: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000002c642d49
13. src/Server/TCPHandler.cpp:564: DB::TCPHandler::runImpl() @ 0x000000002f5a3d25
14. src/Server/TCPHandler.cpp:2484: DB::TCPHandler::run() @ 0x000000002f5d4269
15. base/poco/Net/src/TCPServerConnection.cpp:43: Poco::Net::TCPServerConnection::start() @ 0x0000000037203b2f
16. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x0000000037204737
17. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x0000000037125c0b
18. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000371208c8
19. asan_thread_start(void*) @ 0x000000000e5e8bcd
20. ? @ 0x00007ffff7c9ca94
21. ? @ 0x00007ffff7d29c3c
```
At the beginning before reducing, I had another logical error:
```
<Fatal> : Logical error: 'part_index_start_to_range.contains(current_part_range_index)'.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. src/Common/StackTrace.cpp:372: StackTrace::tryCapture() @ 0x000000001e49c2b7
1. src/Common/Exception.cpp:53: DB::abortOnFailedAssertion(String const&) @ 0x000000001e42c02e
2. src/Processors/QueryPlan/PartsSplitter.cpp:579: (anonymous namespace)::splitPartsRanges(DB::RangesInDataParts, std::shared_ptr<Poco::Logger> const&) @ 0x000000003027d9ca
3. src/Processors/QueryPlan/PartsSplitter.cpp:916: DB::splitPartsWithRangesByPrimaryKey(DB::KeyDescription const&, std::shared_ptr<DB::ExpressionActions>, DB::RangesInDataParts, unsigned long, std::shared_ptr<DB::Context const>, std::function<DB::Pipe (DB::RangesInDataParts)>&&, bool, bool) @ 0x00000000302729a2
4. src/Processors/QueryPlan/ReadFromMergeTree.cpp:1292: DB::ReadFromMergeTree::spreadMarkRangesAmongStreamsFinal(DB::RangesInDataParts&&, unsigned long, std::vector<String, std::allocator<String>> const&, std::vector<String, std::allocator<String>> const&, std::optional<DB::ActionsDAG>&) @ 0x000000003020cbbe
5. src/Processors/QueryPlan/ReadFromMergeTree.cpp:1905: DB::ReadFromMergeTree::spreadMarkRanges(DB::RangesInDataParts&&, unsigned long, DB::ReadFromMergeTree::AnalysisResult&, std::optional<DB::ActionsDAG>&) @ 0x000000003021c7e1
6. src/Processors/QueryPlan/ReadFromMergeTree.cpp:2009: DB::ReadFromMergeTree::initializePipeline(DB::QueryPipelineBuilder&, DB::BuildQueryPipelineSettings const&) @ 0x000000003021ebcd
7. src/Processors/QueryPlan/ISourceStep.cpp:20: DB::ISourceStep::updatePipeline(std::vector<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>, std::allocator<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>>>, DB::BuildQueryPipelineSettings const&) @ 0x000000003019861c
8. src/Processors/QueryPlan/QueryPlan.cpp:188: DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x00000000301e0d95
9. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:252: DB::InterpreterSelectQueryAnalyzer::buildQueryPipeline() @ 0x000000002c01bc83
10. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:221: DB::InterpreterSelectQueryAnalyzer::execute() @ 0x000000002c01b528
11. src/Interpreters/executeQuery.cpp:1238: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000002c649c3a
12. src/Interpreters/executeQuery.cpp:1404: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000002c642d49
13. src/Server/TCPHandler.cpp:564: DB::TCPHandler::runImpl() @ 0x000000002f5a3d25
14. src/Server/TCPHandler.cpp:2484: DB::TCPHandler::run() @ 0x000000002f5d4269
15. base/poco/Net/src/TCPServerConnection.cpp:43: Poco::Net::TCPServerConnection::start() @ 0x0000000037203b2f
16. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x0000000037204737
17. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x0000000037125c0b
18. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000371208c8
19. asan_thread_start(void*) @ 0x000000000e5e8bcd
20. ? @ 0x00007ffff7c9ca94
21. ? @ 0x00007ffff7d29c3c
```

