ID: 70826
Title: Logical error: Inconsistent table names
Description:
**Describe the bug**

Calling EXPLAIN SYNTAX on query with a VIEW gives a logical error.

**How to reproduce**
Run Fiddle:
https://fiddle.clickhouse.com/de4aa496-d9f9-436c-96eb-077bdc6ed1bc

Stack trace:
```
2024.10.18 08:45:33.784198 [ 1425377 ] {5c62c379-2566-42f4-b466-44831552efd5} <Fatal> : Logical error: 'Inconsistent table names'.
2024.10.18 08:45:33.816883 [ 1425377 ] {5c62c379-2566-42f4-b466-44831552efd5} <Fatal> : Stack trace (when copying this message, always include the lines below):

0. std::exception::capture() @ 0x0000000019213f0b
1. ./contrib/llvm-project/libcxx/include/exception:114: Poco::Exception::Exception(String const&, int) @ 0x00000000387de805
2. ./build_docker/./src/Common/Exception.cpp:109: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000002535c94b
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000019092296
4. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x00000000190abcef
5. ./build_docker/./src/Interpreters/CrossToInnerJoinVisitor.cpp:53: DB::CrossToInnerJoinMatcher::visit(DB::ASTSelectQuery&, std::shared_ptr<DB::IAST>&, DB::CrossToInnerJoinMatcher::Data&) @ 0x00000000320f4251
6. ./src/Interpreters/InDepthNodeVisitor.h:71: DB::InDepthNodeVisitor<DB::CrossToInnerJoinMatcher, true, false, std::shared_ptr<DB::IAST>>::doVisit(std::shared_ptr<DB::IAST>&) @ 0x00000000320a8e8d
7. ./src/Interpreters/InDepthNodeVisitor.h:61: void DB::InDepthNodeVisitor<DB::CrossToInnerJoinMatcher, true, false, std::shared_ptr<DB::IAST>>::visitChildren<false>(std::shared_ptr<DB::IAST>&) @ 0x00000000320a91a3
8. ./src/Interpreters/InDepthNodeVisitor.h:64: void DB::InDepthNodeVisitor<DB::CrossToInnerJoinMatcher, true, false, std::shared_ptr<DB::IAST>>::visitChildren<false>(std::shared_ptr<DB::IAST>&) @ 0x00000000320a91b8
9. ./src/Interpreters/InDepthNodeVisitor.h:64: void DB::InDepthNodeVisitor<DB::CrossToInnerJoinMatcher, true, false, std::shared_ptr<DB::IAST>>::visitChildren<false>(std::shared_ptr<DB::IAST>&) @ 0x00000000320a91b8
10. ./src/Interpreters/InDepthNodeVisitor.h:64: void DB::InDepthNodeVisitor<DB::CrossToInnerJoinMatcher, true, false, std::shared_ptr<DB::IAST>>::visitChildren<false>(std::shared_ptr<DB::IAST>&) @ 0x00000000320a91b8
11. ./src/Interpreters/InDepthNodeVisitor.h:64: void DB::InDepthNodeVisitor<DB::CrossToInnerJoinMatcher, true, false, std::shared_ptr<DB::IAST>>::visitChildren<false>(std::shared_ptr<DB::IAST>&) @ 0x00000000320a91b8
12. ./src/Interpreters/InDepthNodeVisitor.h:64: void DB::InDepthNodeVisitor<DB::CrossToInnerJoinMatcher, true, false, std::shared_ptr<DB::IAST>>::visitChildren<false>(std::shared_ptr<DB::IAST>&) @ 0x00000000320a91b8
13. ./src/Interpreters/InDepthNodeVisitor.h:64: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x000000003205b81a
14. ./build_docker/./src/Interpreters/InterpreterSelectQuery.cpp:302: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000032056413
15. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:714: DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000321aa627
16. ./build_docker/./src/Interpreters/InterpreterSelectWithUnionQuery.cpp:165: DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000321a7a81
17. ./build_docker/./src/Interpreters/InterpreterSelectWithUnionQuery.cpp:54: DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000321a5d63
18. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:714: std::__unique_if<DB::InterpreterSelectWithUnionQuery>::__unique_single std::make_unique[abi:v15007]<DB::InterpreterSelectWithUnionQuery, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context const>&, DB::SelectQueryOptions&>(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context const>&, DB::SelectQueryOptions&) @ 0x00000000321ecc59
19. ./build_docker/./src/Interpreters/JoinedTables.cpp:212: DB::JoinedTables::makeLeftTableSubquery(DB::SelectQueryOptions const&) @ 0x00000000321e559b
20. ./build_docker/./src/Interpreters/InterpreterSelectQuery.cpp:852: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>)::$_0::operator()(bool) const @ 0x000000003206ab26
21. ./build_docker/./src/Interpreters/InterpreterSelectQuery.cpp:915: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000032060697
22. ./build_docker/./src/Interpreters/InterpreterSelectQuery.cpp:477: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x00000000320561d6
23. ./build_docker/./src/Interpreters/InterpreterSelectQuery.cpp:294: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000032055f33
24. ./build_docker/./src/Interpreters/InterpreterExplainQuery.cpp:79: DB::InDepthNodeVisitor<DB::(anonymous namespace)::ExplainAnalyzedSyntaxMatcher, true, false, std::shared_ptr<DB::IAST>>::doVisit(std::shared_ptr<DB::IAST>&) @ 0x0000000031ac4f17
25. ./src/Interpreters/InDepthNodeVisitor.h:61: void DB::InDepthNodeVisitor<DB::(anonymous namespace)::ExplainAnalyzedSyntaxMatcher, true, false, std::shared_ptr<DB::IAST>>::visitChildren<false>(std::shared_ptr<DB::IAST>&) @ 0x0000000031ac56c4
26. ./src/Interpreters/InDepthNodeVisitor.h:64: void DB::InDepthNodeVisitor<DB::(anonymous namespace)::ExplainAnalyzedSyntaxMatcher, true, false, std::shared_ptr<DB::IAST>>::visitChildren<false>(std::shared_ptr<DB::IAST>&) @ 0x0000000031ac56cf
27. ./src/Interpreters/InDepthNodeVisitor.h:64: void DB::InDepthNodeVisitor<DB::(anonymous namespace)::ExplainAnalyzedSyntaxMatcher, true, false, std::shared_ptr<DB::IAST>>::visitChildren<false>(std::shared_ptr<DB::IAST>&) @ 0x0000000031ac56cf
28. ./src/Interpreters/InDepthNodeVisitor.h:64: DB::InterpreterExplainQuery::executeImpl() @ 0x0000000031abb6e9
29. ./build_docker/./src/Interpreters/InterpreterExplainQuery.cpp:98: DB::InterpreterExplainQuery::execute() @ 0x0000000031ab86c4
30. ./build_docker/./src/Interpreters/executeQuery.cpp:1349: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000003265dca6
31. ./build_docker/./src/Interpreters/executeQuery.cpp:1516: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000326568d3
```