ID: 18450
Title: MaterializeMySQLSyncThread: Code: 50, e.displayText() = DB::Exception: Unsupported type FixedString(1)
Description:
(you don't have to strictly follow this form)

**Describe the bug**
Replicate data from mysql to clickhouse by using MaterializeMySQL. If I use data type binary(1), I will get this exception.

**How to reproduce**
create this table on MySQL side.
create table t1(id int primary key, intro binary(1));
use MaterializeMySQL to replicat the table.
CREATE DATABASE ch1 ENGINE = MaterializeMySQL('127.0.0.1:3306', 'ch1', 'root', '123456');


* Which ClickHouse server version to use
20.10.6.27


* `CREATE TABLE` statements for all tables involved

create this table on MySQL side.
create table t1(id int primary key, intro binary(1));
use MaterializeMySQL to replicat the table.
CREATE DATABASE ch1 ENGINE = MaterializeMySQL('127.0.0.1:3306', 'ch1', 'root', '123456');

**Expected behavior**
replicate success

**Error message and/or stacktrace**

2020.12.24 19:21:52.672617 [ 26279 ] {} <Warning> Access(local directory): File /home/ch/ch_data/data/clickhouse/access/users.list doesn't exist
2020.12.24 19:21:52.672761 [ 26279 ] {} <Warning> Access(local directory): Recovering lists in directory /home/ch/ch_data/data/clickhouse/access/
2020.12.24 19:22:20.872221 [ 26806 ] {} <Error> MaterializeMySQLSyncThread: Code: 50, e.displayText() = DB::Exception: Unsupported type FixedString(1), Stack trace (when copying this message, always include the lines below):

0. /home/ch/ws/ClickHouse/build_debug/../contrib/libcxx/include/exception:129: std::exception::capture() @ 0x6cc0ab5 in /home/ch/ch_data/clickhouse
1. /home/ch/ws/ClickHouse/build_debug/../contrib/libcxx/include/exception:109: Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x1a4e8fa2 in /home/ch/ch_data/clickhouse
2. /home/ch/ws/ClickHouse/build_debug/../src/Common/Exception.cpp:37: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x6ceb26d in /home/ch/ch_data/clickhouse
3. /home/ch/ws/ClickHouse/build_debug/../src/Core/ExternalResultDescription.cpp:80: DB::ExternalResultDescription::init(DB::Block const&) @ 0x13414edd in /home/ch/ch_data/clickhouse
4. /home/ch/ws/ClickHouse/build_debug/../src/Formats/MySQLBlockInputStream.cpp:51: DB::MySQLBlockInputStream::MySQLBlockInputStream(mysqlxx::Pool::Entry const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Block const&, unsigned long, bool) @ 0x14fb8540 in /home/ch/ch_data/clickhouse
5. /home/ch/ws/ClickHouse/build_debug/../src/Databases/MySQL/MaterializeMySQLSyncThread.cpp:282: DB::dumpDataForTables(mysqlxx::Pool::Entry&, DB::MaterializeMetadata&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context const&, std::__1::function<bool ()> const&) @ 0x157a082b in /home/ch/ch_data/clickhouse
6. /home/ch/ws/ClickHouse/build_debug/../src/Databases/MySQL/MaterializeMySQLSyncThread.cpp:327: DB::MaterializeMySQLSyncThread::prepareSynchronized(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)::'lambda'()::operator()() const @ 0x157a2737 in /home/ch/ch_data/clickhouse
7. /home/ch/ws/ClickHouse/build_debug/../contrib/libcxx/include/type_traits:3519: void std::__1::__invoke_void_return_wrapper<void>::__call<DB::MaterializeMySQLSyncThread::prepareSynchronized(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)::'lambda'()&>(DB::MaterializeMySQLSyncThread::prepareSynchronized(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)::'lambda'()&) @ 0x157b7f99 in /home/ch/ch_data/clickhouse
8. /home/ch/ws/ClickHouse/build_debug/../contrib/libcxx/include/functional:1541: std::__1::__function::__func<DB::MaterializeMySQLSyncThread::prepareSynchronized(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)::'lambda'(), std::__1::allocator<DB::MaterializeMySQLSyncThread::prepareSynchronized(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)::'lambda'()>, void ()>::operator()() @ 0x157b716b in /home/ch/ch_data/clickhouse
9. /home/ch/ws/ClickHouse/build_debug/../contrib/libcxx/include/functional:1867: std::__1::function<void ()>::operator()() const @ 0x6cd1cc4 in /home/ch/ch_data/clickhouse
10. /home/ch/ws/ClickHouse/build_debug/../src/Databases/MySQL/MaterializeMetadata.cpp:130: DB::commitMetadata(std::__1::function<void ()> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0x164d8ef5 in /home/ch/ch_data/clickhouse


**Additional context**

I have read the code of ExternalResultDescription::init , but it does not handle the FixedString type.

void ExternalResultDescription::init(const Block & sample_block_)
{
    sample_block = sample_block_;

    types.reserve(sample_block.columns());

    for (auto & elem : sample_block)
    {
        /// If default value for column was not provided, use default from data type.
        if (elem.column->empty())
            elem.column = elem.type->createColumnConstWithDefaultValue(1)->convertToFullColumnIfConst();

        bool is_nullable = elem.type->isNullable();
        DataTypePtr type_not_nullable = removeNullable(elem.type);
        const IDataType * type = type_not_nullable.get();

        if (typeid_cast<const DataTypeUInt8 *>(type))
            types.emplace_back(ValueType::vtUInt8, is_nullable);
        else if (typeid_cast<const DataTypeUInt16 *>(type))
            types.emplace_back(ValueType::vtUInt16, is_nullable);
        else if (typeid_cast<const DataTypeUInt32 *>(type))
            types.emplace_back(ValueType::vtUInt32, is_nullable);
        else if (typeid_cast<const DataTypeUInt64 *>(type))
            types.emplace_back(ValueType::vtUInt64, is_nullable);
        else if (typeid_cast<const DataTypeInt8 *>(type))
            types.emplace_back(ValueType::vtInt8, is_nullable);
        else if (typeid_cast<const DataTypeInt16 *>(type))
            types.emplace_back(ValueType::vtInt16, is_nullable);
        else if (typeid_cast<const DataTypeInt32 *>(type))
            types.emplace_back(ValueType::vtInt32, is_nullable);
        else if (typeid_cast<const DataTypeInt64 *>(type))
            types.emplace_back(ValueType::vtInt64, is_nullable);
        else if (typeid_cast<const DataTypeFloat32 *>(type))
            types.emplace_back(ValueType::vtFloat32, is_nullable);
        else if (typeid_cast<const DataTypeFloat64 *>(type))
            types.emplace_back(ValueType::vtFloat64, is_nullable);
        else if (typeid_cast<const DataTypeString *>(type))
            types.emplace_back(ValueType::vtString, is_nullable);
        else if (typeid_cast<const DataTypeDate *>(type))
            types.emplace_back(ValueType::vtDate, is_nullable);
        else if (typeid_cast<const DataTypeDateTime *>(type))
            types.emplace_back(ValueType::vtDateTime, is_nullable);
        else if (typeid_cast<const DataTypeUUID *>(type))
            types.emplace_back(ValueType::vtUUID, is_nullable);
        else if (typeid_cast<const DataTypeEnum8 *>(type))
            types.emplace_back(ValueType::vtString, is_nullable);
        else if (typeid_cast<const DataTypeEnum16 *>(type))
            types.emplace_back(ValueType::vtString, is_nullable);
        else if (typeid_cast<const DataTypeDateTime64 *>(type))
            types.emplace_back(ValueType::vtDateTime64, is_nullable);
        else if (typeid_cast<const DataTypeDecimal<Decimal32> *>(type))
            types.emplace_back(ValueType::vtDecimal32, is_nullable);
        else if (typeid_cast<const DataTypeDecimal<Decimal64> *>(type))
            types.emplace_back(ValueType::vtDecimal64, is_nullable);
        else if (typeid_cast<const DataTypeDecimal<Decimal128> *>(type))
            types.emplace_back(ValueType::vtDecimal128, is_nullable);
        else if (typeid_cast<const DataTypeDecimal<Decimal256> *>(type))
            types.emplace_back(ValueType::vtDecimal256, is_nullable);
        else
            throw Exception{"Unsupported type " + type->getName(), ErrorCodes::UNKNOWN_TYPE};
    }
}
