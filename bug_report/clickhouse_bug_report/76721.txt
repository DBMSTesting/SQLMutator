ID: 76721
Title: Another Not-ready Set is passed as the second argument for function 'in' logical error
Description:
### Describe the bug

This issue is not related to any of the existing issues with this error message.

### How to reproduce

Run Fiddle: https://fiddle.clickhouse.com/492e5a2c-61f5-4b74-ae32-3b1f53b7f38e

### Error message and/or stacktrace

Stack trace:

```
<Fatal> : Logical error: 'Not-ready Set is passed as the second argument for function 'in''.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. std::exception::exception[abi:ne190107]() @ 0x00000000180ffc74
1. base/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(String const&, int) @ 0x0000000035844600
2. src/Common/Exception.cpp:108: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x0000000023a1606b
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000017fb1696
4. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x0000000017fc5fcf
5. DB::(anonymous namespace)::FunctionIn<false, false, true, false>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, bool, unsigned long) const @ 0x000000001c5f7723
6. DB::(anonymous namespace)::FunctionIn<false, false, true, false>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000001c5f6850
7. src/Functions/IFunctionAdaptors.cpp:10: DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000002aca556e
8. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000002ac99477
9. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000002ac9be5a
10. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000002ac9d470
11. src/Interpreters/ExpressionActions.cpp:636: DB::executeAction(DB::ExpressionActions::Action const&, DB::(anonymous namespace)::ExecutionContext&, bool, bool) @ 0x000000002d4e9815
12. src/Interpreters/ExpressionActions.cpp:770: DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool, bool) const @ 0x000000002d4e7007
13. src/Interpreters/ExpressionActions.cpp:816: DB::ExpressionActions::execute(DB::Block&, bool, bool) const @ 0x000000002d4ea7be
14. src/Storages/MergeTree/MergeTreeDataWriter.cpp:566: DB::MergeTreeDataWriter::writeTempPartImpl(DB::BlockWithPartition&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::Context const>, long, bool) @ 0x0000000030d8fc0c
15. src/Storages/MergeTree/MergeTreeDataWriter.cpp:484: DB::MergeTreeDataWriter::writeTempPart(DB::BlockWithPartition&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::Context const>) @ 0x0000000030d8eaf1
16. src/Storages/MergeTree/MergeTreeSink.cpp:127: DB::MergeTreeSink::consume(DB::Chunk&) @ 0x00000000311885cd
17. src/Processors/Sinks/SinkToStorage.cpp:10: DB::SinkToStorage::onConsume(DB::Chunk) @ 0x0000000031e98f97
18. src/Processors/Transforms/ExceptionKeepingTransform.cpp:151: void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::ExceptionKeepingTransform::work()::$_1, void ()>>(std::__function::__policy_storage const*) @ 0x0000000031cede4b
19. contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x0000000031ceda3b
20. src/Processors/Transforms/ExceptionKeepingTransform.cpp:151: DB::ExceptionKeepingTransform::work() @ 0x0000000031cecba1
21. src/Processors/Executors/ExecutionThreadContext.cpp:53: DB::ExecutionThreadContext::executeTask() @ 0x000000003176be0e
22. src/Processors/Executors/PipelineExecutor.cpp:291: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x000000003175735f
23. src/Processors/Executors/PipelineExecutor.cpp:165: DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x0000000031756b43
24. src/Processors/Executors/PushingPipelineExecutor.cpp:131: DB::PushingPipelineExecutor::finish() @ 0x0000000031778096
25. src/Server/TCPHandler.cpp:1128: DB::TCPHandler::processInsertQuery(DB::QueryState&) @ 0x0000000031615c12
26. src/Server/TCPHandler.cpp:673: DB::TCPHandler::runImpl() @ 0x0000000031602329
27. src/Server/TCPHandler.cpp:2629: DB::TCPHandler::run() @ 0x0000000031631a8e
28. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x0000000035971962
29. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x0000000035972632
30. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x00000000358d9c77
31. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000358d56ae
```