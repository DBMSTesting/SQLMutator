ID: 10948
Title: DB::Exception: No such name in Block::erase() after update to version 20.4.2.9
Description:
**Describe the bug**
After updating to V 20.4.2.9 I'm getting `DB::Exception: No such name in Block::erase()` in a query that worked previously.

The query that fails is:

```SQL
SELECT 
    countDistinct(UserID) AS cuenta, 
    'Not Editorial' AS tipo
FROM hits
INNER JOIN editorial ON editorial.id = editorialID
WHERE (EventTime >= toDateTime(NOW() - 120)) AND (editorial.publish_time = '1970-01-01 00:00:00')
```
```
Code: 10. DB::Exception: Received from 51.15.227.24:9000. DB::Exception: No such name in Block::erase(): 'publish_time'.
```

The trace is 
```
2020.05.15 16:31:28.953414 [ 30066 ] {858d506a-cbab-44a2-b104-7550d40add7b} <Error> executeQuery: Code: 10, e.displayText() = DB::Exception: No such name in Block::erase(): 'publish_time' (version 20.4.2.9 (official build)) (from 51.15.227.24:35770) (in query: SELECT countDistinct(UserID) AS cuenta, 'Not Editorial' AS tipo FROM hits INNER JOIN editorial ON editorial.id = editorialID WHERE (EventTime >= toDateTime(NOW() - 120)) AND (editorial.publish_time = '1970-01-01 00:00:00')), Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x10406ef0 in /usr/bin/clickhouse
1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x8ff88ad in /usr/bin/clickhouse
2. ? @ 0xcd78850 in /usr/bin/clickhouse
3. DB::ExpressionActions::finalize(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xd1d6fee in /usr/bin/clickhouse
4. DB::ExpressionActionsChain::finalize() @ 0xd1d974e in /usr/bin/clickhouse
5. DB::ExpressionAnalysisResult::ExpressionAnalysisResult(DB::SelectQueryExpressionAnalyzer&, bool, bool, bool, std::__1::shared_ptr<DB::FilterInfo> const&, DB::Block const&) @ 0xd3be7a0 in /usr/bin/clickhouse
6. DB::InterpreterSelectQuery::getSampleBlockImpl(bool) @ 0xd225fa3 in /usr/bin/clickhouse
7. ? @ 0xd2274bb in /usr/bin/clickhouse
8. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xd22843d in /usr/bin/clickhouse
9. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xd229939 in /usr/bin/clickhouse
10. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xd3fa361 in /usr/bin/clickhouse
11. DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, DB::Context&, DB::QueryProcessingStage::Enum) @ 0xd197474 in /usr/bin/clickhouse
12. ? @ 0xd5375ae in /usr/bin/clickhouse
13. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, bool) @ 0xd53b0a5 in /usr/bin/clickhouse
14. DB::TCPHandler::runImpl() @ 0x90ff678 in /usr/bin/clickhouse
15. DB::TCPHandler::run() @ 0x9100650 in /usr/bin/clickhouse
16. Poco::Net::TCPServerConnection::start() @ 0x102f2c6b in /usr/bin/clickhouse
17. Poco::Net::TCPServerDispatcher::run() @ 0x102f30fb in /usr/bin/clickhouse
18. Poco::PooledThread::run() @ 0x104a0cc6 in /usr/bin/clickhouse
19. Poco::ThreadImpl::runnableEntry(void*) @ 0x1049bf80 in /usr/bin/clickhouse
20. start_thread @ 0x76ba in /lib/x86_64-linux-gnu/libpthread-2.23.so
21. clone @ 0x10741d in /lib/x86_64-linux-gnu/libc-2.23.so
```

But the same query without the previous condition does not fail
```SQL
SELECT 
    countDistinct(UserID) AS cuenta, 
    'Not Editorial' AS tipo
FROM newsroom.hits
INNER JOIN editorial ON editorial.id = editorialID
WHERE editorial.publish_time = '1970-01-01 00:00:00'
```
Also a similar query with numbers works properly
```SQL
SELECT 
    number AS id, 
    publish_time, 
    toInt32(editorial.publish_time)
FROM system.numbers
INNER JOIN newsroom.editorial ON number = editorial.id
WHERE (numbers.number < toDateTime(NOW() - 120)) AND (editorial.publish_time != '1970-01-01 00:00:00')
LIMIT 4
```

If there isn't enough information in the trace I could try to prepare a test scenario.

