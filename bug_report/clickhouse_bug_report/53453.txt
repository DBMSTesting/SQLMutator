ID: 53453
Title: "DB::Exception: Not found column" when using PREWHERE optimization in SELECT queries
Description:

**Describe what's wrong**

Potential problem with [PREWHERE](https://clickhouse.com/docs/en/sql-reference/statements/select/prewhere) optimization in [SELECT](https://clickhouse.com/docs/en/sql-reference/statements/select) queries.

Example: If I have a query where a column is in a NOT clause with the same value as another condition it produces an error like: 

`
Code: 10. DB::Exception: Not found column equals(user_id, 101) in block: while executing 'INPUT : 0 -> equals(user_id, 101) UInt8 : 0': While executing MergeTreeInOrder. (NOT_FOUND_COLUMN_IN_BLOCK) (version 23.8.1.41458 (official build))
`


**Does it reproduce on recent release?**

I'm on `23.8.1.41458`


**How to reproduce**

Following the quick start tutorial (https://clickhouse.com/docs/en/getting-started/quick-start#4-create-a-table)

1). CREATE TABLE: 

```
CREATE TABLE my_first_table
(
    user_id UInt32,
    message String,
    timestamp DateTime,
    metric Float32
)
ENGINE = MergeTree
PRIMARY KEY (user_id, timestamp);
```

2). INSERT data into it: 

```
INSERT INTO my_first_table (user_id, message, timestamp, metric) VALUES
    (101, 'Hello, ClickHouse!',                                 now(),       -1.0    ),
    (102, 'Insert a lot of rows per batch',                     yesterday(), 1.41421 ),
    (102, 'Sort your data based on your commonly-used queries', today(),     2.718   ),
    (101, 'Granules are the smallest chunks of data read',      now() + 5,   3.14159 );
```

3). Run a query: 

```
SELECT *
FROM my_first_table WHERE user_id = 101
AND NOT (user_id = 101 AND (metric = -1.0));
```

gives me the error: 

```
Code: 10. DB::Exception: Not found column equals(user_id, 101) in block: while executing 'INPUT : 0 -> equals(user_id, 101) UInt8 : 0': While executing MergeTreeInOrder. (NOT_FOUND_COLUMN_IN_BLOCK) (version 23.8.1.41458 (official build))
```

4). If you set `optimize_move_to_prewhere = 0` it works as expected: 

```
SELECT *
FROM my_first_table WHERE user_id = 101
AND NOT (user_id = 101 AND (metric = -1.0))
SETTINGS optimize_move_to_prewhere = 0;
```


**Additional context**

Looks similar to https://github.com/ClickHouse/ClickHouse/issues/37381
