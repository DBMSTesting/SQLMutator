ID: 6998
Title: Crashï¼Œwhen full/right join with nullable columns
Description:
Test on ClickHouse version 19.9.2.4. 

When full/right join with nullable columns, crash with the segmentation fault.

The test case as fllow:

```
DROP TABLE table_v1

CREATE TABLE table_v1 (
 `id` Nullable(Decimal64(10)),
 `dt` Nullable(DateTime),
 `province` String,
 `city` String,
 `type` String,
 `price1` Nullable(Decimal64(10)),
 `price2` Nullable(Decimal64(10)),
 `price3` Nullable(Decimal64(10)),
 `price4` Nullable(Decimal64(10)),
 `order` UInt8
)ENGINE = MergeTree() ORDER BY (type)

INSERT INTO table_v1 VALUES (1,'2017-12-31 00:00:00','province','city','type',297528.4,2087.05,2928.4,2828.4,1);


DROP TABLE table_v2

CREATE TABLE table_v2 (
 `id` Nullable(Decimal64(10)),
 `dt` Nullable(DateTime),
 `province` String,
 `city` String,
 `type` String,
 `price1` Nullable(Decimal64(10)),
 `price2` Nullable(Decimal64(10)),
 `order` UInt8
)ENGINE = MergeTree() ORDER BY (type)


INSERT INTO table_v2 VALUES (1,'2017-12-30 00:00:00','province1','city1','type1',2528.4,2528.4,1);

-- the follow sql will be crash
SELECT table_v2.*,table_v1.*
FROM table_v1 RIGHT OUTER JOIN table_v2 
ON table_v1.type = table_v2.type
AND table_v1.dt = table_v2.dt
AND table_v1.province = table_v2.province 
AND table_v1.id = table_v2.id 
AND table_v1.city = table_v2.city 
AND table_v1.price1 = table_v2.price1
AND table_v1.price2 = table_v2.price2;

--the follow sql is ok
SELECT table_v2.*,table_v1.*
FROM table_v1 RIGHT OUTER JOIN table_v2 
ON table_v1.id = table_v2.id 
AND table_v1.dt = table_v2.dt
AND table_v1.province = table_v2.province 
AND table_v1.city = table_v2.city
AND table_v1.type = table_v2.type
AND table_v1.price1 = table_v2.price1
AND table_v1.price2 = table_v2.price2;

```

**Error message and stacktrace**
```
2019.09.20 00:46:42.615536 [ 44 ] {} <Trace> HTTPHandler: Request URI: /?user=default&extremes=0&compress=1&database=default&result_overflow_mode=break&query_id=a541c303-3bdf-4caa-9528-f1904dbfdd5e&max_result_rows=200
2019.09.20 00:46:42.615900 [ 44 ] {a541c303-3bdf-4caa-9528-f1904dbfdd5e} <Debug> executeQuery: (from 10.37.129.2:49332) SELECT table_v2.*,table_v1.* FROM table_v1 RIGHT OUTER JOIN table_v2  ON  table_v1.type = table_v2.type AND table_v1.dt = table_v2.dt and table_v1.province = table_v2.province  AND table_v1.id = table_v2.id  and table_v1.city = table_v2.city  and table_v1.price1 = table_v2.price1 and table_v1.price2 = table_v2.price2 FORMAT TabSeparatedWithNamesAndTypes;
2019.09.20 00:46:42.616762 [ 44 ] {a541c303-3bdf-4caa-9528-f1904dbfdd5e} <Debug> Join: setSampleBlock: table_v2.id Nullable(Decimal(18, 10)) Nullable(size = 0, Decimal64(size = 0), UInt8(size = 0)), table_v2.dt Nullable(DateTime) Nullable(size = 0, UInt32(size = 0), UInt8(size = 0)), table_v2.province String String(size = 0), table_v2.city String String(size = 0), table_v2.type String String(size = 0), table_v2.price1 Nullable(Decimal(18, 10)) Nullable(size = 0, Decimal64(size = 0), UInt8(size = 0)), table_v2.price2 Nullable(Decimal(18, 10)) Nullable(size = 0, Decimal64(size = 0), UInt8(size = 0)), table_v2.order UInt8 UInt8(size = 0)
2019.09.20 00:46:42.617300 [ 44 ] {a541c303-3bdf-4caa-9528-f1904dbfdd5e} <Debug> default.table_v1 (SelectExecutor): Key condition: unknown
2019.09.20 00:46:42.617312 [ 44 ] {a541c303-3bdf-4caa-9528-f1904dbfdd5e} <Debug> default.table_v1 (SelectExecutor): Selected 1 parts by date, 1 parts by key, 1 marks to read from 1 ranges
2019.09.20 00:46:42.617399 [ 44 ] {a541c303-3bdf-4caa-9528-f1904dbfdd5e} <Trace> default.table_v1 (SelectExecutor): Reading approx. 8192 rows with 1 streams
2019.09.20 00:46:42.617418 [ 44 ] {a541c303-3bdf-4caa-9528-f1904dbfdd5e} <Trace> InterpreterSelectQuery: FetchColumns -> Complete
2019.09.20 00:46:42.617577 [ 44 ] {a541c303-3bdf-4caa-9528-f1904dbfdd5e} <Debug> executeQuery: Query pipeline:
Expression
 CreatingSets
  Lazy
  Union
   Expression
    Expression
     MergeTreeThread
   Expression
    NonJoined

2019.09.20 00:46:42.617630 [ 44 ] {a541c303-3bdf-4caa-9528-f1904dbfdd5e} <Trace> CreatingSetsBlockInputStream: Creating join. 
2019.09.20 00:46:42.617718 [ 44 ] {a541c303-3bdf-4caa-9528-f1904dbfdd5e} <Debug> default.table_v2 (SelectExecutor): Key condition: unknown
2019.09.20 00:46:42.617727 [ 44 ] {a541c303-3bdf-4caa-9528-f1904dbfdd5e} <Debug> default.table_v2 (SelectExecutor): Selected 1 parts by date, 1 parts by key, 1 marks to read from 1 ranges
2019.09.20 00:46:42.617806 [ 44 ] {a541c303-3bdf-4caa-9528-f1904dbfdd5e} <Trace> default.table_v2 (SelectExecutor): Reading approx. 8192 rows with 1 streams
2019.09.20 00:46:42.617832 [ 44 ] {a541c303-3bdf-4caa-9528-f1904dbfdd5e} <Trace> InterpreterSelectQuery: FetchColumns -> Complete
2019.09.20 00:46:42.618071 [ 44 ] {a541c303-3bdf-4caa-9528-f1904dbfdd5e} <Debug> CreatingSetsBlockInputStream: Created. Join with 1 entries from 1 rows. In 0.000 sec.
2019.09.20 00:46:42.620315 [ 46 ] {} <Error> BaseDaemon: ########################################
2019.09.20 00:46:42.620356 [ 46 ] {} <Error> BaseDaemon: (version 19.9.2.4) (from thread 42) Received signal Segmentation fault (11).
2019.09.20 00:46:42.620366 [ 46 ] {} <Error> BaseDaemon: Address: 0xfffffffffffffff8
2019.09.20 00:46:42.620372 [ 46 ] {} <Error> BaseDaemon: Access: read.
2019.09.20 00:46:42.620377 [ 46 ] {} <Error> BaseDaemon: Address not mapped to object.
2019.09.20 00:46:42.642991 [ 46 ] {} <Error> BaseDaemon: 0. clickhouse-server(DB::ColumnString::insertFrom(DB::IColumn const&, unsigned long)+0x1c) [0x5b94c5c]
2019.09.20 00:46:42.643024 [ 46 ] {} <Error> BaseDaemon: 1. clickhouse-server(DB::ColumnNullable::insertFrom(DB::IColumn const&, unsigned long)+0x27) [0x5b8bb27]
2019.09.20 00:46:42.643042 [ 46 ] {} <Error> BaseDaemon: 2. clickhouse-server(DB::AdderNonJoined<(DB::ASTTableJoin::Strictness)2, DB::JoinStuff::WithFlags<DB::RowRefList, true> >::add(DB::JoinStuff::WithFlags<DB::RowRefList, true> const&, unsigned long&, std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&)+0x14f) [0x5aa722f]
2019.09.20 00:46:42.643053 [ 46 ] {} <Error> BaseDaemon: 3. clickhouse-server(DB::Block DB::NonJoinedBlockInputStream::createBlock<(DB::ASTTableJoin::Strictness)2, DB::Join::MapsTemplate<DB::JoinStuff::WithFlags<DB::RowRefList, true> > >(DB::Join::MapsTemplate<DB::JoinStuff::WithFlags<DB::RowRefList, true> > const&)+0x13a) [0x5ac013a]
2019.09.20 00:46:42.643061 [ 46 ] {} <Error> BaseDaemon: 4. clickhouse-server(DB::NonJoinedBlockInputStream::readImpl()+0xda9) [0x5ac6a79]
2019.09.20 00:46:42.643068 [ 46 ] {} <Error> BaseDaemon: 5. clickhouse-server(DB::IBlockInputStream::read()+0x145) [0x591c5b5]
2019.09.20 00:46:42.643075 [ 46 ] {} <Error> BaseDaemon: 6. clickhouse-server(DB::ExpressionBlockInputStream::readImpl()+0x1a) [0x5e95b0a]
2019.09.20 00:46:42.643082 [ 46 ] {} <Error> BaseDaemon: 7. clickhouse-server(DB::IBlockInputStream::read()+0x145) [0x591c5b5]
2019.09.20 00:46:42.643089 [ 46 ] {} <Error> BaseDaemon: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::UnionBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x508) [0x5a5ca58]
2019.09.20 00:46:42.643096 [ 46 ] {} <Error> BaseDaemon: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_21UnionBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x59) [0x5a5d1e9]
2019.09.20 00:46:42.643103 [ 46 ] {} <Error> BaseDaemon: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x6380cc7]
2019.09.20 00:46:42.643110 [ 46 ] {} <Error> BaseDaemon: 11. clickhouse-server() [0x6d566df]
2019.09.20 00:46:42.643116 [ 46 ] {} <Error> BaseDaemon: 12. /lib64/libpthread.so.0() [0x3671e07aa1]

```