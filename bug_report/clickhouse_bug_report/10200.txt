ID: 10200
Title: Segmentation fault when executing join query sometimes
Description:
**Describe the bug**

Sometimes, When executing join query using http interface whill cause Segmentation fault and clickhouse shutdown.

**How to reproduce**

This bug is not easy to reproduce, because I've tried the query caused shutdown by curl and it worked well. It will happen occasionally.

* Clickhouse versionï¼š`20.3.5.21`
* Interface to use, `Http 8123`
* Non-default settings: `<joined_subquery_requires_alias>0</joined_subquery_requires_alias>`
* Queries to run that lead to unexpected result:
```sql
SELECT count, count_1 
from
    (select id, count(*) AS count 
    from db.distributed_table 
    where id = 'xxx' and Date >= '2020-04-11' AND Date <= '2020-04-11' and flag='true'
    group by id ) 
    ANY RIGHT JOIN 
    (select id, count(*) AS count_1 
    from db.distributed_table 
    where id = 'xxx' and Date >= '2020-04-11' AND Date <= '2020-04-11' AND flag = 'false'
    group by id ) 
USING id 
FORMAT TabSeparated
```
**Error message and/or stacktrace**
```
2020.04.11 11:01:02.867978 [ 30524 ] {} <Fatal> BaseDaemon: ########################################
2020.04.11 11:01:02.868032 [ 30524 ] {} <Fatal> BaseDaemon: (version 20.3.5.21 (official build)) (from thread 34457) (query_id: ff9d16d5-ad82-4703-a67e-d85543f05e0e) Received signal Segmentation fault (11).
2020.04.11 11:01:02.868056 [ 30524 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Unknown si_code.
2020.04.11 11:01:02.868080 [ 30524 ] {} <Fatal> BaseDaemon: Stack trace: 0xd199214 0xd19a7dd 0xd1672f7 0x901b0b2 0xcd7f2ee 0xcd7f907 0xd150827 0x901b8b7 0xd150024 0x901b8b7 0x901b8b7 0x901b8b7 0xd2ffc97 0xd13deaa 0xd14039f 0xcac89f2 0xdb8eddc 0xce28112 0xce28462 0xd5390d3 0x8fde652 0x8fe1eb3 0xe356814 0xe3867bb 0xe386c3d 0x1059d237 0x1059903c 0x1059a9dd 0x7fb01d3e0df5
2020.04.11 11:01:02.893050 [ 30524 ] {} <Fatal> BaseDaemon: 3. DB::MergingAndConvertingBlockInputStream::~MergingAndConvertingBlockInputStream() @ 0xd199214 in ?
2020.04.11 11:01:02.893072 [ 30524 ] {} <Fatal> BaseDaemon: 4. DB::MergingAndConvertingBlockInputStream::~MergingAndConvertingBlockInputStream() @ 0xd19a7dd in ?
2020.04.11 11:01:02.927704 [ 30524 ] {} <Fatal> BaseDaemon: 5. DB::ParallelAggregatingBlockInputStream::~ParallelAggregatingBlockInputStream() @ 0xd1672f7 in ?
2020.04.11 11:01:02.945331 [ 30524 ] {} <Fatal> BaseDaemon: 6. std::__1::shared_ptr<DB::IBlockInputStream>::~shared_ptr() @ 0x901b0b2 in ?
2020.04.11 11:01:02.983121 [ 30524 ] {} <Fatal> BaseDaemon: 7. std::__1::__shared_ptr_emplace<DB::SourceFromInputStream, std::__1::allocator<DB::SourceFromInputStream> >::__on_zero_shared() @ 0xcd7f2ee in ?
2020.04.11 11:01:03.013461 [ 30524 ] {} <Fatal> BaseDaemon: 8. std::__1::__vector_base<std::__1::shared_ptr<DB::IProcessor>, std::__1::allocator<std::__1::shared_ptr<DB::IProcessor> > >::~__vector_base() @ 0xcd7f907 in ?
2020.04.11 11:01:03.035384 [ 30524 ] {} <Fatal> BaseDaemon: 9. DB::TreeExecutorBlockInputStream::~TreeExecutorBlockInputStream() @ 0xd150827 in ?
2020.04.11 11:01:03.035405 [ 30524 ] {} <Fatal> BaseDaemon: 10. DB::IBlockInputStream::~IBlockInputStream() @ 0x901b8b7 in ?
2020.04.11 11:01:03.035415 [ 30524 ] {} <Fatal> BaseDaemon: 11. DB::UnionBlockInputStream::~UnionBlockInputStream() @ 0xd150024 in ?
2020.04.11 11:01:03.035424 [ 30524 ] {} <Fatal> BaseDaemon: 12. DB::IBlockInputStream::~IBlockInputStream() @ 0x901b8b7 in ?
2020.04.11 11:01:03.035431 [ 30524 ] {} <Fatal> BaseDaemon: 13. DB::IBlockInputStream::~IBlockInputStream() @ 0x901b8b7 in ?
2020.04.11 11:01:03.035438 [ 30524 ] {} <Fatal> BaseDaemon: 14. DB::IBlockInputStream::~IBlockInputStream() @ 0x901b8b7 in ?
2020.04.11 11:01:03.059105 [ 30524 ] {} <Fatal> BaseDaemon: 15. std::__1::__shared_ptr_emplace<DB::LazyBlockInputStream, std::__1::allocator<DB::LazyBlockInputStream> >::__on_zero_shared() @ 0xd2ffc97 in ?
2020.04.11 11:01:03.059177 [ 30524 ] {} <Fatal> BaseDaemon: 16. std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, DB::SubqueryForSet>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, DB::SubqueryForSet>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, DB::SubqueryForSet>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, DB::SubqueryForSet> > >::~__hash_table() @ 0xd13deaa in ?
2020.04.11 11:01:03.059206 [ 30524 ] {} <Fatal> BaseDaemon: 17. std::__1::__shared_ptr_emplace<DB::CreatingSetsTransform, std::__1::allocator<DB::CreatingSetsTransform> >::__on_zero_shared() @ 0xd14039f in ?
2020.04.11 11:01:03.059235 [ 30524 ] {} <Fatal> BaseDaemon: 18. std::__1::shared_ptr<DB::IProcessor>::~shared_ptr() @ 0xcac89f2 in ?
2020.04.11 11:01:03.059253 [ 30524 ] {} <Fatal> BaseDaemon: 19. DB::QueryPipeline::operator=(DB::QueryPipeline&&) @ 0xdb8eddc in ?
2020.04.11 11:01:03.059263 [ 30524 ] {} <Fatal> BaseDaemon: 20. DB::BlockIO::reset() @ 0xce28112 in ?
2020.04.11 11:01:03.059276 [ 30524 ] {} <Fatal> BaseDaemon: 21. DB::BlockIO::~BlockIO() @ 0xce28462 in ?
2020.04.11 11:01:03.059297 [ 30524 ] {} <Fatal> BaseDaemon: 22. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>) @ 0xd5390d3 in ?
2020.04.11 11:01:03.059431 [ 30524 ] {} <Fatal> BaseDaemon: 23. DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&) @ 0x8fde652 in ?
2020.04.11 11:01:03.059444 [ 30524 ] {} <Fatal> BaseDaemon: 24. DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&) @ 0x8fe1eb3 in ?
2020.04.11 11:01:03.082317 [ 30524 ] {} <Fatal> BaseDaemon: 25. Poco::Net::HTTPServerConnection::run() @ 0xe356814 in ?
2020.04.11 11:01:03.082343 [ 30524 ] {} <Fatal> BaseDaemon: 26. Poco::Net::TCPServerConnection::start() @ 0xe3867bb in ?
2020.04.11 11:01:03.082351 [ 30524 ] {} <Fatal> BaseDaemon: 27. Poco::Net::TCPServerDispatcher::run() @ 0xe386c3d in ?
2020.04.11 11:01:03.082367 [ 30524 ] {} <Fatal> BaseDaemon: 28. Poco::PooledThread::run() @ 0x1059d237 in ?
2020.04.11 11:01:03.082376 [ 30524 ] {} <Fatal> BaseDaemon: 29. Poco::ThreadImpl::runnableEntry(void*) @ 0x1059903c in ?
2020.04.11 11:01:03.082383 [ 30524 ] {} <Fatal> BaseDaemon: 30. ? @ 0x1059a9dd in ?
2020.04.11 11:01:03.082412 [ 30524 ] {} <Fatal> BaseDaemon: 31. start_thread @ 0x7df5 in /usr/lib64/libpthread-2.17.so
```
