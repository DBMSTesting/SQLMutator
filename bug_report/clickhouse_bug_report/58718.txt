ID: 58718
Title: Deduplication without `insert_deduplication_token` doesn't work after `ALTER`ing the table
Description:
> Please make sure that the version you're using is still supported (you can find the list [here]

23.3.18.15

> You have to provide the following information whenever possible.

Deduplication without `insert_deduplication_token` doesn't work after `ALTER`ing the table. Reproduced on `SummingMergeTree` and `ReplicatedSummingMergeTree`.

> A clear and concise description of what works not as it is supposed to.

Same insert's doesn't deduplicate.

> A link to reproducer in [https://fiddle.clickhouse.com/](https://fiddle.clickhouse.com/).

Without `insert_deduplication_token`: https://fiddle.clickhouse.com/bebb6252-0cf1-4ffa-a1d9-fc336f47671d
With `insert_deduplication_token`: https://fiddle.clickhouse.com/d314ac96-8d6b-46b5-926f-50f163da25a2

**Does it reproduce on recent release?**
Yes

**How to reproduce**
```
CREATE TABLE DebugDuplicates
(
    `a` UInt64,
    `g` UInt64,
    `b` UInt64
)
ENGINE = SummingMergeTree
PRIMARY KEY a
ORDER BY a
SETTINGS index_granularity = 8192, non_replicated_deduplication_window = 10;

INSERT INTO DebugDuplicates (a,g) VALUES (100, 200);
ALTER TABLE DebugDuplicates ADD COLUMN `c` UInt64;
INSERT INTO DebugDuplicates (a,g) VALUES (100, 200);

SELECT * FROM DebugDuplicates;

OPTIMIZE TABLE DebugDuplicates FINAL DEDUPLICATE;
SELECT '=======';

SELECT * FROM DebugDuplicates;
```

Result:
```
100	200	0	0
100	200	0	0
=======
100	400	0	0

```

> A clear and concise description of what you expected to happen.

```
100	200	0	0
=======
100	200	0	0
```