ID: 62566
Title: Block structure mismatch. Ambiguous column name error with new analyzer
Description:
This query works with the old analyzer 
```
SELECT
    *,
    'redefined' AS my_field
FROM VALUES('my_field String', 'orig')
SETTINGS allow_experimental_analyzer = 0

   ┌─my_field──┬─my_field──┐
1. │ redefined │ redefined │
   └───────────┴───────────┘
```

But it doesn't work with the new one
```

SELECT
    *,
    'redefined' AS my_field
FROM VALUES('my_field String', 'orig')
SETTINGS allow_experimental_analyzer = 1

Received exception from server (version 24.4.1):
Code: 352. DB::Exception: Received from localhost:9000. DB::Exception: Block structure mismatch in (columns with identical name must have identical structure) stream: different columns:
my_field String String(size = 0)
my_field String Const(size = 0, String(size = 1)). (AMBIGUOUS_COLUMN_NAME)
```
Calling the column directly works, but it overrides the value with an alias.
```

SELECT
    my_field,
    'redefined' AS my_field
FROM VALUES('my_field String', 'orig')
SETTINGS allow_experimental_analyzer = 1

   ┌─my_field──┬─my_field──┐
1. │ redefined │ redefined │
   └───────────┴───────────┘
```
Ideally, it should behave as:
```
SELECT
    t.my_field,
    'redefined' AS my_field
FROM VALUES('my_field String', 'orig') AS t

And should return (orig, redefined)
```

24.4.1.876