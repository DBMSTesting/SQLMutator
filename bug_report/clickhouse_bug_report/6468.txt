ID: 6468
Title: toInt32(nan) calls return surprising result
Description:
Hi! Recently I've faced with a funny bug in our application that caused huge negative values in the result of computation where no negative values expected.
I've tracked it down to Clickhouse:
```
ClickHouse client version 19.11.2.7 (official build).
Connecting to clickhouse-server:9000 as user default.
Connected to ClickHouse server version 19.11.2 revision 54423.

20fb70f687b5 :) select toInt64(nan), toInt32(nan), toInt16(nan), toInt8(nan);

SELECT
    toInt64(nan),
    toInt32(nan),
    toInt16(nan),
    toInt8(nan)

┌─────────toInt64(nan)─┬─toInt32(nan)─┬─toInt16(nan)─┬─toInt8(nan)─┐
│ -9223372036854775808 │  -2147483648 │            0 │           0 │
└──────────────────────┴──────────────┴──────────────┴─────────────┘

1 rows in set. Elapsed: 0.002 sec.
```

Here `toInt16()` and `toInt8()` functions return 0 for NaN argument. However `toInt64()` and `toInt32()` return minimum available number of the corresponding type. I think this is not what developers usually expect.

**Expected behavior**
`toInt64(nan)` and `toInt32(nan)` should return 0, as `toInt16(nan)` and `toInt8(nan)` do.