ID: 71031
Title: Logical Error: Not-ready Set is passed as the second argument for function 'in' 
Description:
**Describe the bug**
This may be related to https://github.com/ClickHouse/ClickHouse/issues/69866 . Setting `exact_rows_before_limit = 1` causes this logical error.

**How to reproduce**
Run Fiddle:
https://fiddle.clickhouse.com/e2baf9b4-4e3c-4b8e-a7a6-20bca300467d

Stack trace:
```
<Fatal> : Logical error: 'Not-ready Set is passed as the second argument for function 'in''.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. /build/contrib/llvm-project/libcxx/include/exception:141: Poco::Exception::Exception(String const&, int) @ 0x00000000168f1332
1. /build/src/Common/Exception.cpp:109: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000c445999
2. /build/src/Common/Exception.h:110: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000711d20c
3. /build/src/Common/Exception.h:128: DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x000000000711ce4b
4. /build/src/Functions/in.cpp:128: DB::(anonymous namespace)::FunctionIn<false, false, true, false>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000091f0224
5. /build/src/Functions/IFunctionAdaptors.h:22: DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x0000000007b8c49a
6. /build/src/Functions/IFunction.cpp:248: DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000101e8b05
7. /build/src/Functions/IFunction.cpp:304: DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000101e957a
8. /build/src/Functions/IFunction.cpp:381: DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000101ea4a5
9. /build/src/Interpreters/ExpressionActions.cpp:636: DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool, bool) const @ 0x00000000113443dd
10. /build/src/Processors/Transforms/FilterTransform.cpp:111: DB::FilterTransform::doTransform(DB::Chunk&) @ 0x000000001338ea2c
11. /build/src/Processors/Transforms/FilterTransform.cpp:95: DB::FilterTransform::transform(DB::Chunk&) @ 0x000000001338e954
12. /build/src/Processors/ISimpleTransform.h:32: DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0x000000000c6f70f3
13. /build/src/Processors/ISimpleTransform.cpp:89: DB::ISimpleTransform::work() @ 0x000000001312bf49
14. /build/src/Processors/Executors/ExecutionThreadContext.cpp:47: DB::ExecutionThreadContext::executeTask() @ 0x0000000013147849
15. /build/src/Processors/Executors/PipelineExecutor.cpp:289: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x000000001313cabd
16. /build/src/Processors/Executors/PipelineExecutor.cpp:255: DB::PipelineExecutor::executeSingleThread(unsigned long) @ 0x000000001313cd5d
17. /build/src/Processors/Executors/PipelineExecutor.cpp:403: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x000000001313d6bf
18. /build/contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x000000000c4fb4ff
19. /build/contrib/llvm-project/libcxx/include/__functional/invoke.h:359: ? @ 0x000000000c500682
20. /build/contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x000000000c4f928e
21. /build/contrib/llvm-project/libcxx/include/__functional/invoke.h:359: ? @ 0x000000000c4fe6f2
22. ? @ 0x000077ee53ca1e2e
23. ? @ 0x000077ee53d33a4c

[ip-172-31-18-156] 2024.10.24 15:47:31.814748 [ 2085709 ] <Fatal> BaseDaemon: ########################################
[ip-172-31-18-156] 2024.10.24 15:47:31.814781 [ 2085709 ] <Fatal> BaseDaemon: (version 24.10.1.2446 (official build), build id: 09C29094DC6CA9B97B9147D8552AC754F59502A5, git hash: 1dedcd1be7a6c129fd5174d1b76c39e59b72ae40) (from thread 2085651) (query_id: 5f9467f3-40fb-4917-971b-31956276b577) (query: SELECT 1 FROM (SELECT 1 AS c0 WHERE exists((SELECT 1)) LIMIT 1) AS v0 GROUP BY v0.c0 HAVING (v0.c0 = 1) AND (v0.c0 = 2)) Received signal Aborted (6)
[ip-172-31-18-156] 2024.10.24 15:47:31.814808 [ 2085709 ] <Fatal> BaseDaemon: 
[ip-172-31-18-156] 2024.10.24 15:47:31.814825 [ 2085709 ] <Fatal> BaseDaemon: Stack trace: 0x000000000c473ea8 0x000000000c6c02a5 0x000077ee53c45250 0x000077ee53ca3f1d 0x000077ee53c4519e 0x000077ee53c28902 0x000000000c445093 0x000000000c445b54 0x000000000711d20c 0x000000000711ce4b 0x00000000091f0224 0x0000000007b8c49a 0x00000000101e8b05 0x00000000101e957a 0x00000000101ea4a5 0x00000000113443dd 0x000000001338ea2c 0x000000001338e954 0x000000000c6f70f3 0x000000001312bf49 0x0000000013147849 0x000000001313cabd 0x000000001313cd5d 0x000000001313d6bf 0x000000000c4fb4ff 0x000000000c500682 0x000000000c4f928e 0x000000000c4fe6f2 0x000077ee53ca1e2e 0x000077ee53d33a4c
[ip-172-31-18-156] 2024.10.24 15:47:31.826383 [ 2085709 ] <Fatal> BaseDaemon: 0.0. inlined from /build/src/Common/StackTrace.cpp:380: StackTrace::tryCapture()
[ip-172-31-18-156] 2024.10.24 15:47:31.826425 [ 2085709 ] <Fatal> BaseDaemon: 0. /build/src/Common/StackTrace.cpp:349: StackTrace::StackTrace(ucontext_t const&) @ 0x000000000c473ea8
[ip-172-31-18-156] 2024.10.24 15:47:31.838662 [ 2085709 ] <Fatal> BaseDaemon: 1. /build/src/Common/SignalHandlers.cpp:85: signalHandler(int, siginfo_t*, void*) @ 0x000000000c6c02a5
[ip-172-31-18-156] 2024.10.24 15:47:31.838704 [ 2085709 ] <Fatal> BaseDaemon: 2. ? @ 0x000077ee53c45250
[ip-172-31-18-156] 2024.10.24 15:47:31.838721 [ 2085709 ] <Fatal> BaseDaemon: 3. ? @ 0x000077ee53ca3f1d
[ip-172-31-18-156] 2024.10.24 15:47:31.838749 [ 2085709 ] <Fatal> BaseDaemon: 4. ? @ 0x000077ee53c4519e
[ip-172-31-18-156] 2024.10.24 15:47:31.838772 [ 2085709 ] <Fatal> BaseDaemon: 5. ? @ 0x000077ee53c28902
[ip-172-31-18-156] 2024.10.24 15:47:31.859962 [ 2085709 ] <Fatal> BaseDaemon: 6. /build/src/Common/Exception.cpp:48: DB::abortOnFailedAssertion(String const&, void* const*, unsigned long, unsigned long) @ 0x000000000c445093
[ip-172-31-18-156] 2024.10.24 15:47:31.879404 [ 2085709 ] <Fatal> BaseDaemon: 7.0. inlined from /build/src/Common/Exception.cpp:71: DB::handle_error_code(String const&, int, bool, std::vector<void*, std::allocator<void*>> const&)
[ip-172-31-18-156] 2024.10.24 15:47:31.879455 [ 2085709 ] <Fatal> BaseDaemon: 7. /build/src/Common/Exception.cpp:115: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000c445b54
[ip-172-31-18-156] 2024.10.24 15:47:31.889434 [ 2085709 ] <Fatal> BaseDaemon: 8.0. inlined from /build/src/Common/Exception.h:110: Exception
[ip-172-31-18-156] 2024.10.24 15:47:31.889474 [ 2085709 ] <Fatal> BaseDaemon: 8. /build/src/Common/Exception.h:63: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000711d20c
[ip-172-31-18-156] 2024.10.24 15:47:31.898895 [ 2085709 ] <Fatal> BaseDaemon: 9. /build/src/Common/Exception.h:128: DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x000000000711ce4b
[ip-172-31-18-156] 2024.10.24 15:47:31.911342 [ 2085709 ] <Fatal> BaseDaemon: 10. /build/src/Functions/in.cpp:128: DB::(anonymous namespace)::FunctionIn<false, false, true, false>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000091f0224
[ip-172-31-18-156] 2024.10.24 15:47:32.053386 [ 2085709 ] <Fatal> BaseDaemon: 11. /build/src/Functions/IFunctionAdaptors.h:22: DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x0000000007b8c49a
[ip-172-31-18-156] 2024.10.24 15:47:32.064741 [ 2085709 ] <Fatal> BaseDaemon: 12. /build/src/Functions/IFunction.cpp:248: DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000101e8b05
[ip-172-31-18-156] 2024.10.24 15:47:32.076708 [ 2085709 ] <Fatal> BaseDaemon: 13. /build/src/Functions/IFunction.cpp:304: DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000101e957a
[ip-172-31-18-156] 2024.10.24 15:47:32.089059 [ 2085709 ] <Fatal> BaseDaemon: 14. /build/src/Functions/IFunction.cpp:381: DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x00000000101ea4a5
[ip-172-31-18-156] 2024.10.24 15:47:32.126178 [ 2085709 ] <Fatal> BaseDaemon: 15.0. inlined from /build/src/Interpreters/ExpressionActions.cpp:636: DB::executeAction(DB::ExpressionActions::Action const&, DB::(anonymous namespace)::ExecutionContext&, bool, bool)
[ip-172-31-18-156] 2024.10.24 15:47:32.126233 [ 2085709 ] <Fatal> BaseDaemon: 15. /build/src/Interpreters/ExpressionActions.cpp:770: DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool, bool) const @ 0x00000000113443dd
[ip-172-31-18-156] 2024.10.24 15:47:32.137046 [ 2085709 ] <Fatal> BaseDaemon: 16. /build/src/Processors/Transforms/FilterTransform.cpp:111: DB::FilterTransform::doTransform(DB::Chunk&) @ 0x000000001338ea2c
[ip-172-31-18-156] 2024.10.24 15:47:32.147176 [ 2085709 ] <Fatal> BaseDaemon: 17. /build/src/Processors/Transforms/FilterTransform.cpp:95: DB::FilterTransform::transform(DB::Chunk&) @ 0x000000001338e954
[ip-172-31-18-156] 2024.10.24 15:47:32.160212 [ 2085709 ] <Fatal> BaseDaemon: 18. /build/src/Processors/ISimpleTransform.h:32: DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0x000000000c6f70f3
[ip-172-31-18-156] 2024.10.24 15:47:32.169702 [ 2085709 ] <Fatal> BaseDaemon: 19. /build/src/Processors/ISimpleTransform.cpp:89: DB::ISimpleTransform::work() @ 0x000000001312bf49
[ip-172-31-18-156] 2024.10.24 15:47:32.174539 [ 2085709 ] <Fatal> BaseDaemon: 20.0. inlined from /build/src/Processors/Executors/ExecutionThreadContext.cpp:47: DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*)
[ip-172-31-18-156] 2024.10.24 15:47:32.174604 [ 2085709 ] <Fatal> BaseDaemon: 20. /build/src/Processors/Executors/ExecutionThreadContext.cpp:96: DB::ExecutionThreadContext::executeTask() @ 0x0000000013147849
[ip-172-31-18-156] 2024.10.24 15:47:32.190013 [ 2085709 ] <Fatal> BaseDaemon: 21. /build/src/Processors/Executors/PipelineExecutor.cpp:289: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x000000001313cabd
[ip-172-31-18-156] 2024.10.24 15:47:32.204555 [ 2085709 ] <Fatal> BaseDaemon: 22. /build/src/Processors/Executors/PipelineExecutor.cpp:255: DB::PipelineExecutor::executeSingleThread(unsigned long) @ 0x000000001313cd5d
[ip-172-31-18-156] 2024.10.24 15:47:32.221922 [ 2085709 ] <Fatal> BaseDaemon: 23.0. inlined from /build/src/Processors/Executors/PipelineExecutor.cpp:403: operator()
[ip-172-31-18-156] 2024.10.24 15:47:32.221970 [ 2085709 ] <Fatal> BaseDaemon: 23.1. inlined from /build/contrib/llvm-project/libcxx/include/__functional/invoke.h:394: ?
[ip-172-31-18-156] 2024.10.24 15:47:32.222003 [ 2085709 ] <Fatal> BaseDaemon: 23.2. inlined from /build/contrib/llvm-project/libcxx/include/__functional/invoke.h:479: ?
[ip-172-31-18-156] 2024.10.24 15:47:32.222027 [ 2085709 ] <Fatal> BaseDaemon: 23.3. inlined from /build/contrib/llvm-project/libcxx/include/__functional/function.h:235: ?
[ip-172-31-18-156] 2024.10.24 15:47:32.222054 [ 2085709 ] <Fatal> BaseDaemon: 23. /build/contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x000000001313d6bf
[ip-172-31-18-156] 2024.10.24 15:47:32.232545 [ 2085709 ] <Fatal> BaseDaemon: 24.0. inlined from /build/contrib/llvm-project/libcxx/include/__functional/function.h:848: ?
[ip-172-31-18-156] 2024.10.24 15:47:32.232621 [ 2085709 ] <Fatal> BaseDaemon: 24.1. inlined from /build/contrib/llvm-project/libcxx/include/__functional/function.h:1197: ?
[ip-172-31-18-156] 2024.10.24 15:47:32.232650 [ 2085709 ] <Fatal> BaseDaemon: 24. /build/src/Common/ThreadPool.cpp:775: ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker() @ 0x000000000c4fb4ff
[ip-172-31-18-156] 2024.10.24 15:47:32.243825 [ 2085709 ] <Fatal> BaseDaemon: 25.0. inlined from /build/contrib/llvm-project/libcxx/include/__functional/invoke.h:359: ?
[ip-172-31-18-156] 2024.10.24 15:47:32.243879 [ 2085709 ] <Fatal> BaseDaemon: 25.1. inlined from /build/contrib/llvm-project/libcxx/include/tuple:1789: decltype(auto) std::__apply_tuple_impl[abi:v15007]<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&)(), std::tuple<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>&, 0ul>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&)(), std::tuple<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>&, std::__tuple_indices<0ul>)
[ip-172-31-18-156] 2024.10.24 15:47:32.243935 [ 2085709 ] <Fatal> BaseDaemon: 25.2. inlined from /build/contrib/llvm-project/libcxx/include/tuple:1798: decltype(auto) std::apply[abi:v15007]<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&)(), std::tuple<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>&>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&)(), std::tuple<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>&)
[ip-172-31-18-156] 2024.10.24 15:47:32.243968 [ 2085709 ] <Fatal> BaseDaemon: 25. /build/src/Common/ThreadPool.h:311: ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()() @ 0x000000000c500682
[ip-172-31-18-156] 2024.10.24 15:47:32.253795 [ 2085709 ] <Fatal> BaseDaemon: 26.0. inlined from /build/contrib/llvm-project/libcxx/include/__functional/function.h:848: ?
[ip-172-31-18-156] 2024.10.24 15:47:32.253834 [ 2085709 ] <Fatal> BaseDaemon: 26.1. inlined from /build/contrib/llvm-project/libcxx/include/__functional/function.h:1197: ?
[ip-172-31-18-156] 2024.10.24 15:47:32.253873 [ 2085709 ] <Fatal> BaseDaemon: 26. /build/src/Common/ThreadPool.cpp:785: ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000c4f928e
[ip-172-31-18-156] 2024.10.24 15:47:32.272043 [ 2085709 ] <Fatal> BaseDaemon: 27.0. inlined from /build/contrib/llvm-project/libcxx/include/__functional/invoke.h:359: ?
[ip-172-31-18-156] 2024.10.24 15:47:32.272093 [ 2085709 ] <Fatal> BaseDaemon: 27.1. inlined from /build/contrib/llvm-project/libcxx/include/thread:284: void std::__thread_execute[abi:v15007]<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*, 2ul>(std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>&, std::__tuple_indices<2ul>)
[ip-172-31-18-156] 2024.10.24 15:47:32.272125 [ 2085709 ] <Fatal> BaseDaemon: 27. /build/contrib/llvm-project/libcxx/include/thread:295: void* std::__thread_proxy[abi:v15007]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000c4fe6f2
[ip-172-31-18-156] 2024.10.24 15:47:32.272163 [ 2085709 ] <Fatal> BaseDaemon: 28. ? @ 0x000077ee53ca1e2e
[ip-172-31-18-156] 2024.10.24 15:47:32.272189 [ 2085709 ] <Fatal> BaseDaemon: 29. ? @ 0x000077ee53d33a4c
[ip-172-31-18-156] 2024.10.24 15:47:32.411970 [ 2085709 ] <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: D547920E9124EC2DF703EF9C6240B8C8)
[ip-172-31-18-156] 2024.10.24 15:47:32.860326 [ 2085709 ] <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues
[ip-172-31-18-156] 2024.10.24 15:47:32.860490 [ 2085709 ] <Fatal> BaseDaemon: Changed settings: allow_changing_replica_until_first_data_packet = true, allow_reorder_prewhere_conditions = true, allow_suspicious_low_cardinality_types = true, allow_suspicious_fixed_string_types = true, allow_suspicious_indices = true, allow_suspicious_ttl_expressions = true, allow_suspicious_variant_types = true, allow_suspicious_primary_key = true, allow_nonconst_timezone_arguments = true, allow_nondeterministic_optimize_skip_unused_shards = true, allow_distributed_ddl = true, allow_suspicious_codecs = true, enable_deflate_qpl_codec = true, enable_zstd_qat_codec = true, allow_push_predicate_when_subquery_contains_with = true, allow_custom_error_code_in_throwif = true, allow_ddl = true, allow_hyperscan = true, allow_simdjson = true, allow_introspection_functions = true, allow_execute_multiif_columnar = true, allow_drop_detached = true, allow_materialized_view_with_bad_select = true, allow_settings_after_format_in_insert = true, allow_nondeterministic_mutations = true, allow_non_metadata_alters = true, allow_experimental_kafka_offsets_storage_in_keeper = true, allow_aggregate_partitions_independently = true, allow_prefetched_read_pool_for_remote_filesystem = true, allow_prefetched_read_pool_for_local_filesystem = true, allow_unrestricted_reads_from_keeper = true, allow_deprecated_database_ordinary = true, allow_deprecated_syntax_for_merge_tree = true, allow_asynchronous_read_from_io_pool_for_merge_tree = true, allow_get_client_http_header = true, allow_create_index_without_type = true, allow_named_collection_override_by_default = true, allow_deprecated_error_prone_window_functions = true, allow_deprecated_snowflake_conversion_functions = true, allow_experimental_materialized_postgresql_table = true, allow_experimental_funnel_functions = true, allow_experimental_nlp_functions = true, allow_experimental_hash_functions = true, allow_experimental_object_type = true, allow_experimental_time_series_table = true, allow_experimental_vector_similarity_index = true, allow_experimental_variant_type = true, allow_experimental_dynamic_type = true, allow_experimental_json_type = true, allow_experimental_codecs = true, allow_experimental_shared_set_join = true, allow_experimental_join_right_table_sorting = true, allow_statistics_optimize = true, allow_experimental_statistics = true, allow_experimental_parallel_reading_from_replicas = 1, allow_archive_path_syntax = true, allow_experimental_inverted_index = true, allow_experimental_full_text_index = true, allow_experimental_join_condition = true, allow_experimental_analyzer = true, allow_experimental_live_view = true, allow_experimental_window_view = true, allow_experimental_database_materialized_mysql = true, allow_experimental_database_materialized_postgresql = true, allow_experimental_query_deduplication = true, type_json_skip_duplicated_paths = true, exact_rows_before_limit = true
```