ID: 7281
Title: Http Bulk Post data using JSONEachRow
Description:
We have  bulk inserts using format JSONEachrow By 50 k items. We have about 20 million records a day. About 5 or 6 times a day we have strange excpetions from clickhouse

```

Error: Code: 117, e.displayText() = DB::Exception: Unknown field found while parsing JSONEachRow format: gameprogrentgeo__countrycode (version 19.14.6.12)


```
gameprogrentgeo__countrycode is not any field. it looks like mixed names of 2 fields - gameprogress and geo__countrycode.

```
Exception: Xm.ClickHouse.Common.ClickHouseException
Error: Code: 27, e.displayText() = DB::Exception: Cannot parse input: expected : before: 2019-10-11T03:56:51","ad__network":"networkname","ad__networkaccount":"","ad__unit":"eu_desktop_headerbottom","currentgeo__: (at row 5367)


 (version 19.14.6.12)

```
currentgeo__: - should be currentgeo__countrycode


i've checked original data - didn't find any broken lines or such string mixes. But my check was from separated stream of data. Stream is closed before I'm getting exception. 

detailed log of another mixed json property

```

2019.10.11 11:12:04.543052 [ 113 ] {2ac202cf-8376-4285-a79f-d6400f05dc64} <Error> executeQuery: Code: 117, e.displayText() = DB::Exception: Unknown field found while parsing JSONEachRow format: devitreference__tref6 (version 19.14.6.12) (from xxxx:61961) (in query: INSERT INTO {table_name}  FORMAT JSONEachRow ), Stack trace:

0. 0x3353de0 StackTrace::StackTrace() /usr/bin/clickhouse
1. 0x335e0ff DB::Exception::Exception(std::string const&, int) /usr/bin/clickhouse
2. 0x62e7aa4 DB::JSONEachRowRowInputFormat::skipUnknownField(StringRef const&) /usr/bin/clickhouse
3. 0x62e8fda DB::JSONEachRowRowInputFormat::readJSONObject(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&) /usr/bin/clickhouse
4. 0x62e93b9 DB::JSONEachRowRowInputFormat::readRow(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, DB::RowReadExtension&) /usr/bin/clickhouse
5. 0x66b5030 DB::IRowInputFormat::generate() /usr/bin/clickhouse
6. 0x62aa11f DB::ISource::work() /usr/bin/clickhouse
7. 0x628bf55 DB::InputStreamFromInputFormat::readImpl() /usr/bin/clickhouse
8. 0x5d94045 DB::IBlockInputStream::read() /usr/bin/clickhouse
9. 0x5ffe698 DB::InputStreamFromASTInsertQuery::readImpl() /usr/bin/clickhouse
10. 0x5d94045 DB::IBlockInputStream::read() /usr/bin/clickhouse
11. 0x5dbb116 DB::copyData(DB::IBlockInputStream&, DB::IBlockOutputStream&, std::atomic<bool>*) /usr/bin/clickhouse
12. 0x5ffd6e3 DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::function<void (std::string const&)>, std::function<void (std::string const&)>) /usr/bin/clickhouse
13. 0x33cd621 DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&) /usr/bin/clickhouse
14. 0x33d06e1 DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&) /usr/bin/clickhouse
15. 0x6a91da9 Poco::Net::HTTPServerConnection::run() /usr/bin/clickhouse
16. 0x6a8d60f Poco::Net::TCPServerConnection::start() /usr/bin/clickhouse
17. 0x6a8dcf5 Poco::Net::TCPServerDispatcher::run() /usr/bin/clickhouse
18. 0x6f90421 Poco::PooledThread::run() /usr/bin/clickhouse
19. 0x6f8c1e8 Poco::ThreadImpl::runnableEntry(void*) /usr/bin/clickhouse
20. 0x766d06f ? /usr/bin/clickhouse
21. 0x7efdc59e5e65 start_thread /usr/lib64/libpthread-2.17.so
22. 0x7efdc530288d clone /usr/lib64/libc-2.17.so


2019.10.11 11:12:04.543643 [ 113 ] {2ac202cf-8376-4285-a79f-d6400f05dc64} <Error> HTTPHandler: Code: 117, e.displayText() = DB::Exception: Unknown field found while parsing JSONEachRow format: devitreference__tref6, Stack trace:

0. 0x3353de0 StackTrace::StackTrace() /usr/bin/clickhouse
1. 0x335e0ff DB::Exception::Exception(std::string const&, int) /usr/bin/clickhouse
2. 0x62e7aa4 DB::JSONEachRowRowInputFormat::skipUnknownField(StringRef const&) /usr/bin/clickhouse
3. 0x62e8fda DB::JSONEachRowRowInputFormat::readJSONObject(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&) /usr/bin/clickhouse
4. 0x62e93b9 DB::JSONEachRowRowInputFormat::readRow(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, DB::RowReadExtension&) /usr/bin/clickhouse
5. 0x66b5030 DB::IRowInputFormat::generate() /usr/bin/clickhouse
6. 0x62aa11f DB::ISource::work() /usr/bin/clickhouse
7. 0x628bf55 DB::InputStreamFromInputFormat::readImpl() /usr/bin/clickhouse
8. 0x5d94045 DB::IBlockInputStream::read() /usr/bin/clickhouse
9. 0x5ffe698 DB::InputStreamFromASTInsertQuery::readImpl() /usr/bin/clickhouse
10. 0x5d94045 DB::IBlockInputStream::read() /usr/bin/clickhouse
11. 0x5dbb116 DB::copyData(DB::IBlockInputStream&, DB::IBlockOutputStream&, std::atomic<bool>*) /usr/bin/clickhouse
12. 0x5ffd6e3 DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::function<void (std::string const&)>, std::function<void (std::string const&)>) /usr/bin/clickhouse
13. 0x33cd621 DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&) /usr/bin/clickhouse
14. 0x33d06e1 DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&) /usr/bin/clickhouse
15. 0x6a91da9 Poco::Net::HTTPServerConnection::run() /usr/bin/clickhouse
16. 0x6a8d60f Poco::Net::TCPServerConnection::start() /usr/bin/clickhouse
17. 0x6a8dcf5 Poco::Net::TCPServerDispatcher::run() /usr/bin/clickhouse
18. 0x6f90421 Poco::PooledThread::run() /usr/bin/clickhouse
19. 0x6f8c1e8 Poco::ThreadImpl::runnableEntry(void*) /usr/bin/clickhouse
20. 0x766d06f ? /usr/bin/clickhouse
21. 0x7efdc59e5e65 start_thread /usr/lib64/libpthread-2.17.so
22. 0x7efdc530288d clone /usr/lib64/libc-2.17.so

```
devitreference__tref6 - it`s also mixed property

We have different tables and json objects. It happens only where we have big bulk (about 50k rows)




