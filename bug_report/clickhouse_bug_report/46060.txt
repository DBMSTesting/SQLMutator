ID: 46060
Title: Can't get Nullable value for DateTime64 column from PostgreSQL sources in COMPLEX_KEY_RANGE_HASHED Dictionary
Description:
I'am has a  following dictionary:

```sql
CREATE DICTIONARY test.tarif (
      id UInt64,
      offer_id UInt64,
      date_create Datetime64(6,'UTC'),
      date_start Datetime64(6,'UTC'),
      date_end Nullable(Datetime64(6,'UTC')),
      postback_status UInt64,
      amount Decimal(12,2),
      amount_full Nullable(Decimal(12,2)),
      goal_id Nullable(UInt64),
      is_news_hide Bool,
      aff_id Nullable(UInt64)
)
PRIMARY KEY offer_id,postback_status,aff_id,goal_id
SOURCE(PostgreSQL(
                host ''
                port 5432
                db ''
                user ''
                password ''
                table 'tarif'
))
LAYOUT(COMPLEX_KEY_RANGE_HASHED(range_lookup_strategy 'max'))
RANGE(MIN date_start MAX date_end)
LIFETIME(MIN 1 MAX 1000);
```



When I request a target rows from dictionary some date_end values does not have expected NULL value , enstead its values has a  1970-01-01 03:00:00.000000 value, why ?    ( I think its becose read datetime from postgres as 0 not null:
```sql
SELECT toDateTime64(6,0);   --  -> 1970-01-01 07:00:03
SELECT toDateTime64(6,null);   --   ->null
```
 )
Because date_end  values does not have NULL values in clickhouse dictionary   my range_lookup_strategy  =max does not working properly .


And a second question:
If i request ranges value with microsecond accurancy it also does not working:
```sql
select dictGet('test.tarif', 'amount', tuple(1,4,NULL,NULL),'2019-08-08 23:59:59'::Datetime);    
```
->this give me the answer = 190 , but this:
```sql
select dictGet('test.tarif', 'amount', tuple(1,4,NULL,NULL),toUnixTimestamp64Micro(toDateTime64('2019-08-08 23:59:59.636720',6)));   
```
-> give me Null result
What are the possible reasons for this behavior ( I think it's becose dictGet function take date time argument as unix time stamp 
```sql
SELECT toUnixTimestamp(toDateTime('2019-08-08 23:59:59')),  --   -> 1565283599
       toUnixTimestamp64Micro(toDateTime64('2019-08-08 23:59:59.636720',6)), -- ->1565283599636720
       fromUnixTimestamp(1565283599636720)   -- -> 2106-02-07 06:28:15
```
)

Is there any plan to support DateTime64 in general?