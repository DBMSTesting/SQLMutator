ID: 69434
Title: Alter modify column hangs forever with Dynamic type
Description:
**Describe the bug**
A modify column to Dynamic after a failed UPDATE hangs forever.

**How to reproduce**
Run:
```sql
SET allow_experimental_dynamic_type = 1;
CREATE TABLE t0 (c0 Int) ENGINE = MergeTree() ORDER BY tuple();
INSERT INTO t0 (c0) VALUES (1);
ALTER TABLE t0 UPDATE c0 = EXISTS (SELECT 1 FROM t1 CROSS JOIN t0) WHERE 1; --t1 doesn't exist
ALTER TABLE t0 MODIFY COLUMN c0 Dynamic; --hangs
```

Error for ALTER UPDATE:
```
<Error> virtual bool DB::MutatePlainMergeTreeTask::executeStep(): Code: 60. DB::Exception: Table s0.t1 does not exist. Maybe you meant s0.t0?: While processing _CAST(_CAST(1 IN ((SELECT 1 FROM (SELECT 1 FROM s0.t1 CROSS JOIN s0.t0) LIMIT 1) AS _subquery3), 'Int32'), 'Int32'). (UNKNOWN_TABLE), Stack trace (when copying this message, always include the lines below):

0. contrib/llvm-project/libcxx/include/exception:141: Poco::Exception::Exception(String const&, int) @ 0x000000003713eb11
1. src/Common/Exception.cpp:109: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000001e4e862d
2. src/Common/Exception.h:110: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000e662066
3. src/Common/Exception.h:128: DB::Exception::Exception<String, String, String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&, String&&, String&&) @ 0x000000000e81ba4c
4. src/Databases/IDatabase.cpp:39: DB::IDatabase::getTable(String const&, std::shared_ptr<DB::Context const>) const @ 0x000000002ab33f86
5. src/Interpreters/DatabaseCatalog.cpp:431: DB::DatabaseCatalog::getTableImpl(DB::StorageID const&, std::shared_ptr<DB::Context const>, std::optional<DB::Exception>*) const @ 0x000000002b2ffcf6
6. src/Interpreters/DatabaseCatalog.cpp:954: DB::DatabaseCatalog::getTable(DB::StorageID const&, std::shared_ptr<DB::Context const>) const @ 0x000000002b30b297
7. src/Interpreters/JoinedTables.cpp:237: DB::JoinedTables::getLeftTableStorage() @ 0x000000002c1ed977
8. src/Interpreters/InterpreterSelectQuery.cpp:458: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x000000002c0253e5
9. src/Interpreters/InterpreterSelectQuery.cpp:212: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000002c023e10
10. contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:714: DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x000000002c1a6180
11. src/Interpreters/InterpreterSelectWithUnionQuery.cpp:154: DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000002c1a2c9e
12. src/Interpreters/InterpreterSelectWithUnionQuery.cpp:43: DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x000000002c1a79fb
13. src/Interpreters/getTableExpressions.cpp:91: DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x000000002c7521cc
14. src/Interpreters/JoinedTables.cpp:245: DB::JoinedTables::resolveTables() @ 0x000000002c1edf3e
15. src/Interpreters/InterpreterSelectQuery.cpp:477: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x000000002c025ed4
16. src/Interpreters/InterpreterSelectQuery.cpp:212: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000002c023e10
17. contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:714: DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x000000002c1a6180
18. src/Interpreters/InterpreterSelectWithUnionQuery.cpp:154: DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000002c1a2c9e
19. contrib/llvm-project/libcxx/include/__memory/construct_at.h:35: DB::interpretSubquery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, std::vector<String, std::allocator<String>> const&, DB::SelectQueryOptions const&) @ 0x000000002c76000b
20. src/Interpreters/interpretSubquery.cpp:30: DB::interpretSubquery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, unsigned long, std::vector<String, std::allocator<String>> const&) @ 0x000000002c75e549
21. src/Interpreters/ActionsVisitor.cpp:1479: DB::ActionsMatcher::makeSet(DB::ASTFunction const&, DB::ActionsMatcher::Data&, bool) @ 0x000000002b3e11a5
22. src/Interpreters/ActionsVisitor.cpp:960: DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x000000002b3d3138
23. src/Interpreters/ActionsVisitor.cpp:1241: DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x000000002b3d6e3c
24. src/Interpreters/ActionsVisitor.cpp:1241: DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x000000002b3d6e3c
25. src/Interpreters/InDepthNodeVisitor.h:71: DB::InDepthNodeVisitor<DB::ActionsMatcher, true, false, std::shared_ptr<DB::IAST> const>::doVisit(std::shared_ptr<DB::IAST> const&) @ 0x000000002b3bbe3f
26. src/Interpreters/InDepthNodeVisitor.h:61: DB::ExpressionAnalyzer::getRootActions(std::shared_ptr<DB::IAST> const&, bool, DB::ActionsDAG&, bool) @ 0x000000002b3729b2
27. src/Interpreters/ExpressionAnalyzer.cpp:1753: DB::ExpressionAnalyzer::appendExpression(DB::ExpressionActionsChain&, std::shared_ptr<DB::IAST> const&, bool) @ 0x000000002b38d642
28. src/Interpreters/MutationsInterpreter.cpp:1148: DB::MutationsInterpreter::prepareMutationStages(std::vector<DB::MutationsInterpreter::Stage, std::allocator<DB::MutationsInterpreter::Stage>>&, bool) @ 0x000000002c259fda
29. src/Interpreters/MutationsInterpreter.cpp:1051: DB::MutationsInterpreter::prepare(bool) @ 0x000000002c253142
30. src/Interpreters/MutationsInterpreter.cpp:431: DB::MutationsInterpreter::MutationsInterpreter(DB::MutationsInterpreter::Source, std::shared_ptr<DB::StorageInMemoryMetadata const>, DB::MutationCommands, std::vector<String, std::allocator<String>>, std::shared_ptr<DB::Context const>, DB::MutationsInterpreter::Settings) @ 0x000000002c247e8e
31. src/Interpreters/MutationsInterpreter.cpp:401: DB::MutationsInterpreter::MutationsInterpreter(DB::MergeTreeData&, std::shared_ptr<DB::IMergeTreeDataPart const>, std::shared_ptr<DB::AlterConversions const>, std::shared_ptr<DB::StorageInMemoryMetadata const>, DB::MutationCommands, std::vector<String, std::allocator<String>>, std::shared_ptr<DB::Context const>, DB::MutationsInterpreter::Settings) @ 0x000000002c248e57
 (version 24.9.1.1)
```
Error for ALTER MODIFY:
```
<Error> s0.t0 (879be049-2941-441f-86e4-df8942178974): Code: 420. DB::Exception: Cannot update column `c0` with type Dynamic: updates of columns with dynamic subcolumns are not supported. (CANNOT_UPDATE_COLUMN), Stack trace (when copying this message, always include the lines below):

0. contrib/llvm-project/libcxx/include/exception:141: Poco::Exception::Exception(String const&, int) @ 0x000000003713eb11
1. src/Common/Exception.cpp:109: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000001e4e862d
2. src/Common/Exception.h:110: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000e662066
3. src/Common/Exception.h:128: DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000e665cdb
4. src/Interpreters/MutationsInterpreter.cpp:512: DB::MutationsInterpreter::prepare(bool) @ 0x000000002c254bc3
5. src/Interpreters/MutationsInterpreter.cpp:431: DB::MutationsInterpreter::MutationsInterpreter(DB::MutationsInterpreter::Source, std::shared_ptr<DB::StorageInMemoryMetadata const>, DB::MutationCommands, std::vector<String, std::allocator<String>>, std::shared_ptr<DB::Context const>, DB::MutationsInterpreter::Settings) @ 0x000000002c247e8e
6. src/Interpreters/MutationsInterpreter.cpp:377: DB::MutationsInterpreter::MutationsInterpreter(std::shared_ptr<DB::IStorage>, std::shared_ptr<DB::StorageInMemoryMetadata const>, DB::MutationCommands, std::shared_ptr<DB::Context const>, DB::MutationsInterpreter::Settings) @ 0x000000002c246584
7. src/Storages/StorageMergeTree.cpp:1298: DB::StorageMergeTree::selectPartsToMutate(std::shared_ptr<DB::StorageInMemoryMetadata const> const&, PreformattedMessage&, std::shared_ptr<DB::RWLockImpl::LockHolderImpl>&, std::unique_lock<std::mutex>&) @ 0x000000002f190afa
8. src/Storages/StorageMergeTree.cpp:1411: DB::StorageMergeTree::scheduleDataProcessingJob(DB::BackgroundJobsAssignee&) @ 0x000000002f194e5f
9. src/Storages/MergeTree/BackgroundJobsAssignee.cpp:131: DB::BackgroundJobsAssignee::threadFunc() @ 0x000000002e8d753e
10. contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x000000002a08b7c9
11. src/Core/BackgroundSchedulePool.cpp:304: DB::BackgroundSchedulePool::threadFunction() @ 0x000000002a09110a
12. src/Core/BackgroundSchedulePool.cpp:170: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<DB::BackgroundSchedulePool::BackgroundSchedulePool(unsigned long, StrongTypedef<unsigned long, CurrentMetrics::MetricTag>, StrongTypedef<unsigned long, CurrentMetrics::MetricTag>, char const*)::$_0>(DB::BackgroundSchedulePool::BackgroundSchedulePool(unsigned long, StrongTypedef<unsigned long, CurrentMetrics::MetricTag>, StrongTypedef<unsigned long, CurrentMetrics::MetricTag>, char const*)::$_0&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000002a092107
13. contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x000000001e69547e
14. src/Common/ThreadPool.cpp:252: void* std::__thread_proxy[abi:v15007]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000001e6a020d
15. asan_thread_start(void*) @ 0x000000000e616bcd
16. ? @ 0x00007b4cc189ca94
17. ? @ 0x00007b4cc1929c3c
 (version 24.9.1.1)
```