ID: 72537
Title: Logical Error: Can't set alias of * of Asterisk
Description:
**Describe the bug**
Using '*' on a function call gives this issue.

**How to reproduce**
Run: https://fiddle.clickhouse.com/0668c5ac-6227-4fbf-b416-34634f46705b

Stack trace:
```
<Fatal> : Logical error: 'Can't set alias of * of Asterisk'.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. std::exception::exception[abi:v15007]() @ 0x000000001899cb54
1. base/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(String const&, int) @ 0x0000000037c8fd60
2. src/Common/Exception.cpp:109: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000253a5dcb
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000001883a7b6
4. src/Common/Exception.h:129: DB::IAST::setAlias(String const&) @ 0x00000000255ad30d
5. src/Functions/UserDefined/UserDefinedSQLFunctionVisitor.cpp:136: DB::UserDefinedSQLFunctionVisitor::tryToReplaceFunction(DB::ASTFunction const&, std::unordered_set<String, std::hash<String>, std::equal_to<String>, std::allocator<String>>&) @ 0x000000003504b0b6
6. src/Functions/UserDefined/UserDefinedSQLFunctionVisitor.cpp:47: DB::UserDefinedSQLFunctionVisitor::visit(std::shared_ptr<DB::IAST>&) @ 0x00000000350499e5
7. src/Functions/UserDefined/UserDefinedSQLFunctionVisitor.cpp:35: DB::UserDefinedSQLFunctionVisitor::visit(std::shared_ptr<DB::IAST>&) @ 0x0000000035049b71
8. src/Functions/UserDefined/UserDefinedSQLFunctionVisitor.cpp:35: DB::UserDefinedSQLFunctionVisitor::visit(std::shared_ptr<DB::IAST>&) @ 0x0000000035049b71
9. src/Functions/UserDefined/UserDefinedSQLFunctionVisitor.cpp:35: DB::UserDefinedSQLFunctionVisitor::visit(std::shared_ptr<DB::IAST>&) @ 0x0000000035049b71
10. src/Functions/UserDefined/UserDefinedSQLFunctionVisitor.cpp:35: DB::UserDefinedSQLFunctionVisitor::visit(std::shared_ptr<DB::IAST>&) @ 0x0000000035049b71
11. src/Functions/UserDefined/UserDefinedSQLFunctionVisitor.cpp:35: DB::UserDefinedSQLFunctionVisitor::visit(std::shared_ptr<DB::IAST>&) @ 0x0000000035049b71
12. src/Interpreters/InterpreterCreateQuery.cpp:1610: DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x0000000030ff2492
13. src/Interpreters/InterpreterCreateQuery.cpp:2265: DB::InterpreterCreateQuery::execute() @ 0x0000000031009205
14. src/Interpreters/executeQuery.cpp:1366: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x0000000031adad23
15. src/Interpreters/executeQuery.cpp:1533: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x0000000031ad4d2e
16. src/Server/TCPHandler.cpp:654: DB::TCPHandler::runImpl() @ 0x00000000344ace1c
17. src/Server/TCPHandler.cpp:2586: DB::TCPHandler::run() @ 0x00000000344d716e
18. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x0000000037dc8a02
19. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x0000000037dc96d2
20. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x0000000037d273d7
21. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000037d22cce
22. ? @ 0x00007ffff7ca1e2e
23. ? @ 0x00007ffff7d33a4c
```