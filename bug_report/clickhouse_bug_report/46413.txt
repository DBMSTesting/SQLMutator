ID: 46413
Title: SELECT queries using a projection raise a `BAD_DATA_PART_NAME` error
Description:
**Describe what's wrong**

We have implemented a projection using the `GROUP BY` clause.

Queries activating the projection have been running without fault for months. But since a few weeks ago, sometimes we get a `BAD_DATA_PART_NAME` exception.

This has been the case for various queries that use the projection. 

**Does it reproduce on recent release?**

Unfortunately, I can't test on the latest. The CH version used is `22.12.3.5` 

**How to reproduce**

We found it really hard to reproduce. If we run an identical query 10 times, it only breaks 1 time.

**Expected behavior**

Queries using the projection always run.

**Error message and/or stacktrace**

```
DB::Exception: Unexpected part name: my_projection: While executing MergeTreeThread. (BAD_DATA_PART_NAME), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked const&, int, bool) @ 0xe750cda in /usr/bin/clickhouse
1. ? @ 0x82ec0c0 in /usr/bin/clickhouse
2. DB::MergeTreePartInfo::fromPartName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, StrongTypedef<unsigned int, DB::MergeTreeDataFormatVersionTag>) @ 0x14f4b32a in /usr/bin/clickhouse
3. DB::StorageReplicatedMergeTree::enqueuePartForCheck(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long) @ 0x14a88c53 in /usr/bin/clickhouse
4. DB::MergeTreeReaderCompact::MergeTreeReaderCompact(std::__1::shared_ptr<DB::IMergeTreeDataPartInfoForReader>, DB::NamesAndTypesList, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::UncompressedCache*, DB::MarkCache*, std::__1::deque<DB::MarkRange, std::__1::allocator<DB::MarkRange>>, DB::MergeTreeReaderSettings, ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, double>>>, std::__1::function<void (DB::ReadBufferFromFileBase::ProfileInfo)> const&, int) @ 0x14f5e04c in /usr/bin/clickhouse
5. DB::MergeTreeDataPartCompact::getReader(DB::NamesAndTypesList const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::deque<DB::MarkRange, std::__1::allocator<DB::MarkRange>> const&, DB::UncompressedCache*, DB::MarkCache*, DB::MergeTreeReaderSettings const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, double>>> const&, std::__1::function<void (DB::ReadBufferFromFileBase::ProfileInfo)> const&) const @ 0x14ea22d3 in /usr/bin/clickhouse
6. DB::IMergeTreeSelectAlgorithm::initializeMergeTreeReadersForPart(std::__1::shared_ptr<DB::IMergeTreeDataPart const>&, DB::MergeTreeReadTaskColumns const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::deque<DB::MarkRange, std::__1::allocator<DB::MarkRange>> const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, double>>> const&, std::__1::function<void (DB::ReadBufferFromFileBase::ProfileInfo)> const&) @ 0x15771c66 in /usr/bin/clickhouse
7. DB::MergeTreeThreadSelectAlgorithm::finalizeNewTask() @ 0x1579e5b9 in /usr/bin/clickhouse
8. DB::IMergeTreeSelectAlgorithm::read() @ 0x15770dfe in /usr/bin/clickhouse
9. DB::MergeTreeSource::tryGenerate() @ 0x1579f7bc in /usr/bin/clickhouse
10. DB::ISource::work() @ 0x153d3246 in /usr/bin/clickhouse
11. DB::ExecutionThreadContext::executeTask() @ 0x153ee2a6 in /usr/bin/clickhouse
12. DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) @ 0x153e349c in /usr/bin/clickhouse
13. ? @ 0x153e55bd in /usr/bin/clickhouse
14. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0xe809f16 in /usr/bin/clickhouse
15. ? @ 0xe80f0e1 in /usr/bin/clickhouse
16. start_thread @ 0x74a4 in /lib/x86_64-linux-gnu/libpthread-2.24.so
17. clone @ 0xe8d0f in /lib/x86_64-linux-gnu/libc-2.24.so
```

**Additional context**

We run a 4-node cluster. 
