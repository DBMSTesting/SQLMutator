ID: 9932
Title: clickhouse view dictionary error: code 393 There is no query
Description:
### view sql is:
CREATE VIEW shared_dwd.dim_district AS
SELECT
t1.id AS id,
t1.name AS name,
t1.last_modified_date AS last_modified_datetime,
t2.country_name AS country_name
FROM
shared_ods.view_dist_district t1
GLOBAL ANY LEFT JOIN shared_ods.view_dist_country t2 ON t2.id = t1.country_id AND t2.enabled = '1';

**dictionary file is:**
`<yandex> <comment>dim_district</comment> <dictionary> <name>district</name> <source> <clickhouse> <host>localhost</host> <port>9000</port> <user>default</user> <password>*****</password> <db>shared_dwd</db> <table>dim_district</table> </clickhouse> </source> <layout> <complex_key_hashed /> </layout> <structure> <key> <attribute> <name>id</name> <type>String</type> </attribute> </key> <attribute> <name>name</name> <type>String</type> <expression>assumeNotNull(name)</expression> <null_value></null_value> <injective>true</injective> </attribute> <attribute> <name>country_name</name> <type>String</type> <expression>assumeNotNull(country_name)</expression> <null_value></null_value> <injective>true</injective> </attribute> </structure> <lifetime> <min>10</min> <max>60</max> </lifetime> <odbc> <invalidate_query>select max(last_modified_datetime) from shared_dwd.dim_district limit 1</invalidate_query> </odbc> </dictionary> </yandex>`

**error message is :**
ExternalDictionariesLoader: Could not load external dictionary 'label', next update is scheduled at 2020-03-30 16:17:
05: Code: 393, e.displayText() = DB::Exception: There is no query, Stack trace:

0x3512b60 StackTrace::StackTrace() /usr/bin/clickhouse
0x351cdaf DB::Exception::Exception(std::string const&, int) /usr/bin/clickhouse
0x61639c9 DB::Context::getQueryContext() const /usr/bin/clickhouse
0x6163a09 DB::Context::getSampleBlockCache() const /usr/bin/clickhouse
0x61f8853 DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptrDB::IAST const&, DB::Context const&) /usr/bin/clickhouse
0x68a725a DB::getNamesAndTypeListFromTableExpression(DB::ASTTableExpression const&, DB::Context const&) /usr/bin/clickhouse
0x68b4d6c DB::getDatabaseAndTablesWithColumnNames(DB::ASTSelectQuery const&, DB::Context const&) /usr/bin/clickhouse
0x62a9756 DB::SyntaxAnalyzer::analyze(std::shared_ptrDB::IAST&, DB::NamesAndTypesList const&, std::vector<std::string, std::allocatorstd::string > const&, s
td::shared_ptrDB::IStorage, DB::NamesAndTypesList const&) const /usr/bin/clickhouse
0x61cbf9f ? /usr/bin/clickhouse
0x61cd387 DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptrDB::IAST const&, DB::Context const&, std::shared_ptrDB::IBlockInputStream const&
, std::shared_ptrDB::IStorage const&, DB::SelectQueryOptions const&, std::vector<std::string, std::allocatorstd::string > const&) /usr/bin/clickhouse
0x61cde4b DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptrDB::IAST const&, DB::Context const&, DB::SelectQueryOptions const&, std::vector<s
td::string, std::allocatorstd::string > const&) /usr/bin/clickhouse
0x61f7e63 DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptrDB::IAST const&, DB::Context const&, DB::SelectQueryOptions con
st&, std::vector<std::string, std::allocatorstd::string > const&) /usr/bin/clickhouse
0x61cda9f DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptrDB::IAST const&, DB::Context const&, std::shared_ptrDB::IBlockInputStream const
&, std::shared_ptrDB::IStorage const&, DB::SelectQueryOptions const&, std::vector<std::string, std::allocatorstd::string > const&) /usr/bin/clickhouse
0x61cde4b DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptrDB::IAST const&, DB::Context const&, DB::SelectQueryOptions const&, std::vector<s
td::string, std::allocatorstd::string > const&) /usr/bin/clickhouse
0x61f7e63 DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptrDB::IAST const&, DB::Context const&, DB::SelectQueryOptions con
st&, std::vector<std::string, std::allocatorstd::string > const&) /usr/bin/clickhouse
0x61cda9f DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptrDB::IAST const&, DB::Context const&, std::shared_ptrDB::IBlockInputStream const
&, std::shared_ptrDB::IStorage const&, DB::SelectQueryOptions const&, std::vector<std::string, std::allocatorstd::string > const&) /usr/bin/clickhouse
0x61cde4b DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptrDB::IAST const&, DB::Context const&, DB::SelectQueryOptions const&, std::vector<s
td::string, std::allocatorstd::string > const&) /usr/bin/clickhouse
0x61f7e63 DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptrDB::IAST const&, DB::Context const&, DB::SelectQueryOptions con
st&, std::vector<std::string, std::allocatorstd::string > const&) /usr/bin/clickhouse
0x69675da DB::StorageView::read(std::vector<std::string, std::allocatorstd::string > const&, DB::SelectQueryInfo const&, DB::Context const&, DB::QueryProcess
ingStage::Enum, unsigned long, unsigned int) /usr/bin/clickhouse
0x61eb9c5 void DB::InterpreterSelectQuery::executeFetchColumnsDB::InterpreterSelectQuery::Pipeline(DB::QueryProcessingStage::Enum, DB::InterpreterSelectQuery
::Pipeline&, std::shared_ptrDB::SortingInfo const&, std::shared_ptrDB::PrewhereInfo const&, std::vector<std::string, std::allocatorstd::string > const&, DB::
QueryPipeline&) /usr/bin/clickhouse

**query sql is:**
SELECT
    id,
    dictGetString('distributor','name',tuple(assumeNotNull(id))) AS name
FROM
    shared_dwd.dim_distributor;

please help me solve this problemï¼Œ thank you so much