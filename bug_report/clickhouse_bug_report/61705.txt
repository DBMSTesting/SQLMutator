ID: 61705
Title: executeQuery: Code: 49. DB::Exception: Too large size (9223372036854775808) passed to allocator. It indicates an error. (LOGICAL_ERROR) 
Description:
```
{e67237cc-f180-48d1-91d8-6ef46b3a6b0b} <Error> executeQuery: Code: 49. DB::Exception: Too large size (9223372036854775808) passed to allocator. It indicates an error. (LOGICAL_ERROR) (version 23.10.4.25 (official build)) (from 172.27.27.147:40730) (in query: select sum(if(type = 2, num, num * -1)) as num from order_goods.tb_warehouse_order_goods twog FINAL all inner join goods.tb_spu_stock tss on twog.company_id = tss.company_id and twog.stock_id = tss.id where twog.company_id = '1452984137886429186' and twog.store_id = '1452984138050445312' and twog.available = 1 and twog.create_time <= toDateTime( '2024-03-21 00:00:00') and tss.company_id = '1452984137886429186' and tss.available = 1 FORMAT TabSeparatedWithNamesAndTypes;), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000cdd0af7 in /usr/bin/clickhouse
1. DB::Exception::Exception<unsigned long&>(int, FormatStringHelperImpl<std::type_identity<unsigned long&>::type>, unsigned long&) @ 0x00000000073c0e3c in /usr/bin/clickhouse
2. Allocator<false, false>::alloc(unsigned long, unsigned long) @ 0x000000000cda0d18 in /usr/bin/clickhouse
3. void DB::PODArrayBase<1ul, 4096ul, Allocator<false, false>, 63ul, 64ul>::resize<>(unsigned long) @ 0x00000000073e10f3 in /usr/bin/clickhouse
4. DB::ColumnString::insertData(char const*, unsigned long) @ 0x0000000012642ed7 in /usr/bin/clickhouse
5. void DB::writeFieldsToColumn<false>(DB::IColumn&, std::vector<DB::Field, std::allocator<DB::Field>> const&, unsigned long, std::vector<bool, std::allocator<bool>> const&, DB::ColumnVector<char8_t>*) @ 0x0000000012642458 in /usr/bin/clickhouse
6. DB::MaterializedMySQLSyncThread::synchronization() @ 0x0000000012639b89 in /usr/bin/clickhouse
7. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::MaterializedMySQLSyncThread::startSynchronization()::$_0>(DB::MaterializedMySQLSyncThread::startSynchronization()::$_0&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000012644291 in /usr/bin/clickhouse
8. void* std::__thread_proxy[abi:v15000]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000cebc2e7 in /usr/bin/clickhouse
9. ? @ 0x00007f5a538a2609 in ?
10. ? @ 0x00007f5a537c7133 in ?
```