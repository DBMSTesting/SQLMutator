ID: 7356
Title: Operator < is not implemented for AggregateFunctionStateData
Description:
Hello,
I have been creating new SummingMergeTree tables.  As they are being populated via Materialized Views reading from Kafka, there are new background exceptions in the logs.  Is the < operation implemented for AggregateFunctionStateData in a version more recent than 19.14.7.15?
thanks in advance

**Describe the bug or unexpected behaviour**
I can see the following exception repeated in the logs when Clickhouse is trying to perform a merge.

``` (version 19.14.7.15 (official build))
2019.10.16 15:11:17.341116 [ 11 ] {} <Error> void DB::BackgroundProcessingPool::threadFunction(): Code: 43, e.displayText() = DB::Exception: Operator < is not implemented for AggregateFunctionStateData., Stack trace:

0. 0x55c3633b51e0 StackTrace::StackTrace() /usr/bin/clickhouse
1. 0x55c3633b4fb5 DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) /usr/bin/clickhouse
2. 0x55c3630d6279 DB::AggregateFunctionStateData::operator<(DB::AggregateFunctionStateData const&) const /usr/bin/clickhouse
3. 0x55c365f786ee DB::Field::operator<(DB::Field const&) const /usr/bin/clickhouse
4. 0x55c36696c0fa DB::MergeTreeDataPart::MinMaxIndex::merge(DB::MergeTreeDataPart::MinMaxIndex const&) /usr/bin/clickhouse
5. 0x55c36695dfff DB::MergeTreeDataMergerMutator::mergePartsToTemporaryPart(DB::FutureMergedMutatedPart const&, DB::MergeListEntry&, DB::TableStructureReadLockHolder&, long, DB::DiskSpaceMonitor::Reservation*, bool, bool) /usr/bin/clickhouse
6. 0x55c366881e44 DB::StorageMergeTree::merge(bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) /usr/bin/clickhouse
7. 0x55c366886fa0 DB::StorageMergeTree::backgroundTask() /usr/bin/clickhouse
8. 0x55c3669117e4 DB::BackgroundProcessingPool::threadFunction() /usr/bin/clickhouse
9. 0x55c36691215a ? /usr/bin/clickhouse
10. 0x55c3633f038c ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>) /usr/bin/clickhouse
11. 0x55c36905eb60 ? /usr/bin/clickhouse
12. 0x7f9cc60e16db start_thread /lib/x86_64-linux-gnu/libpthread-2.27.so
13. 0x7f9cc59fe88f clone /lib/x86_64-linux-gnu/libc-2.27.so
```

**How to reproduce**
* Which ClickHouse server version to use
19.14.7.15

* `CREATE TABLE` statements for all tables involved
This is most probably the problematic table being merged:
```
CREATE TABLE UserProfiles
(
    `profileId` String, 
    `userIds` AggregateFunction(groupUniqArray, Array(String)), 
    `country` AggregateFunction(anyLast, FixedString(3)), 
    `os` AggregateFunction(anyLast, String), 
    `osV` AggregateFunction(anyLast, String), 
    `browser` AggregateFunction(anyLast, String), 
    `deviceType` AggregateFunction(anyLast, Enum8('Unknown' = 0, 'Mobile/Tablet' = 1, 'Desktop' = 2, 'Connected TV' = 3, 'Phone' = 4, 'Tablet' = 5, 'Connected Device' = 6, 'Set Top Box' = 7)), 
    `ip` AggregateFunction(anyLast, IPv4), 
    `carriers` AggregateFunction(groupUniqArray, Array(String)), 
    `gender` AggregateFunction(max, FixedString(1)), 
    `yob` AggregateFunction(max, UInt16), 
    `visits` UInt64, 
    `created` AggregateFunction(min, DateTime), 
    `lastUpdated` AggregateFunction(max, DateTime)
)
ENGINE = SummingMergeTree((userIds, country, os, osV, browser, deviceType, ip, carriers, gender, yob, visits, created, lastUpdated))
PARTITION BY toString(country)
ORDER BY profileId
SETTINGS index_granularity = 8192
```

* Sample data for all these tables, use [clickhouse-obfuscator](https://github.com/ClickHouse/ClickHouse/blob/master/dbms/programs/obfuscator/Obfuscator.cpp#L42-L80) if necessary
* Queries to run that lead to unexpected result
N/A - automatic merge
