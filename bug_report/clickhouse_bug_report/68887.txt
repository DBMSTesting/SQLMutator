ID: 68887
Title: Insert in Log tables with Dynamic type logical error
Description:
**Company or project name**

Clickhouse employee :smile: 

**Describe what's wrong**

Log engine tables with Dynamic type generate a logical error on inserts

```sql
SET allow_experimental_dynamic_type = 1;
CREATE TABLE t0 (c0 Dynamic) ENGINE = Log();
INSERT INTO t0 (c0) VALUES (1), ('a');
/*
Received exception from server (version 24.8.2):
Code: 49. DB::Exception: Received from localhost:9000. DB::Exception: Stream was not created when writing data in LogSink. (LOGICAL_ERROR)
(query: INSERT INTO t0 (c0) VALUES (1), ('a');)
*/
```

https://fiddle.clickhouse.com/1942600d-333a-4a48-8c1f-d8bcc8d89911

**Does it reproduce on the most recent release?**

Yes

**How to reproduce**

Compile Clickhouse on Debug build and run the queries on the Fiddle.

**Expected behavior**

The logical error shouldn't happen.

**Error message and/or stacktrace**

```
024.08.26 12:52:09.627707 [ 186816 ] {04fc69c1-02f3-4a07-b1be-7d9d70982ad5} <Fatal> : Logical error: 'Stream was not created when writing data in LogSink'.
2024.08.26 12:52:09.715876 [ 186816 ] {04fc69c1-02f3-4a07-b1be-7d9d70982ad5} <Fatal> : Stack trace (when copying this message, always include the lines below):

0. contrib/llvm-project/libcxx/include/exception:141: Poco::Exception::Exception(String const&, int) @ 0x000000002755d4d1
1. src/Common/Exception.cpp:109: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000001616990d
2. src/Common/Exception.h:110: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000006befd26
3. src/Common/Exception.h:128: DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000006bf7f4f
4. src/Storages/StorageLog.cpp:463: DB::WriteBuffer* std::__function::__policy_invoker<DB::WriteBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl<std::__function::__default_alloc_func<DB::LogSink::createStreamGetter(DB::NameAndTypePair const&)::$_0, DB::WriteBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&) @ 0x0000000025175071
5. contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x000000002185b3db
6. src/DataTypes/Serializations/SerializationDynamic.cpp:212: DB::SerializationDynamic::serializeBinaryBulkStatePrefix(DB::IColumn const&, DB::ISerialization::SerializeBinaryBulkSettings&, std::shared_ptr<DB::ISerialization::SerializeBinaryBulkState>&) const @ 0x00000000217256d9
7. src/Storages/StorageLog.cpp:506: DB::LogSink::writeData(DB::NameAndTypePair const&, DB::IColumn const&) @ 0x00000000251636cc
8. src/Storages/StorageLog.cpp:413: DB::LogSink::consume(DB::Chunk&) @ 0x0000000025162cf4
9. src/Processors/Sinks/SinkToStorage.cpp:18: DB::SinkToStorage::onConsume(DB::Chunk) @ 0x00000000265e794e
10. src/Processors/Transforms/ExceptionKeepingTransform.cpp:150: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::ExceptionKeepingTransform::work()::$_1, void ()>>(std::__function::__policy_storage const*) @ 0x00000000263f5fee
11. contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x00000000263f5abe
12. src/Processors/Transforms/ExceptionKeepingTransform.cpp:150: DB::ExceptionKeepingTransform::work() @ 0x00000000263f4daa
13. src/Processors/Executors/ExecutionThreadContext.cpp:47: DB::ExecutionThreadContext::executeTask() @ 0x00000000261705ce
14. src/Processors/Executors/PipelineExecutor.cpp:283: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000026154d50
15. src/Processors/Executors/PipelineExecutor.cpp:157: DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x0000000026153ef9
16. src/Client/LocalConnection.cpp:335: DB::LocalConnection::finishQuery() @ 0x0000000025e8d04b
17. src/Client/LocalConnection.cpp:454: DB::LocalConnection::poll(unsigned long) @ 0x0000000025e8df1a
18. src/Client/LocalConnection.cpp:516: DB::LocalConnection::receivePacket() @ 0x0000000025e9027a
19. src/Client/ClientBase.cpp:1785: DB::ClientBase::receiveEndOfQuery() @ 0x0000000025dcc9ab
20. src/Client/ClientBase.cpp:1526: DB::ClientBase::processInsertQuery(String const&, std::shared_ptr<DB::IAST>) @ 0x0000000025dc8de1
21. src/Client/ClientBase.cpp:1958: DB::ClientBase::processParsedSingleQuery(String const&, String const&, std::shared_ptr<DB::IAST>, std::optional<bool>, bool) @ 0x0000000025dba2c4
22. src/Client/ClientBase.cpp:2279: DB::ClientBase::executeMultiQuery(String const&) @ 0x0000000025dd0a7c
23. src/Client/ClientBase.cpp:2423: DB::ClientBase::processQueryText(String const&) @ 0x0000000025dd28e2
24. src/Client/ClientBase.cpp:2650: DB::ClientBase::runInteractive() @ 0x0000000025dd5dd2
25. programs/local/LocalServer.cpp:0: DB::LocalServer::main(std::vector<String, std::allocator<String>> const&) @ 0x0000000016608635
26. base/poco/Util/src/Application.cpp:315: Poco::Util::Application::run() @ 0x0000000027764977
27. programs/local/LocalServer.cpp:971: mainEntryClickHouseLocal(int, char**) @ 0x0000000016619a6a
28. programs/main.cpp:248: main @ 0x0000000006bdf2d6
29. ? @ 0x00007855bea2a1ca
30. ? @ 0x00007855bea2a28b
31. _start @ 0x0000000006b0e02e

2024.08.26 12:52:09.716381 [ 186840 ] {} <Fatal> ClientBase: ########## Short fault info ############
2024.08.26 12:52:09.716511 [ 186840 ] {} <Fatal> ClientBase: (version 24.9.1.1, build id: , git hash: 674cddc96960f5b0f1e46147960daf38ecd2fd09) (from thread 186816) Received signal 6
2024.08.26 12:52:09.716541 [ 186840 ] {} <Fatal> ClientBase: Signal description: Aborted
2024.08.26 12:52:09.716568 [ 186840 ] {} <Fatal> ClientBase: 
2024.08.26 12:52:09.716604 [ 186840 ] {} <Fatal> ClientBase: Stack trace: 0x0000607cb747336d 0x0000607cb79be7f2 0x00007855bea45320 0x00007855bea9eb1d 0x00007855bea4526e 0x00007855bea288ff 0x0000607cb74145c8 0x0000607cb7415ddf 0x0000607ca7e9bd26 0x0000607ca7ea3f4f 0x0000607cc6421071 0x0000607cc2b073db 0x0000607cc29d16d9 0x0000607cc640f6cc 0x0000607cc640ecf4 0x0000607cc789394e 0x0000607cc76a1fee 0x0000607cc76a1abe 0x0000607cc76a0daa 0x0000607cc741c5ce 0x0000607cc7400d50 0x0000607cc73ffef9 0x0000607cc713904b 0x0000607cc7139f1a 0x0000607cc713c27a 0x0000607cc70789ab 0x0000607cc7074de1 0x0000607cc70662c4 0x0000607cc707ca7c 0x0000607cc707e8e2 0x0000607cc7081dd2 0x0000607cb78b4635 0x0000607cc8a10977 0x0000607cb78c5a6a 0x0000607ca7e8b2d6 0x00007855bea2a1ca 0x00007855bea2a28b 0x0000607ca7dba02e
2024.08.26 12:52:09.716651 [ 186840 ] {} <Fatal> ClientBase: ########################################
2024.08.26 12:52:09.716692 [ 186840 ] {} <Fatal> ClientBase: (version 24.9.1.1, build id: , git hash: 674cddc96960f5b0f1e46147960daf38ecd2fd09) (from thread 186816) (query_id: 04fc69c1-02f3-4a07-b1be-7d9d70982ad5) (query: INSERT INTO t0 (c0) VALUES ) Received signal Aborted (6)
2024.08.26 12:52:09.716720 [ 186840 ] {} <Fatal> ClientBase: 
2024.08.26 12:52:09.716749 [ 186840 ] {} <Fatal> ClientBase: Stack trace: 0x0000607cb747336d 0x0000607cb79be7f2 0x00007855bea45320 0x00007855bea9eb1d 0x00007855bea4526e 0x00007855bea288ff 0x0000607cb74145c8 0x0000607cb7415ddf 0x0000607ca7e9bd26 0x0000607ca7ea3f4f 0x0000607cc6421071 0x0000607cc2b073db 0x0000607cc29d16d9 0x0000607cc640f6cc 0x0000607cc640ecf4 0x0000607cc789394e 0x0000607cc76a1fee 0x0000607cc76a1abe 0x0000607cc76a0daa 0x0000607cc741c5ce 0x0000607cc7400d50 0x0000607cc73ffef9 0x0000607cc713904b 0x0000607cc7139f1a 0x0000607cc713c27a 0x0000607cc70789ab 0x0000607cc7074de1 0x0000607cc70662c4 0x0000607cc707ca7c 0x0000607cc707e8e2 0x0000607cc7081dd2 0x0000607cb78b4635 0x0000607cc8a10977 0x0000607cb78c5a6a 0x0000607ca7e8b2d6 0x00007855bea2a1ca 0x00007855bea2a28b 0x0000607ca7dba02e
2024.08.26 12:52:09.757392 [ 186840 ] {} <Fatal> ClientBase: 0.0. inlined from src/Common/StackTrace.cpp:372: StackTrace::tryCapture()
2024.08.26 12:52:09.757445 [ 186840 ] {} <Fatal> ClientBase: 0. src/Common/StackTrace.cpp:341: StackTrace::StackTrace(ucontext_t const&) @ 0x00000000161c736d
2024.08.26 12:52:09.811496 [ 186840 ] {} <Fatal> ClientBase: 1. src/Common/SignalHandlers.cpp:84: signalHandler(int, siginfo_t*, void*) @ 0x00000000167127f2
2024.08.26 12:52:09.811540 [ 186840 ] {} <Fatal> ClientBase: 2. ? @ 0x00007855bea45320
2024.08.26 12:52:09.811560 [ 186840 ] {} <Fatal> ClientBase: 3. ? @ 0x00007855bea9eb1d
2024.08.26 12:52:09.811577 [ 186840 ] {} <Fatal> ClientBase: 4. ? @ 0x00007855bea4526e
2024.08.26 12:52:09.811598 [ 186840 ] {} <Fatal> ClientBase: 5. ? @ 0x00007855bea288ff
2024.08.26 12:52:09.890270 [ 186840 ] {} <Fatal> ClientBase: 6. src/Common/Exception.cpp:48: DB::abortOnFailedAssertion(String const&, void* const*, unsigned long, unsigned long) @ 0x00000000161685c8
2024.08.26 12:52:09.962343 [ 186840 ] {} <Fatal> ClientBase: 7.0. inlined from src/Common/Exception.cpp:71: DB::handle_error_code(String const&, int, bool, std::vector<void*, std::allocator<void*>> const&)
2024.08.26 12:52:09.962387 [ 186840 ] {} <Fatal> ClientBase: 7. src/Common/Exception.cpp:115: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x0000000016169ddf
2024.08.26 12:52:09.999610 [ 186840 ] {} <Fatal> ClientBase: 8.0. inlined from src/Common/Exception.h:110: Exception
2024.08.26 12:52:09.999661 [ 186840 ] {} <Fatal> ClientBase: 8. src/Common/Exception.h:63: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000006befd26
2024.08.26 12:52:10.042697 [ 186840 ] {} <Fatal> ClientBase: 9. src/Common/Exception.h:128: DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000006bf7f4f
2024.08.26 12:52:10.256548 [ 186840 ] {} <Fatal> ClientBase: 10.0. inlined from src/Storages/StorageLog.cpp:463: operator()
2024.08.26 12:52:10.256599 [ 186840 ] {} <Fatal> ClientBase: 10.1. inlined from contrib/llvm-project/libcxx/include/__functional/invoke.h:394: ?
2024.08.26 12:52:10.256625 [ 186840 ] {} <Fatal> ClientBase: 10.2. inlined from contrib/llvm-project/libcxx/include/__functional/invoke.h:470: ?
2024.08.26 12:52:10.256651 [ 186840 ] {} <Fatal> ClientBase: 10.3. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:235: ?
2024.08.26 12:52:10.256671 [ 186840 ] {} <Fatal> ClientBase: 10. contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x0000000025175071
2024.08.26 12:52:10.319025 [ 186840 ] {} <Fatal> ClientBase: 11.0. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:848: ?
2024.08.26 12:52:10.319065 [ 186840 ] {} <Fatal> ClientBase: 11.1. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:1197: ?
2024.08.26 12:52:10.319100 [ 186840 ] {} <Fatal> ClientBase: 11. src/DataTypes/Serializations/SerializationVariant.cpp:122: DB::SerializationVariant::serializeBinaryBulkStatePrefix(DB::IColumn const&, DB::ISerialization::SerializeBinaryBulkSettings&, std::shared_ptr<DB::ISerialization::SerializeBinaryBulkState>&) const @ 0x000000002185b3db
2024.08.26 12:52:10.365972 [ 186840 ] {} <Fatal> ClientBase: 12. src/DataTypes/Serializations/SerializationDynamic.cpp:212: DB::SerializationDynamic::serializeBinaryBulkStatePrefix(DB::IColumn const&, DB::ISerialization::SerializeBinaryBulkSettings&, std::shared_ptr<DB::ISerialization::SerializeBinaryBulkState>&) const @ 0x00000000217256d9
2024.08.26 12:52:10.512978 [ 186840 ] {} <Fatal> ClientBase: 13. src/Storages/StorageLog.cpp:506: DB::LogSink::writeData(DB::NameAndTypePair const&, DB::IColumn const&) @ 0x00000000251636cc
2024.08.26 12:52:10.673594 [ 186840 ] {} <Fatal> ClientBase: 14. src/Storages/StorageLog.cpp:413: DB::LogSink::consume(DB::Chunk&) @ 0x0000000025162cf4
2024.08.26 12:52:10.697067 [ 186840 ] {} <Fatal> ClientBase: 15. src/Processors/Sinks/SinkToStorage.cpp:18: DB::SinkToStorage::onConsume(DB::Chunk) @ 0x00000000265e794e
2024.08.26 12:52:10.742549 [ 186840 ] {} <Fatal> ClientBase: 16.0. inlined from src/Processors/Transforms/ExceptionKeepingTransform.cpp:150: operator()
2024.08.26 12:52:10.742592 [ 186840 ] {} <Fatal> ClientBase: 16.1. inlined from contrib/llvm-project/libcxx/include/__functional/invoke.h:394: ?
2024.08.26 12:52:10.742616 [ 186840 ] {} <Fatal> ClientBase: 16.2. inlined from contrib/llvm-project/libcxx/include/__functional/invoke.h:479: ?
2024.08.26 12:52:10.742640 [ 186840 ] {} <Fatal> ClientBase: 16.3. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:235: ?
2024.08.26 12:52:10.742662 [ 186840 ] {} <Fatal> ClientBase: 16. contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x00000000263f5fee
2024.08.26 12:52:10.788910 [ 186840 ] {} <Fatal> ClientBase: 17.0. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:848: ?
2024.08.26 12:52:10.788955 [ 186840 ] {} <Fatal> ClientBase: 17.1. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:1197: ?
2024.08.26 12:52:10.788992 [ 186840 ] {} <Fatal> ClientBase: 17. src/Processors/Transforms/ExceptionKeepingTransform.cpp:114: DB::runStep(std::function<void ()>, DB::ThreadStatus*, std::atomic<unsigned long>*) @ 0x00000000263f5abe
2024.08.26 12:52:10.817910 [ 186840 ] {} <Fatal> ClientBase: 18. src/Processors/Transforms/ExceptionKeepingTransform.cpp:150: DB::ExceptionKeepingTransform::work() @ 0x00000000263f4daa
2024.08.26 12:52:10.835847 [ 186840 ] {} <Fatal> ClientBase: 19.0. inlined from src/Processors/Executors/ExecutionThreadContext.cpp:47: DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*)
2024.08.26 12:52:10.835894 [ 186840 ] {} <Fatal> ClientBase: 19. src/Processors/Executors/ExecutionThreadContext.cpp:96: DB::ExecutionThreadContext::executeTask() @ 0x00000000261705ce
2024.08.26 12:52:10.895947 [ 186840 ] {} <Fatal> ClientBase: 20. src/Processors/Executors/PipelineExecutor.cpp:283: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000026154d50
2024.08.26 12:52:10.954931 [ 186840 ] {} <Fatal> ClientBase: 21. src/Processors/Executors/PipelineExecutor.cpp:157: DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x0000000026153ef9
2024.08.26 12:52:11.050944 [ 186840 ] {} <Fatal> ClientBase: 22. src/Client/LocalConnection.cpp:335: DB::LocalConnection::finishQuery() @ 0x0000000025e8d04b
2024.08.26 12:52:11.146052 [ 186840 ] {} <Fatal> ClientBase: 23. src/Client/LocalConnection.cpp:454: DB::LocalConnection::poll(unsigned long) @ 0x0000000025e8df1a
2024.08.26 12:52:11.242814 [ 186840 ] {} <Fatal> ClientBase: 24. src/Client/LocalConnection.cpp:516: DB::LocalConnection::receivePacket() @ 0x0000000025e9027a
2024.08.26 12:52:11.539386 [ 186840 ] {} <Fatal> ClientBase: 25. src/Client/ClientBase.cpp:1785: DB::ClientBase::receiveEndOfQuery() @ 0x0000000025dcc9ab
2024.08.26 12:52:11.764520 [ 186840 ] {} <Fatal> ClientBase: 26. src/Client/ClientBase.cpp:1526: DB::ClientBase::processInsertQuery(String const&, std::shared_ptr<DB::IAST>) @ 0x0000000025dc8de1
2024.08.26 12:52:11.996736 [ 186840 ] {} <Fatal> ClientBase: 27. src/Client/ClientBase.cpp:1958: DB::ClientBase::processParsedSingleQuery(String const&, String const&, std::shared_ptr<DB::IAST>, std::optional<bool>, bool) @ 0x0000000025dba2c4
2024.08.26 12:52:12.303040 [ 186840 ] {} <Fatal> ClientBase: 28. src/Client/ClientBase.cpp:2279: DB::ClientBase::executeMultiQuery(String const&) @ 0x0000000025dd0a7c
2024.08.26 12:52:12.610586 [ 186840 ] {} <Fatal> ClientBase: 29. src/Client/ClientBase.cpp:2423: DB::ClientBase::processQueryText(String const&) @ 0x0000000025dd28e2
2024.08.26 12:52:12.830621 [ 186840 ] {} <Fatal> ClientBase: 30. src/Client/ClientBase.cpp:2650: DB::ClientBase::runInteractive() @ 0x0000000025dd5dd2
2024.08.26 12:52:12.906663 [ 186840 ] {} <Fatal> ClientBase: 31. programs/local/LocalServer.cpp:0: DB::LocalServer::main(std::vector<String, std::allocator<String>> const&) @ 0x0000000016608635
2024.08.26 12:52:12.932833 [ 186840 ] {} <Fatal> ClientBase: 32. base/poco/Util/src/Application.cpp:315: Poco::Util::Application::run() @ 0x0000000027764977
2024.08.26 12:52:13.088423 [ 186840 ] {} <Fatal> ClientBase: 33. programs/local/LocalServer.cpp:971: mainEntryClickHouseLocal(int, char**) @ 0x0000000016619a6a
2024.08.26 12:52:13.094727 [ 186840 ] {} <Fatal> ClientBase: 34. programs/main.cpp:248: main @ 0x0000000006bdf2d6
2024.08.26 12:52:13.094772 [ 186840 ] {} <Fatal> ClientBase: 35. ? @ 0x00007855bea2a1ca
2024.08.26 12:52:13.094793 [ 186840 ] {} <Fatal> ClientBase: 36. ? @ 0x00007855bea2a28b
2024.08.26 12:52:13.152061 [ 186840 ] {} <Fatal> ClientBase: 37. _start @ 0x0000000006b0e02e
2024.08.26 12:52:13.152113 [ 186840 ] {} <Fatal> ClientBase: This ClickHouse version is not official and should be upgraded to the official build.
2024.08.26 12:52:13.152299 [ 186840 ] {} <Fatal> ClientBase: Changed settings: allow_introspection_functions = true, storage_file_read_method = 'mmap', allow_experimental_dynamic_type = true
Aborted (core dumped)
```