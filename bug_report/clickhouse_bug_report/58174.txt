ID: 58174
Title: PARAMETER_OUT_OF_BOUND in MergingSortedTransform during subcolumn reading from wide part in MergeTree table 
Description:
Queries:
```
CREATE TABLE default.test
(
    `id` UInt64,
    `t` Tuple(a UInt64, b Array(Tuple(c UInt64, d UInt64)))
)
ENGINE = MergeTree
ORDER BY id
SETTINGS min_rows_for_wide_part = 1, min_bytes_for_wide_part = 1, index_granularity = 8192;
insert into test select number, tuple(number, arrayMap(x -> tuple(number + 1, number + 2), range(number % 10))) from numbers(100000);
insert into test select number, tuple(number, arrayMap(x -> tuple(number + 1, number + 2), range(number % 10))) from numbers(100000);
insert into test select number, tuple(number, arrayMap(x -> tuple(number + 1, number + 2), range(number % 10))) from numbers(100000);
select t.b, t.b.c from test order by id format Null;
```

Error:
```
Received exception from server (version 23.12.1):
Code: 12. DB::Exception: Received from localhost:9000. DB::Exception: Parameters start = 36856, length = 2 are out of bound in ColumnVector<T>::insertRangeFrom method (data.size() = 36856).: While executing MergingSortedTransform. Stack trace:

0. ./build_docker/./src/Common/Exception.cpp:96: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000c58f27b in /home/avogar/tmp/master/clickhouse-release
1. DB::Exception::Exception<String, String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&, String&&) @ 0x0000000007267c2c in /home/avogar/tmp/master/clickhouse-release
2. ./build_docker/./src/Columns/ColumnVector.cpp:0: DB::ColumnVector<unsigned long>::insertRangeFrom(DB::IColumn const&, unsigned long, unsigned long) @ 0x000000001160685e in /home/avogar/tmp/master/clickhouse-release
3. ./build_docker/./src/Columns/ColumnTuple.cpp:230: DB::ColumnTuple::insertRangeFrom(DB::IColumn const&, unsigned long, unsigned long) @ 0x00000000115e6a70 in /home/avogar/tmp/master/clickhouse-release
4. ./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:202: DB::ColumnArray::insertFrom(DB::IColumn const&, unsigned long) @ 0x0000000011535217 in /home/avogar/tmp/master/clickhouse-release
5. ./src/Processors/Merges/Algorithms/MergedData.h:0: decltype(auto) std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:v15000]<std::__variant_detail::__visitation::__variant::__value_visitor<DB::MergingSortedAlgorithm::merge()::$_1&>&&, std::__variant_detail::__base<(std::__variant_detail::_Trait)1, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<char8_t>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<unsigned short>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<unsigned int>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<unsigned long>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<wide::integer<128ul, unsigned int>>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<wide::integer<256ul, unsigned int>>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<signed char>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<short>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<int>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<long>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<wide::integer<128ul, int>>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<wide::integer<256ul, int>>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<float>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<double>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnDecimal<DB::Decimal<int>>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnDecimal<DB::Decimal<long>>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnDecimal<DB::Decimal<wide::integer<128ul, int>>>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnDecimal<DB::Decimal<wide::integer<256ul, int>>>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnDecimal<DB::DateTime64>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<DB::IPv4>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<DB::IPv6>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnString>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnFixedString>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SimpleSortCursor, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SortCursor, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SortCursorWithCollation, (DB::SortingQueueStrategy)1>>&>(std::__variant_detail::__visitation::__variant::__value_visitor<DB::MergingSortedAlgorithm::merge()::$_1&>&&, std::__variant_detail::__base<(std::__variant_detail::_Trait)1, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<char8_t>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<unsigned short>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<unsigned int>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<unsigned long>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<wide::integer<128ul, unsigned int>>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<wide::integer<256ul, unsigned int>>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<signed char>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<short>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<int>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<long>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<wide::integer<128ul, int>>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<wide::integer<256ul, int>>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<float>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<double>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnDecimal<DB::Decimal<int>>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnDecimal<DB::Decimal<long>>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnDecimal<DB::Decimal<wide::integer<128ul, int>>>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnDecimal<DB::Decimal<wide::integer<256ul, int>>>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnDecimal<DB::DateTime64>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<DB::IPv4>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnVector<DB::IPv6>>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnString>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SpecializedSingleColumnSortCursor<DB::ColumnFixedString>, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SimpleSortCursor, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SortCursor, (DB::SortingQueueStrategy)1>, DB::SortingQueueImpl<DB::SortCursorWithCollation, (DB::SortingQueueStrategy)1>>&) (.llvm.16942005987800088012) @ 0x000000001276454b in /home/avogar/tmp/master/clickhouse-release
6. ./src/Processors/Chunk.h:90: DB::IMergingTransform<DB::MergingSortedAlgorithm>::work() @ 0x000000001123dbcc in /home/avogar/tmp/master/clickhouse-release
7. ./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:0: DB::ExecutionThreadContext::executeTask() @ 0x00000000123f0b3a in /home/avogar/tmp/master/clickhouse-release
8. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:273: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000123e77d0 in /home/avogar/tmp/master/clickhouse-release
9. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:833: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x00000000123e88a1 in /home/avogar/tmp/master/clickhouse-release
10. ./base/base/../base/wide_integer_impl.h:809: ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>) @ 0x000000000c67820e in /home/avogar/tmp/master/clickhouse-release
11. ./build_docker/./src/Common/ThreadPool.cpp:0: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000c67be9c in /home/avogar/tmp/master/clickhouse-release
12. ./base/base/../base/wide_integer_impl.h:809: void* std::__thread_proxy[abi:v15000]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000c67a751 in /home/avogar/tmp/master/clickhouse-release
13. ? @ 0x00007fd837294ac3 in ?
14. ? @ 0x00007fd837326660 in ?
. (PARAMETER_OUT_OF_BOUND)
```

It happens when we read more than 1 granule into one column. The order of reading columns from part: first - t.b.c , second - t.b .
What is happening:
During reading of the first granule we read subcolumn t.b.c from corresponding stream and add shared_ptr to this column to substreams cache. When we read subcolumn t.b  we need to read the whole Tuple, so we read it’s element c and use column from substreams cache as we already read it. So after reading the first granule our columns will have shared_ptr to the the same column. And everything is great, we avoided extra copying here.
During reading of the second granule into the same columns first we read new values into subcolumn t.b.c . Next, we read t.b column, it’s an Array and we need to calculate how many rows we need to read to the nested Tuple column, we do it using deserialized offsets column and the current size of the nested column. But inside this Tuple for element c we have shared_ptr to the same column we read during reading t.b.c . So at this point we have Tuple with elements with different sizes, and to determine the size of nested column we use IColumn::size() method, but ColumnTuple::size() returns the size of it’s first element (c in our case), so we use the size of larger element and we determine the limit for nested column as 0 , so we don’t deserialize anything into the second Tuple element d .
So, after the deserialization we ended up with Tuple column with elements with different sizes.