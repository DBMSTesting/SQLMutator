ID: 9936
Title: aggregateFunction bad cast attempt segfault 
Description:
That query gives a segfault on 19.16
```
create table x( id UInt64, t  AggregateFunction(argMax, Enum8('<Empty>' = -1, 'Male' = 1, 'Female' = 2), UInt64) DEFAULT arrayReduce('argMaxState', ['cast(-1, \'Enum8(\'<Empty>\' = -1, \'Male\' = 1, \'Female\' = 2)'], [toUInt64(0)]) ) Engine=MergeTree ORDER BY id;
```
That query is wrong (the cast expression should not be surrounded by quotes), but it should give proper error message like this one:
```
Conversion from AggregateFunction(argMax, String, UInt64) to AggregateFunction(argMax, Enum8('<Empty>' = -1, 'Male' = 1, 'Female' = 2), UInt64) is not supported. 
````
It works properly on newer versions, but maybe it's worth to check as it could be some bad code there.

```
2020.03.30 09:56:56.859059 [ 36 ] {} <Fatal> BaseDaemon: ########################################
2020.03.30 09:56:56.859153 [ 36 ] {} <Fatal> BaseDaemon: (version 19.16.16.72 (official build)) (from thread 27) Received signal Segmentation fault (11).
2020.03.30 09:56:56.859194 [ 36 ] {} <Fatal> BaseDaemon: Address: 0x10 Access: read. Address not mapped to object.
2020.03.30 09:56:56.859233 [ 36 ] {} <Fatal> BaseDaemon: Stack trace: 0x55726d4ce9cf 0x55726caa6ea6 0x55726daac325 0x55726daac7f5 0x55726daadb30 0x55726e409fe0 0x55726e40a2b0 0x55726e40a6e7 0x55726e55aaba 0x55726e55fb82 0x55726e55f4e0 0x55726e41d924 0x55726e4164e1 0x55726e4187e7 0x55726dc7903a 0x55726dc7b8b3 0x55726dc7d338 0x55726dc7ea97 0x55726dddb456 0x55726dddc6d2 0x55726a9b2024 0x55726a9b2b1f 0x55726e958e64 0x55726e9595c1 0x55726eed19c9 0x55726eecf5d0 0x55726f660ef4 0x7f6e85b986db 0x7f6e856bd88f
2020.03.30 09:56:56.895408 [ 36 ] {} <Fatal> BaseDaemon: 3. 0x55726d4ce9cf DB::SingleValueDataString::changeImpl(StringRef, DB::Arena*) /usr/bin/clickhouse
2020.03.30 09:56:56.895450 [ 36 ] {} <Fatal> BaseDaemon: 4. 0x55726caa6ea6 DB::FunctionArrayReduce::executeImpl(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long) /usr/bin/clickhouse
2020.03.30 09:56:56.895469 [ 36 ] {} <Fatal> BaseDaemon: 5. 0x55726daac325 DB::PreparedFunctionImpl::defaultImplementationForConstantArguments(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) /usr/bin/clickhouse
2020.03.30 09:56:56.895483 [ 36 ] {} <Fatal> BaseDaemon: 6. 0x55726daac7f5 DB::PreparedFunctionImpl::executeWithoutLowCardinalityColumns(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) /usr/bin/clickhouse
2020.03.30 09:56:56.895496 [ 36 ] {} <Fatal> BaseDaemon: 7. 0x55726daadb30 DB::PreparedFunctionImpl::execute(DB::Block&, std::vector<unsigned long, std::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) /usr/bin/clickhouse
2020.03.30 09:56:56.895526 [ 36 ] {} <Fatal> BaseDaemon: 8. 0x55726e409fe0 DB::ExpressionAction::prepare(DB::Block&, DB::Settings const&, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&) /usr/bin/clickhouse
2020.03.30 09:56:56.895548 [ 36 ] {} <Fatal> BaseDaemon: 9. 0x55726e40a2b0 DB::ExpressionActions::addImpl(DB::ExpressionAction, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&) /usr/bin/clickhouse
2020.03.30 09:56:56.895566 [ 36 ] {} <Fatal> BaseDaemon: 10. 0x55726e40a6e7 DB::ExpressionActions::add(DB::ExpressionAction const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&) /usr/bin/clickhouse
2020.03.30 09:56:56.895581 [ 36 ] {} <Fatal> BaseDaemon: 11. 0x55726e55aaba DB::ScopeStack::addAction(DB::ExpressionAction const&) /usr/bin/clickhouse
2020.03.30 09:56:56.895594 [ 36 ] {} <Fatal> BaseDaemon: 12. 0x55726e55fb82 DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) /usr/bin/clickhouse
2020.03.30 09:56:56.895614 [ 36 ] {} <Fatal> BaseDaemon: 13. 0x55726e55f4e0 DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) /usr/bin/clickhouse
2020.03.30 09:56:56.895653 [ 36 ] {} <Fatal> BaseDaemon: 14. 0x55726e41d924 DB::InDepthNodeVisitorTemplate<DB::ActionsMatcher, true, std::shared_ptr<DB::IAST> const>::visit(std::shared_ptr<DB::IAST> const&) /usr/bin/clickhouse
2020.03.30 09:56:56.895685 [ 36 ] {} <Fatal> BaseDaemon: 15. 0x55726e4164e1 ? /usr/bin/clickhouse
2020.03.30 09:56:56.895716 [ 36 ] {} <Fatal> BaseDaemon: 16. 0x55726e4187e7 DB::ExpressionAnalyzer::getActions(bool, bool) /usr/bin/clickhouse
2020.03.30 09:56:56.895745 [ 36 ] {} <Fatal> BaseDaemon: 17. 0x55726dc7903a DB::InterpreterCreateQuery::getColumnsDescription(DB::ASTExpressionList const&, DB::Context const&) /usr/bin/clickhouse
2020.03.30 09:56:56.895765 [ 36 ] {} <Fatal> BaseDaemon: 18. 0x55726dc7b8b3 DB::InterpreterCreateQuery::setProperties(DB::ASTCreateQuery&, DB::Block const&, std::shared_ptr<DB::IStorage> const&) const /usr/bin/clickhouse
2020.03.30 09:56:56.895799 [ 36 ] {} <Fatal> BaseDaemon: 19. 0x55726dc7d338 DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) /usr/bin/clickhouse
2020.03.30 09:56:56.895833 [ 36 ] {} <Fatal> BaseDaemon: 20. 0x55726dc7ea97 DB::InterpreterCreateQuery::execute() /usr/bin/clickhouse
2020.03.30 09:56:56.895863 [ 36 ] {} <Fatal> BaseDaemon: 21. 0x55726dddb456 ? /usr/bin/clickhouse
2020.03.30 09:56:56.895883 [ 36 ] {} <Fatal> BaseDaemon: 22. 0x55726dddc6d2 DB::executeQuery(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, bool) /usr/bin/clickhouse
2020.03.30 09:56:56.895908 [ 36 ] {} <Fatal> BaseDaemon: 23. 0x55726a9b2024 DB::TCPHandler::runImpl() /usr/bin/clickhouse
2020.03.30 09:56:56.895923 [ 36 ] {} <Fatal> BaseDaemon: 24. 0x55726a9b2b1f DB::TCPHandler::run() /usr/bin/clickhouse
2020.03.30 09:56:56.895958 [ 36 ] {} <Fatal> BaseDaemon: 25. 0x55726e958e64 Poco::Net::TCPServerConnection::start() /usr/bin/clickhouse
2020.03.30 09:56:56.895988 [ 36 ] {} <Fatal> BaseDaemon: 26. 0x55726e9595c1 Poco::Net::TCPServerDispatcher::run() /usr/bin/clickhouse
2020.03.30 09:56:56.896023 [ 36 ] {} <Fatal> BaseDaemon: 27. 0x55726eed19c9 Poco::PooledThread::run() /usr/bin/clickhouse
2020.03.30 09:56:56.896041 [ 36 ] {} <Fatal> BaseDaemon: 28. 0x55726eecf5d0 Poco::ThreadImpl::runnableEntry(void*) /usr/bin/clickhouse
2020.03.30 09:56:56.896065 [ 36 ] {} <Fatal> BaseDaemon: 29. 0x55726f660ef4 ? /usr/bin/clickhouse
2020.03.30 09:56:56.896083 [ 36 ] {} <Fatal> BaseDaemon: 30. 0x7f6e85b986db start_thread /lib/x86_64-linux-gnu/libpthread-2.27.so
2020.03.30 09:56:56.896117 [ 36 ] {} <Fatal> BaseDaemon: 31. 0x7f6e856bd88f __clone /lib/x86_64-linux-gnu/libc-2.27.so
```