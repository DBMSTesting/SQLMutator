ID: 69395
Title: Delete on dynamic column, wrong mutation error
Description:
**Describe the bug**
Doing a delete on a Dynamic column may trigger a BAD_TYPE_OF_FIELD error.

**How to reproduce**
Run:

```sql
SET allow_experimental_dynamic_type = 1;
CREATE TABLE t0 (c0 Dynamic) ENGINE = MergeTree() ORDER BY (c0);
INSERT INTO t0 (c0) VALUES (('b')), (2);
DELETE FROM t0 WHERE c0 = 'a' OR c0 = NULL;
/*
Code: 341. DB::Exception: Received from localhost:9000. DB::Exception: Exception happened during execution
of mutation 'mutation_2.txt' with part 'all_1_1_0' reason: 'Code: 169. DB::Exception: Cannot compare
DB::Tuple with std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>.
(BAD_TYPE_OF_FIELD) (version 24.9.1.105)'. This error maybe retryable or not. In case of unretryable error,
mutation can be killed with KILL MUTATION query. (UNFINISHED)
*/
```
Mutation stack trace:

```
<Error> virtual bool DB::MutatePlainMergeTreeTask::executeStep(): Code: 169. DB::Exception: Cannot compare DB::Tuple with std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>. (BAD_TYPE_OF_FIELD), Stack trace (when copying this message, always include the lines below):

0. src/Common/Exception.cpp:111: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000db8bd7b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000007e8314c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000007e84f4b
3. bool DB::FieldVisitorAccurateLess::operator()<DB::Tuple, String>(DB::Tuple const&, String const&) const @ 0x0000000009725c21
4. auto DB::Field::dispatch<auto DB::applyVisitor<DB::FieldVisitorAccurateLess, DB::Field const&, DB::Field const&>(DB::FieldVisitorAccurateLess&&, DB::Field const&, DB::Field const&)::'lambda'(DB::FieldVisitorAccurateLess&), DB::Field const&>(DB::FieldVisitorAccurateLess&&, DB::Field const&) @ 0x000000000b8038f4
5. src/Common/FieldVisitors.h:31: DB::Range::intersectsRange(DB::Range const&) const @ 0x0000000010ec9551
6. src/Storages/MergeTree/KeyCondition.cpp:2890: DB::KeyCondition::checkInHyperrectangle(std::vector<DB::Range, std::allocator<DB::Range>> const&, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) const @ 0x0000000012a25979
7. src/Storages/MergeTree/KeyCondition.cpp:2536: DB::KeyCondition::checkInRange(unsigned long, DB::FieldRef const*, DB::FieldRef const*, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, BoolMask) const @ 0x0000000012a214e0
8. src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp:1129: DB::MergeTreeDataSelectExecutor::markRangesFromPKRange(std::shared_ptr<DB::IMergeTreeDataPart const> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::KeyCondition const&, std::optional<DB::KeyCondition> const&, DB::MarkRanges*, DB::Settings const&, std::shared_ptr<Poco::Logger>)::$_2::operator()(DB::MarkRange const&, BoolMask) const @ 0x0000000012b8ea6e
9. src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp:1196: DB::MergeTreeDataSelectExecutor::markRangesFromPKRange(std::shared_ptr<DB::IMergeTreeDataPart const> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::KeyCondition const&, std::optional<DB::KeyCondition> const&, DB::MarkRanges*, DB::Settings const&, std::shared_ptr<Poco::Logger>) @ 0x0000000012b76e44
10. src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp:662: DB::MergeTreeDataSelectExecutor::filterPartsByPrimaryKeyAndSkipIndexes(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>&&, std::shared_ptr<DB::StorageInMemoryMetadata const>, std::shared_ptr<DB::Context const> const&, DB::KeyCondition const&, std::optional<DB::KeyCondition> const&, DB::UsefulSkipIndexes const&, DB::MergeTreeReaderSettings const&, std::shared_ptr<Poco::Logger>, unsigned long, std::vector<DB::ReadFromMergeTree::IndexStat, std::allocator<DB::ReadFromMergeTree::IndexStat>>&, bool, bool)::$_0::operator()(unsigned long) const @ 0x0000000012b87fd5
11. src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp:748: DB::MergeTreeDataSelectExecutor::filterPartsByPrimaryKeyAndSkipIndexes(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>&&, std::shared_ptr<DB::StorageInMemoryMetadata const>, std::shared_ptr<DB::Context const> const&, DB::KeyCondition const&, std::optional<DB::KeyCondition> const&, DB::UsefulSkipIndexes const&, DB::MergeTreeReaderSettings const&, std::shared_ptr<Poco::Logger>, unsigned long, std::vector<DB::ReadFromMergeTree::IndexStat, std::allocator<DB::ReadFromMergeTree::IndexStat>>&, bool, bool) @ 0x0000000012b858cb
12. src/Processors/QueryPlan/ReadFromMergeTree.cpp:1680: DB::ReadFromMergeTree::selectRangesToRead(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>, std::shared_ptr<DB::MergeTreeData::IMutationsSnapshot const>, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo const&, std::shared_ptr<DB::Context const>, unsigned long, std::shared_ptr<std::unordered_map<String, long, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, long>>>>, DB::MergeTreeData const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<Poco::Logger>, std::optional<DB::ReadFromMergeTree::Indexes>&, bool) @ 0x000000001355c317
13. src/Processors/QueryPlan/ReadFromMergeTree.cpp:1391: DB::ReadFromMergeTree::selectRangesToRead(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>, bool) const @ 0x000000001355ae1b
14. src/Processors/QueryPlan/ReadFromMergeTree.cpp:1386: DB::ReadFromMergeTree::selectRangesToRead(bool) const @ 0x000000001355ac28
15. src/Processors/QueryPlan/Optimizations/optimizeUseAggregateProjection.cpp:604: DB::QueryPlanOptimizations::optimizeUseAggregateProjections(DB::QueryPlan::Node&, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&, bool) @ 0x00000000135fbbed
16. src/Processors/QueryPlan/Optimizations/optimizeTree.cpp:164: DB::QueryPlanOptimizations::optimizeTreeSecondPass(DB::QueryPlanOptimizationSettings const&, DB::QueryPlan::Node&, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&) @ 0x00000000135dd1e5
17. src/Processors/QueryPlan/QueryPlan.cpp:506: DB::QueryPlan::optimize(DB::QueryPlanOptimizationSettings const&) @ 0x000000001353ccb6
18. src/Processors/QueryPlan/QueryPlan.cpp:161: DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x000000001353bb6e
19. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:252: DB::InterpreterSelectQueryAnalyzer::buildQueryPipeline() @ 0x0000000011ba502d
20. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:221: DB::InterpreterSelectQueryAnalyzer::execute() @ 0x0000000011ba491e
21. src/Interpreters/MutationsInterpreter.cpp:196: DB::isStorageTouchedByMutations(std::shared_ptr<DB::IMergeTreeDataPart const>, std::shared_ptr<DB::MergeTreeData::IMutationsSnapshot const>, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::vector<DB::MutationCommand, std::allocator<DB::MutationCommand>> const&, std::shared_ptr<DB::Context const>) @ 0x0000000011c46f0a
22. src/Storages/MergeTree/MutateTask.cpp:2065: DB::MutateTask::prepare() @ 0x0000000012cc36e6
23. src/Storages/MergeTree/MutateTask.cpp:1934: DB::MutateTask::execute() @ 0x0000000012cc27ac
24. src/Storages/MergeTree/MutatePlainMergeTreeTask.cpp:91: DB::MutatePlainMergeTreeTask::executeStep() @ 0x0000000012e4651a
25. src/Storages/MergeTree/MergeTreeBackgroundExecutor.cpp:286: DB::MergeTreeBackgroundExecutor<DB::DynamicRuntimeQueue>::threadFunction() @ 0x0000000012a7781d
26. ./contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x000000000dc61e98
27. src/Common/ThreadPool.cpp:252: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000dc66fd1
28. ./contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x000000000dc653ff
29. ? @ 0x00007bae0469ca94
30. ? @ 0x00007bae04729c3c
 (version 24.9.1.105)
```