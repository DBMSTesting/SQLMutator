ID: 71128
Title: Logical error on Arrow array with LowCardinality column
Description:
**Describe the bug**
Using a `LowCardinality` column with `FixedString`, gives a logical error when exporting using Arrow format.

**How to reproduce**
Run:

```sql
SET output_format_arrow_low_cardinality_as_dictionary = 1;
INSERT INTO TABLE FUNCTION file('<path to file>', 'Arrow', 'c0 LowCardinality(FixedString(1))') SELECT 'a';
```
```
Logical error: 'Cannot fill arrow array with LowCardinality(FixedString(1)) data.'.
Stack trace (when copying this message, always include the lines below):

0. std::exception::capture() @ 0x00000000192def0b
1. contrib/llvm-project/libcxx/include/exception:114: Poco::Exception::Exception(String const&, int) @ 0x0000000038a511c5
2. src/Common/Exception.cpp:109: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000254368ab
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000001915d296
4. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x000000001917622f
5. src/Processors/Formats/Impl/CHColumnToArrowColumn.cpp:483: DB::fillArrowArray(String const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, std::shared_ptr<DB::IDataType const> const&, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 63ul, 64ul> const*, arrow::ArrayBuilder*, String, unsigned long, unsigned long, DB::CHColumnToArrowColumn::Settings const&, std::unordered_map<String, COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>>&) @ 0x00000000352f7a48
6. src/Processors/Formats/Impl/CHColumnToArrowColumn.cpp:1034: DB::CHColumnToArrowColumn::chChunkToArrowTable(std::shared_ptr<arrow::Table>&, std::vector<DB::Chunk, std::allocator<DB::Chunk>> const&, unsigned long) @ 0x00000000352e85c2
7. src/Processors/Formats/Impl/ArrowBlockOutputFormat.cpp:68: DB::ArrowBlockOutputFormat::consume(DB::Chunk) @ 0x000000003519fea8
8. src/Processors/Formats/IOutputFormat.cpp:117: DB::IOutputFormat::write(DB::Block const&) @ 0x0000000035183a84
9. src/Storages/StorageFile.cpp:1834: DB::StorageFileSink::consume(DB::Chunk&) @ 0x0000000033c8786c
10. src/Processors/Sinks/SinkToStorage.cpp:18: DB::SinkToStorage::onConsume(DB::Chunk) @ 0x0000000035970227
11. src/Processors/Transforms/ExceptionKeepingTransform.cpp:150: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::ExceptionKeepingTransform::work()::$_1, void ()>>(std::__function::__policy_storage const*) @ 0x00000000357a5e7e
12. ./contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x00000000357a5a2b
13. src/Processors/Transforms/ExceptionKeepingTransform.cpp:150: DB::ExceptionKeepingTransform::work() @ 0x00000000357a466c
14. src/Processors/Executors/ExecutionThreadContext.cpp:47: DB::ExecutionThreadContext::executeTask() @ 0x000000003516ece0
15. src/Processors/Executors/PipelineExecutor.cpp:289: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000351599a3
16. src/Processors/Executors/PipelineExecutor.cpp:255: DB::PipelineExecutor::executeImpl(unsigned long, bool) @ 0x0000000035158a16
17. src/Processors/Executors/PipelineExecutor.cpp:126: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x000000003515862a
18. src/Processors/Executors/CompletedPipelineExecutor.cpp:49: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::CompletedPipelineExecutor::execute()::$_0>(DB::CompletedPipelineExecutor::execute()::$_0&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000035156fd8
19. contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x000000002556ab8f
20. contrib/llvm-project/libcxx/include/__functional/invoke.h:359: ? @ 0x0000000025571d8a
21. ? @ 0x00007ffff7ca1e2e
22. ? @ 0x00007ffff7d33a4c
```