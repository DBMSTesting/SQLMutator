ID: 44212
Title: has_shared_transaction for disk when projection
Description:
In some PR at CI I see the failed Stress Tests with such trace
```
<Fatal> : Logical error: 'Cannot commit shared transaction'.
<Fatal> BaseDaemon: ########################################
<Fatal> BaseDaemon: (version 22.12.1.1, build id: 042776ABC6C5EF301D536D1489B1B9A328F93EED) (from thread 1659) (no query) Received signal Aborted (6)
<Fatal> BaseDaemon: 
<Fatal> BaseDaemon: Stack trace: 0x7faa8879500b 0x7faa88774859 0x28ba04d4 0x28ba0f33 0xc20fb96 0x48ae1bc7 0x48b3fdeb 0x48b2f9d7 0x48b2211a 0x48322c47 0x480f517f 0x480c7114 0x48088880 0x4831c225 0x496fb0e6 0x48164353 0x483205f9 0x483bf2b7 0x48d8db38 0x48d91991 0x48d9e8a9 0x28eaeb65 0x28ebbc09 0x28ebba89 0x28ea5fad 0x28eb3fe3 0x7faa8894c609 0x7faa88871133
<Fatal> BaseDaemon: 4. raise @ 0x7faa8879500b in ?
<Fatal> BaseDaemon: 5. abort @ 0x7faa88774859 in ?
<Fatal> BaseDaemon: 6. ./build_docker/../src/Common/Exception.cpp:41: DB::abortOnFailedAssertion(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) @ 0x28ba04d4 in /usr/bin/clickhouse
<Fatal> BaseDaemon: 7.1. inlined from ./build_docker/../src/Common/Exception.cpp:0: DB::handle_error_code(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, int, bool, std::__1::vector<void*, std::__1::allocator<void*>> const&)
<Fatal> BaseDaemon: 7. ./build_docker/../src/Common/Exception.cpp:78: DB::Exception::Exception(DB::Exception::MessageMasked const&, int, bool) @ 0x28ba0f33 in /usr/bin/clickhouse
```

https://s3.amazonaws.com/clickhouse-test-reports/43733/ab9b5f2992c0868d02ad4a12342ef3a334f390c5/stress_test__msan_.html

Flag DataPartStorageOnDisk::has_shared_transaction is only set at constructor DataPartStorageOnDisk. All ctor calls of DataPartStorageOnDisk are made without transaction. The member DataPartStorageOnDisk::transaction is set only with beginTransaction as not shared. Furthermore DataPartStorageOnDisk::commitTransaction is unable to work with has_shared_transaction.
But when DataPartStorageOnDisk::getProjection is called, ctor DataPartStorageOnDisk is called with transaction thereby  DataPartStorageOnDisk::has_shared_transaction is activated.

This scenario will fail.
```
storage = DataPartStorageOnDisk();
storage.beginTransaction();
prj = storage.getProjection();
prj.commitTransaction();

```