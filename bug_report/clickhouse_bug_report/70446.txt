ID: 70446
Title: JSON with Int128 logical error
Description:
**Describe the bug**

A JSON column with 128 Int subcolumn gets a logical error on insert.

**How to reproduce**

Run:
https://fiddle.clickhouse.com/b21956fe-d250-438d-b042-0f00766f567d

On the client locally gives another error:

```
Logical error: 'Bad cast from type DB::ColumnNullable to DB::ColumnVector<wide::integer<128ul, int>>'.
Stack trace (when copying this message, always include the lines below):

0. contrib/llvm-project/libcxx/include/exception:141: Poco::Exception::Exception(String const&, int) @ 0x0000000037893bf1
1. src/Common/Exception.cpp:109: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000001d9f51ed
2. src/Common/Exception.h:110: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000e80c066
3. src/Common/Exception.h:128: DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000e80fcdb
4. src/Common/assert_cast.h:47: DB::ColumnVector<wide::integer<128ul, int>>& assert_cast<DB::ColumnVector<wide::integer<128ul, int>>&, DB::IColumn&>(DB::IColumn&) @ 0x000000001a8c6f08
5. src/Formats/JSONExtractTree.cpp:270: DB::(anonymous namespace)::NumericNode<DB::SimdJSONParser, wide::integer<128ul, int>>::insertResultToColumn(DB::IColumn&, DB::SimdJSONParser::Element const&, DB::JSONExtractInsertSettings const&, DB::FormatSettings const&, String&) const @ 0x000000002fd2b23b
6. src/Formats/JSONExtractTree.cpp:1089: DB::(anonymous namespace)::LowCardinalityNode<DB::SimdJSONParser>::insertResultToColumn(DB::IColumn&, DB::SimdJSONParser::Element const&, DB::JSONExtractInsertSettings const&, DB::FormatSettings const&, String&) const @ 0x000000002fd41f37
7. src/Formats/JSONExtractTree.cpp:1730: DB::(anonymous namespace)::ObjectJSONNode<DB::SimdJSONParser>::traverseAndInsert(DB::ColumnObject&, DB::SimdJSONParser::Element const&, String const&, DB::JSONExtractInsertSettings const&, DB::FormatSettings const&, std::vector<std::pair<String, String>, std::allocator<std::pair<String, String>>>&, unsigned long, String&) const @ 0x000000002fd4c668
8. src/Formats/JSONExtractTree.cpp:1709: DB::(anonymous namespace)::ObjectJSONNode<DB::SimdJSONParser>::traverseAndInsert(DB::ColumnObject&, DB::SimdJSONParser::Element const&, String const&, DB::JSONExtractInsertSettings const&, DB::FormatSettings const&, std::vector<std::pair<String, String>, std::allocator<std::pair<String, String>>>&, unsigned long, String&) const @ 0x000000002fd4ce3d
9. src/Formats/JSONExtractTree.cpp:1640: DB::(anonymous namespace)::ObjectJSONNode<DB::SimdJSONParser>::insertResultToColumn(DB::IColumn&, DB::SimdJSONParser::Element const&, DB::JSONExtractInsertSettings const&, DB::FormatSettings const&, String&) const @ 0x000000002fd4a97f
10. src/DataTypes/Serializations/SerializationJSON.cpp:302: DB::SerializationJSON<DB::SimdJSONParser>::deserializeTextImpl(DB::IColumn&, std::basic_string_view<char, std::char_traits<char>>, DB::FormatSettings const&) const @ 0x000000002a556fa0
11. src/DataTypes/Serializations/SerializationJSON.cpp:349: DB::SerializationJSON<DB::SimdJSONParser>::deserializeTextQuoted(DB::IColumn&, DB::ReadBuffer&, DB::FormatSettings const&) const @ 0x000000002a5577da
12. src/DataTypes/Serializations/SerializationNullable.cpp:0: void DB::deserializeTextQuotedImpl<void>(DB::IColumn&, DB::ReadBuffer&, DB::FormatSettings const&, std::shared_ptr<DB::ISerialization const> const&, bool&) @ 0x000000002a58f5e3
13. src/DataTypes/Serializations/SerializationNullable.cpp:571: DB::SerializationNullable::deserializeNullAsDefaultOrNestedTextQuoted(DB::IColumn&, DB::ReadBuffer&, DB::FormatSettings const&, std::shared_ptr<DB::ISerialization const> const&) @ 0x000000002a58b7f1
14. src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:306: DB::ValuesBlockInputFormat::readRow(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>&, unsigned long) @ 0x00000000303c5ce4
15. src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:129: DB::ValuesBlockInputFormat::read() @ 0x00000000303c3a51
16. src/Processors/Formats/IInputFormat.cpp:19: DB::IInputFormat::generate() @ 0x000000002fe89c46
17. src/Processors/ISource.cpp:139: DB::ISource::tryGenerate() @ 0x000000002fe35e7a
18. src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x000000002fe35483
19. src/Processors/Executors/ExecutionThreadContext.cpp:47: DB::ExecutionThreadContext::executeTask() @ 0x000000002fe735ae
20. src/Processors/Executors/PipelineExecutor.cpp:288: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x000000002fe57d70
21. src/Processors/Executors/PipelineExecutor.cpp:254: DB::PipelineExecutor::executeSingleThread(unsigned long) @ 0x000000002fe587aa
22. src/Processors/Executors/PipelineExecutor.cpp:430: DB::PipelineExecutor::executeImpl(unsigned long, bool) @ 0x000000002fe557bb
23. src/Processors/Executors/PipelineExecutor.cpp:125: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x000000002fe54b77
24. src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:83: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000002fe7b504
25. contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x000000001dba3741
26. contrib/llvm-project/libcxx/include/__functional/invoke.h:359: ? @ 0x000000001dbb0d03
27. asan_thread_start(void*) @ 0x000000000e7c0bcd
28. ? @ 0x000079fb5829ca94
29. ? @ 0x000079fb58329c3c
```
