ID: 72875
Title: Set query logical error inside Replicated Materialized View
Description:
**Describe the bug**
Using SET queries inside materialized views is still causing issues.

**How to reproduce**
Make sure Zookeeper is running and properly configured, then run:
```sql
CREATE DATABASE d1 ENGINE = Replicated('<set params for replicated database>');
CREATE MATERIALIZED VIEW d1.v0 AS (SELECT ((SELECT 2) UNION ALL (SELECT 1)));
```
Stack trace:
```
<Fatal> : Logical error: 'Invalid action query tree node (SELECT 2 UNION ALL SELECT 1)'.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. std::exception::exception[abi:v15007]() @ 0x0000000019546af4
1. base/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(String const&, int) @ 0x00000000393467a0
2. src/Common/Exception.cpp:105: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000002630746b
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000000193e47b6
4. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x00000000193fb90f
5. src/Planner/PlannerActionsVisitor.cpp:315: DB::(anonymous namespace)::ActionNodeNameHelper::calculateActionNodeName(std::shared_ptr<DB::IQueryTreeNode> const&) @ 0x00000000319e498f
6. src/Planner/PlannerActionsVisitor.cpp:731: DB::(anonymous namespace)::PlannerActionsVisitorImpl::visitImpl(std::shared_ptr<DB::IQueryTreeNode>) @ 0x00000000319e9db9
7. src/Planner/PlannerActionsVisitor.cpp:635: DB::PlannerActionsVisitor::visit(DB::ActionsDAG&, std::shared_ptr<DB::IQueryTreeNode>) @ 0x00000000319e19ac
8. src/Planner/Utils.cpp:252: DB::buildActionsDAGFromExpressionNode(std::shared_ptr<DB::IQueryTreeNode> const&, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::PlannerContext> const&) @ 0x00000000319ffda7
9. src/Planner/PlannerExpressionAnalysis.cpp:377: DB::buildExpressionAnalysisResult(std::shared_ptr<DB::IQueryTreeNode> const&, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::PlannerContext> const&, DB::PlannerQueryProcessingInfo const&) @ 0x0000000032c73145
10. src/Planner/Planner.cpp:1571: DB::Planner::buildPlanForQueryNode() @ 0x0000000032bff0fc
11. src/Planner/Planner.cpp:1300: DB::Planner::buildQueryPlanIfNeeded() @ 0x0000000032bf8c3e
12. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:222: DB::InterpreterSelectQueryAnalyzer::getSampleBlock() @ 0x0000000032bf4fe0
13. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:206: DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x0000000032bf4f16
14. src/Interpreters/InterpreterCreateQuery.cpp:1082: DB::InterpreterCreateQuery::validateMaterializedViewColumnsAndEngine(DB::ASTCreateQuery const&, DB::InterpreterCreateQuery::TableProperties const&, std::shared_ptr<DB::IDatabase> const&) @ 0x00000000326038da
15. src/Interpreters/InterpreterCreateQuery.cpp:1623: DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x000000003260a108
16. src/Interpreters/InterpreterCreateQuery.cpp:2265: DB::InterpreterCreateQuery::execute() @ 0x0000000032620d65
17. src/Interpreters/executeQuery.cpp:1368: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x00000000330ff243
18. src/Interpreters/executeQuery.cpp:1667: DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>) @ 0x000000003310477c
19. src/Interpreters/DDLWorker.cpp:508: DB::DDLWorker::tryExecuteQuery(DB::DDLTaskBase&, std::shared_ptr<zkutil::ZooKeeper> const&) @ 0x0000000031f8432e
20. src/Interpreters/DDLWorker.cpp:672: DB::DDLWorker::processTask(DB::DDLTaskBase&, std::shared_ptr<zkutil::ZooKeeper> const&) @ 0x0000000031f8133c
21. src/Databases/DatabaseReplicatedWorker.cpp:364: DB::DatabaseReplicatedDDLWorker::tryEnqueueAndExecuteEntry(DB::DDLLogEntry&, std::shared_ptr<DB::Context const>) @ 0x000000003160c30c
22. src/Databases/DatabaseReplicated.cpp:1086: DB::DatabaseReplicated::tryEnqueueReplicatedDDL(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, DB::QueryFlags) @ 0x00000000315d189e
23. src/Interpreters/InterpreterCreateQuery.cpp:1674: DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x000000003260aae1
24. src/Interpreters/InterpreterCreateQuery.cpp:2265: DB::InterpreterCreateQuery::execute() @ 0x0000000032620d65
25. src/Interpreters/executeQuery.cpp:1368: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x00000000330ff243
26. src/Interpreters/executeQuery.cpp:1535: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000330f914e
27. src/Server/TCPHandler.cpp:656: DB::TCPHandler::runImpl() @ 0x0000000035b8ee5c
28. src/Server/TCPHandler.cpp:2598: DB::TCPHandler::run() @ 0x0000000035bb9dae
29. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x000000003947f442
30. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x0000000039480112
31. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x00000000393dde17
```
