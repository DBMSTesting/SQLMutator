ID: 9637
Title: Encounter a lot of unexpected "deadlock avoided" while query.
Description:
we use clickhouse 19.17.5.18.

We encounter some deadlock avoid error while send the query from remote server. I access the merge engine table which indicate to 2 merge tree table,table_erab_lte.recent and table_erab_lte.archive. Following query source table is table_erab_lte.archive. I try to scrutinize the log, I only find insert update behavior start at2020.03.09 08:57:18.058592 finish at 2020.03.09 08:57:20.859885. I cannot understand why this error happen sometimes cause query error.  Is there any way to enhance this issue? 

Thanks for your help.

Following is one of error in the log. I will put log in attachment.

> 2020.03.09 09:07:49.924900 [ 3345 ] {83af80b0-f97a-4e9c-a342-3df4411b9b66} <Trace> InterpreterSelectQuery: WithMergeableState -> Complete
> 2020.03.09 09:07:49.925740 [ 3345 ] {83af80b0-f97a-4e9c-a342-3df4411b9b66} <Debug> executeQuery: Query pipeline:
> Expression
>  Expression
>   MergingAggregated
>    Union
>     Remote Ã— 45
> 
> 2020.03.09 09:07:49.927091 [ 3345 ] {83af80b0-f97a-4e9c-a342-3df4411b9b66} <Trace> Aggregator: Reading blocks of partially aggregated data.
> 2020.03.09 09:07:49.927366 [ 1369 ] {83af80b0-f97a-4e9c-a342-3df4411b9b66} <Trace> Connection (192.168.177.38:9000): Connecting. Database: (not specified). User: default
> 2020.03.09 09:07:49.927997 [ 1369 ] {83af80b0-f97a-4e9c-a342-3df4411b9b66} <Trace> Connection (192.168.177.38:9000): Connected to ClickHouse server version 19.17.5.
> 2020.03.09 09:08:01.066653 [ 3636 ] {} <Trace> TCPHandlerFactory: TCP Request. Address: [::ffff:192.168.177.133]:36052
> 2020.03.09 09:08:01.066776 [ 3636 ] {} <Debug> TCPHandler: Connected ClickHouse server version 19.17.0, revision: 54428, user: default.
> 2020.03.09 09:08:01.067301 [ 3636 ] {fa494ac8-8218-4e97-874b-f723edda7d9c} <Debug> executeQuery: (from [::ffff:192.168.177.133]:36052) INSERT INTO gt_local.nw_lte_reg_stc (INSERT_TIME, DATA_DATE, DATA_HOUR, GW_PU_ID, REG_ID, REG_NAME, RRC_START_CNT, RRC_BLOCK_CNT, RRC_SETUPFAIL_CNT, RRC_SESSION_CNT, RRC_DUR, ERAB_END_CNT, ERAB_DROP_CNT, UL_TRAFFIC_VOL, UL_TRAFFIC_DUR, UL_TPT_MAX, DL_TRAFFIC_VOL, DL_TRAFFIC_DUR, DL_TPT_MAX) VALUES
> 2020.03.09 09:08:01.069291 [ 3636 ] {fa494ac8-8218-4e97-874b-f723edda7d9c} <Debug> MemoryTracker: Peak memory usage (for query): 0.00 B.
> 2020.03.09 09:08:01.069370 [ 3636 ] {fa494ac8-8218-4e97-874b-f723edda7d9c} <Information> TCPHandler: Processed in 0.002 sec.
> 2020.03.09 09:08:02.097994 [ 3636 ] {960ef50b-2549-4224-9fe8-34cad14093f9} <Debug> executeQuery: (from [::ffff:192.168.177.133]:36052) INSERT INTO gt_local.nw_lte_imsi_imei_stc (INSERT_TIME, DATA_DATE, DATA_HOUR, GW_PU_ID, IMSI, IMEI, IMSI_GROUP_ID, MCC, MNC, TAC, MAKE_ID, MODEL_ID, POS_LAST_MR_SERVING_RSRP, POS_LAST_MR_SERVING_RSRQ, LAST_MR_SERVING_RSRP_CNT, LAST_MR_SERVING_RSRQ_CNT, RRC_START_CNT, RRC_BLOCK_CNT, RRC_SETUPFAIL_CNT, RRC_SESSION_CNT, RRC_DUR, ERAB_END_CNT, ERAB_DROP_CNT, UL_TRAFFIC_VOL, UL_TRAFFIC_DUR, UL_TPT_MAX, DL_TRAFFIC_VOL, DL_TRAFFIC_DUR, DL_TPT_MAX, RELEASE_CAUSE_TIMER_EXPIRY_CNT, RELEASE_CAUSE_EUTRAN_GENERATED_REASON_CNT, RELEASE_CAUSE_HO_RELATED_RELEASE_CNT, RELEASE_CAUSE_OTHERS_CNT, RELEASE_CAUSE_RESOURCE_UNAVAILABLE_CNT, RELEASE_CAUSE_RADIO_CONNECTION_WITH_UE_LOST_CNT, RELEASE_CAUSE_FAILURE_IN_THE_RADIO_INTERFACE_PROCEDURE_CNT, END_SINR_PUSCH_SUM, END_SINR_PUCCH_SUM, MO_SIGNALLING_CNT, MO_ACCESS_CNT, MO_DATA_CNT, MT_ACCESS_CNT, EMERGENCY_CNT, HIGHPRIORITYACCESS_CNT, LTE_UNKNOWN_CNT, TRAFFIC_CNT, SIGNALLING_CNT) VALUES
> 2020.03.09 09:08:02.121790 [ 3636 ] {960ef50b-2549-4224-9fe8-34cad14093f9} <Debug> MemoryTracker: Peak memory usage (for query): 25.01 MiB.
> 2020.03.09 09:08:02.121928 [ 3636 ] {960ef50b-2549-4224-9fe8-34cad14093f9} <Information> TCPHandler: Processed in 0.024 sec.
> 2020.03.09 09:08:02.640115 [ 3345 ] {83af80b0-f97a-4e9c-a342-3df4411b9b66} <Error> executeQuery: Code: 473, e.displayText() = DB::Exception: Received from 192.168.177.40:9000. DB::Exception: Possible deadlock avoided. Client should retry.. Stack trace:
> 
> 0. 0x555a53501690 StackTrace::StackTrace() /usr/bin/clickhouse
> 1. 0x555a53501465 DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) /usr/bin/clickhouse
> 2. 0x555a53370e2b ? /usr/bin/clickhouse
> 3. 0x555a56ab667c DB::IStorage::lockStructureForShare(bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /usr/bin/clickhouse
> 4. 0x555a56af6f08 DB::StorageMerge::getSelectedTables(std::shared_ptr<DB::IAST> const&, bool, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const /usr/bin/clickhouse
> 5. 0x555a56afa2b4 DB::StorageMerge::read(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, DB::SelectQueryInfo const&, DB::Context const&, DB::QueryProcessingStage::Enum, unsigned long, unsigned int) /usr/bin/clickhouse
> 6. 0x555a568deae0 void DB::InterpreterSelectQuery::executeFetchColumns<DB::InterpreterSelectQuery::Pipeline>(DB::QueryProcessingStage::Enum, DB::InterpreterSelectQuery::Pipeline&, std::shared_ptr<DB::SortingInfo> const&, std::shared_ptr<DB::PrewhereInfo> const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, DB::QueryPipeline&) /usr/bin/clickhouse
> 7. 0x555a568e6867 void DB::InterpreterSelectQuery::executeImpl<DB::InterpreterSelectQuery::Pipeline>(DB::InterpreterSelectQuery::Pipeline&, std::shared_ptr<DB::IBlockInputStream> const&, DB::QueryPipeline&) /usr/bin/clickhouse
> 8. 0x555a568c7f9c DB::InterpreterSelectQuery::executeWithMultipleStreams(DB::QueryPipeline&) /usr/bin/clickhouse
> 9. 0x555a568e851f DB::InterpreterSelectWithUnionQuery::executeWithMultipleStreams(DB::QueryPipeline&) /usr/bin/clickhouse
> 10. 0x555a568ea155 DB::InterpreterSelectWithUnionQuery::execute() /usr/bin/clickhouse
> 11. 0x555a569ecf4e ? /usr/bin/clickhouse
> 12. 0x555a569ee39e DB::executeQuery(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, bool) /usr/bin/clickhouse
> 13. 0x555a53589fc4 DB::TCPHandler::runImpl() /usr/bin/clickhouse
> 14. 0x555a5358a9fb DB::TCPHandler::run() /usr/bin/clickhouse
> 15. 0x555a5748b6f0 Poco::Net::TCPServerConnection::start() /usr/bin/clickhouse
> 16. 0x555a5748be0d Poco::Net::TCPServerDispatcher::run() /usr/bin/clickhouse
> 17. 0x555a58b61f81 Poco::PooledThread::run() /usr/bin/clickhouse
> 18. 0x555a58b5fd2c Poco::ThreadImpl::runnableEntry(void*) /usr/bin/clickhouse
> 19. 0x555a592d5ec0 ? /usr/bin/clickhouse
> 20. 0x7fb00a82daa1 start_thread ?

